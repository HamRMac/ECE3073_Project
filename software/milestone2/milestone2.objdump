
milestone2.elf:     file format elf32-littlenios2
milestone2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04040244

Program Header:
    LOAD off    0x00001000 vaddr 0x04040000 paddr 0x04040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04040020 paddr 0x04040020 align 2**12
         filesz 0x0001a0ac memsz 0x0001a0ac flags r-x
    LOAD off    0x0001c000 vaddr 0x02000000 paddr 0x0405a0cc align 2**12
         filesz 0x00002254 memsz 0x00015688 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04040000  04040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04040020  04040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019e88  04040244  04040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000664  02000000  0405a0cc  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf0  02000664  0405a730  0001c664  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013434  02002254  0405c320  0001e254  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  02015688  02015688  0001e254  2**0
                  CONTENTS
  7 .NIOS_MEM     00000000  0405c320  0405c320  0001e254  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001e254  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001040  00000000  00000000  0001e278  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e3f0  00000000  00000000  0001f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000adb4  00000000  00000000  0004d6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e1f5  00000000  00000000  0005845c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000347c  00000000  00000000  00066654  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004e29  00000000  00000000  00069ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000178c0  00000000  00000000  0006e8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000861bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d8  00000000  00000000  000861f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008ca9a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  0008caa0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008caa9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008caaa  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0008caab  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0008cab4  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0008cabd  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0008cac6  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  0008cad2  2**0
                  CONTENTS, READONLY
 27 .jdi          00005283  00000000  00000000  0008cafa  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00079ac1  00000000  00000000  00091d7d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04040000 l    d  .entry	00000000 .entry
04040020 l    d  .exceptions	00000000 .exceptions
04040244 l    d  .text	00000000 .text
02000000 l    d  .rodata	00000000 .rodata
02000664 l    d  .rwdata	00000000 .rwdata
02002254 l    d  .bss	00000000 .bss
02015688 l    d  .SDRAM	00000000 .SDRAM
0405c320 l    d  .NIOS_MEM	00000000 .NIOS_MEM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../milestone2_bsp//obj/HAL/src/crt0.o
0404028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 milestone2_main.c
0404063c l     F .text	0000006c initButtonIRQ
040406a8 l     F .text	0000006c initSwIRQ
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200028e l     O .rodata	00000010 zeroes.4404
04045e28 l     F .text	000000bc __sbprintf
0200029e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04046038 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04047b68 l     F .text	00000008 __fp_unlock
04047b7c l     F .text	0000019c __sinit.part.1
04047d18 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02000ae8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
02000f2c l     O .rwdata	00000020 lc_ctype_charset
02000f0c l     O .rwdata	00000020 lc_message_charset
02000f4c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
020002d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0404a76c l     F .text	000000fc __sprint_r.part.0
02000404 l     O .rodata	00000010 blanks.4348
020003f4 l     O .rodata	00000010 zeroes.4349
0404bcf8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0404f800 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0404f90c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0404f938 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0404fcc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0404fda4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0404fe90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0405005c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020021cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
040502a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
020021d0 l     O .rwdata	00000004 lockid
020022d0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
020021d4 l     O .rwdata	00000004 lockid
020022d8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
04051cd8 l     F .text	00000048 OS_InitMisc
04051d20 l     F .text	0000006c OS_InitRdyList
04051e8c l     F .text	000000e4 OS_InitTCBList
04051bf8 l     F .text	000000e0 OS_InitEventList
04051d8c l     F .text	00000080 OS_InitTaskIdle
04051e0c l     F .text	00000080 OS_InitTaskStat
040520fc l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
04053e0c l     F .text	000000f4 OS_FlagTaskRdy
04053bcc l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04057eb0 l     F .text	00000034 alt_dev_reg
0200112c l     O .rwdata	0000106c UART_JTAG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04058228 l     F .text	000002a4 altera_avalon_jtag_uart_irq
040584cc l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04058ca8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04058f10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04059180 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
040592c0 l     F .text	0000003c alt_get_errno
040592fc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02002330 g     O .bss	00000004 alt_instruction_exception_handler
04049e04 g     F .text	00000074 _mprec_log10
02002222 g     O .rwdata	00000002 OSTaskNameSize
04049ef0 g     F .text	0000008c __any_on
0404c294 g     F .text	00000054 _isatty_r
020002dc g     O .rodata	00000028 __mprec_tinytens
0404ffa0 g     F .text	000000bc alt_main
040425fc g     F .text	000001e0 imageProcessorTask
0200226c g     O .bss	00000004 semLockEdgeImgPointer
04043a54 g     F .text	000000c0 _puts_r
02012364 g     O .bss	00000100 alt_irq
0404c2e8 g     F .text	00000060 _lseek_r
0405462c g     F .text	000000cc OS_MemInit
02000674 g     O .rwdata	00000024 kernEdgeDetectH
0405a730 g       *ABS*	00000000 __flash_rwdata_start
04057e50 g     F .text	00000060 OSTimeSet
0404e32c g     F .text	00000088 .hidden __eqdf2
0405094c g     F .text	00000610 OSEventPendMulti
02015688 g       *ABS*	00000000 __alt_heap_start
04059908 g     F .text	00000024 OSTaskCreateHook
04043a18 g     F .text	0000003c printf
020021fa g     O .rwdata	00000002 OSMboxEn
04050fb4 g     F .text	0000004c OSIntEnter
0404c500 g     F .text	0000009c _wcrtomb_r
0404a62c g     F .text	0000005c __sseek
04047eb8 g     F .text	00000010 __sinit
0404c3a8 g     F .text	00000140 __swbuf_r
0200220a g     O .rwdata	00000002 OSQEn
04048980 g     F .text	0000007c _setlocale_r
02002270 g     O .bss	00000004 semDisplay4
04047d20 g     F .text	00000068 __sfmoreglue
04050620 g     F .text	000000cc __malloc_unlock
04059970 g     F .text	00000020 OSTaskStatHook
020022e0 g     O .bss	00000001 OSLockNesting
0404181c g     F .text	00000314 fastBlurImg
02002248 g     O .rwdata	00000002 OSDataSize
020022e1 g     O .bss	00000001 OSRunning
04048cfc g     F .text	0000015c memmove
02002264 g     O .bss	00000004 totalTime
040599b0 g     F .text	00000020 OSInitHookBegin
02002240 g     O .rwdata	00000002 OSTmrSize
04047ea0 g     F .text	00000018 _cleanup
04048f80 g     F .text	000000a8 _Balloc
020022e4 g     O .bss	00000004 OSIdleCtr
0404e3b4 g     F .text	000000dc .hidden __gtdf2
04040ca0 g     F .text	00000290 edgeDetectionConv
040596b8 g     F .text	00000024 altera_nios2_gen2_irq_init
04059788 g       .text	00000000 OSStartTsk
0405242c g     F .text	000002d4 OS_TCBInit
04040000 g     F .entry	0000001c __reset
0200225c g     O .bss	00000004 blurTime
02002246 g     O .rwdata	00000002 OSTmrWheelTblSize
04040020 g       *ABS*	00000000 __flash_exceptions_start
020021e6 g     O .rwdata	00000002 OSEventSize
020022e8 g     O .bss	00000001 OSPrioHighRdy
0404c238 g     F .text	0000005c _fstat_r
0405992c g     F .text	00000024 OSTaskDelHook
020022ac g     O .bss	00000004 errno
0404a5a8 g     F .text	00000008 __seofread
04059768 g       .text	00000000 OSStartHighRdy
040568f8 g     F .text	000001e4 OSTaskCreateExt
04040aa8 g     F .text	000001f8 downscaleImg2x
04053714 g     F .text	00000060 OSFlagPendGetFlagsRdy
02002226 g     O .rwdata	00000002 OSTaskStatStkSize
04052890 g     F .text	00000308 OSFlagAccept
04054c64 g     F .text	000000b8 OSQFlush
040546f8 g     F .text	00000140 OSQAccept
020022c8 g     O .bss	00000004 alt_argv
0200a198 g       *ABS*	00000000 _gp
0405674c g     F .text	000001ac OSTaskCreate
0405625c g     F .text	000004f0 OSTaskChangePrio
020022dc g     O .bss	00000004 alt_heapsem
04052700 g     F .text	00000190 OSDebugInit
04056adc g     F .text	00000344 OSTaskDel
02000fac g     O .rwdata	00000180 alt_fd_list
02012464 g     O .bss	00000370 OSFlagTbl
04040290 g     F .text	00000080 clrBuffer
04041b30 g     F .text	000000b4 reverseImg
040519d8 g     F .text	000000b8 OS_EventTaskRemove
04059a34 g     F .text	00000090 alt_find_dev
040438a0 g     F .text	00000148 memcpy
02002210 g     O .rwdata	00000002 OSRdyTblSize
02002274 g     O .bss	00000004 semDisplay3
04047b70 g     F .text	0000000c _cleanup_r
040427dc g     F .text	00000624 mainTask
0404f618 g     F .text	000000dc .hidden __floatsidf
04059244 g     F .text	0000007c alt_io_redirect
0404e490 g     F .text	000000f4 .hidden __ltdf2
0405a0cc g       *ABS*	00000000 __DTOR_END__
04043b14 g     F .text	00000014 puts
040590e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
040506ec g     F .text	00000120 OSEventNameGet
020021f4 g     O .rwdata	00000002 OSFlagMax
04042364 g     F .text	00000218 imageFourTask
0404a4e0 g     F .text	00000074 __fpclassifyd
04049d60 g     F .text	000000a4 __ratio
04051000 g     F .text	000000f8 OSIntExit
0404bcdc g     F .text	0000001c __vfiprintf_internal
0200222e g     O .rwdata	00000002 OSTCBSize
020022e9 g     O .bss	00000001 OSPrioCur
04058728 g     F .text	000002bc altera_avalon_jtag_uart_read
0404306c g     F .text	00000014 malloc
040439e8 g     F .text	00000030 _printf_r
04042fb0 g     F .text	00000064 .hidden __udivsi3
0404fd00 g     F .text	000000a4 isatty
02002214 g     O .rwdata	00000002 OSStkWidth
0200032c g     O .rodata	000000c8 __mprec_tens
02002208 g     O .rwdata	00000002 OSPtrSize
040489fc g     F .text	0000000c __locale_charset
020021e8 g     O .rwdata	00000002 OSEventTblSize
040596dc g       .text	00000000 OSCtxSw
04059ca8 g     F .text	00000090 alt_icache_flush
020022a8 g     O .bss	00000004 __malloc_top_pad
02002268 g     O .bss	00000004 currentlyDislayed
020022ec g     O .bss	00000004 OSTCBList
020022bc g     O .bss	00000004 alt_fd_list_lock
020021a8 g     O .rwdata	00000004 __mb_cur_max
04048a2c g     F .text	0000000c _localeconv_r
0404938c g     F .text	0000003c __i2b
0404833c g     F .text	000004bc __sfvwrite_r
020127d4 g     O .bss	00000c30 OSMemTbl
020022f0 g     O .bss	00000001 OSTickStepState
04043b28 g     F .text	00000054 _sbrk_r
040409a0 g     F .text	00000108 conv
0200220c g     O .rwdata	00000002 OSQMax
02013404 g     O .bss	00000800 OSTaskStatStk
04054268 g     F .text	000000f0 OSMemNameGet
020021ec g     O .rwdata	00000002 OSFlagEn
0404c348 g     F .text	00000060 _read_r
02002232 g     O .rwdata	00000002 OSTimeTickHookEn
04055114 g     F .text	00000168 OSQPost
04053f00 g     F .text	000000a4 OS_FlagUnlink
020021c0 g     O .rwdata	00000004 alt_max_fd
04051fc4 g     F .text	00000068 OS_MemCopy
0405202c g     F .text	000000d0 OS_Sched
0404bf2c g     F .text	000000f0 _fclose_r
04054178 g     F .text	000000f0 OSMemGet
04057108 g     F .text	000001b4 OSTaskNameSet
04047b38 g     F .text	00000030 fflush
020022a4 g     O .bss	00000004 __malloc_max_sbrked_mem
020022f4 g     O .bss	00000004 OSCtxSwCtr
04059990 g     F .text	00000020 OSTimeTickHook
020021f6 g     O .rwdata	00000002 OSFlagNameSize
04051a90 g     F .text	00000100 OS_EventTaskRemoveMulti
0404d198 g     F .text	000008ac .hidden __adddf3
04051888 g     F .text	00000150 OS_EventTaskWaitMulti
04049b08 g     F .text	0000010c __b2d
02002364 g     O .bss	00002000 imageThreeTask_stk
0200220e g     O .rwdata	00000002 OSQSize
0404cc60 g     F .text	00000538 .hidden __umoddi3
0404fecc g     F .text	000000d4 lseek
040415ac g     F .text	00000270 blurImgConv
04055bc4 g     F .text	0000020c OSSemPend
020021a0 g     O .rwdata	00000004 _global_impure_ptr
02004364 g     O .bss	00002000 switchManagerTask_stk
04049f7c g     F .text	00000564 _realloc_r
02006364 g     O .bss	00002000 imageProcessorTask_stk
020021f8 g     O .rwdata	00000002 OSLowestPrio
02015688 g       *ABS*	00000000 __bss_end
0404fbd4 g     F .text	000000f0 alt_iic_isr_register
04059a10 g     F .text	00000024 OSTCBInitHook
0200223e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
040595b0 g     F .text	00000108 alt_tick
0404c6e8 g     F .text	00000578 .hidden __udivdi3
0404c194 g     F .text	00000024 _fputwc_r
020021e0 g     O .rwdata	00000002 OSEventEn
02000304 g     O .rodata	00000028 __mprec_bigtens
04049170 g     F .text	00000104 __s2b
0200223a g     O .rwdata	00000002 OSTmrCfgNameSize
0404214c g     F .text	00000218 imageThreeTask
0404f6f4 g     F .text	000000a8 .hidden __floatunsidf
04049848 g     F .text	00000060 __mcmp
04047ed8 g     F .text	00000018 __fp_lock_all
0404fb88 g     F .text	0000004c alt_ic_irq_enabled
02000698 g     O .rwdata	00000024 kernEdgeDetectV
04053d2c g     F .text	000000e0 OS_FlagInit
04059514 g     F .text	0000009c alt_alarm_stop
0200221c g     O .rwdata	00000002 OSTaskIdleStkSize
020022c0 g     O .bss	00000004 alt_irq_active
040557fc g     F .text	000000b0 OSSemAccept
0405446c g     F .text	000000d8 OSMemPut
04053fa4 g     F .text	000001d4 OSMemCreate
020022f8 g     O .bss	00000004 OSIdleCtrMax
040400fc g     F .exceptions	000000d4 alt_irq_handler
02000f84 g     O .rwdata	00000028 alt_dev_null
02002230 g     O .rwdata	00000002 OSTicksPerSec
02002278 g     O .bss	00000004 semSwChange
040596dc g       .text	00000000 OSIntCtxSw
04041c88 g     F .text	00000098 imgToSDRAM
04058ec8 g     F .text	00000048 alt_dcache_flush_all
04049274 g     F .text	00000068 __hi0bits
0404f598 g     F .text	00000080 .hidden __fixdfsi
020022fc g     O .bss	00000004 OSTCBFreeList
02002254 g       *ABS*	00000000 __ram_rwdata_end
04055dd0 g     F .text	0000016c OSSemPendAbort
020021b8 g     O .rwdata	00000008 alt_dev_list
040502e4 g     F .text	000000f8 write
0200227c g     O .bss	00000004 semSwitchChange
02002234 g     O .rwdata	00000002 OSVersionNbr
02000664 g       *ABS*	00000000 __ram_rodata_end
0404f974 g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0404e490 g     F .text	000000f4 .hidden __ledf2
020021dc g     O .rwdata	00000004 OSEndiannessTest
040495c0 g     F .text	00000140 __pow5mult
0404a880 g     F .text	0000145c ___vfiprintf_internal_r
020022b8 g     O .bss	00000004 __nlocale_changed
04043014 g     F .text	00000058 .hidden __umodsi3
020021ee g     O .rwdata	00000002 OSFlagGrpSize
04040714 g     F .text	0000010c imageToBuffer
02015688 g       *ABS*	00000000 end
02008364 g     O .bss	00002000 imageOneTask_stk
02000664 g     O .rwdata	00000010 kernDownscale2x
040580e0 g     F .text	00000148 altera_avalon_jtag_uart_init
04052294 g     F .text	000000cc OS_TaskStat
040401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0405a0cc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
04058d20 g     F .text	0000007c alt_avalon_timer_sc_init
0404f79c g     F .text	00000064 .hidden __clzsi2
040589e4 g     F .text	000002c4 altera_avalon_jtag_uart_write
04047ec8 g     F .text	00000004 __sfp_lock_acquire
04048c18 g     F .text	000000e4 memchr
04051f70 g     F .text	00000054 OS_MemClr
04043c14 g     F .text	000021f8 ___vfprintf_internal_r
040597ac g     F .text	0000015c OSTaskStkInit
0404802c g     F .text	00000310 _free_r
04048a08 g     F .text	00000010 __locale_mb_cur_max
040515e0 g     F .text	00000198 OS_EventTaskRdy
04059f18 g     F .text	00000180 __call_exitprocs
02002300 g     O .bss	00000001 OSCPUUsage
020022b4 g     O .bss	00000004 __mlocale_changed
02002198 g     O .rwdata	00000004 __malloc_sbrk_base
04040244 g     F .text	0000004c _start
02002334 g     O .bss	00000004 _alt_tick_rate
04054d1c g     F .text	0000028c OSQPend
02002280 g     O .bss	00000004 keyPressedContext
02002284 g     O .bss	00000004 semDisplay1
040579c8 g     F .text	00000104 OSTimeDly
04049700 g     F .text	00000148 __lshift
02002338 g     O .bss	00000004 _alt_nticks
04050098 g     F .text	000000fc read
04057f1c g     F .text	00000060 alt_sys_init
040405b4 g     F .text	00000088 SW_IN_ISR
04059e00 g     F .text	00000118 __register_exitproc
02002301 g     O .bss	00000001 OSTaskCtr
020006bc g     O .rwdata	00000024 kernBlur3x
04057acc g     F .text	00000154 OSTimeDlyHMSM
040493c8 g     F .text	000001f8 __multiply
040585d0 g     F .text	00000068 altera_avalon_jtag_uart_close
02000664 g       *ABS*	00000000 __ram_rwdata_start
02000000 g       *ABS*	00000000 __ram_rodata_start
0200233c g     O .bss	00000028 __malloc_current_mallinfo
020021e2 g     O .rwdata	00000002 OSEventMax
04049c14 g     F .text	0000014c __d2b
04055f3c g     F .text	00000110 OSSemPost
02002258 g     O .bss	00000004 flipTime
04051184 g     F .text	000000dc OSSchedUnlock
04057f7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04059bcc g     F .text	000000dc alt_get_fd
02002304 g     O .bss	00000004 OSMemFreeList
040512d0 g     F .text	000000b0 OSStatInit
04053b08 g     F .text	000000c4 OSFlagQuery
02002218 g     O .rwdata	00000002 OSTaskCreateExtEn
0404be14 g     F .text	00000054 _close_r
04059d84 g     F .text	0000007c memcmp
040515c0 g     F .text	00000020 OS_Dummy
0405803c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02015688 g       *ABS*	00000000 __alt_stack_base
0405808c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04045ee4 g     F .text	00000154 __swsetup_r
02013c04 g     O .bss	000001e0 OSQTbl
0404da44 g     F .text	000008e8 .hidden __divdf3
04047d88 g     F .text	00000118 __sfp
04049e78 g     F .text	00000078 __copybits
020006e0 g     O .rwdata	00000408 __malloc_av_
04047ed4 g     F .text	00000004 __sinit_lock_release
02002308 g     O .bss	00000004 OSTCBHighRdy
0404e584 g     F .text	00000718 .hidden __muldf3
0404a554 g     F .text	00000054 __sread
0200230c g     O .bss	00000004 OSQFreeList
0404052c g     F .text	00000088 KEY_IN_ISR
02002288 g     O .bss	00000004 SwChangedContext
04059ac4 g     F .text	00000108 alt_find_file
04058f4c g     F .text	000000a4 alt_dev_llist_insert
04050500 g     F .text	00000120 __malloc_lock
040501f8 g     F .text	000000b0 sbrk
0405080c g     F .text	00000140 OSEventNameSet
04047adc g     F .text	0000005c _fflush_r
0404be68 g     F .text	000000c4 _calloc_r
02002310 g     O .bss	00000001 OSRdyGrp
02002254 g       *ABS*	00000000 __bss_start
04048e58 g     F .text	00000128 memset
04042e00 g     F .text	000000b8 main
02002260 g     O .bss	00000004 edgeTime
020022cc g     O .bss	00000004 alt_envp
020022a0 g     O .bss	00000004 __malloc_max_total_mem
04057fdc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200a364 g     O .bss	00002000 imageFourTask_stk
0404c4e8 g     F .text	00000018 __swbuf
02000530 g     O .rodata	00000100 OSUnMapTbl
0200c364 g     O .bss	00002000 imageTwoTask_stk
02002212 g     O .rwdata	00000002 OSSemEn
04053774 g     F .text	00000394 OSFlagPost
0404a688 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0404c01c g     F .text	00000014 fclose
04051778 g     F .text	00000110 OS_EventTaskWait
04052360 g     F .text	000000cc OS_TaskStatStkChk
04056e20 g     F .text	00000150 OSTaskDelReq
04040310 g     F .text	0000021c writeImage
04046238 g     F .text	00001688 _dtoa_r
04043094 g     F .text	0000080c _malloc_r
0404c65c g     F .text	00000030 __ascii_wctomb
020021c4 g     O .rwdata	00000004 alt_errno
04051260 g     F .text	00000070 OSStart
040504a0 g     F .text	00000060 __env_unlock
040487f8 g     F .text	000000c4 _fwalk
040572bc g     F .text	000001d4 OSTaskResume
04054544 g     F .text	000000e8 OSMemQuery
02002224 g     O .rwdata	00000002 OSTaskStatEn
020021fe g     O .rwdata	00000002 OSMemMax
0405527c g     F .text	00000170 OSQPostFront
04042eb8 g     F .text	00000084 .hidden __divsi3
02002311 g     O .bss	00000003 OSRdyTbl
020021d8 g     O .rwdata	00000002 OSDebugEn
04047f08 g     F .text	00000124 _malloc_trim_r
0405a0cc g       *ABS*	00000000 __CTOR_END__
020021f0 g     O .rwdata	00000002 OSFlagNodeSize
02002238 g     O .rwdata	00000002 OSTmrCfgMax
0404a690 g     F .text	000000dc strcmp
04054838 g     F .text	000001ac OSQCreate
04056f70 g     F .text	00000198 OSTaskNameGet
0405a0cc g       *ABS*	00000000 __flash_rodata_start
040553ec g     F .text	0000020c OSQPostOpt
04051380 g     F .text	00000220 OSTimeTick
02002220 g     O .rwdata	00000002 OSTaskMax
0405a0cc g       *ABS*	00000000 __DTOR_LIST__
040558ac g     F .text	000000d8 OSSemCreate
02002244 g     O .rwdata	00000002 OSTmrWheelSize
0200228c g     O .bss	00000004 semLockBlurImgPointer
0404e32c g     F .text	00000088 .hidden __nedf2
040425bc g     F .text	00000040 switchManagerTask
0200221a g     O .rwdata	00000002 OSTaskDelEn
0405604c g     F .text	00000110 OSSemQuery
040549e4 g     F .text	00000280 OSQDel
04054fa8 g     F .text	0000016c OSQPendAbort
04057ee4 g     F .text	00000038 alt_irq_init
04050194 g     F .text	00000064 alt_release_fd
04041d20 g     F .text	00000214 imageOneTask
02000414 g     O .rodata	00000100 .hidden __clz_tab
020022b0 g     O .bss	00000004 _PathLocale
04059d38 g     F .text	00000014 atexit
02002290 g     O .bss	00000004 semDisplay2
0404bdb4 g     F .text	00000060 _write_r
04040820 g     F .text	00000180 displayDigit
040510f8 g     F .text	0000008c OSSchedLock
04048a38 g     F .text	00000018 setlocale
04052b98 g     F .text	00000108 OSFlagCreate
020021a4 g     O .rwdata	00000004 _impure_ptr
020022c4 g     O .bss	00000004 alt_argc
040478c0 g     F .text	0000021c __sflush_r
04059050 g     F .text	00000060 _do_dtors
04048a24 g     F .text	00000008 __locale_cjk_lang
020021ea g     O .rwdata	00000002 OSEventMultiEn
04052ca0 g     F .text	00000248 OSFlagDel
02002314 g     O .bss	00000004 OSEventFreeList
04040020 g       .exceptions	00000000 alt_irq_entry
04049aa4 g     F .text	00000064 __ulp
0405315c g     F .text	000005b8 OSFlagPend
02002236 g     O .rwdata	00000002 OSTmrEn
04047ef0 g     F .text	00000018 __fp_unlock_all
020021b0 g     O .rwdata	00000008 alt_fs_list
04052170 g     F .text	00000074 OS_StrCopy
04040f30 g     F .text	000002b8 processEdgeDetection
02002200 g     O .rwdata	00000002 OSMemNameSize
040599d0 g     F .text	00000020 OSInitHookEnd
02002294 g     O .bss	00000004 semLockBaseImgPointer
04040020 g       *ABS*	00000000 __ram_exceptions_start
0200222c g     O .rwdata	00000002 OSTCBPrioTblMax
04048a50 g     F .text	0000000c localeconv
02002228 g     O .rwdata	00000002 OSTaskStatStkChkEn
0404fa24 g     F .text	00000050 alt_ic_isr_register
020021fc g     O .rwdata	00000002 OSMemEn
02002206 g     O .rwdata	00000002 OSMutexEn
02002254 g       *ABS*	00000000 _edata
02015688 g       *ABS*	00000000 _end
02002318 g     O .bss	00000001 OSIntNesting
0404c030 g     F .text	00000164 __fputwc
04040244 g       *ABS*	00000000 __ram_exceptions_end
04058638 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04057c20 g     F .text	000001d4 OSTimeDlyResume
04053010 g     F .text	0000014c OSFlagNameSet
04041f34 g     F .text	00000218 imageTwoTask
02002254 g     O .bss	00000001 flipImgFlags
04057490 g     F .text	000001c0 OSTaskStkChk
0404fafc g     F .text	0000008c alt_ic_irq_disable
02002202 g     O .rwdata	00000002 OSMemSize
0404a5b0 g     F .text	0000007c __swrite
0200219c g     O .rwdata	00000004 __malloc_trim_threshold
04048a18 g     F .text	0000000c __locale_msgcharset
0200231c g     O .bss	00000004 OSTCBCur
04059d4c g     F .text	00000038 exit
02002204 g     O .rwdata	00000002 OSMemTblSize
040488bc g     F .text	000000c4 _fwalk_reent
040498a8 g     F .text	000001fc __mdiff
04042f3c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04040020 g     F .exceptions	00000000 alt_exception
04047ecc g     F .text	00000004 __sfp_lock_release
0200e364 g     O .bss	00002000 mainTask_stk
04050f5c g     F .text	00000058 OSInit
04057834 g     F .text	00000124 OSTaskQuery
04055754 g     F .text	000000a8 OS_QInit
040521e4 g     F .text	00000054 OS_StrLen
04054358 g     F .text	00000114 OSMemNameSet
0200221e g     O .rwdata	00000002 OSTaskProfileEn
02002320 g     O .bss	00000004 OSTime
02010364 g     O .bss	00002000 buttonManagerTask_stk
02013de4 g     O .bss	00000800 OSTaskIdleStk
0404257c g     F .text	00000040 buttonManagerTask
0405a098 g     F .text	00000034 _exit
04058d9c g     F .text	0000012c alt_alarm_start
04052ee8 g     F .text	00000128 OSFlagNameGet
04057df4 g     F .text	0000005c OSTimeGet
04048a5c g     F .text	000001bc __smakebuf_r
04043b7c g     F .text	00000098 strlen
04059950 g     F .text	00000020 OSTaskSwHook
040593c0 g     F .text	00000154 open
02002298 g     O .bss	00000004 semLockFlipImgPointer
020145e4 g     O .bss	00000b40 OSEventTbl
0404e3b4 g     F .text	000000dc .hidden __gedf2
02015124 g     O .bss	00000510 OSTCBTbl
0405615c g     F .text	00000100 OSSemSet
020021ac g     O .rwdata	00000004 __wctomb
0404a868 g     F .text	00000018 __sprint_r
040590b0 g     F .text	00000034 alt_icache_flush_all
020021c8 g     O .rwdata	00000004 alt_priority_mask
0200229c g     O .bss	00000004 semKeyChange
04055984 g     F .text	00000240 OSSemDel
02002324 g     O .bss	00000004 OSFlagFreeList
0404fa74 g     F .text	00000088 alt_ic_irq_enable
020021e4 g     O .rwdata	00000002 OSEventNameSize
04045e0c g     F .text	0000001c __vfprintf_internal
02002328 g     O .bss	00000001 OSStatRdy
02015634 g     O .bss	00000054 OSTCBPrioTbl
0404c68c g     F .text	0000005c _wctomb_r
040503dc g     F .text	000000c4 __env_lock
0200222a g     O .rwdata	00000002 OSTaskSwHookEn
0404ec9c g     F .text	000008fc .hidden __subdf3
040492dc g     F .text	000000b0 __lo0bits
0200224c g     O .rwdata	00000008 alt_alarm_list
020021f2 g     O .rwdata	00000002 OSFlagWidth
04058ff0 g     F .text	00000060 _do_ctors
0404c59c g     F .text	000000c0 wcrtomb
0404f83c g     F .text	000000d0 close
020022d4 g     O .bss	00000004 alt_envsem
0200232c g     O .bss	00000004 OSIdleCtrRun
04041be4 g     F .text	000000a4 imgToPtr
040515a0 g     F .text	00000020 OSVersion
0200223c g     O .rwdata	00000002 OSTmrCfgWheelSize
0404fe0c g     F .text	00000084 alt_load
04057958 g     F .text	00000070 OS_TaskStkClr
04040000 g       *ABS*	00000000 __alt_mem_NIOS_MEM
02002216 g     O .rwdata	00000002 OSTaskCreateEn
04051b90 g     F .text	00000068 OS_EventWaitListInit
0404c1b8 g     F .text	00000080 fputwc
040599f0 g     F .text	00000020 OSTaskIdleHook
04043080 g     F .text	00000014 free
04047ed0 g     F .text	00000004 __sinit_lock_acquire
04049050 g     F .text	00000120 __multadd
04057650 g     F .text	000001e4 OSTaskSuspend
04049028 g     F .text	00000028 _Bfree
04052238 g     F .text	0000005c OS_TaskIdle
02002242 g     O .rwdata	00000002 OSTmrTblSize
040555f8 g     F .text	0000015c OSQQuery
040411e8 g     F .text	000003c4 fastEdgeDetection



Disassembly of section .entry:

04040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4040000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4040004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4040008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 404000c:	00bffd16 	blt	zero,r2,4040004 <__flash_rwdata_start+0xfffe58d4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4040010:	00410134 	movhi	at,1028
    ori r1, r1, %lo(_start)
 4040014:	08409114 	ori	at,at,580
    jmp r1
 4040018:	0800683a 	jmp	at
 404001c:	00000000 	call	0 <__alt_mem_SDRAM>

Disassembly of section .exceptions:

04040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 404002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 404003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 404004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 404005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 404006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 404007c:	10000326 	beq	r2,zero,404008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4040080:	20000226 	beq	r4,zero,404008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4040084:	40400fc0 	call	40400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4040088:	00000706 	br	40400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 404008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4040098:	40401d00 	call	40401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 404009c:	1000021e 	bne	r2,zero,40400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40400f8:	ef80083a 	eret

040400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40400fc:	defff904 	addi	sp,sp,-28
 4040100:	dfc00615 	stw	ra,24(sp)
 4040104:	df000515 	stw	fp,20(sp)
 4040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 404010c:	4050fb40 	call	4050fb4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4040110:	0005313a 	rdctl	r2,ipending
 4040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 404011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4040124:	00800044 	movi	r2,1
 4040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 404012c:	e0fffb17 	ldw	r3,-20(fp)
 4040130:	e0bffc17 	ldw	r2,-16(fp)
 4040134:	1884703a 	and	r2,r3,r2
 4040138:	10001426 	beq	r2,zero,404018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 404013c:	00808074 	movhi	r2,513
 4040140:	1088d904 	addi	r2,r2,9060
 4040144:	e0fffd17 	ldw	r3,-12(fp)
 4040148:	180690fa 	slli	r3,r3,3
 404014c:	10c5883a 	add	r2,r2,r3
 4040150:	10c00017 	ldw	r3,0(r2)
 4040154:	00808074 	movhi	r2,513
 4040158:	1088d904 	addi	r2,r2,9060
 404015c:	e13ffd17 	ldw	r4,-12(fp)
 4040160:	200890fa 	slli	r4,r4,3
 4040164:	1105883a 	add	r2,r2,r4
 4040168:	10800104 	addi	r2,r2,4
 404016c:	10800017 	ldw	r2,0(r2)
 4040170:	1009883a 	mov	r4,r2
 4040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 404017c:	0005313a 	rdctl	r2,ipending
 4040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4040184:	e0bfff17 	ldw	r2,-4(fp)
 4040188:	00000706 	br	40401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 404018c:	e0bffc17 	ldw	r2,-16(fp)
 4040190:	1085883a 	add	r2,r2,r2
 4040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4040198:	e0bffd17 	ldw	r2,-12(fp)
 404019c:	10800044 	addi	r2,r2,1
 40401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40401a4:	003fe106 	br	404012c <__flash_rwdata_start+0xfffe59fc>

    active = alt_irq_pending ();
 40401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40401ac:	e0bffb17 	ldw	r2,-20(fp)
 40401b0:	103fdb1e 	bne	r2,zero,4040120 <__flash_rwdata_start+0xfffe59f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40401b4:	40510000 	call	4051000 <OSIntExit>
}
 40401b8:	0001883a 	nop
 40401bc:	e037883a 	mov	sp,fp
 40401c0:	dfc00117 	ldw	ra,4(sp)
 40401c4:	df000017 	ldw	fp,0(sp)
 40401c8:	dec00204 	addi	sp,sp,8
 40401cc:	f800283a 	ret

040401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40401d0:	defffb04 	addi	sp,sp,-20
 40401d4:	dfc00415 	stw	ra,16(sp)
 40401d8:	df000315 	stw	fp,12(sp)
 40401dc:	df000304 	addi	fp,sp,12
 40401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40401e4:	000531fa 	rdctl	r2,exception
 40401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40401ec:	e0bffd17 	ldw	r2,-12(fp)
 40401f0:	10801f0c 	andi	r2,r2,124
 40401f4:	1004d0ba 	srli	r2,r2,2
 40401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40401fc:	0005333a 	rdctl	r2,badaddr
 4040200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4040204:	d0a06617 	ldw	r2,-32360(gp)
 4040208:	10000726 	beq	r2,zero,4040228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 404020c:	d0a06617 	ldw	r2,-32360(gp)
 4040210:	e0fffd17 	ldw	r3,-12(fp)
 4040214:	e1bffe17 	ldw	r6,-8(fp)
 4040218:	e17fff17 	ldw	r5,-4(fp)
 404021c:	1809883a 	mov	r4,r3
 4040220:	103ee83a 	callr	r2
 4040224:	00000206 	br	4040230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4040228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 404022c:	0005883a 	mov	r2,zero
}
 4040230:	e037883a 	mov	sp,fp
 4040234:	dfc00117 	ldw	ra,4(sp)
 4040238:	df000017 	ldw	fp,0(sp)
 404023c:	dec00204 	addi	sp,sp,8
 4040240:	f800283a 	ret

Disassembly of section .text:

04040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4040244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4040248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 404024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4040250:	00bffd16 	blt	zero,r2,4040248 <__flash_rwdata_start+0xfffe5b18>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4040254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4040258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 404025c:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 4040260:	d6a86614 	ori	gp,gp,41368
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4040264:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 4040268:	10889514 	ori	r2,r2,8788

    movhi r3, %hi(__bss_end)
 404026c:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 4040270:	18d5a214 	ori	r3,r3,22152

    beq r2, r3, 1f
 4040274:	10c00326 	beq	r2,r3,4040284 <_start+0x40>

0:
    stw zero, (r2)
 4040278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 404027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4040280:	10fffd36 	bltu	r2,r3,4040278 <__flash_rwdata_start+0xfffe5b48>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4040284:	404fe0c0 	call	404fe0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4040288:	404ffa00 	call	404ffa0 <alt_main>

0404028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 404028c:	003fff06 	br	404028c <__flash_rwdata_start+0xfffe5b5c>

04040290 <clrBuffer>:
/*
 *  clrBuffer()
 *  Clears the pixel buffer. Used to clear screen
 *  when processor restarts/program initialises
 */
void clrBuffer() {
 4040290:	defffe04 	addi	sp,sp,-8
 4040294:	df000115 	stw	fp,4(sp)
 4040298:	df000104 	addi	fp,sp,4
	for (int i = 0; i < BUF_MAX_PIX; i++) {
 404029c:	e03fff15 	stw	zero,-4(fp)
 40402a0:	00001306 	br	40402f0 <clrBuffer+0x60>
		  // Set Buffer Address
		  IOWR_32DIRECT(PB_ADR_BASE,0,i);
 40402a4:	00810234 	movhi	r2,1032
 40402a8:	10842004 	addi	r2,r2,4224
 40402ac:	e0ffff17 	ldw	r3,-4(fp)
 40402b0:	10c00035 	stwio	r3,0(r2)
		  // Enable Writing
		  IOWR_32DIRECT(PBUFF_WREN_BASE,0,1);
 40402b4:	00c00044 	movi	r3,1
 40402b8:	00810234 	movhi	r2,1032
 40402bc:	10841804 	addi	r2,r2,4192
 40402c0:	10c00035 	stwio	r3,0(r2)
		  // Write Data
		  IOWR_32DIRECT(PB_DATA_BASE,0,0);
 40402c4:	0007883a 	mov	r3,zero
 40402c8:	00810234 	movhi	r2,1032
 40402cc:	10841c04 	addi	r2,r2,4208
 40402d0:	10c00035 	stwio	r3,0(r2)
		  // Disable writing
		  IOWR_32DIRECT(PBUFF_WREN_BASE,0,0);
 40402d4:	0007883a 	mov	r3,zero
 40402d8:	00810234 	movhi	r2,1032
 40402dc:	10841804 	addi	r2,r2,4192
 40402e0:	10c00035 	stwio	r3,0(r2)
 *  clrBuffer()
 *  Clears the pixel buffer. Used to clear screen
 *  when processor restarts/program initialises
 */
void clrBuffer() {
	for (int i = 0; i < BUF_MAX_PIX; i++) {
 40402e4:	e0bfff17 	ldw	r2,-4(fp)
 40402e8:	10800044 	addi	r2,r2,1
 40402ec:	e0bfff15 	stw	r2,-4(fp)
 40402f0:	e0bfff17 	ldw	r2,-4(fp)
 40402f4:	1092c010 	cmplti	r2,r2,19200
 40402f8:	103fea1e 	bne	r2,zero,40402a4 <__flash_rwdata_start+0xfffe5b74>
		  // Write Data
		  IOWR_32DIRECT(PB_DATA_BASE,0,0);
		  // Disable writing
		  IOWR_32DIRECT(PBUFF_WREN_BASE,0,0);
	  }
	return;
 40402fc:	0001883a 	nop
}
 4040300:	e037883a 	mov	sp,fp
 4040304:	df000017 	ldw	fp,0(sp)
 4040308:	dec00104 	addi	sp,sp,4
 404030c:	f800283a 	ret

04040310 <writeImage>:
 * Writes the images in SDRAM to the pixel buffer
 * Uses the 2 LSBs to determine if the image should
 * be flipped when it is drawn
 * 0x1 is x flip, 0x2 is y flip
 */
void writeImage(char flipFlags) {
 4040310:	defff304 	addi	sp,sp,-52
 4040314:	df000c15 	stw	fp,48(sp)
 4040318:	df000c04 	addi	fp,sp,48
 404031c:	2005883a 	mov	r2,r4
 4040320:	e0bfff05 	stb	r2,-4(fp)
	// Setup Draw Params
	int heightAddr = BUF_LAST_ROW_ADDR-1;
 4040324:	009297c4 	movi	r2,19039
 4040328:	e0bff715 	stw	r2,-36(fp)

	// Setup Temp Data variables
	int data1;
	int data2;
	char xFlipped = (flipFlags & 0x1) != 0;
 404032c:	e0bfff03 	ldbu	r2,-4(fp)
 4040330:	10803fcc 	andi	r2,r2,255
 4040334:	1080004c 	andi	r2,r2,1
 4040338:	1004c03a 	cmpne	r2,r2,zero
 404033c:	e0bff805 	stb	r2,-32(fp)
	char yFlipped = (flipFlags & 0x2) != 0;
 4040340:	e0bfff03 	ldbu	r2,-4(fp)
 4040344:	10803fcc 	andi	r2,r2,255
 4040348:	1080008c 	andi	r2,r2,2
 404034c:	1004c03a 	cmpne	r2,r2,zero
 4040350:	e0bff845 	stb	r2,-31(fp)
	// To correct this we check if the image is requested to be
	// flipped in y only. If it is we flip the x direction back
	// to correct for the errant x flip.
	// If y is not needed to be flipped, we only flip if x needs
	// to be flipped
	char performXFlip = yFlipped ? xFlipped^yFlipped : xFlipped;
 4040354:	e0bff847 	ldb	r2,-31(fp)
 4040358:	10000426 	beq	r2,zero,404036c <writeImage+0x5c>
 404035c:	e0fff803 	ldbu	r3,-32(fp)
 4040360:	e0bff843 	ldbu	r2,-31(fp)
 4040364:	1884f03a 	xor	r2,r3,r2
 4040368:	00000106 	br	4040370 <writeImage+0x60>
 404036c:	e0bff803 	ldbu	r2,-32(fp)
 4040370:	e0bff885 	stb	r2,-30(fp)

	// Define Base For Flip and add offset if required
	int base = 0;
 4040374:	e03ff415 	stw	zero,-48(fp)
	if (yFlipped) {
 4040378:	e0bff847 	ldb	r2,-31(fp)
 404037c:	10000426 	beq	r2,zero,4040390 <writeImage+0x80>
		base += heightAddr;
 4040380:	e0fff417 	ldw	r3,-48(fp)
 4040384:	e0bff717 	ldw	r2,-36(fp)
 4040388:	1885883a 	add	r2,r3,r2
 404038c:	e0bff415 	stw	r2,-48(fp)
	int readOffset2;
	int pixelAddr1;
	int pixelAddr2;

	// Loop to draw the image to the screen
	for (int i = 0; i < heightAddr; i = i + IMG_WIDTH) {
 4040390:	e03ff515 	stw	zero,-44(fp)
 4040394:	00005d06 	br	404050c <writeImage+0x1fc>
		for (int j = 0; j < IMG_WIDTH/2; j++){
 4040398:	e03ff615 	stw	zero,-40(fp)
 404039c:	00005506 	br	40404f4 <writeImage+0x1e4>
			// Offset read directions
			// offset1 ----->	<----- offset 2 //
			readOffset1 = i+j;
 40403a0:	e0fff517 	ldw	r3,-44(fp)
 40403a4:	e0bff617 	ldw	r2,-40(fp)
 40403a8:	1885883a 	add	r2,r3,r2
 40403ac:	e0bff915 	stw	r2,-28(fp)
			readOffset2 = i + IMG_WIDTH - j - 1;
 40403b0:	e0bff517 	ldw	r2,-44(fp)
 40403b4:	10c02804 	addi	r3,r2,160
 40403b8:	e0bff617 	ldw	r2,-40(fp)
 40403bc:	1885c83a 	sub	r2,r3,r2
 40403c0:	10bfffc4 	addi	r2,r2,-1
 40403c4:	e0bffa15 	stw	r2,-24(fp)

			// Calculate which pixel to read
			pixelAddr1 = base+readOffset1*(yFlipped ? -1 : 1);
 40403c8:	e0bff847 	ldb	r2,-31(fp)
 40403cc:	10000226 	beq	r2,zero,40403d8 <writeImage+0xc8>
 40403d0:	00bfffc4 	movi	r2,-1
 40403d4:	00000106 	br	40403dc <writeImage+0xcc>
 40403d8:	00800044 	movi	r2,1
 40403dc:	e0fff917 	ldw	r3,-28(fp)
 40403e0:	10c7383a 	mul	r3,r2,r3
 40403e4:	e0bff417 	ldw	r2,-48(fp)
 40403e8:	1885883a 	add	r2,r3,r2
 40403ec:	e0bffb15 	stw	r2,-20(fp)
			pixelAddr2 = base+readOffset2*(yFlipped ? -1 : 1);
 40403f0:	e0bff847 	ldb	r2,-31(fp)
 40403f4:	10000226 	beq	r2,zero,4040400 <writeImage+0xf0>
 40403f8:	00bfffc4 	movi	r2,-1
 40403fc:	00000106 	br	4040404 <writeImage+0xf4>
 4040400:	00800044 	movi	r2,1
 4040404:	e0fffa17 	ldw	r3,-24(fp)
 4040408:	10c7383a 	mul	r3,r2,r3
 404040c:	e0bff417 	ldw	r2,-48(fp)
 4040410:	1885883a 	add	r2,r3,r2
 4040414:	e0bffc15 	stw	r2,-16(fp)

			// Get the data from this pixel addresses above
			data1 = IORD_32DIRECT(SDRAM_BASEADDR,readOffset1*4)>>24;
 4040418:	e0bff917 	ldw	r2,-28(fp)
 404041c:	1085883a 	add	r2,r2,r2
 4040420:	1085883a 	add	r2,r2,r2
 4040424:	10800037 	ldwio	r2,0(r2)
 4040428:	1005d63a 	srai	r2,r2,24
 404042c:	e0bffd15 	stw	r2,-12(fp)
			data2 = IORD_32DIRECT(SDRAM_BASEADDR,readOffset2*4)>>24;
 4040430:	e0bffa17 	ldw	r2,-24(fp)
 4040434:	1085883a 	add	r2,r2,r2
 4040438:	1085883a 	add	r2,r2,r2
 404043c:	10800037 	ldwio	r2,0(r2)
 4040440:	1005d63a 	srai	r2,r2,24
 4040444:	e0bffe15 	stw	r2,-8(fp)

			// Write the first pixel to the correct location in the buffer
			IOWR_32DIRECT(PB_ADR_BASE,0,(performXFlip ? pixelAddr2 : pixelAddr1));
 4040448:	e0bff887 	ldb	r2,-30(fp)
 404044c:	10000226 	beq	r2,zero,4040458 <writeImage+0x148>
 4040450:	e0fffc17 	ldw	r3,-16(fp)
 4040454:	00000106 	br	404045c <writeImage+0x14c>
 4040458:	e0fffb17 	ldw	r3,-20(fp)
 404045c:	00810234 	movhi	r2,1032
 4040460:	10842004 	addi	r2,r2,4224
 4040464:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,1);
 4040468:	00c00044 	movi	r3,1
 404046c:	00810234 	movhi	r2,1032
 4040470:	10841804 	addi	r2,r2,4192
 4040474:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PB_DATA_BASE,0,data1);
 4040478:	00810234 	movhi	r2,1032
 404047c:	10841c04 	addi	r2,r2,4208
 4040480:	e0fffd17 	ldw	r3,-12(fp)
 4040484:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,0);
 4040488:	0007883a 	mov	r3,zero
 404048c:	00810234 	movhi	r2,1032
 4040490:	10841804 	addi	r2,r2,4192
 4040494:	10c00035 	stwio	r3,0(r2)

			// Write the first pixel to the correct location in the buffer
			IOWR_32DIRECT(PB_ADR_BASE,0,(performXFlip ? pixelAddr1 : pixelAddr2));
 4040498:	e0bff887 	ldb	r2,-30(fp)
 404049c:	10000226 	beq	r2,zero,40404a8 <writeImage+0x198>
 40404a0:	e0fffb17 	ldw	r3,-20(fp)
 40404a4:	00000106 	br	40404ac <writeImage+0x19c>
 40404a8:	e0fffc17 	ldw	r3,-16(fp)
 40404ac:	00810234 	movhi	r2,1032
 40404b0:	10842004 	addi	r2,r2,4224
 40404b4:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,1);
 40404b8:	00c00044 	movi	r3,1
 40404bc:	00810234 	movhi	r2,1032
 40404c0:	10841804 	addi	r2,r2,4192
 40404c4:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PB_DATA_BASE,0,data2);
 40404c8:	00810234 	movhi	r2,1032
 40404cc:	10841c04 	addi	r2,r2,4208
 40404d0:	e0fffe17 	ldw	r3,-8(fp)
 40404d4:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,0);
 40404d8:	0007883a 	mov	r3,zero
 40404dc:	00810234 	movhi	r2,1032
 40404e0:	10841804 	addi	r2,r2,4192
 40404e4:	10c00035 	stwio	r3,0(r2)
	int pixelAddr1;
	int pixelAddr2;

	// Loop to draw the image to the screen
	for (int i = 0; i < heightAddr; i = i + IMG_WIDTH) {
		for (int j = 0; j < IMG_WIDTH/2; j++){
 40404e8:	e0bff617 	ldw	r2,-40(fp)
 40404ec:	10800044 	addi	r2,r2,1
 40404f0:	e0bff615 	stw	r2,-40(fp)
 40404f4:	e0bff617 	ldw	r2,-40(fp)
 40404f8:	10801410 	cmplti	r2,r2,80
 40404fc:	103fa81e 	bne	r2,zero,40403a0 <__flash_rwdata_start+0xfffe5c70>
	int readOffset2;
	int pixelAddr1;
	int pixelAddr2;

	// Loop to draw the image to the screen
	for (int i = 0; i < heightAddr; i = i + IMG_WIDTH) {
 4040500:	e0bff517 	ldw	r2,-44(fp)
 4040504:	10802804 	addi	r2,r2,160
 4040508:	e0bff515 	stw	r2,-44(fp)
 404050c:	e0fff517 	ldw	r3,-44(fp)
 4040510:	e0bff717 	ldw	r2,-36(fp)
 4040514:	18bfa016 	blt	r3,r2,4040398 <__flash_rwdata_start+0xfffe5c68>
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,1);
			IOWR_32DIRECT(PB_DATA_BASE,0,data2);
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,0);
		}
	}
	return;
 4040518:	0001883a 	nop
}
 404051c:	e037883a 	mov	sp,fp
 4040520:	df000017 	ldw	fp,0(sp)
 4040524:	dec00104 	addi	sp,sp,4
 4040528:	f800283a 	ret

0404052c <KEY_IN_ISR>:
 * Currently just checks which button was pressed,
 * updates the global flip flag accordingly and then
 * redraws the image to the screen
 */
void KEY_IN_ISR(void * isr_context, alt_u32 id)
{
 404052c:	defffa04 	addi	sp,sp,-24
 4040530:	dfc00515 	stw	ra,20(sp)
 4040534:	df000415 	stw	fp,16(sp)
 4040538:	df000404 	addi	fp,sp,16
 404053c:	e13ffe15 	stw	r4,-8(fp)
 4040540:	e17fff15 	stw	r5,-4(fp)
	// Retrieve the memory address to store the edge capture data
	volatile int* keyEdgeCapturePtr = (volatile int*) isr_context;
 4040544:	e0bffe17 	ldw	r2,-8(fp)
 4040548:	e0bffc15 	stw	r2,-16(fp)
	// Get edge capture data
	*keyEdgeCapturePtr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_IN_BASE);
 404054c:	00810234 	movhi	r2,1032
 4040550:	10842704 	addi	r2,r2,4252
 4040554:	10c00037 	ldwio	r3,0(r2)
 4040558:	e0bffc17 	ldw	r2,-16(fp)
 404055c:	10c00015 	stw	r3,0(r2)
	// Write to the edge capture register to reset it.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_IN_BASE, 0);
 4040560:	0007883a 	mov	r3,zero
 4040564:	00810234 	movhi	r2,1032
 4040568:	10842704 	addi	r2,r2,4252
 404056c:	10c00035 	stwio	r3,0(r2)
	// Post semaphore to acknowledge IRQ data is now available
	int err = OSSemPost(semKeyChange);
 4040570:	d0a04117 	ldw	r2,-32508(gp)
 4040574:	1009883a 	mov	r4,r2
 4040578:	4055f3c0 	call	4055f3c <OSSemPost>
 404057c:	10803fcc 	andi	r2,r2,255
 4040580:	e0bffd15 	stw	r2,-12(fp)
	if (err != OS_NO_ERR) printf("Failed to post semaphore semKeyChange: %x\n",err);
 4040584:	e0bffd17 	ldw	r2,-12(fp)
 4040588:	10000426 	beq	r2,zero,404059c <KEY_IN_ISR+0x70>
 404058c:	e17ffd17 	ldw	r5,-12(fp)
 4040590:	01008034 	movhi	r4,512
 4040594:	21000004 	addi	r4,r4,0
 4040598:	4043a180 	call	4043a18 <printf>
}
 404059c:	0001883a 	nop
 40405a0:	e037883a 	mov	sp,fp
 40405a4:	dfc00117 	ldw	ra,4(sp)
 40405a8:	df000017 	ldw	fp,0(sp)
 40405ac:	dec00204 	addi	sp,sp,8
 40405b0:	f800283a 	ret

040405b4 <SW_IN_ISR>:

void SW_IN_ISR(void * isr_context, alt_u32 id)
{
 40405b4:	defffa04 	addi	sp,sp,-24
 40405b8:	dfc00515 	stw	ra,20(sp)
 40405bc:	df000415 	stw	fp,16(sp)
 40405c0:	df000404 	addi	fp,sp,16
 40405c4:	e13ffe15 	stw	r4,-8(fp)
 40405c8:	e17fff15 	stw	r5,-4(fp)
	// Retrieve the memory address to store the edge capture data
	volatile int* swEdgeCapturePtr = (volatile int*) isr_context;
 40405cc:	e0bffe17 	ldw	r2,-8(fp)
 40405d0:	e0bffc15 	stw	r2,-16(fp)
	// Get edge capture data
	*swEdgeCapturePtr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(SW_IN_BASE);
 40405d4:	00810234 	movhi	r2,1032
 40405d8:	10842b04 	addi	r2,r2,4268
 40405dc:	10c00037 	ldwio	r3,0(r2)
 40405e0:	e0bffc17 	ldw	r2,-16(fp)
 40405e4:	10c00015 	stw	r3,0(r2)
	// Write to the edge capture register to reset it.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SW_IN_BASE, 0);
 40405e8:	0007883a 	mov	r3,zero
 40405ec:	00810234 	movhi	r2,1032
 40405f0:	10842b04 	addi	r2,r2,4268
 40405f4:	10c00035 	stwio	r3,0(r2)
	// Post semaphore to acknowledge IRQ data is now available
	int err = OSSemPost(semSwitchChange);
 40405f8:	d0a03917 	ldw	r2,-32540(gp)
 40405fc:	1009883a 	mov	r4,r2
 4040600:	4055f3c0 	call	4055f3c <OSSemPost>
 4040604:	10803fcc 	andi	r2,r2,255
 4040608:	e0bffd15 	stw	r2,-12(fp)
	if (err != OS_NO_ERR) printf("Failed to post semaphore semSwChange: %x\n",err);
 404060c:	e0bffd17 	ldw	r2,-12(fp)
 4040610:	10000426 	beq	r2,zero,4040624 <SW_IN_ISR+0x70>
 4040614:	e17ffd17 	ldw	r5,-12(fp)
 4040618:	01008034 	movhi	r4,512
 404061c:	21000b04 	addi	r4,r4,44
 4040620:	4043a180 	call	4043a18 <printf>

}
 4040624:	0001883a 	nop
 4040628:	e037883a 	mov	sp,fp
 404062c:	dfc00117 	ldw	ra,4(sp)
 4040630:	df000017 	ldw	fp,0(sp)
 4040634:	dec00204 	addi	sp,sp,8
 4040638:	f800283a 	ret

0404063c <initButtonIRQ>:

/* initButtonIRQ()
 * Initialises the KEY interrupt handler
 */
static void initButtonIRQ()
{
 404063c:	defffc04 	addi	sp,sp,-16
 4040640:	dfc00315 	stw	ra,12(sp)
 4040644:	df000215 	stw	fp,8(sp)
 4040648:	df000204 	addi	fp,sp,8
	// Recast the edge_capture pointer to match the
	//alt_irq_register() function prototype.
	void* keyEdgeCapturePtr = (void*) &keyPressedContext;
 404064c:	d0a03a04 	addi	r2,gp,-32536
 4040650:	e0bfff15 	stw	r2,-4(fp)
	// Enable interrupts for both key
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_IN_BASE, 0x3);
 4040654:	00c000c4 	movi	r3,3
 4040658:	00810234 	movhi	r2,1032
 404065c:	10842604 	addi	r2,r2,4248
 4040660:	10c00035 	stwio	r3,0(r2)
	// Reset the edge capture register.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_IN_BASE, 0x0);
 4040664:	0007883a 	mov	r3,zero
 4040668:	00810234 	movhi	r2,1032
 404066c:	10842704 	addi	r2,r2,4252
 4040670:	10c00035 	stwio	r3,0(r2)
	// Register the ISR.
	alt_ic_isr_register(
 4040674:	d8000015 	stw	zero,0(sp)
 4040678:	e1ffff17 	ldw	r7,-4(fp)
 404067c:	01810134 	movhi	r6,1028
 4040680:	31814b04 	addi	r6,r6,1324
 4040684:	014000c4 	movi	r5,3
 4040688:	0009883a 	mov	r4,zero
 404068c:	404fa240 	call	404fa24 <alt_ic_isr_register>
		  KEY_IN_IRQ,
		  (alt_isr_func) KEY_IN_ISR,
		  keyEdgeCapturePtr,
		  0x0
  );
}
 4040690:	0001883a 	nop
 4040694:	e037883a 	mov	sp,fp
 4040698:	dfc00117 	ldw	ra,4(sp)
 404069c:	df000017 	ldw	fp,0(sp)
 40406a0:	dec00204 	addi	sp,sp,8
 40406a4:	f800283a 	ret

040406a8 <initSwIRQ>:

static void initSwIRQ()
{
 40406a8:	defffc04 	addi	sp,sp,-16
 40406ac:	dfc00315 	stw	ra,12(sp)
 40406b0:	df000215 	stw	fp,8(sp)
 40406b4:	df000204 	addi	fp,sp,8
	// Recast the edge_capture pointer to match the
	//alt_irq_register() function prototype.
	void* SwEdgeCapturePtr = (void*) &SwChangedContext;
 40406b8:	d0a03c04 	addi	r2,gp,-32528
 40406bc:	e0bfff15 	stw	r2,-4(fp)
	// Enable interrupts for both key
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SW_IN_BASE, 0x3FF);
 40406c0:	00c0ffc4 	movi	r3,1023
 40406c4:	00810234 	movhi	r2,1032
 40406c8:	10842a04 	addi	r2,r2,4264
 40406cc:	10c00035 	stwio	r3,0(r2)
	// Reset the edge capture register.
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SW_IN_BASE, 0x0);
 40406d0:	0007883a 	mov	r3,zero
 40406d4:	00810234 	movhi	r2,1032
 40406d8:	10842b04 	addi	r2,r2,4268
 40406dc:	10c00035 	stwio	r3,0(r2)
	// Register the ISR.
	alt_ic_isr_register(
 40406e0:	d8000015 	stw	zero,0(sp)
 40406e4:	e1ffff17 	ldw	r7,-4(fp)
 40406e8:	01810134 	movhi	r6,1028
 40406ec:	31816d04 	addi	r6,r6,1460
 40406f0:	01400084 	movi	r5,2
 40406f4:	0009883a 	mov	r4,zero
 40406f8:	404fa240 	call	404fa24 <alt_ic_isr_register>
		  SW_IN_IRQ,
		  (alt_isr_func) SW_IN_ISR,
		  SwEdgeCapturePtr,
		  0x0
  );
}
 40406fc:	0001883a 	nop
 4040700:	e037883a 	mov	sp,fp
 4040704:	dfc00117 	ldw	ra,4(sp)
 4040708:	df000017 	ldw	fp,0(sp)
 404070c:	dec00204 	addi	sp,sp,8
 4040710:	f800283a 	ret

04040714 <imageToBuffer>:
 * ------------------------- */

/* ------------------------- *
 *    BEGIN MS2 FUNCTIONS	 *
 * ------------------------- */
void imageToBuffer(int* imgPtr, int horizStart, int vertStart) {
 4040714:	defff704 	addi	sp,sp,-36
 4040718:	df000815 	stw	fp,32(sp)
 404071c:	df000804 	addi	fp,sp,32
 4040720:	e13ffd15 	stw	r4,-12(fp)
 4040724:	e17ffe15 	stw	r5,-8(fp)
 4040728:	e1bfff15 	stw	r6,-4(fp)
	int width = IMG_WIDTH/2;
 404072c:	00801404 	movi	r2,80
 4040730:	e0bffa15 	stw	r2,-24(fp)
	int height = IMG_HEIGHT/2;
 4040734:	00800f04 	movi	r2,60
 4040738:	e0bffb15 	stw	r2,-20(fp)
	int position;
	for (int col = 0; col < width; col++) {
 404073c:	e03ff815 	stw	zero,-32(fp)
 4040740:	00002f06 	br	4040800 <imageToBuffer+0xec>
		for (int row = 0; row < height; row++) {
 4040744:	e03ff915 	stw	zero,-28(fp)
 4040748:	00002706 	br	40407e8 <imageToBuffer+0xd4>
			position = horizStart + col + vertStart + row*IMG_WIDTH;
 404074c:	e0fffe17 	ldw	r3,-8(fp)
 4040750:	e0bff817 	ldw	r2,-32(fp)
 4040754:	1887883a 	add	r3,r3,r2
 4040758:	e0bfff17 	ldw	r2,-4(fp)
 404075c:	1887883a 	add	r3,r3,r2
 4040760:	e0bff917 	ldw	r2,-28(fp)
 4040764:	10802824 	muli	r2,r2,160
 4040768:	1885883a 	add	r2,r3,r2
 404076c:	e0bffc15 	stw	r2,-16(fp)
			IOWR_32DIRECT(PB_ADR_BASE,0, position);
 4040770:	00810234 	movhi	r2,1032
 4040774:	10842004 	addi	r2,r2,4224
 4040778:	e0fffc17 	ldw	r3,-16(fp)
 404077c:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,1);
 4040780:	00c00044 	movi	r3,1
 4040784:	00810234 	movhi	r2,1032
 4040788:	10841804 	addi	r2,r2,4192
 404078c:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PB_DATA_BASE,0,*(imgPtr+2+col+row*80));
 4040790:	e0bff917 	ldw	r2,-28(fp)
 4040794:	10801424 	muli	r2,r2,80
 4040798:	1007883a 	mov	r3,r2
 404079c:	e0bff817 	ldw	r2,-32(fp)
 40407a0:	1885883a 	add	r2,r3,r2
 40407a4:	10800084 	addi	r2,r2,2
 40407a8:	1085883a 	add	r2,r2,r2
 40407ac:	1085883a 	add	r2,r2,r2
 40407b0:	1007883a 	mov	r3,r2
 40407b4:	e0bffd17 	ldw	r2,-12(fp)
 40407b8:	10c5883a 	add	r2,r2,r3
 40407bc:	10c00017 	ldw	r3,0(r2)
 40407c0:	00810234 	movhi	r2,1032
 40407c4:	10841c04 	addi	r2,r2,4208
 40407c8:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,0);
 40407cc:	0007883a 	mov	r3,zero
 40407d0:	00810234 	movhi	r2,1032
 40407d4:	10841804 	addi	r2,r2,4192
 40407d8:	10c00035 	stwio	r3,0(r2)
void imageToBuffer(int* imgPtr, int horizStart, int vertStart) {
	int width = IMG_WIDTH/2;
	int height = IMG_HEIGHT/2;
	int position;
	for (int col = 0; col < width; col++) {
		for (int row = 0; row < height; row++) {
 40407dc:	e0bff917 	ldw	r2,-28(fp)
 40407e0:	10800044 	addi	r2,r2,1
 40407e4:	e0bff915 	stw	r2,-28(fp)
 40407e8:	e0fff917 	ldw	r3,-28(fp)
 40407ec:	e0bffb17 	ldw	r2,-20(fp)
 40407f0:	18bfd616 	blt	r3,r2,404074c <__flash_rwdata_start+0xfffe601c>
 * ------------------------- */
void imageToBuffer(int* imgPtr, int horizStart, int vertStart) {
	int width = IMG_WIDTH/2;
	int height = IMG_HEIGHT/2;
	int position;
	for (int col = 0; col < width; col++) {
 40407f4:	e0bff817 	ldw	r2,-32(fp)
 40407f8:	10800044 	addi	r2,r2,1
 40407fc:	e0bff815 	stw	r2,-32(fp)
 4040800:	e0fff817 	ldw	r3,-32(fp)
 4040804:	e0bffa17 	ldw	r2,-24(fp)
 4040808:	18bfce16 	blt	r3,r2,4040744 <__flash_rwdata_start+0xfffe6014>
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,1);
			IOWR_32DIRECT(PB_DATA_BASE,0,*(imgPtr+2+col+row*80));
			IOWR_32DIRECT(PBUFF_WREN_BASE,0,0);
		}
	}
}
 404080c:	0001883a 	nop
 4040810:	e037883a 	mov	sp,fp
 4040814:	df000017 	ldw	fp,0(sp)
 4040818:	dec00104 	addi	sp,sp,4
 404081c:	f800283a 	ret

04040820 <displayDigit>:
// Function to display a digit on a hex dislay
void displayDigit (int hexBayBase, int digitOffset, int digit) {
 4040820:	defffa04 	addi	sp,sp,-24
 4040824:	df000515 	stw	fp,20(sp)
 4040828:	df000504 	addi	fp,sp,20
 404082c:	e13ffd15 	stw	r4,-12(fp)
 4040830:	e17ffe15 	stw	r5,-8(fp)
 4040834:	e1bfff15 	stw	r6,-4(fp)
	int data =  IORD(hexBayBase, 0) & (0xffff00ffff >> (2-digitOffset)*8);
 4040838:	e13ffd17 	ldw	r4,-12(fp)
 404083c:	21800037 	ldwio	r6,0(r4)
 4040840:	01400084 	movi	r5,2
 4040844:	e13ffe17 	ldw	r4,-8(fp)
 4040848:	2909c83a 	sub	r4,r5,r4
 404084c:	200890fa 	slli	r4,r4,3
 4040850:	217ff804 	addi	r5,r4,-32
 4040854:	28000416 	blt	r5,zero,4040868 <displayDigit+0x48>
 4040858:	01003fc4 	movi	r4,255
 404085c:	2145d83a 	sra	r2,r4,r5
 4040860:	0007883a 	mov	r3,zero
 4040864:	00000b06 	br	4040894 <displayDigit+0x74>
 4040868:	01403fc4 	movi	r5,255
 404086c:	280e907a 	slli	r7,r5,1
 4040870:	014007c4 	movi	r5,31
 4040874:	290bc83a 	sub	r5,r5,r4
 4040878:	394e983a 	sll	r7,r7,r5
 404087c:	017fc074 	movhi	r5,65281
 4040880:	297fffc4 	addi	r5,r5,-1
 4040884:	2904d83a 	srl	r2,r5,r4
 4040888:	3884b03a 	or	r2,r7,r2
 404088c:	01403fc4 	movi	r5,255
 4040890:	2907d83a 	sra	r3,r5,r4
 4040894:	3084703a 	and	r2,r6,r2
 4040898:	e0bffc15 	stw	r2,-16(fp)
	int digitBits;
	switch (digit) {
 404089c:	e0bfff17 	ldw	r2,-4(fp)
 40408a0:	108002a8 	cmpgeui	r2,r2,10
 40408a4:	10002f1e 	bne	r2,zero,4040964 <displayDigit+0x144>
 40408a8:	e0bfff17 	ldw	r2,-4(fp)
 40408ac:	100690ba 	slli	r3,r2,2
 40408b0:	00810134 	movhi	r2,1028
 40408b4:	10823104 	addi	r2,r2,2244
 40408b8:	1885883a 	add	r2,r3,r2
 40408bc:	10800017 	ldw	r2,0(r2)
 40408c0:	1000683a 	jmp	r2
 40408c4:	040408ec 	andhi	r16,zero,4131
 40408c8:	040408f8 	rdprs	r16,zero,4131
 40408cc:	04040904 	movi	r16,4132
 40408d0:	04040910 	cmplti	r16,zero,4132
 40408d4:	0404091c 	xori	r16,zero,4132
 40408d8:	04040928 	cmpgeui	r16,zero,4132
 40408dc:	04040934 	movhi	r16,4132
 40408e0:	04040940 	call	404094 <OSCtxSw_SWITCH_PC+0x404054>
 40408e4:	0404094c 	andi	r16,zero,4133
 40408e8:	04040958 	cmpnei	r16,zero,4133
	case 0: digitBits = 0b11000000; break;
 40408ec:	00803004 	movi	r2,192
 40408f0:	e0bffb15 	stw	r2,-20(fp)
 40408f4:	00001b06 	br	4040964 <displayDigit+0x144>
	case 1: digitBits = 0b11111001; break;
 40408f8:	00803e44 	movi	r2,249
 40408fc:	e0bffb15 	stw	r2,-20(fp)
 4040900:	00001806 	br	4040964 <displayDigit+0x144>
	case 2: digitBits = 0b10100100; break;
 4040904:	00802904 	movi	r2,164
 4040908:	e0bffb15 	stw	r2,-20(fp)
 404090c:	00001506 	br	4040964 <displayDigit+0x144>
	case 3: digitBits = 0b10110000; break;
 4040910:	00802c04 	movi	r2,176
 4040914:	e0bffb15 	stw	r2,-20(fp)
 4040918:	00001206 	br	4040964 <displayDigit+0x144>
	case 4: digitBits = 0b10011001; break;
 404091c:	00802644 	movi	r2,153
 4040920:	e0bffb15 	stw	r2,-20(fp)
 4040924:	00000f06 	br	4040964 <displayDigit+0x144>
	case 5: digitBits = 0b10010010; break;
 4040928:	00802484 	movi	r2,146
 404092c:	e0bffb15 	stw	r2,-20(fp)
 4040930:	00000c06 	br	4040964 <displayDigit+0x144>
	case 6: digitBits = 0b10000010; break;
 4040934:	00802084 	movi	r2,130
 4040938:	e0bffb15 	stw	r2,-20(fp)
 404093c:	00000906 	br	4040964 <displayDigit+0x144>
	case 7: digitBits = 0b11111000; break;
 4040940:	00803e04 	movi	r2,248
 4040944:	e0bffb15 	stw	r2,-20(fp)
 4040948:	00000606 	br	4040964 <displayDigit+0x144>
	case 8: digitBits = 0b10000000; break;
 404094c:	00802004 	movi	r2,128
 4040950:	e0bffb15 	stw	r2,-20(fp)
 4040954:	00000306 	br	4040964 <displayDigit+0x144>
	case 9: digitBits = 0b10011000; break;
 4040958:	00802604 	movi	r2,152
 404095c:	e0bffb15 	stw	r2,-20(fp)
 4040960:	0001883a 	nop
	}
	data |= (digitBits << digitOffset*8);
 4040964:	e0bffe17 	ldw	r2,-8(fp)
 4040968:	100490fa 	slli	r2,r2,3
 404096c:	e0fffb17 	ldw	r3,-20(fp)
 4040970:	1884983a 	sll	r2,r3,r2
 4040974:	e0fffc17 	ldw	r3,-16(fp)
 4040978:	1884b03a 	or	r2,r3,r2
 404097c:	e0bffc15 	stw	r2,-16(fp)
	IOWR(hexBayBase, 0, data);
 4040980:	e0bffd17 	ldw	r2,-12(fp)
 4040984:	e0fffc17 	ldw	r3,-16(fp)
 4040988:	10c00035 	stwio	r3,0(r2)
}
 404098c:	0001883a 	nop
 4040990:	e037883a 	mov	sp,fp
 4040994:	df000017 	ldw	fp,0(sp)
 4040998:	dec00104 	addi	sp,sp,4
 404099c:	f800283a 	ret

040409a0 <conv>:
int conv(
		int* imgPatch,
		int* kernel,
		int dim, // Assume Kernel is Square this is the 1d dim
		int divisor
	){
 40409a0:	defff704 	addi	sp,sp,-36
 40409a4:	dfc00815 	stw	ra,32(sp)
 40409a8:	df000715 	stw	fp,28(sp)
 40409ac:	df000704 	addi	fp,sp,28
 40409b0:	e13ffc15 	stw	r4,-16(fp)
 40409b4:	e17ffd15 	stw	r5,-12(fp)
 40409b8:	e1bffe15 	stw	r6,-8(fp)
 40409bc:	e1ffff15 	stw	r7,-4(fp)
	int result = 0; // Must be signed in-case we use a negative kernel
 40409c0:	e03ff915 	stw	zero,-28(fp)
	// Get values from patch array using supplied
	// and multiply with respective
	// Kernel value (use two for loops)
	for (int col=0; col<dim;col++) {
 40409c4:	e03ffa15 	stw	zero,-24(fp)
 40409c8:	00002706 	br	4040a68 <conv+0xc8>
		for (int row=0; row<dim;row++) {
 40409cc:	e03ffb15 	stw	zero,-20(fp)
 40409d0:	00001f06 	br	4040a50 <conv+0xb0>
			// Add the result of the kernel and array multiplication to a running total
			result += (*(imgPatch+col+row*dim))*(*(kernel+col+row*dim));
 40409d4:	e0fffb17 	ldw	r3,-20(fp)
 40409d8:	e0bffe17 	ldw	r2,-8(fp)
 40409dc:	1885383a 	mul	r2,r3,r2
 40409e0:	1007883a 	mov	r3,r2
 40409e4:	e0bffa17 	ldw	r2,-24(fp)
 40409e8:	1885883a 	add	r2,r3,r2
 40409ec:	1085883a 	add	r2,r2,r2
 40409f0:	1085883a 	add	r2,r2,r2
 40409f4:	1007883a 	mov	r3,r2
 40409f8:	e0bffc17 	ldw	r2,-16(fp)
 40409fc:	10c5883a 	add	r2,r2,r3
 4040a00:	10c00017 	ldw	r3,0(r2)
 4040a04:	e13ffb17 	ldw	r4,-20(fp)
 4040a08:	e0bffe17 	ldw	r2,-8(fp)
 4040a0c:	2085383a 	mul	r2,r4,r2
 4040a10:	1009883a 	mov	r4,r2
 4040a14:	e0bffa17 	ldw	r2,-24(fp)
 4040a18:	2085883a 	add	r2,r4,r2
 4040a1c:	1085883a 	add	r2,r2,r2
 4040a20:	1085883a 	add	r2,r2,r2
 4040a24:	1009883a 	mov	r4,r2
 4040a28:	e0bffd17 	ldw	r2,-12(fp)
 4040a2c:	1105883a 	add	r2,r2,r4
 4040a30:	10800017 	ldw	r2,0(r2)
 4040a34:	1885383a 	mul	r2,r3,r2
 4040a38:	e0fff917 	ldw	r3,-28(fp)
 4040a3c:	1885883a 	add	r2,r3,r2
 4040a40:	e0bff915 	stw	r2,-28(fp)
	int result = 0; // Must be signed in-case we use a negative kernel
	// Get values from patch array using supplied
	// and multiply with respective
	// Kernel value (use two for loops)
	for (int col=0; col<dim;col++) {
		for (int row=0; row<dim;row++) {
 4040a44:	e0bffb17 	ldw	r2,-20(fp)
 4040a48:	10800044 	addi	r2,r2,1
 4040a4c:	e0bffb15 	stw	r2,-20(fp)
 4040a50:	e0fffb17 	ldw	r3,-20(fp)
 4040a54:	e0bffe17 	ldw	r2,-8(fp)
 4040a58:	18bfde16 	blt	r3,r2,40409d4 <__flash_rwdata_start+0xfffe62a4>
	){
	int result = 0; // Must be signed in-case we use a negative kernel
	// Get values from patch array using supplied
	// and multiply with respective
	// Kernel value (use two for loops)
	for (int col=0; col<dim;col++) {
 4040a5c:	e0bffa17 	ldw	r2,-24(fp)
 4040a60:	10800044 	addi	r2,r2,1
 4040a64:	e0bffa15 	stw	r2,-24(fp)
 4040a68:	e0fffa17 	ldw	r3,-24(fp)
 4040a6c:	e0bffe17 	ldw	r2,-8(fp)
 4040a70:	18bfd616 	blt	r3,r2,40409cc <__flash_rwdata_start+0xfffe629c>
			result += (*(imgPatch+col+row*dim))*(*(kernel+col+row*dim));
		}
	}

	// Divide result by divisor if necessary
	if (divisor > 1) result /= divisor;
 4040a74:	e0bfff17 	ldw	r2,-4(fp)
 4040a78:	10800090 	cmplti	r2,r2,2
 4040a7c:	1000041e 	bne	r2,zero,4040a90 <conv+0xf0>
 4040a80:	e17fff17 	ldw	r5,-4(fp)
 4040a84:	e13ff917 	ldw	r4,-28(fp)
 4040a88:	4042eb80 	call	4042eb8 <__divsi3>
 4040a8c:	e0bff915 	stw	r2,-28(fp)
	return result;
 4040a90:	e0bff917 	ldw	r2,-28(fp)
}
 4040a94:	e037883a 	mov	sp,fp
 4040a98:	dfc00117 	ldw	ra,4(sp)
 4040a9c:	df000017 	ldw	fp,0(sp)
 4040aa0:	dec00204 	addi	sp,sp,8
 4040aa4:	f800283a 	ret

04040aa8 <downscaleImg2x>:

// [COLS,ROWS,IMGDATA...,IMGDATA...,...]

int* downscaleImg2x(int* imageArray, int cols, int rows, int padding) {
 4040aa8:	deffec04 	addi	sp,sp,-80
 4040aac:	dfc01315 	stw	ra,76(sp)
 4040ab0:	df001215 	stw	fp,72(sp)
 4040ab4:	df001204 	addi	fp,sp,72
 4040ab8:	e13ffc15 	stw	r4,-16(fp)
 4040abc:	e17ffd15 	stw	r5,-12(fp)
 4040ac0:	e1bffe15 	stw	r6,-8(fp)
 4040ac4:	e1ffff15 	stw	r7,-4(fp)
	// This requests a new block of memory to put our down-scaled image
	// Free this afterwards or we will have a memory leak!
	int outputCols = cols/2;
 4040ac8:	e0bffd17 	ldw	r2,-12(fp)
 4040acc:	1006d7fa 	srli	r3,r2,31
 4040ad0:	1885883a 	add	r2,r3,r2
 4040ad4:	1005d07a 	srai	r2,r2,1
 4040ad8:	e0bff115 	stw	r2,-60(fp)
	int outputRows = rows/2;
 4040adc:	e0bffe17 	ldw	r2,-8(fp)
 4040ae0:	1006d7fa 	srli	r3,r2,31
 4040ae4:	1885883a 	add	r2,r3,r2
 4040ae8:	1005d07a 	srai	r2,r2,1
 4040aec:	e0bff215 	stw	r2,-56(fp)

	int* output = (int*)malloc((outputCols*outputRows+2)*sizeof(int));
 4040af0:	e0fff117 	ldw	r3,-60(fp)
 4040af4:	e0bff217 	ldw	r2,-56(fp)
 4040af8:	1885383a 	mul	r2,r3,r2
 4040afc:	10800084 	addi	r2,r2,2
 4040b00:	1085883a 	add	r2,r2,r2
 4040b04:	1085883a 	add	r2,r2,r2
 4040b08:	1009883a 	mov	r4,r2
 4040b0c:	404306c0 	call	404306c <malloc>
 4040b10:	e0bff315 	stw	r2,-52(fp)
	*(output) = outputCols;
 4040b14:	e0bff317 	ldw	r2,-52(fp)
 4040b18:	e0fff117 	ldw	r3,-60(fp)
 4040b1c:	10c00015 	stw	r3,0(r2)
	*(output+1) = outputRows;
 4040b20:	e0bff317 	ldw	r2,-52(fp)
 4040b24:	10800104 	addi	r2,r2,4
 4040b28:	e0fff217 	ldw	r3,-56(fp)
 4040b2c:	10c00015 	stw	r3,0(r2)
	// Iterate through each row/column and get the relevant pixel, perform the conv
	int patch[4];
	int offset[2];

	int bytesToCopy = sizeof(int)*2;
 4040b30:	00800204 	movi	r2,8
 4040b34:	e0bff415 	stw	r2,-48(fp)
	int writeIndex = 0;
 4040b38:	e03fee15 	stw	zero,-72(fp)
	int temp;
	for (int row = 0; row < rows-1; row+=2){
 4040b3c:	e03fef15 	stw	zero,-68(fp)
 4040b40:	00004d06 	br	4040c78 <downscaleImg2x+0x1d0>
		for (int col = 0; col < cols-1; col+=2){
 4040b44:	e03ff015 	stw	zero,-64(fp)
 4040b48:	00004406 	br	4040c5c <downscaleImg2x+0x1b4>
			offset[0] = col+row*cols; 		// Calculate pixel offset row1
 4040b4c:	e0ffef17 	ldw	r3,-68(fp)
 4040b50:	e0bffd17 	ldw	r2,-12(fp)
 4040b54:	1887383a 	mul	r3,r3,r2
 4040b58:	e0bff017 	ldw	r2,-64(fp)
 4040b5c:	1885883a 	add	r2,r3,r2
 4040b60:	e0bffa15 	stw	r2,-24(fp)
			offset[1] = col+(row+1)*cols;	// Calculate pixel offset row2
 4040b64:	e0bfef17 	ldw	r2,-68(fp)
 4040b68:	10c00044 	addi	r3,r2,1
 4040b6c:	e0bffd17 	ldw	r2,-12(fp)
 4040b70:	1887383a 	mul	r3,r3,r2
 4040b74:	e0bff017 	ldw	r2,-64(fp)
 4040b78:	1885883a 	add	r2,r3,r2
 4040b7c:	e0bffb15 	stw	r2,-20(fp)
			memcpy(patch,imageArray+padding+offset[0],bytesToCopy); // Copy first row to patch
 4040b80:	e0bffa17 	ldw	r2,-24(fp)
 4040b84:	1007883a 	mov	r3,r2
 4040b88:	e0bfff17 	ldw	r2,-4(fp)
 4040b8c:	1885883a 	add	r2,r3,r2
 4040b90:	1085883a 	add	r2,r2,r2
 4040b94:	1085883a 	add	r2,r2,r2
 4040b98:	1007883a 	mov	r3,r2
 4040b9c:	e0bffc17 	ldw	r2,-16(fp)
 4040ba0:	10c7883a 	add	r3,r2,r3
 4040ba4:	e13ff417 	ldw	r4,-48(fp)
 4040ba8:	e0bff604 	addi	r2,fp,-40
 4040bac:	200d883a 	mov	r6,r4
 4040bb0:	180b883a 	mov	r5,r3
 4040bb4:	1009883a 	mov	r4,r2
 4040bb8:	40438a00 	call	40438a0 <memcpy>
			memcpy(patch+2,imageArray+padding+offset[1],bytesToCopy); // Copy second row to patch
 4040bbc:	e0bff604 	addi	r2,fp,-40
 4040bc0:	10800204 	addi	r2,r2,8
 4040bc4:	e0fffb17 	ldw	r3,-20(fp)
 4040bc8:	1809883a 	mov	r4,r3
 4040bcc:	e0ffff17 	ldw	r3,-4(fp)
 4040bd0:	20c7883a 	add	r3,r4,r3
 4040bd4:	18c7883a 	add	r3,r3,r3
 4040bd8:	18c7883a 	add	r3,r3,r3
 4040bdc:	1809883a 	mov	r4,r3
 4040be0:	e0fffc17 	ldw	r3,-16(fp)
 4040be4:	1907883a 	add	r3,r3,r4
 4040be8:	e13ff417 	ldw	r4,-48(fp)
 4040bec:	200d883a 	mov	r6,r4
 4040bf0:	180b883a 	mov	r5,r3
 4040bf4:	1009883a 	mov	r4,r2
 4040bf8:	40438a00 	call	40438a0 <memcpy>
			temp = conv(patch,kernDownscale2x,2,0); // Calculate convolution
 4040bfc:	e0bff604 	addi	r2,fp,-40
 4040c00:	000f883a 	mov	r7,zero
 4040c04:	01800084 	movi	r6,2
 4040c08:	01408034 	movhi	r5,512
 4040c0c:	29419904 	addi	r5,r5,1636
 4040c10:	1009883a 	mov	r4,r2
 4040c14:	40409a00 	call	40409a0 <conv>
 4040c18:	e0bff515 	stw	r2,-44(fp)
			*(output+2+writeIndex) = temp >> 2;
 4040c1c:	e0bfee17 	ldw	r2,-72(fp)
 4040c20:	10800084 	addi	r2,r2,2
 4040c24:	1085883a 	add	r2,r2,r2
 4040c28:	1085883a 	add	r2,r2,r2
 4040c2c:	1007883a 	mov	r3,r2
 4040c30:	e0bff317 	ldw	r2,-52(fp)
 4040c34:	10c5883a 	add	r2,r2,r3
 4040c38:	e0fff517 	ldw	r3,-44(fp)
 4040c3c:	1807d0ba 	srai	r3,r3,2
 4040c40:	10c00015 	stw	r3,0(r2)
			writeIndex++;
 4040c44:	e0bfee17 	ldw	r2,-72(fp)
 4040c48:	10800044 	addi	r2,r2,1
 4040c4c:	e0bfee15 	stw	r2,-72(fp)

	int bytesToCopy = sizeof(int)*2;
	int writeIndex = 0;
	int temp;
	for (int row = 0; row < rows-1; row+=2){
		for (int col = 0; col < cols-1; col+=2){
 4040c50:	e0bff017 	ldw	r2,-64(fp)
 4040c54:	10800084 	addi	r2,r2,2
 4040c58:	e0bff015 	stw	r2,-64(fp)
 4040c5c:	e0bffd17 	ldw	r2,-12(fp)
 4040c60:	10bfffc4 	addi	r2,r2,-1
 4040c64:	e0fff017 	ldw	r3,-64(fp)
 4040c68:	18bfb816 	blt	r3,r2,4040b4c <__flash_rwdata_start+0xfffe641c>
	int offset[2];

	int bytesToCopy = sizeof(int)*2;
	int writeIndex = 0;
	int temp;
	for (int row = 0; row < rows-1; row+=2){
 4040c6c:	e0bfef17 	ldw	r2,-68(fp)
 4040c70:	10800084 	addi	r2,r2,2
 4040c74:	e0bfef15 	stw	r2,-68(fp)
 4040c78:	e0bffe17 	ldw	r2,-8(fp)
 4040c7c:	10bfffc4 	addi	r2,r2,-1
 4040c80:	e0ffef17 	ldw	r3,-68(fp)
 4040c84:	18bfaf16 	blt	r3,r2,4040b44 <__flash_rwdata_start+0xfffe6414>
			*(output+2+writeIndex) = temp >> 2;
			writeIndex++;
		}
	}
	// Return the memory location with the downscaled image
	return output;
 4040c88:	e0bff317 	ldw	r2,-52(fp)
}
 4040c8c:	e037883a 	mov	sp,fp
 4040c90:	dfc00117 	ldw	ra,4(sp)
 4040c94:	df000017 	ldw	fp,0(sp)
 4040c98:	dec00204 	addi	sp,sp,8
 4040c9c:	f800283a 	ret

04040ca0 <edgeDetectionConv>:

int* edgeDetectionConv(int* imageArray, int cols, int rows, int direction) {
 4040ca0:	deffe704 	addi	sp,sp,-100
 4040ca4:	dfc01815 	stw	ra,96(sp)
 4040ca8:	df001715 	stw	fp,92(sp)
 4040cac:	dc001615 	stw	r16,88(sp)
 4040cb0:	df001704 	addi	fp,sp,92
 4040cb4:	e13ffb15 	stw	r4,-20(fp)
 4040cb8:	e17ffc15 	stw	r5,-16(fp)
 4040cbc:	e1bffd15 	stw	r6,-12(fp)
 4040cc0:	e1fffe15 	stw	r7,-8(fp)
	// This requests a new block of memory to put our image
	// Free this afterwards or we will have a memory leak!
	int* output = (int*)malloc(((cols)*(rows)+2)*sizeof(int));
 4040cc4:	e0fffc17 	ldw	r3,-16(fp)
 4040cc8:	e0bffd17 	ldw	r2,-12(fp)
 4040ccc:	1885383a 	mul	r2,r3,r2
 4040cd0:	10800084 	addi	r2,r2,2
 4040cd4:	1085883a 	add	r2,r2,r2
 4040cd8:	1085883a 	add	r2,r2,r2
 4040cdc:	1009883a 	mov	r4,r2
 4040ce0:	404306c0 	call	404306c <malloc>
 4040ce4:	e0bfec15 	stw	r2,-80(fp)
	*(output) = cols;
 4040ce8:	e0bfec17 	ldw	r2,-80(fp)
 4040cec:	e0fffc17 	ldw	r3,-16(fp)
 4040cf0:	10c00015 	stw	r3,0(r2)
	*(output+1) = rows;
 4040cf4:	e0bfec17 	ldw	r2,-80(fp)
 4040cf8:	10800104 	addi	r2,r2,4
 4040cfc:	e0fffd17 	ldw	r3,-12(fp)
 4040d00:	10c00015 	stw	r3,0(r2)
	// Iterate through each row/column and get the relevant pixel, perform the conv
	int patch[9];
	int offset[3];
	int* kernel = direction == 0 ? kernEdgeDetectH : kernEdgeDetectV;
 4040d04:	e0bffe17 	ldw	r2,-8(fp)
 4040d08:	1000031e 	bne	r2,zero,4040d18 <edgeDetectionConv+0x78>
 4040d0c:	00808034 	movhi	r2,512
 4040d10:	10819d04 	addi	r2,r2,1652
 4040d14:	00000206 	br	4040d20 <edgeDetectionConv+0x80>
 4040d18:	00808034 	movhi	r2,512
 4040d1c:	1081a604 	addi	r2,r2,1688
 4040d20:	e0bfed15 	stw	r2,-76(fp)

	int bytesToCopy = sizeof(int)*3;
 4040d24:	00800304 	movi	r2,12
 4040d28:	e0bfee15 	stw	r2,-72(fp)
	int writeIndex = 0;
 4040d2c:	e03fe915 	stw	zero,-92(fp)
	for (int row = -1; row < rows-1; row++){
 4040d30:	00bfffc4 	movi	r2,-1
 4040d34:	e0bfea15 	stw	r2,-88(fp)
 4040d38:	00007206 	br	4040f04 <edgeDetectionConv+0x264>
		for (int col = -1; col < cols-1; col++){
 4040d3c:	00bfffc4 	movi	r2,-1
 4040d40:	e0bfeb15 	stw	r2,-84(fp)
 4040d44:	00006806 	br	4040ee8 <edgeDetectionConv+0x248>
			if ((row == -1) || (row == rows-2) || (col == -1) || (col == cols-2)) {
 4040d48:	e0bfea17 	ldw	r2,-88(fp)
 4040d4c:	10bfffe0 	cmpeqi	r2,r2,-1
 4040d50:	10000b1e 	bne	r2,zero,4040d80 <edgeDetectionConv+0xe0>
 4040d54:	e0bffd17 	ldw	r2,-12(fp)
 4040d58:	10ffff84 	addi	r3,r2,-2
 4040d5c:	e0bfea17 	ldw	r2,-88(fp)
 4040d60:	18800726 	beq	r3,r2,4040d80 <edgeDetectionConv+0xe0>
 4040d64:	e0bfeb17 	ldw	r2,-84(fp)
 4040d68:	10bfffe0 	cmpeqi	r2,r2,-1
 4040d6c:	1000041e 	bne	r2,zero,4040d80 <edgeDetectionConv+0xe0>
 4040d70:	e0bffc17 	ldw	r2,-16(fp)
 4040d74:	10ffff84 	addi	r3,r2,-2
 4040d78:	e0bfeb17 	ldw	r2,-84(fp)
 4040d7c:	18800c1e 	bne	r3,r2,4040db0 <edgeDetectionConv+0x110>
				// Skip This loop for padding
				*(output+2+writeIndex) = 0;
 4040d80:	e0bfe917 	ldw	r2,-92(fp)
 4040d84:	10800084 	addi	r2,r2,2
 4040d88:	1085883a 	add	r2,r2,r2
 4040d8c:	1085883a 	add	r2,r2,r2
 4040d90:	1007883a 	mov	r3,r2
 4040d94:	e0bfec17 	ldw	r2,-80(fp)
 4040d98:	10c5883a 	add	r2,r2,r3
 4040d9c:	10000015 	stw	zero,0(r2)
				writeIndex++;
 4040da0:	e0bfe917 	ldw	r2,-92(fp)
 4040da4:	10800044 	addi	r2,r2,1
 4040da8:	e0bfe915 	stw	r2,-92(fp)
				continue;
 4040dac:	00004b06 	br	4040edc <edgeDetectionConv+0x23c>
			}
			offset[0] = col+row*cols; 		// Calculate pixel offset row1
 4040db0:	e0ffea17 	ldw	r3,-88(fp)
 4040db4:	e0bffc17 	ldw	r2,-16(fp)
 4040db8:	1887383a 	mul	r3,r3,r2
 4040dbc:	e0bfeb17 	ldw	r2,-84(fp)
 4040dc0:	1885883a 	add	r2,r3,r2
 4040dc4:	e0bff815 	stw	r2,-32(fp)
			offset[1] = col+(row+1)*cols;	// Calculate pixel offset row2
 4040dc8:	e0bfea17 	ldw	r2,-88(fp)
 4040dcc:	10c00044 	addi	r3,r2,1
 4040dd0:	e0bffc17 	ldw	r2,-16(fp)
 4040dd4:	1887383a 	mul	r3,r3,r2
 4040dd8:	e0bfeb17 	ldw	r2,-84(fp)
 4040ddc:	1885883a 	add	r2,r3,r2
 4040de0:	e0bff915 	stw	r2,-28(fp)
			offset[2] = col+(row+2)*cols;	// Calculate pixel offset row3
 4040de4:	e0bfea17 	ldw	r2,-88(fp)
 4040de8:	10c00084 	addi	r3,r2,2
 4040dec:	e0bffc17 	ldw	r2,-16(fp)
 4040df0:	1887383a 	mul	r3,r3,r2
 4040df4:	e0bfeb17 	ldw	r2,-84(fp)
 4040df8:	1885883a 	add	r2,r3,r2
 4040dfc:	e0bffa15 	stw	r2,-24(fp)
			memcpy(patch,imageArray+offset[0],bytesToCopy); // Copy first row to patch
 4040e00:	e0bff817 	ldw	r2,-32(fp)
 4040e04:	1085883a 	add	r2,r2,r2
 4040e08:	1085883a 	add	r2,r2,r2
 4040e0c:	1007883a 	mov	r3,r2
 4040e10:	e0bffb17 	ldw	r2,-20(fp)
 4040e14:	10c7883a 	add	r3,r2,r3
 4040e18:	e13fee17 	ldw	r4,-72(fp)
 4040e1c:	e0bfef04 	addi	r2,fp,-68
 4040e20:	200d883a 	mov	r6,r4
 4040e24:	180b883a 	mov	r5,r3
 4040e28:	1009883a 	mov	r4,r2
 4040e2c:	40438a00 	call	40438a0 <memcpy>
			memcpy(patch+3,imageArray+offset[1],bytesToCopy); // Copy second row to patch
 4040e30:	e0bfef04 	addi	r2,fp,-68
 4040e34:	10800304 	addi	r2,r2,12
 4040e38:	e0fff917 	ldw	r3,-28(fp)
 4040e3c:	18c7883a 	add	r3,r3,r3
 4040e40:	18c7883a 	add	r3,r3,r3
 4040e44:	1809883a 	mov	r4,r3
 4040e48:	e0fffb17 	ldw	r3,-20(fp)
 4040e4c:	1907883a 	add	r3,r3,r4
 4040e50:	e13fee17 	ldw	r4,-72(fp)
 4040e54:	200d883a 	mov	r6,r4
 4040e58:	180b883a 	mov	r5,r3
 4040e5c:	1009883a 	mov	r4,r2
 4040e60:	40438a00 	call	40438a0 <memcpy>
			memcpy(patch+6,imageArray+offset[2],bytesToCopy); // Copy second row to patch
 4040e64:	e0bfef04 	addi	r2,fp,-68
 4040e68:	10800604 	addi	r2,r2,24
 4040e6c:	e0fffa17 	ldw	r3,-24(fp)
 4040e70:	18c7883a 	add	r3,r3,r3
 4040e74:	18c7883a 	add	r3,r3,r3
 4040e78:	1809883a 	mov	r4,r3
 4040e7c:	e0fffb17 	ldw	r3,-20(fp)
 4040e80:	1907883a 	add	r3,r3,r4
 4040e84:	e13fee17 	ldw	r4,-72(fp)
 4040e88:	200d883a 	mov	r6,r4
 4040e8c:	180b883a 	mov	r5,r3
 4040e90:	1009883a 	mov	r4,r2
 4040e94:	40438a00 	call	40438a0 <memcpy>
			*(output+2+writeIndex) = conv(patch,kernel,3,1); // Calculate convolution
 4040e98:	e0bfe917 	ldw	r2,-92(fp)
 4040e9c:	10800084 	addi	r2,r2,2
 4040ea0:	1085883a 	add	r2,r2,r2
 4040ea4:	1085883a 	add	r2,r2,r2
 4040ea8:	1007883a 	mov	r3,r2
 4040eac:	e0bfec17 	ldw	r2,-80(fp)
 4040eb0:	10e1883a 	add	r16,r2,r3
 4040eb4:	e0bfef04 	addi	r2,fp,-68
 4040eb8:	01c00044 	movi	r7,1
 4040ebc:	018000c4 	movi	r6,3
 4040ec0:	e17fed17 	ldw	r5,-76(fp)
 4040ec4:	1009883a 	mov	r4,r2
 4040ec8:	40409a00 	call	40409a0 <conv>
 4040ecc:	80800015 	stw	r2,0(r16)
			writeIndex++;
 4040ed0:	e0bfe917 	ldw	r2,-92(fp)
 4040ed4:	10800044 	addi	r2,r2,1
 4040ed8:	e0bfe915 	stw	r2,-92(fp)
	int* kernel = direction == 0 ? kernEdgeDetectH : kernEdgeDetectV;

	int bytesToCopy = sizeof(int)*3;
	int writeIndex = 0;
	for (int row = -1; row < rows-1; row++){
		for (int col = -1; col < cols-1; col++){
 4040edc:	e0bfeb17 	ldw	r2,-84(fp)
 4040ee0:	10800044 	addi	r2,r2,1
 4040ee4:	e0bfeb15 	stw	r2,-84(fp)
 4040ee8:	e0bffc17 	ldw	r2,-16(fp)
 4040eec:	10bfffc4 	addi	r2,r2,-1
 4040ef0:	e0ffeb17 	ldw	r3,-84(fp)
 4040ef4:	18bf9416 	blt	r3,r2,4040d48 <__flash_rwdata_start+0xfffe6618>
	int offset[3];
	int* kernel = direction == 0 ? kernEdgeDetectH : kernEdgeDetectV;

	int bytesToCopy = sizeof(int)*3;
	int writeIndex = 0;
	for (int row = -1; row < rows-1; row++){
 4040ef8:	e0bfea17 	ldw	r2,-88(fp)
 4040efc:	10800044 	addi	r2,r2,1
 4040f00:	e0bfea15 	stw	r2,-88(fp)
 4040f04:	e0bffd17 	ldw	r2,-12(fp)
 4040f08:	10bfffc4 	addi	r2,r2,-1
 4040f0c:	e0ffea17 	ldw	r3,-88(fp)
 4040f10:	18bf8a16 	blt	r3,r2,4040d3c <__flash_rwdata_start+0xfffe660c>
			*(output+2+writeIndex) = conv(patch,kernel,3,1); // Calculate convolution
			writeIndex++;
		}
	}
	// Return the memory location with the downscaled image
	return output;
 4040f14:	e0bfec17 	ldw	r2,-80(fp)
}
 4040f18:	e6ffff04 	addi	sp,fp,-4
 4040f1c:	dfc00217 	ldw	ra,8(sp)
 4040f20:	df000117 	ldw	fp,4(sp)
 4040f24:	dc000017 	ldw	r16,0(sp)
 4040f28:	dec00304 	addi	sp,sp,12
 4040f2c:	f800283a 	ret

04040f30 <processEdgeDetection>:

int* processEdgeDetection(int* conv1, int* conv2, int numPixels) {
 4040f30:	defff604 	addi	sp,sp,-40
 4040f34:	dfc00915 	stw	ra,36(sp)
 4040f38:	df000815 	stw	fp,32(sp)
 4040f3c:	df000804 	addi	fp,sp,32
 4040f40:	e13ffd15 	stw	r4,-12(fp)
 4040f44:	e17ffe15 	stw	r5,-8(fp)
 4040f48:	e1bfff15 	stw	r6,-4(fp)
	// Allocate memory for reversed image
	int* output = (int*)malloc((numPixels+2)*sizeof(int));
 4040f4c:	e0bfff17 	ldw	r2,-4(fp)
 4040f50:	10800084 	addi	r2,r2,2
 4040f54:	1085883a 	add	r2,r2,r2
 4040f58:	1085883a 	add	r2,r2,r2
 4040f5c:	1009883a 	mov	r4,r2
 4040f60:	404306c0 	call	404306c <malloc>
 4040f64:	e0bffc15 	stw	r2,-16(fp)
	*output = *conv1;
 4040f68:	e0bffd17 	ldw	r2,-12(fp)
 4040f6c:	10c00017 	ldw	r3,0(r2)
 4040f70:	e0bffc17 	ldw	r2,-16(fp)
 4040f74:	10c00015 	stw	r3,0(r2)
	*(output+1) = *(conv1+1);
 4040f78:	e0bffc17 	ldw	r2,-16(fp)
 4040f7c:	10800104 	addi	r2,r2,4
 4040f80:	e0fffd17 	ldw	r3,-12(fp)
 4040f84:	18c00117 	ldw	r3,4(r3)
 4040f88:	10c00015 	stw	r3,0(r2)
	int maxValue = 0;
 4040f8c:	e03ff815 	stw	zero,-32(fp)

	// Perform different operations based on if we supply both edge detections
	if (conv2 != NULL) {
 4040f90:	e0bffe17 	ldw	r2,-8(fp)
 4040f94:	10003626 	beq	r2,zero,4041070 <processEdgeDetection+0x140>
		// Sum and ABS
		for (int pixel = 0; pixel<numPixels; pixel++) {
 4040f98:	e03ff915 	stw	zero,-28(fp)
 4040f9c:	00003006 	br	4041060 <processEdgeDetection+0x130>
			*(output+2+pixel) = abs((*(conv1+2+pixel))+(*(conv2+2+pixel)));
 4040fa0:	e0bff917 	ldw	r2,-28(fp)
 4040fa4:	10800084 	addi	r2,r2,2
 4040fa8:	1085883a 	add	r2,r2,r2
 4040fac:	1085883a 	add	r2,r2,r2
 4040fb0:	1007883a 	mov	r3,r2
 4040fb4:	e0bffc17 	ldw	r2,-16(fp)
 4040fb8:	10c7883a 	add	r3,r2,r3
 4040fbc:	e0bff917 	ldw	r2,-28(fp)
 4040fc0:	10800084 	addi	r2,r2,2
 4040fc4:	1085883a 	add	r2,r2,r2
 4040fc8:	1085883a 	add	r2,r2,r2
 4040fcc:	1009883a 	mov	r4,r2
 4040fd0:	e0bffd17 	ldw	r2,-12(fp)
 4040fd4:	1105883a 	add	r2,r2,r4
 4040fd8:	11000017 	ldw	r4,0(r2)
 4040fdc:	e0bff917 	ldw	r2,-28(fp)
 4040fe0:	10800084 	addi	r2,r2,2
 4040fe4:	1085883a 	add	r2,r2,r2
 4040fe8:	1085883a 	add	r2,r2,r2
 4040fec:	100b883a 	mov	r5,r2
 4040ff0:	e0bffe17 	ldw	r2,-8(fp)
 4040ff4:	1145883a 	add	r2,r2,r5
 4040ff8:	10800017 	ldw	r2,0(r2)
 4040ffc:	2085883a 	add	r2,r4,r2
 4041000:	1000010e 	bge	r2,zero,4041008 <processEdgeDetection+0xd8>
 4041004:	0085c83a 	sub	r2,zero,r2
 4041008:	18800015 	stw	r2,0(r3)
			if (*(output+2+pixel) > maxValue) maxValue = *(output+pixel);
 404100c:	e0bff917 	ldw	r2,-28(fp)
 4041010:	10800084 	addi	r2,r2,2
 4041014:	1085883a 	add	r2,r2,r2
 4041018:	1085883a 	add	r2,r2,r2
 404101c:	1007883a 	mov	r3,r2
 4041020:	e0bffc17 	ldw	r2,-16(fp)
 4041024:	10c5883a 	add	r2,r2,r3
 4041028:	10800017 	ldw	r2,0(r2)
 404102c:	e0fff817 	ldw	r3,-32(fp)
 4041030:	1880080e 	bge	r3,r2,4041054 <processEdgeDetection+0x124>
 4041034:	e0bff917 	ldw	r2,-28(fp)
 4041038:	1085883a 	add	r2,r2,r2
 404103c:	1085883a 	add	r2,r2,r2
 4041040:	1007883a 	mov	r3,r2
 4041044:	e0bffc17 	ldw	r2,-16(fp)
 4041048:	10c5883a 	add	r2,r2,r3
 404104c:	10800017 	ldw	r2,0(r2)
 4041050:	e0bff815 	stw	r2,-32(fp)
	int maxValue = 0;

	// Perform different operations based on if we supply both edge detections
	if (conv2 != NULL) {
		// Sum and ABS
		for (int pixel = 0; pixel<numPixels; pixel++) {
 4041054:	e0bff917 	ldw	r2,-28(fp)
 4041058:	10800044 	addi	r2,r2,1
 404105c:	e0bff915 	stw	r2,-28(fp)
 4041060:	e0fff917 	ldw	r3,-28(fp)
 4041064:	e0bfff17 	ldw	r2,-4(fp)
 4041068:	18bfcd16 	blt	r3,r2,4040fa0 <__flash_rwdata_start+0xfffe6870>
 404106c:	00002d06 	br	4041124 <processEdgeDetection+0x1f4>
			*(output+2+pixel) = abs((*(conv1+2+pixel))+(*(conv2+2+pixel)));
			if (*(output+2+pixel) > maxValue) maxValue = *(output+pixel);
		}
	} else {
		// ABS
		for (int pixel = 0; pixel<numPixels; pixel++) {
 4041070:	e03ffa15 	stw	zero,-24(fp)
 4041074:	00002806 	br	4041118 <processEdgeDetection+0x1e8>
			*(output+2+pixel) = abs(*(conv1+2+pixel));
 4041078:	e0bffa17 	ldw	r2,-24(fp)
 404107c:	10800084 	addi	r2,r2,2
 4041080:	1085883a 	add	r2,r2,r2
 4041084:	1085883a 	add	r2,r2,r2
 4041088:	1007883a 	mov	r3,r2
 404108c:	e0bffc17 	ldw	r2,-16(fp)
 4041090:	10c7883a 	add	r3,r2,r3
 4041094:	e0bffa17 	ldw	r2,-24(fp)
 4041098:	10800084 	addi	r2,r2,2
 404109c:	1085883a 	add	r2,r2,r2
 40410a0:	1085883a 	add	r2,r2,r2
 40410a4:	1009883a 	mov	r4,r2
 40410a8:	e0bffd17 	ldw	r2,-12(fp)
 40410ac:	1105883a 	add	r2,r2,r4
 40410b0:	10800017 	ldw	r2,0(r2)
 40410b4:	1000010e 	bge	r2,zero,40410bc <processEdgeDetection+0x18c>
 40410b8:	0085c83a 	sub	r2,zero,r2
 40410bc:	18800015 	stw	r2,0(r3)
			if (*(output+2+pixel) > maxValue) maxValue = *(output+2+pixel);
 40410c0:	e0bffa17 	ldw	r2,-24(fp)
 40410c4:	10800084 	addi	r2,r2,2
 40410c8:	1085883a 	add	r2,r2,r2
 40410cc:	1085883a 	add	r2,r2,r2
 40410d0:	1007883a 	mov	r3,r2
 40410d4:	e0bffc17 	ldw	r2,-16(fp)
 40410d8:	10c5883a 	add	r2,r2,r3
 40410dc:	10800017 	ldw	r2,0(r2)
 40410e0:	e0fff817 	ldw	r3,-32(fp)
 40410e4:	1880090e 	bge	r3,r2,404110c <processEdgeDetection+0x1dc>
 40410e8:	e0bffa17 	ldw	r2,-24(fp)
 40410ec:	10800084 	addi	r2,r2,2
 40410f0:	1085883a 	add	r2,r2,r2
 40410f4:	1085883a 	add	r2,r2,r2
 40410f8:	1007883a 	mov	r3,r2
 40410fc:	e0bffc17 	ldw	r2,-16(fp)
 4041100:	10c5883a 	add	r2,r2,r3
 4041104:	10800017 	ldw	r2,0(r2)
 4041108:	e0bff815 	stw	r2,-32(fp)
			*(output+2+pixel) = abs((*(conv1+2+pixel))+(*(conv2+2+pixel)));
			if (*(output+2+pixel) > maxValue) maxValue = *(output+pixel);
		}
	} else {
		// ABS
		for (int pixel = 0; pixel<numPixels; pixel++) {
 404110c:	e0bffa17 	ldw	r2,-24(fp)
 4041110:	10800044 	addi	r2,r2,1
 4041114:	e0bffa15 	stw	r2,-24(fp)
 4041118:	e0fffa17 	ldw	r3,-24(fp)
 404111c:	e0bfff17 	ldw	r2,-4(fp)
 4041120:	18bfd516 	blt	r3,r2,4041078 <__flash_rwdata_start+0xfffe6948>
			if (*(output+2+pixel) > maxValue) maxValue = *(output+2+pixel);
		}
	}

	// Perform Threshold
	maxValue = maxValue/2;
 4041124:	e0bff817 	ldw	r2,-32(fp)
 4041128:	1006d7fa 	srli	r3,r2,31
 404112c:	1885883a 	add	r2,r3,r2
 4041130:	1005d07a 	srai	r2,r2,1
 4041134:	e0bff815 	stw	r2,-32(fp)
	if (maxValue > 15) maxValue = 15;
 4041138:	e0bff817 	ldw	r2,-32(fp)
 404113c:	10800410 	cmplti	r2,r2,16
 4041140:	1000021e 	bne	r2,zero,404114c <processEdgeDetection+0x21c>
 4041144:	008003c4 	movi	r2,15
 4041148:	e0bff815 	stw	r2,-32(fp)
	for (int pixel = 0; pixel<numPixels; pixel++) {
 404114c:	e03ffb15 	stw	zero,-20(fp)
 4041150:	00001606 	br	40411ac <processEdgeDetection+0x27c>
		if (*(output+2+pixel) > maxValue){
 4041154:	e0bffb17 	ldw	r2,-20(fp)
 4041158:	10800084 	addi	r2,r2,2
 404115c:	1085883a 	add	r2,r2,r2
 4041160:	1085883a 	add	r2,r2,r2
 4041164:	1007883a 	mov	r3,r2
 4041168:	e0bffc17 	ldw	r2,-16(fp)
 404116c:	10c5883a 	add	r2,r2,r3
 4041170:	10800017 	ldw	r2,0(r2)
 4041174:	e0fff817 	ldw	r3,-32(fp)
 4041178:	1880090e 	bge	r3,r2,40411a0 <processEdgeDetection+0x270>
			*(output+2+pixel) = maxValue;
 404117c:	e0bffb17 	ldw	r2,-20(fp)
 4041180:	10800084 	addi	r2,r2,2
 4041184:	1085883a 	add	r2,r2,r2
 4041188:	1085883a 	add	r2,r2,r2
 404118c:	1007883a 	mov	r3,r2
 4041190:	e0bffc17 	ldw	r2,-16(fp)
 4041194:	10c5883a 	add	r2,r2,r3
 4041198:	e0fff817 	ldw	r3,-32(fp)
 404119c:	10c00015 	stw	r3,0(r2)
	}

	// Perform Threshold
	maxValue = maxValue/2;
	if (maxValue > 15) maxValue = 15;
	for (int pixel = 0; pixel<numPixels; pixel++) {
 40411a0:	e0bffb17 	ldw	r2,-20(fp)
 40411a4:	10800044 	addi	r2,r2,1
 40411a8:	e0bffb15 	stw	r2,-20(fp)
 40411ac:	e0fffb17 	ldw	r3,-20(fp)
 40411b0:	e0bfff17 	ldw	r2,-4(fp)
 40411b4:	18bfe716 	blt	r3,r2,4041154 <__flash_rwdata_start+0xfffe6a24>
			*(output+2+pixel) = maxValue;
		}
	}

	// Free memory holding any convolutions as they are no longer required
	free(conv1);
 40411b8:	e13ffd17 	ldw	r4,-12(fp)
 40411bc:	40430800 	call	4043080 <free>
	if (conv2 != NULL) {
 40411c0:	e0bffe17 	ldw	r2,-8(fp)
 40411c4:	10000226 	beq	r2,zero,40411d0 <processEdgeDetection+0x2a0>
		free(conv2);
 40411c8:	e13ffe17 	ldw	r4,-8(fp)
 40411cc:	40430800 	call	4043080 <free>
	}
	// Return the memory location with the processed image
	return output;
 40411d0:	e0bffc17 	ldw	r2,-16(fp)
}
 40411d4:	e037883a 	mov	sp,fp
 40411d8:	dfc00117 	ldw	ra,4(sp)
 40411dc:	df000017 	ldw	fp,0(sp)
 40411e0:	dec00204 	addi	sp,sp,8
 40411e4:	f800283a 	ret

040411e8 <fastEdgeDetection>:

int* fastEdgeDetection(int* imageArray, int cols, int rows) {
 40411e8:	defff304 	addi	sp,sp,-52
 40411ec:	dfc00c15 	stw	ra,48(sp)
 40411f0:	df000b15 	stw	fp,44(sp)
 40411f4:	df000b04 	addi	fp,sp,44
 40411f8:	e13ffd15 	stw	r4,-12(fp)
 40411fc:	e17ffe15 	stw	r5,-8(fp)
 4041200:	e1bfff15 	stw	r6,-4(fp)
	// Allocate memory for reversed image
	int* output = (int*)malloc(((cols)*(rows)+2)*sizeof(int));
 4041204:	e0fffe17 	ldw	r3,-8(fp)
 4041208:	e0bfff17 	ldw	r2,-4(fp)
 404120c:	1885383a 	mul	r2,r3,r2
 4041210:	10800084 	addi	r2,r2,2
 4041214:	1085883a 	add	r2,r2,r2
 4041218:	1085883a 	add	r2,r2,r2
 404121c:	1009883a 	mov	r4,r2
 4041220:	404306c0 	call	404306c <malloc>
 4041224:	e0bff815 	stw	r2,-32(fp)
	*(output) = cols;
 4041228:	e0bff817 	ldw	r2,-32(fp)
 404122c:	e0fffe17 	ldw	r3,-8(fp)
 4041230:	10c00015 	stw	r3,0(r2)
	*(output+1) = rows;
 4041234:	e0bff817 	ldw	r2,-32(fp)
 4041238:	10800104 	addi	r2,r2,4
 404123c:	e0ffff17 	ldw	r3,-4(fp)
 4041240:	10c00015 	stw	r3,0(r2)
	// Iterate through each row/column and get the relevant pixel, perform the fast conv
	int offset[3];
	int pixelValue;

	// Go through all pixels
	int writeIndex = 0;
 4041244:	e03ff515 	stw	zero,-44(fp)
	for (int row = -1; row < rows-1; row++){
 4041248:	00bfffc4 	movi	r2,-1
 404124c:	e0bff615 	stw	r2,-40(fp)
 4041250:	0000cc06 	br	4041584 <fastEdgeDetection+0x39c>
		for (int col = -1; col < cols-1; col++){
 4041254:	00bfffc4 	movi	r2,-1
 4041258:	e0bff715 	stw	r2,-36(fp)
 404125c:	0000c206 	br	4041568 <fastEdgeDetection+0x380>
			if ((row == -1) || (row == rows-2) || (col == -1) || (col == cols-2)) {
 4041260:	e0bff617 	ldw	r2,-40(fp)
 4041264:	10bfffe0 	cmpeqi	r2,r2,-1
 4041268:	10000b1e 	bne	r2,zero,4041298 <fastEdgeDetection+0xb0>
 404126c:	e0bfff17 	ldw	r2,-4(fp)
 4041270:	10ffff84 	addi	r3,r2,-2
 4041274:	e0bff617 	ldw	r2,-40(fp)
 4041278:	18800726 	beq	r3,r2,4041298 <fastEdgeDetection+0xb0>
 404127c:	e0bff717 	ldw	r2,-36(fp)
 4041280:	10bfffe0 	cmpeqi	r2,r2,-1
 4041284:	1000041e 	bne	r2,zero,4041298 <fastEdgeDetection+0xb0>
 4041288:	e0bffe17 	ldw	r2,-8(fp)
 404128c:	10ffff84 	addi	r3,r2,-2
 4041290:	e0bff717 	ldw	r2,-36(fp)
 4041294:	18800c1e 	bne	r3,r2,40412c8 <fastEdgeDetection+0xe0>
				// Skip This loop for padding
				*(output+2+writeIndex) = 0;
 4041298:	e0bff517 	ldw	r2,-44(fp)
 404129c:	10800084 	addi	r2,r2,2
 40412a0:	1085883a 	add	r2,r2,r2
 40412a4:	1085883a 	add	r2,r2,r2
 40412a8:	1007883a 	mov	r3,r2
 40412ac:	e0bff817 	ldw	r2,-32(fp)
 40412b0:	10c5883a 	add	r2,r2,r3
 40412b4:	10000015 	stw	zero,0(r2)
				writeIndex++;
 40412b8:	e0bff517 	ldw	r2,-44(fp)
 40412bc:	10800044 	addi	r2,r2,1
 40412c0:	e0bff515 	stw	r2,-44(fp)
				continue;
 40412c4:	0000a506 	br	404155c <fastEdgeDetection+0x374>
			}
			offset[0] = col+row*cols; 		// Calculate pixel offset row1
 40412c8:	e0fff617 	ldw	r3,-40(fp)
 40412cc:	e0bffe17 	ldw	r2,-8(fp)
 40412d0:	1887383a 	mul	r3,r3,r2
 40412d4:	e0bff717 	ldw	r2,-36(fp)
 40412d8:	1885883a 	add	r2,r3,r2
 40412dc:	e0bffa15 	stw	r2,-24(fp)
			offset[1] = col+(row+1)*cols;	// Calculate pixel offset row2
 40412e0:	e0bff617 	ldw	r2,-40(fp)
 40412e4:	10c00044 	addi	r3,r2,1
 40412e8:	e0bffe17 	ldw	r2,-8(fp)
 40412ec:	1887383a 	mul	r3,r3,r2
 40412f0:	e0bff717 	ldw	r2,-36(fp)
 40412f4:	1885883a 	add	r2,r3,r2
 40412f8:	e0bffb15 	stw	r2,-20(fp)
			offset[2] = col+(row+2)*cols;	// Calculate pixel offset row3
 40412fc:	e0bff617 	ldw	r2,-40(fp)
 4041300:	10c00084 	addi	r3,r2,2
 4041304:	e0bffe17 	ldw	r2,-8(fp)
 4041308:	1887383a 	mul	r3,r3,r2
 404130c:	e0bff717 	ldw	r2,-36(fp)
 4041310:	1885883a 	add	r2,r3,r2
 4041314:	e0bffc15 	stw	r2,-16(fp)
			// Calculate Vertical Edges
			pixelValue = (*(imageArray+offset[0])   + *(imageArray+offset[0]+2)- *(imageArray+offset[2]) - *(imageArray+offset[2]+2));
 4041318:	e0bffa17 	ldw	r2,-24(fp)
 404131c:	1085883a 	add	r2,r2,r2
 4041320:	1085883a 	add	r2,r2,r2
 4041324:	1007883a 	mov	r3,r2
 4041328:	e0bffd17 	ldw	r2,-12(fp)
 404132c:	10c5883a 	add	r2,r2,r3
 4041330:	10c00017 	ldw	r3,0(r2)
 4041334:	e0bffa17 	ldw	r2,-24(fp)
 4041338:	10800084 	addi	r2,r2,2
 404133c:	1085883a 	add	r2,r2,r2
 4041340:	1085883a 	add	r2,r2,r2
 4041344:	1009883a 	mov	r4,r2
 4041348:	e0bffd17 	ldw	r2,-12(fp)
 404134c:	1105883a 	add	r2,r2,r4
 4041350:	10800017 	ldw	r2,0(r2)
 4041354:	1887883a 	add	r3,r3,r2
 4041358:	e0bffc17 	ldw	r2,-16(fp)
 404135c:	1085883a 	add	r2,r2,r2
 4041360:	1085883a 	add	r2,r2,r2
 4041364:	1009883a 	mov	r4,r2
 4041368:	e0bffd17 	ldw	r2,-12(fp)
 404136c:	1105883a 	add	r2,r2,r4
 4041370:	10800017 	ldw	r2,0(r2)
 4041374:	1887c83a 	sub	r3,r3,r2
 4041378:	e0bffc17 	ldw	r2,-16(fp)
 404137c:	10800084 	addi	r2,r2,2
 4041380:	1085883a 	add	r2,r2,r2
 4041384:	1085883a 	add	r2,r2,r2
 4041388:	1009883a 	mov	r4,r2
 404138c:	e0bffd17 	ldw	r2,-12(fp)
 4041390:	1105883a 	add	r2,r2,r4
 4041394:	10800017 	ldw	r2,0(r2)
 4041398:	1885c83a 	sub	r2,r3,r2
 404139c:	e0bff915 	stw	r2,-28(fp)
			pixelValue += (*(imageArray+offset[0]+1) - *(imageArray+offset[2]+1)) << 1;
 40413a0:	e0bffa17 	ldw	r2,-24(fp)
 40413a4:	10800044 	addi	r2,r2,1
 40413a8:	1085883a 	add	r2,r2,r2
 40413ac:	1085883a 	add	r2,r2,r2
 40413b0:	1007883a 	mov	r3,r2
 40413b4:	e0bffd17 	ldw	r2,-12(fp)
 40413b8:	10c5883a 	add	r2,r2,r3
 40413bc:	10c00017 	ldw	r3,0(r2)
 40413c0:	e0bffc17 	ldw	r2,-16(fp)
 40413c4:	10800044 	addi	r2,r2,1
 40413c8:	1085883a 	add	r2,r2,r2
 40413cc:	1085883a 	add	r2,r2,r2
 40413d0:	1009883a 	mov	r4,r2
 40413d4:	e0bffd17 	ldw	r2,-12(fp)
 40413d8:	1105883a 	add	r2,r2,r4
 40413dc:	10800017 	ldw	r2,0(r2)
 40413e0:	1885c83a 	sub	r2,r3,r2
 40413e4:	1085883a 	add	r2,r2,r2
 40413e8:	1007883a 	mov	r3,r2
 40413ec:	e0bff917 	ldw	r2,-28(fp)
 40413f0:	10c5883a 	add	r2,r2,r3
 40413f4:	e0bff915 	stw	r2,-28(fp)
			// Force to be positive
			pixelValue = abs(pixelValue);
 40413f8:	e0bff917 	ldw	r2,-28(fp)
 40413fc:	1000010e 	bge	r2,zero,4041404 <fastEdgeDetection+0x21c>
 4041400:	0085c83a 	sub	r2,zero,r2
 4041404:	e0bff915 	stw	r2,-28(fp)

			// Calculate Horizontal Edges
			pixelValue += (*(imageArray+offset[0])   + *(imageArray+offset[2])  - *(imageArray+offset[0]+2) - *(imageArray+offset[2]+2));
 4041408:	e0bffa17 	ldw	r2,-24(fp)
 404140c:	1085883a 	add	r2,r2,r2
 4041410:	1085883a 	add	r2,r2,r2
 4041414:	1007883a 	mov	r3,r2
 4041418:	e0bffd17 	ldw	r2,-12(fp)
 404141c:	10c5883a 	add	r2,r2,r3
 4041420:	10c00017 	ldw	r3,0(r2)
 4041424:	e0bffc17 	ldw	r2,-16(fp)
 4041428:	1085883a 	add	r2,r2,r2
 404142c:	1085883a 	add	r2,r2,r2
 4041430:	1009883a 	mov	r4,r2
 4041434:	e0bffd17 	ldw	r2,-12(fp)
 4041438:	1105883a 	add	r2,r2,r4
 404143c:	10800017 	ldw	r2,0(r2)
 4041440:	1887883a 	add	r3,r3,r2
 4041444:	e0bffa17 	ldw	r2,-24(fp)
 4041448:	10800084 	addi	r2,r2,2
 404144c:	1085883a 	add	r2,r2,r2
 4041450:	1085883a 	add	r2,r2,r2
 4041454:	1009883a 	mov	r4,r2
 4041458:	e0bffd17 	ldw	r2,-12(fp)
 404145c:	1105883a 	add	r2,r2,r4
 4041460:	10800017 	ldw	r2,0(r2)
 4041464:	1887c83a 	sub	r3,r3,r2
 4041468:	e0bffc17 	ldw	r2,-16(fp)
 404146c:	10800084 	addi	r2,r2,2
 4041470:	1085883a 	add	r2,r2,r2
 4041474:	1085883a 	add	r2,r2,r2
 4041478:	1009883a 	mov	r4,r2
 404147c:	e0bffd17 	ldw	r2,-12(fp)
 4041480:	1105883a 	add	r2,r2,r4
 4041484:	10800017 	ldw	r2,0(r2)
 4041488:	1885c83a 	sub	r2,r3,r2
 404148c:	e0fff917 	ldw	r3,-28(fp)
 4041490:	1885883a 	add	r2,r3,r2
 4041494:	e0bff915 	stw	r2,-28(fp)
			pixelValue += (*(imageArray+offset[1])   - *(imageArray+offset[1]+2)) << 1;
 4041498:	e0bffb17 	ldw	r2,-20(fp)
 404149c:	1085883a 	add	r2,r2,r2
 40414a0:	1085883a 	add	r2,r2,r2
 40414a4:	1007883a 	mov	r3,r2
 40414a8:	e0bffd17 	ldw	r2,-12(fp)
 40414ac:	10c5883a 	add	r2,r2,r3
 40414b0:	10c00017 	ldw	r3,0(r2)
 40414b4:	e0bffb17 	ldw	r2,-20(fp)
 40414b8:	10800084 	addi	r2,r2,2
 40414bc:	1085883a 	add	r2,r2,r2
 40414c0:	1085883a 	add	r2,r2,r2
 40414c4:	1009883a 	mov	r4,r2
 40414c8:	e0bffd17 	ldw	r2,-12(fp)
 40414cc:	1105883a 	add	r2,r2,r4
 40414d0:	10800017 	ldw	r2,0(r2)
 40414d4:	1885c83a 	sub	r2,r3,r2
 40414d8:	1085883a 	add	r2,r2,r2
 40414dc:	1007883a 	mov	r3,r2
 40414e0:	e0bff917 	ldw	r2,-28(fp)
 40414e4:	10c5883a 	add	r2,r2,r3
 40414e8:	e0bff915 	stw	r2,-28(fp)
			// Force to be positive
			pixelValue = abs(pixelValue);
 40414ec:	e0bff917 	ldw	r2,-28(fp)
 40414f0:	1000010e 	bge	r2,zero,40414f8 <fastEdgeDetection+0x310>
 40414f4:	0085c83a 	sub	r2,zero,r2
 40414f8:	e0bff915 	stw	r2,-28(fp)

			// Perform Thresholding
			if (pixelValue > 7) {
 40414fc:	e0bff917 	ldw	r2,-28(fp)
 4041500:	10800210 	cmplti	r2,r2,8
 4041504:	10000a1e 	bne	r2,zero,4041530 <fastEdgeDetection+0x348>
				*(output+2+writeIndex) = 15; // Set as edge
 4041508:	e0bff517 	ldw	r2,-44(fp)
 404150c:	10800084 	addi	r2,r2,2
 4041510:	1085883a 	add	r2,r2,r2
 4041514:	1085883a 	add	r2,r2,r2
 4041518:	1007883a 	mov	r3,r2
 404151c:	e0bff817 	ldw	r2,-32(fp)
 4041520:	10c5883a 	add	r2,r2,r3
 4041524:	00c003c4 	movi	r3,15
 4041528:	10c00015 	stw	r3,0(r2)
 404152c:	00000806 	br	4041550 <fastEdgeDetection+0x368>
			} else {
				*(output+2+writeIndex) = 0; // Not an edge
 4041530:	e0bff517 	ldw	r2,-44(fp)
 4041534:	10800084 	addi	r2,r2,2
 4041538:	1085883a 	add	r2,r2,r2
 404153c:	1085883a 	add	r2,r2,r2
 4041540:	1007883a 	mov	r3,r2
 4041544:	e0bff817 	ldw	r2,-32(fp)
 4041548:	10c5883a 	add	r2,r2,r3
 404154c:	10000015 	stw	zero,0(r2)
			}
			writeIndex++;
 4041550:	e0bff517 	ldw	r2,-44(fp)
 4041554:	10800044 	addi	r2,r2,1
 4041558:	e0bff515 	stw	r2,-44(fp)
	int pixelValue;

	// Go through all pixels
	int writeIndex = 0;
	for (int row = -1; row < rows-1; row++){
		for (int col = -1; col < cols-1; col++){
 404155c:	e0bff717 	ldw	r2,-36(fp)
 4041560:	10800044 	addi	r2,r2,1
 4041564:	e0bff715 	stw	r2,-36(fp)
 4041568:	e0bffe17 	ldw	r2,-8(fp)
 404156c:	10bfffc4 	addi	r2,r2,-1
 4041570:	e0fff717 	ldw	r3,-36(fp)
 4041574:	18bf3a16 	blt	r3,r2,4041260 <__flash_rwdata_start+0xfffe6b30>
	int offset[3];
	int pixelValue;

	// Go through all pixels
	int writeIndex = 0;
	for (int row = -1; row < rows-1; row++){
 4041578:	e0bff617 	ldw	r2,-40(fp)
 404157c:	10800044 	addi	r2,r2,1
 4041580:	e0bff615 	stw	r2,-40(fp)
 4041584:	e0bfff17 	ldw	r2,-4(fp)
 4041588:	10bfffc4 	addi	r2,r2,-1
 404158c:	e0fff617 	ldw	r3,-40(fp)
 4041590:	18bf3016 	blt	r3,r2,4041254 <__flash_rwdata_start+0xfffe6b24>
			writeIndex++;
		}
	}

	// Return the memory location with the Edge Detected image
	return output;
 4041594:	e0bff817 	ldw	r2,-32(fp)
}
 4041598:	e037883a 	mov	sp,fp
 404159c:	dfc00117 	ldw	ra,4(sp)
 40415a0:	df000017 	ldw	fp,0(sp)
 40415a4:	dec00204 	addi	sp,sp,8
 40415a8:	f800283a 	ret

040415ac <blurImgConv>:

int* blurImgConv(int* imageArray, int cols, int rows) {
 40415ac:	deffe904 	addi	sp,sp,-92
 40415b0:	dfc01615 	stw	ra,88(sp)
 40415b4:	df001515 	stw	fp,84(sp)
 40415b8:	dc001415 	stw	r16,80(sp)
 40415bc:	df001504 	addi	fp,sp,84
 40415c0:	e13ffc15 	stw	r4,-16(fp)
 40415c4:	e17ffd15 	stw	r5,-12(fp)
 40415c8:	e1bffe15 	stw	r6,-8(fp)
	// This requests a new block of memory to put our image
	// Free this afterwards or we will have a memory leak!
	int* output = (int*)malloc(((cols)*(rows)+2)*sizeof(int));
 40415cc:	e0fffd17 	ldw	r3,-12(fp)
 40415d0:	e0bffe17 	ldw	r2,-8(fp)
 40415d4:	1885383a 	mul	r2,r3,r2
 40415d8:	10800084 	addi	r2,r2,2
 40415dc:	1085883a 	add	r2,r2,r2
 40415e0:	1085883a 	add	r2,r2,r2
 40415e4:	1009883a 	mov	r4,r2
 40415e8:	404306c0 	call	404306c <malloc>
 40415ec:	e0bfee15 	stw	r2,-72(fp)
	*(output) = cols;
 40415f0:	e0bfee17 	ldw	r2,-72(fp)
 40415f4:	e0fffd17 	ldw	r3,-12(fp)
 40415f8:	10c00015 	stw	r3,0(r2)
	*(output+1) = rows;
 40415fc:	e0bfee17 	ldw	r2,-72(fp)
 4041600:	10800104 	addi	r2,r2,4
 4041604:	e0fffe17 	ldw	r3,-8(fp)
 4041608:	10c00015 	stw	r3,0(r2)
	// Iterate through each row/column and get the relevant pixel, perform the conv
	int patch[9];
	int offset[3];

	int bytesToCopy = sizeof(int)*3;
 404160c:	00800304 	movi	r2,12
 4041610:	e0bfef15 	stw	r2,-68(fp)
	int writeIndex = 0;
 4041614:	e03feb15 	stw	zero,-84(fp)
	for (int row = -1; row < rows-1; row++){
 4041618:	00bfffc4 	movi	r2,-1
 404161c:	e0bfec15 	stw	r2,-80(fp)
 4041620:	00007306 	br	40417f0 <blurImgConv+0x244>
		for (int col = -1; col < cols-1; col++){
 4041624:	00bfffc4 	movi	r2,-1
 4041628:	e0bfed15 	stw	r2,-76(fp)
 404162c:	00006906 	br	40417d4 <blurImgConv+0x228>
			if ((row == -1) || (row == rows-2) || (col == -1) || (col == cols-2)) {
 4041630:	e0bfec17 	ldw	r2,-80(fp)
 4041634:	10bfffe0 	cmpeqi	r2,r2,-1
 4041638:	10000b1e 	bne	r2,zero,4041668 <blurImgConv+0xbc>
 404163c:	e0bffe17 	ldw	r2,-8(fp)
 4041640:	10ffff84 	addi	r3,r2,-2
 4041644:	e0bfec17 	ldw	r2,-80(fp)
 4041648:	18800726 	beq	r3,r2,4041668 <blurImgConv+0xbc>
 404164c:	e0bfed17 	ldw	r2,-76(fp)
 4041650:	10bfffe0 	cmpeqi	r2,r2,-1
 4041654:	1000041e 	bne	r2,zero,4041668 <blurImgConv+0xbc>
 4041658:	e0bffd17 	ldw	r2,-12(fp)
 404165c:	10ffff84 	addi	r3,r2,-2
 4041660:	e0bfed17 	ldw	r2,-76(fp)
 4041664:	18800c1e 	bne	r3,r2,4041698 <blurImgConv+0xec>
				// Skip This loop for padding
				*(output+2+writeIndex) = 0;
 4041668:	e0bfeb17 	ldw	r2,-84(fp)
 404166c:	10800084 	addi	r2,r2,2
 4041670:	1085883a 	add	r2,r2,r2
 4041674:	1085883a 	add	r2,r2,r2
 4041678:	1007883a 	mov	r3,r2
 404167c:	e0bfee17 	ldw	r2,-72(fp)
 4041680:	10c5883a 	add	r2,r2,r3
 4041684:	10000015 	stw	zero,0(r2)
				writeIndex++;
 4041688:	e0bfeb17 	ldw	r2,-84(fp)
 404168c:	10800044 	addi	r2,r2,1
 4041690:	e0bfeb15 	stw	r2,-84(fp)
				continue;
 4041694:	00004c06 	br	40417c8 <blurImgConv+0x21c>
			}
			offset[0] = col+row*cols; 		// Calculate pixel offset row1
 4041698:	e0ffec17 	ldw	r3,-80(fp)
 404169c:	e0bffd17 	ldw	r2,-12(fp)
 40416a0:	1887383a 	mul	r3,r3,r2
 40416a4:	e0bfed17 	ldw	r2,-76(fp)
 40416a8:	1885883a 	add	r2,r3,r2
 40416ac:	e0bff915 	stw	r2,-28(fp)
			offset[1] = col+(row+1)*cols;	// Calculate pixel offset row2
 40416b0:	e0bfec17 	ldw	r2,-80(fp)
 40416b4:	10c00044 	addi	r3,r2,1
 40416b8:	e0bffd17 	ldw	r2,-12(fp)
 40416bc:	1887383a 	mul	r3,r3,r2
 40416c0:	e0bfed17 	ldw	r2,-76(fp)
 40416c4:	1885883a 	add	r2,r3,r2
 40416c8:	e0bffa15 	stw	r2,-24(fp)
			offset[2] = col+(row+2)*cols;	// Calculate pixel offset row3
 40416cc:	e0bfec17 	ldw	r2,-80(fp)
 40416d0:	10c00084 	addi	r3,r2,2
 40416d4:	e0bffd17 	ldw	r2,-12(fp)
 40416d8:	1887383a 	mul	r3,r3,r2
 40416dc:	e0bfed17 	ldw	r2,-76(fp)
 40416e0:	1885883a 	add	r2,r3,r2
 40416e4:	e0bffb15 	stw	r2,-20(fp)
			memcpy(patch,imageArray+offset[0],bytesToCopy); // Copy first row to patch
 40416e8:	e0bff917 	ldw	r2,-28(fp)
 40416ec:	1085883a 	add	r2,r2,r2
 40416f0:	1085883a 	add	r2,r2,r2
 40416f4:	1007883a 	mov	r3,r2
 40416f8:	e0bffc17 	ldw	r2,-16(fp)
 40416fc:	10c7883a 	add	r3,r2,r3
 4041700:	e13fef17 	ldw	r4,-68(fp)
 4041704:	e0bff004 	addi	r2,fp,-64
 4041708:	200d883a 	mov	r6,r4
 404170c:	180b883a 	mov	r5,r3
 4041710:	1009883a 	mov	r4,r2
 4041714:	40438a00 	call	40438a0 <memcpy>
			memcpy(patch+3,imageArray+offset[1],bytesToCopy); // Copy second row to patch
 4041718:	e0bff004 	addi	r2,fp,-64
 404171c:	10800304 	addi	r2,r2,12
 4041720:	e0fffa17 	ldw	r3,-24(fp)
 4041724:	18c7883a 	add	r3,r3,r3
 4041728:	18c7883a 	add	r3,r3,r3
 404172c:	1809883a 	mov	r4,r3
 4041730:	e0fffc17 	ldw	r3,-16(fp)
 4041734:	1907883a 	add	r3,r3,r4
 4041738:	e13fef17 	ldw	r4,-68(fp)
 404173c:	200d883a 	mov	r6,r4
 4041740:	180b883a 	mov	r5,r3
 4041744:	1009883a 	mov	r4,r2
 4041748:	40438a00 	call	40438a0 <memcpy>
			memcpy(patch+6,imageArray+offset[2],bytesToCopy); // Copy second row to patch
 404174c:	e0bff004 	addi	r2,fp,-64
 4041750:	10800604 	addi	r2,r2,24
 4041754:	e0fffb17 	ldw	r3,-20(fp)
 4041758:	18c7883a 	add	r3,r3,r3
 404175c:	18c7883a 	add	r3,r3,r3
 4041760:	1809883a 	mov	r4,r3
 4041764:	e0fffc17 	ldw	r3,-16(fp)
 4041768:	1907883a 	add	r3,r3,r4
 404176c:	e13fef17 	ldw	r4,-68(fp)
 4041770:	200d883a 	mov	r6,r4
 4041774:	180b883a 	mov	r5,r3
 4041778:	1009883a 	mov	r4,r2
 404177c:	40438a00 	call	40438a0 <memcpy>
			*(output+2+writeIndex) = conv(patch,kernBlur3x,3,9); // Calculate convolution
 4041780:	e0bfeb17 	ldw	r2,-84(fp)
 4041784:	10800084 	addi	r2,r2,2
 4041788:	1085883a 	add	r2,r2,r2
 404178c:	1085883a 	add	r2,r2,r2
 4041790:	1007883a 	mov	r3,r2
 4041794:	e0bfee17 	ldw	r2,-72(fp)
 4041798:	10e1883a 	add	r16,r2,r3
 404179c:	e0bff004 	addi	r2,fp,-64
 40417a0:	01c00244 	movi	r7,9
 40417a4:	018000c4 	movi	r6,3
 40417a8:	01408034 	movhi	r5,512
 40417ac:	2941af04 	addi	r5,r5,1724
 40417b0:	1009883a 	mov	r4,r2
 40417b4:	40409a00 	call	40409a0 <conv>
 40417b8:	80800015 	stw	r2,0(r16)
			writeIndex++;
 40417bc:	e0bfeb17 	ldw	r2,-84(fp)
 40417c0:	10800044 	addi	r2,r2,1
 40417c4:	e0bfeb15 	stw	r2,-84(fp)
	int offset[3];

	int bytesToCopy = sizeof(int)*3;
	int writeIndex = 0;
	for (int row = -1; row < rows-1; row++){
		for (int col = -1; col < cols-1; col++){
 40417c8:	e0bfed17 	ldw	r2,-76(fp)
 40417cc:	10800044 	addi	r2,r2,1
 40417d0:	e0bfed15 	stw	r2,-76(fp)
 40417d4:	e0bffd17 	ldw	r2,-12(fp)
 40417d8:	10bfffc4 	addi	r2,r2,-1
 40417dc:	e0ffed17 	ldw	r3,-76(fp)
 40417e0:	18bf9316 	blt	r3,r2,4041630 <__flash_rwdata_start+0xfffe6f00>
	int patch[9];
	int offset[3];

	int bytesToCopy = sizeof(int)*3;
	int writeIndex = 0;
	for (int row = -1; row < rows-1; row++){
 40417e4:	e0bfec17 	ldw	r2,-80(fp)
 40417e8:	10800044 	addi	r2,r2,1
 40417ec:	e0bfec15 	stw	r2,-80(fp)
 40417f0:	e0bffe17 	ldw	r2,-8(fp)
 40417f4:	10bfffc4 	addi	r2,r2,-1
 40417f8:	e0ffec17 	ldw	r3,-80(fp)
 40417fc:	18bf8916 	blt	r3,r2,4041624 <__flash_rwdata_start+0xfffe6ef4>
			*(output+2+writeIndex) = conv(patch,kernBlur3x,3,9); // Calculate convolution
			writeIndex++;
		}
	}
	// Return the memory location with the blurred image
	return output;
 4041800:	e0bfee17 	ldw	r2,-72(fp)
}
 4041804:	e6ffff04 	addi	sp,fp,-4
 4041808:	dfc00217 	ldw	ra,8(sp)
 404180c:	df000117 	ldw	fp,4(sp)
 4041810:	dc000017 	ldw	r16,0(sp)
 4041814:	dec00304 	addi	sp,sp,12
 4041818:	f800283a 	ret

0404181c <fastBlurImg>:

int* fastBlurImg(int* imageArray, int cols, int rows) {
 404181c:	defff304 	addi	sp,sp,-52
 4041820:	dfc00c15 	stw	ra,48(sp)
 4041824:	df000b15 	stw	fp,44(sp)
 4041828:	df000b04 	addi	fp,sp,44
 404182c:	e13ffd15 	stw	r4,-12(fp)
 4041830:	e17ffe15 	stw	r5,-8(fp)
 4041834:	e1bfff15 	stw	r6,-4(fp)
	// This requests a new block of memory to put our image
	// Free this afterwards or we will have a memory leak!
	int* output = (int*)malloc(((cols)*(rows)+2)*sizeof(int));
 4041838:	e0fffe17 	ldw	r3,-8(fp)
 404183c:	e0bfff17 	ldw	r2,-4(fp)
 4041840:	1885383a 	mul	r2,r3,r2
 4041844:	10800084 	addi	r2,r2,2
 4041848:	1085883a 	add	r2,r2,r2
 404184c:	1085883a 	add	r2,r2,r2
 4041850:	1009883a 	mov	r4,r2
 4041854:	404306c0 	call	404306c <malloc>
 4041858:	e0bff815 	stw	r2,-32(fp)
	*(output) = cols;
 404185c:	e0bff817 	ldw	r2,-32(fp)
 4041860:	e0fffe17 	ldw	r3,-8(fp)
 4041864:	10c00015 	stw	r3,0(r2)
	*(output+1) = rows;
 4041868:	e0bff817 	ldw	r2,-32(fp)
 404186c:	10800104 	addi	r2,r2,4
 4041870:	e0ffff17 	ldw	r3,-4(fp)
 4041874:	10c00015 	stw	r3,0(r2)
	// Iterate through each row/column and get the relevant pixel, perform the conv
	int offset[3];
	int res;

	int writeIndex = 0;
 4041878:	e03ff515 	stw	zero,-44(fp)
	for (int row = -1; row < rows-1; row++){
 404187c:	00bfffc4 	movi	r2,-1
 4041880:	e0bff615 	stw	r2,-40(fp)
 4041884:	0000a006 	br	4041b08 <fastBlurImg+0x2ec>
		for (int col = -1; col < cols-1; col++){
 4041888:	00bfffc4 	movi	r2,-1
 404188c:	e0bff715 	stw	r2,-36(fp)
 4041890:	00009606 	br	4041aec <fastBlurImg+0x2d0>
			if ((row == -1) || (row == rows-2) || (col == -1) || (col == cols-2)) {
 4041894:	e0bff617 	ldw	r2,-40(fp)
 4041898:	10bfffe0 	cmpeqi	r2,r2,-1
 404189c:	10000b1e 	bne	r2,zero,40418cc <fastBlurImg+0xb0>
 40418a0:	e0bfff17 	ldw	r2,-4(fp)
 40418a4:	10ffff84 	addi	r3,r2,-2
 40418a8:	e0bff617 	ldw	r2,-40(fp)
 40418ac:	18800726 	beq	r3,r2,40418cc <fastBlurImg+0xb0>
 40418b0:	e0bff717 	ldw	r2,-36(fp)
 40418b4:	10bfffe0 	cmpeqi	r2,r2,-1
 40418b8:	1000041e 	bne	r2,zero,40418cc <fastBlurImg+0xb0>
 40418bc:	e0bffe17 	ldw	r2,-8(fp)
 40418c0:	10ffff84 	addi	r3,r2,-2
 40418c4:	e0bff717 	ldw	r2,-36(fp)
 40418c8:	18800c1e 	bne	r3,r2,40418fc <fastBlurImg+0xe0>
				// Skip This loop for padding
				*(output+2+writeIndex) = 0;
 40418cc:	e0bff517 	ldw	r2,-44(fp)
 40418d0:	10800084 	addi	r2,r2,2
 40418d4:	1085883a 	add	r2,r2,r2
 40418d8:	1085883a 	add	r2,r2,r2
 40418dc:	1007883a 	mov	r3,r2
 40418e0:	e0bff817 	ldw	r2,-32(fp)
 40418e4:	10c5883a 	add	r2,r2,r3
 40418e8:	10000015 	stw	zero,0(r2)
				writeIndex++;
 40418ec:	e0bff517 	ldw	r2,-44(fp)
 40418f0:	10800044 	addi	r2,r2,1
 40418f4:	e0bff515 	stw	r2,-44(fp)
				continue;
 40418f8:	00007906 	br	4041ae0 <fastBlurImg+0x2c4>
			}
			offset[0] = col+row*cols; 		// Calculate pixel offset row1
 40418fc:	e0fff617 	ldw	r3,-40(fp)
 4041900:	e0bffe17 	ldw	r2,-8(fp)
 4041904:	1887383a 	mul	r3,r3,r2
 4041908:	e0bff717 	ldw	r2,-36(fp)
 404190c:	1885883a 	add	r2,r3,r2
 4041910:	e0bffa15 	stw	r2,-24(fp)
			offset[1] = col+(row+1)*cols;	// Calculate pixel offset row2
 4041914:	e0bff617 	ldw	r2,-40(fp)
 4041918:	10c00044 	addi	r3,r2,1
 404191c:	e0bffe17 	ldw	r2,-8(fp)
 4041920:	1887383a 	mul	r3,r3,r2
 4041924:	e0bff717 	ldw	r2,-36(fp)
 4041928:	1885883a 	add	r2,r3,r2
 404192c:	e0bffb15 	stw	r2,-20(fp)
			offset[2] = col+(row+2)*cols;	// Calculate pixel offset row3
 4041930:	e0bff617 	ldw	r2,-40(fp)
 4041934:	10c00084 	addi	r3,r2,2
 4041938:	e0bffe17 	ldw	r2,-8(fp)
 404193c:	1887383a 	mul	r3,r3,r2
 4041940:	e0bff717 	ldw	r2,-36(fp)
 4041944:	1885883a 	add	r2,r3,r2
 4041948:	e0bffc15 	stw	r2,-16(fp)
			res  = *(imageArray+offset[0]) + *(imageArray+offset[0]+1) + *(imageArray+offset[0]+2);
 404194c:	e0bffa17 	ldw	r2,-24(fp)
 4041950:	1085883a 	add	r2,r2,r2
 4041954:	1085883a 	add	r2,r2,r2
 4041958:	1007883a 	mov	r3,r2
 404195c:	e0bffd17 	ldw	r2,-12(fp)
 4041960:	10c5883a 	add	r2,r2,r3
 4041964:	10c00017 	ldw	r3,0(r2)
 4041968:	e0bffa17 	ldw	r2,-24(fp)
 404196c:	10800044 	addi	r2,r2,1
 4041970:	1085883a 	add	r2,r2,r2
 4041974:	1085883a 	add	r2,r2,r2
 4041978:	1009883a 	mov	r4,r2
 404197c:	e0bffd17 	ldw	r2,-12(fp)
 4041980:	1105883a 	add	r2,r2,r4
 4041984:	10800017 	ldw	r2,0(r2)
 4041988:	1887883a 	add	r3,r3,r2
 404198c:	e0bffa17 	ldw	r2,-24(fp)
 4041990:	10800084 	addi	r2,r2,2
 4041994:	1085883a 	add	r2,r2,r2
 4041998:	1085883a 	add	r2,r2,r2
 404199c:	1009883a 	mov	r4,r2
 40419a0:	e0bffd17 	ldw	r2,-12(fp)
 40419a4:	1105883a 	add	r2,r2,r4
 40419a8:	10800017 	ldw	r2,0(r2)
 40419ac:	1885883a 	add	r2,r3,r2
 40419b0:	e0bff915 	stw	r2,-28(fp)
			res += *(imageArray+offset[1]) + *(imageArray+offset[1]+1) + *(imageArray+offset[1]+2);
 40419b4:	e0bffb17 	ldw	r2,-20(fp)
 40419b8:	1085883a 	add	r2,r2,r2
 40419bc:	1085883a 	add	r2,r2,r2
 40419c0:	1007883a 	mov	r3,r2
 40419c4:	e0bffd17 	ldw	r2,-12(fp)
 40419c8:	10c5883a 	add	r2,r2,r3
 40419cc:	10c00017 	ldw	r3,0(r2)
 40419d0:	e0bffb17 	ldw	r2,-20(fp)
 40419d4:	10800044 	addi	r2,r2,1
 40419d8:	1085883a 	add	r2,r2,r2
 40419dc:	1085883a 	add	r2,r2,r2
 40419e0:	1009883a 	mov	r4,r2
 40419e4:	e0bffd17 	ldw	r2,-12(fp)
 40419e8:	1105883a 	add	r2,r2,r4
 40419ec:	10800017 	ldw	r2,0(r2)
 40419f0:	1887883a 	add	r3,r3,r2
 40419f4:	e0bffb17 	ldw	r2,-20(fp)
 40419f8:	10800084 	addi	r2,r2,2
 40419fc:	1085883a 	add	r2,r2,r2
 4041a00:	1085883a 	add	r2,r2,r2
 4041a04:	1009883a 	mov	r4,r2
 4041a08:	e0bffd17 	ldw	r2,-12(fp)
 4041a0c:	1105883a 	add	r2,r2,r4
 4041a10:	10800017 	ldw	r2,0(r2)
 4041a14:	1885883a 	add	r2,r3,r2
 4041a18:	e0fff917 	ldw	r3,-28(fp)
 4041a1c:	1885883a 	add	r2,r3,r2
 4041a20:	e0bff915 	stw	r2,-28(fp)
			res += *(imageArray+offset[2]) + *(imageArray+offset[2]+1) + *(imageArray+offset[2]+2);
 4041a24:	e0bffc17 	ldw	r2,-16(fp)
 4041a28:	1085883a 	add	r2,r2,r2
 4041a2c:	1085883a 	add	r2,r2,r2
 4041a30:	1007883a 	mov	r3,r2
 4041a34:	e0bffd17 	ldw	r2,-12(fp)
 4041a38:	10c5883a 	add	r2,r2,r3
 4041a3c:	10c00017 	ldw	r3,0(r2)
 4041a40:	e0bffc17 	ldw	r2,-16(fp)
 4041a44:	10800044 	addi	r2,r2,1
 4041a48:	1085883a 	add	r2,r2,r2
 4041a4c:	1085883a 	add	r2,r2,r2
 4041a50:	1009883a 	mov	r4,r2
 4041a54:	e0bffd17 	ldw	r2,-12(fp)
 4041a58:	1105883a 	add	r2,r2,r4
 4041a5c:	10800017 	ldw	r2,0(r2)
 4041a60:	1887883a 	add	r3,r3,r2
 4041a64:	e0bffc17 	ldw	r2,-16(fp)
 4041a68:	10800084 	addi	r2,r2,2
 4041a6c:	1085883a 	add	r2,r2,r2
 4041a70:	1085883a 	add	r2,r2,r2
 4041a74:	1009883a 	mov	r4,r2
 4041a78:	e0bffd17 	ldw	r2,-12(fp)
 4041a7c:	1105883a 	add	r2,r2,r4
 4041a80:	10800017 	ldw	r2,0(r2)
 4041a84:	1885883a 	add	r2,r3,r2
 4041a88:	e0fff917 	ldw	r3,-28(fp)
 4041a8c:	1885883a 	add	r2,r3,r2
 4041a90:	e0bff915 	stw	r2,-28(fp)
			IOWR_8DIRECT(DIV9_TOHW_BASE,0,res);
 4041a94:	00810234 	movhi	r2,1032
 4041a98:	10840c04 	addi	r2,r2,4144
 4041a9c:	e0fff903 	ldbu	r3,-28(fp)
 4041aa0:	10c00025 	stbio	r3,0(r2)
			*(output+2+writeIndex) = IORD_8DIRECT(DIV9_TOSW_BASE,0); // Calculate convolution
 4041aa4:	e0bff517 	ldw	r2,-44(fp)
 4041aa8:	10800084 	addi	r2,r2,2
 4041aac:	1085883a 	add	r2,r2,r2
 4041ab0:	1085883a 	add	r2,r2,r2
 4041ab4:	1007883a 	mov	r3,r2
 4041ab8:	e0bff817 	ldw	r2,-32(fp)
 4041abc:	10c7883a 	add	r3,r2,r3
 4041ac0:	00810234 	movhi	r2,1032
 4041ac4:	10840804 	addi	r2,r2,4128
 4041ac8:	10800023 	ldbuio	r2,0(r2)
 4041acc:	10803fcc 	andi	r2,r2,255
 4041ad0:	18800015 	stw	r2,0(r3)
			writeIndex++;
 4041ad4:	e0bff517 	ldw	r2,-44(fp)
 4041ad8:	10800044 	addi	r2,r2,1
 4041adc:	e0bff515 	stw	r2,-44(fp)
	int offset[3];
	int res;

	int writeIndex = 0;
	for (int row = -1; row < rows-1; row++){
		for (int col = -1; col < cols-1; col++){
 4041ae0:	e0bff717 	ldw	r2,-36(fp)
 4041ae4:	10800044 	addi	r2,r2,1
 4041ae8:	e0bff715 	stw	r2,-36(fp)
 4041aec:	e0bffe17 	ldw	r2,-8(fp)
 4041af0:	10bfffc4 	addi	r2,r2,-1
 4041af4:	e0fff717 	ldw	r3,-36(fp)
 4041af8:	18bf6616 	blt	r3,r2,4041894 <__flash_rwdata_start+0xfffe7164>
	// Iterate through each row/column and get the relevant pixel, perform the conv
	int offset[3];
	int res;

	int writeIndex = 0;
	for (int row = -1; row < rows-1; row++){
 4041afc:	e0bff617 	ldw	r2,-40(fp)
 4041b00:	10800044 	addi	r2,r2,1
 4041b04:	e0bff615 	stw	r2,-40(fp)
 4041b08:	e0bfff17 	ldw	r2,-4(fp)
 4041b0c:	10bfffc4 	addi	r2,r2,-1
 4041b10:	e0fff617 	ldw	r3,-40(fp)
 4041b14:	18bf5c16 	blt	r3,r2,4041888 <__flash_rwdata_start+0xfffe7158>
			*(output+2+writeIndex) = IORD_8DIRECT(DIV9_TOSW_BASE,0); // Calculate convolution
			writeIndex++;
		}
	}
	// Return the memory location with the blurred image
	return output;
 4041b18:	e0bff817 	ldw	r2,-32(fp)
}
 4041b1c:	e037883a 	mov	sp,fp
 4041b20:	dfc00117 	ldw	ra,4(sp)
 4041b24:	df000017 	ldw	fp,0(sp)
 4041b28:	dec00204 	addi	sp,sp,8
 4041b2c:	f800283a 	ret

04041b30 <reverseImg>:

int* reverseImg(int* imageArray, int numPixels) {
 4041b30:	defff904 	addi	sp,sp,-28
 4041b34:	dfc00615 	stw	ra,24(sp)
 4041b38:	df000515 	stw	fp,20(sp)
 4041b3c:	df000504 	addi	fp,sp,20
 4041b40:	e13ffe15 	stw	r4,-8(fp)
 4041b44:	e17fff15 	stw	r5,-4(fp)
	// Allocate memory for reversed image
	int* output = (int*)malloc(numPixels*sizeof(int));
 4041b48:	e0bfff17 	ldw	r2,-4(fp)
 4041b4c:	1085883a 	add	r2,r2,r2
 4041b50:	1085883a 	add	r2,r2,r2
 4041b54:	1009883a 	mov	r4,r2
 4041b58:	404306c0 	call	404306c <malloc>
 4041b5c:	e0bffd15 	stw	r2,-12(fp)
	int reversePixelIdx = numPixels;
 4041b60:	e0bfff17 	ldw	r2,-4(fp)
 4041b64:	e0bffb15 	stw	r2,-20(fp)

	// Store Reversed Image
	for (int pixel = 0; pixel<numPixels; pixel++) {
 4041b68:	e03ffc15 	stw	zero,-16(fp)
 4041b6c:	00001406 	br	4041bc0 <reverseImg+0x90>
		reversePixelIdx--;
 4041b70:	e0bffb17 	ldw	r2,-20(fp)
 4041b74:	10bfffc4 	addi	r2,r2,-1
 4041b78:	e0bffb15 	stw	r2,-20(fp)
		*(output+pixel)=*(imageArray+reversePixelIdx);
 4041b7c:	e0bffc17 	ldw	r2,-16(fp)
 4041b80:	1085883a 	add	r2,r2,r2
 4041b84:	1085883a 	add	r2,r2,r2
 4041b88:	1007883a 	mov	r3,r2
 4041b8c:	e0bffd17 	ldw	r2,-12(fp)
 4041b90:	10c7883a 	add	r3,r2,r3
 4041b94:	e0bffb17 	ldw	r2,-20(fp)
 4041b98:	1085883a 	add	r2,r2,r2
 4041b9c:	1085883a 	add	r2,r2,r2
 4041ba0:	1009883a 	mov	r4,r2
 4041ba4:	e0bffe17 	ldw	r2,-8(fp)
 4041ba8:	1105883a 	add	r2,r2,r4
 4041bac:	10800017 	ldw	r2,0(r2)
 4041bb0:	18800015 	stw	r2,0(r3)
	// Allocate memory for reversed image
	int* output = (int*)malloc(numPixels*sizeof(int));
	int reversePixelIdx = numPixels;

	// Store Reversed Image
	for (int pixel = 0; pixel<numPixels; pixel++) {
 4041bb4:	e0bffc17 	ldw	r2,-16(fp)
 4041bb8:	10800044 	addi	r2,r2,1
 4041bbc:	e0bffc15 	stw	r2,-16(fp)
 4041bc0:	e0fffc17 	ldw	r3,-16(fp)
 4041bc4:	e0bfff17 	ldw	r2,-4(fp)
 4041bc8:	18bfe916 	blt	r3,r2,4041b70 <__flash_rwdata_start+0xfffe7440>
		reversePixelIdx--;
		*(output+pixel)=*(imageArray+reversePixelIdx);
	}

	// Return the memory location with the reversed image
	return output;
 4041bcc:	e0bffd17 	ldw	r2,-12(fp)
}
 4041bd0:	e037883a 	mov	sp,fp
 4041bd4:	dfc00117 	ldw	ra,4(sp)
 4041bd8:	df000017 	ldw	fp,0(sp)
 4041bdc:	dec00204 	addi	sp,sp,8
 4041be0:	f800283a 	ret

04041be4 <imgToPtr>:

int* imgToPtr(int baseAddr, int pixelNum) {
 4041be4:	defffa04 	addi	sp,sp,-24
 4041be8:	dfc00515 	stw	ra,20(sp)
 4041bec:	df000415 	stw	fp,16(sp)
 4041bf0:	df000404 	addi	fp,sp,16
 4041bf4:	e13ffe15 	stw	r4,-8(fp)
 4041bf8:	e17fff15 	stw	r5,-4(fp)
	// Allocate pointer to hold image
	int* img = (int*) malloc(pixelNum*sizeof(int));
 4041bfc:	e0bfff17 	ldw	r2,-4(fp)
 4041c00:	1085883a 	add	r2,r2,r2
 4041c04:	1085883a 	add	r2,r2,r2
 4041c08:	1009883a 	mov	r4,r2
 4041c0c:	404306c0 	call	404306c <malloc>
 4041c10:	e0bffd15 	stw	r2,-12(fp)
	// Extract image to allocated pointer
	for (int pixel = 0; pixel<pixelNum; pixel++) {
 4041c14:	e03ffc15 	stw	zero,-16(fp)
 4041c18:	00001206 	br	4041c64 <imgToPtr+0x80>
		*(img+pixel) = IORD_32DIRECT(baseAddr,pixel*4)>>24;
 4041c1c:	e0bffc17 	ldw	r2,-16(fp)
 4041c20:	1085883a 	add	r2,r2,r2
 4041c24:	1085883a 	add	r2,r2,r2
 4041c28:	1007883a 	mov	r3,r2
 4041c2c:	e0bffd17 	ldw	r2,-12(fp)
 4041c30:	10c7883a 	add	r3,r2,r3
 4041c34:	e0bffc17 	ldw	r2,-16(fp)
 4041c38:	1085883a 	add	r2,r2,r2
 4041c3c:	1085883a 	add	r2,r2,r2
 4041c40:	1009883a 	mov	r4,r2
 4041c44:	e0bffe17 	ldw	r2,-8(fp)
 4041c48:	2085883a 	add	r2,r4,r2
 4041c4c:	10800037 	ldwio	r2,0(r2)
 4041c50:	1005d63a 	srai	r2,r2,24
 4041c54:	18800015 	stw	r2,0(r3)

int* imgToPtr(int baseAddr, int pixelNum) {
	// Allocate pointer to hold image
	int* img = (int*) malloc(pixelNum*sizeof(int));
	// Extract image to allocated pointer
	for (int pixel = 0; pixel<pixelNum; pixel++) {
 4041c58:	e0bffc17 	ldw	r2,-16(fp)
 4041c5c:	10800044 	addi	r2,r2,1
 4041c60:	e0bffc15 	stw	r2,-16(fp)
 4041c64:	e0fffc17 	ldw	r3,-16(fp)
 4041c68:	e0bfff17 	ldw	r2,-4(fp)
 4041c6c:	18bfeb16 	blt	r3,r2,4041c1c <__flash_rwdata_start+0xfffe74ec>
		*(img+pixel) = IORD_32DIRECT(baseAddr,pixel*4)>>24;
	}
	// Return image pointer
	return img;
 4041c70:	e0bffd17 	ldw	r2,-12(fp)
}
 4041c74:	e037883a 	mov	sp,fp
 4041c78:	dfc00117 	ldw	ra,4(sp)
 4041c7c:	df000017 	ldw	fp,0(sp)
 4041c80:	dec00204 	addi	sp,sp,8
 4041c84:	f800283a 	ret

04041c88 <imgToSDRAM>:

void imgToSDRAM(int* imgPtr, int baseAddr, int pixelNum, int padding) {
 4041c88:	defffa04 	addi	sp,sp,-24
 4041c8c:	df000515 	stw	fp,20(sp)
 4041c90:	df000504 	addi	fp,sp,20
 4041c94:	e13ffc15 	stw	r4,-16(fp)
 4041c98:	e17ffd15 	stw	r5,-12(fp)
 4041c9c:	e1bffe15 	stw	r6,-8(fp)
 4041ca0:	e1ffff15 	stw	r7,-4(fp)
	// Save image to SDRAM pointer
	for (int pixel = 0; pixel<pixelNum; pixel++) {
 4041ca4:	e03ffb15 	stw	zero,-20(fp)
 4041ca8:	00001506 	br	4041d00 <imgToSDRAM+0x78>
		IOWR_32DIRECT(baseAddr,pixel*4,*(imgPtr+pixel+padding)<<24);
 4041cac:	e0bffb17 	ldw	r2,-20(fp)
 4041cb0:	1085883a 	add	r2,r2,r2
 4041cb4:	1085883a 	add	r2,r2,r2
 4041cb8:	1007883a 	mov	r3,r2
 4041cbc:	e0bffd17 	ldw	r2,-12(fp)
 4041cc0:	1885883a 	add	r2,r3,r2
 4041cc4:	1009883a 	mov	r4,r2
 4041cc8:	e0fffb17 	ldw	r3,-20(fp)
 4041ccc:	e0bfff17 	ldw	r2,-4(fp)
 4041cd0:	1885883a 	add	r2,r3,r2
 4041cd4:	1085883a 	add	r2,r2,r2
 4041cd8:	1085883a 	add	r2,r2,r2
 4041cdc:	1007883a 	mov	r3,r2
 4041ce0:	e0bffc17 	ldw	r2,-16(fp)
 4041ce4:	10c5883a 	add	r2,r2,r3
 4041ce8:	10800017 	ldw	r2,0(r2)
 4041cec:	1004963a 	slli	r2,r2,24
 4041cf0:	20800035 	stwio	r2,0(r4)
	return img;
}

void imgToSDRAM(int* imgPtr, int baseAddr, int pixelNum, int padding) {
	// Save image to SDRAM pointer
	for (int pixel = 0; pixel<pixelNum; pixel++) {
 4041cf4:	e0bffb17 	ldw	r2,-20(fp)
 4041cf8:	10800044 	addi	r2,r2,1
 4041cfc:	e0bffb15 	stw	r2,-20(fp)
 4041d00:	e0fffb17 	ldw	r3,-20(fp)
 4041d04:	e0bffe17 	ldw	r2,-8(fp)
 4041d08:	18bfe816 	blt	r3,r2,4041cac <__flash_rwdata_start+0xfffe757c>
		IOWR_32DIRECT(baseAddr,pixel*4,*(imgPtr+pixel+padding)<<24);
	}
}
 4041d0c:	0001883a 	nop
 4041d10:	e037883a 	mov	sp,fp
 4041d14:	df000017 	ldw	fp,0(sp)
 4041d18:	dec00104 	addi	sp,sp,4
 4041d1c:	f800283a 	ret

04041d20 <imageOneTask>:
 * ------------------------- */

/* ------------------------- *
 *    BEGIN SYSTEM TASKS 	 *
 * ------------------------- */
void imageOneTask(void* pdata) {
 4041d20:	defff904 	addi	sp,sp,-28
 4041d24:	dfc00615 	stw	ra,24(sp)
 4041d28:	df000515 	stw	fp,20(sp)
 4041d2c:	df000504 	addi	fp,sp,20
 4041d30:	e13fff15 	stw	r4,-4(fp)
	int switchVal;
	int* img;
	int* imgDS;
	INT8U err;
	while (1) {
		OSSemPend(semDisplay1,0,&err);
 4041d34:	d0a03b17 	ldw	r2,-32532(gp)
 4041d38:	e0fffe04 	addi	r3,fp,-8
 4041d3c:	180d883a 	mov	r6,r3
 4041d40:	000b883a 	mov	r5,zero
 4041d44:	1009883a 	mov	r4,r2
 4041d48:	4055bc40 	call	4055bc4 <OSSemPend>
		#if ENABLE_DEBUG_OUTPUT
		printf("I1T GO\n");
		#endif
		switchVal = IORD(SW_IN_BASE, 0);
 4041d4c:	00810234 	movhi	r2,1032
 4041d50:	10842804 	addi	r2,r2,4256
 4041d54:	10800037 	ldwio	r2,0(r2)
 4041d58:	e0bffd15 	stw	r2,-12(fp)
		switchVal = switchVal & 0b11;
 4041d5c:	e0bffd17 	ldw	r2,-12(fp)
 4041d60:	108000cc 	andi	r2,r2,3
 4041d64:	e0bffd15 	stw	r2,-12(fp)
		switch (switchVal) {
 4041d68:	e0bffd17 	ldw	r2,-12(fp)
 4041d6c:	10c00060 	cmpeqi	r3,r2,1
 4041d70:	1800181e 	bne	r3,zero,4041dd4 <imageOneTask+0xb4>
 4041d74:	10c00088 	cmpgei	r3,r2,2
 4041d78:	1800021e 	bne	r3,zero,4041d84 <imageOneTask+0x64>
 4041d7c:	10000626 	beq	r2,zero,4041d98 <imageOneTask+0x78>
 4041d80:	00005f06 	br	4041f00 <imageOneTask+0x1e0>
 4041d84:	10c000a0 	cmpeqi	r3,r2,2
 4041d88:	18002b1e 	bne	r3,zero,4041e38 <imageOneTask+0x118>
 4041d8c:	108000e0 	cmpeqi	r2,r2,3
 4041d90:	1000421e 	bne	r2,zero,4041e9c <imageOneTask+0x17c>
 4041d94:	00005a06 	br	4041f00 <imageOneTask+0x1e0>
		//Base image
		case 0b00:
			//downscale
			img = imgToPtr(SDRAM_BASEADDR, BUF_MAX_PIX);
 4041d98:	0152c004 	movi	r5,19200
 4041d9c:	0009883a 	mov	r4,zero
 4041da0:	4041be40 	call	4041be4 <imgToPtr>
 4041da4:	e0bffb15 	stw	r2,-20(fp)
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 0);
 4041da8:	000f883a 	mov	r7,zero
 4041dac:	01801e04 	movi	r6,120
 4041db0:	01402804 	movi	r5,160
 4041db4:	e13ffb17 	ldw	r4,-20(fp)
 4041db8:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4041dbc:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,0,0);
 4041dc0:	000d883a 	mov	r6,zero
 4041dc4:	000b883a 	mov	r5,zero
 4041dc8:	e13ffc17 	ldw	r4,-16(fp)
 4041dcc:	40407140 	call	4040714 <imageToBuffer>
			break;
 4041dd0:	00004b06 	br	4041f00 <imageOneTask+0x1e0>
		//Flip
		case 0b01:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockFlipImgPointer,0,&err);
 4041dd4:	d0a04017 	ldw	r2,-32512(gp)
 4041dd8:	e0fffe04 	addi	r3,fp,-8
 4041ddc:	180d883a 	mov	r6,r3
 4041de0:	000b883a 	mov	r5,zero
 4041de4:	1009883a 	mov	r4,r2
 4041de8:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(FLIPIMG_BASE, BUF_MAX_PIX);
 4041dec:	0152c004 	movi	r5,19200
 4041df0:	01000074 	movhi	r4,1
 4041df4:	210b0004 	addi	r4,r4,11264
 4041df8:	4041be40 	call	4041be4 <imgToPtr>
 4041dfc:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockFlipImgPointer);
 4041e00:	d0a04017 	ldw	r2,-32512(gp)
 4041e04:	1009883a 	mov	r4,r2
 4041e08:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 0);
 4041e0c:	000f883a 	mov	r7,zero
 4041e10:	01801e04 	movi	r6,120
 4041e14:	01402804 	movi	r5,160
 4041e18:	e13ffb17 	ldw	r4,-20(fp)
 4041e1c:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4041e20:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,0,0);
 4041e24:	000d883a 	mov	r6,zero
 4041e28:	000b883a 	mov	r5,zero
 4041e2c:	e13ffc17 	ldw	r4,-16(fp)
 4041e30:	40407140 	call	4040714 <imageToBuffer>
			break;
 4041e34:	00003206 	br	4041f00 <imageOneTask+0x1e0>
		//Blur
		case 0b10:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockBlurImgPointer,0,&err);
 4041e38:	d0a03d17 	ldw	r2,-32524(gp)
 4041e3c:	e0fffe04 	addi	r3,fp,-8
 4041e40:	180d883a 	mov	r6,r3
 4041e44:	000b883a 	mov	r5,zero
 4041e48:	1009883a 	mov	r4,r2
 4041e4c:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(BLURING_BASE, BUF_MAX_PIX);
 4041e50:	0152c004 	movi	r5,19200
 4041e54:	01000134 	movhi	r4,4
 4041e58:	21210004 	addi	r4,r4,-31744
 4041e5c:	4041be40 	call	4041be4 <imgToPtr>
 4041e60:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockBlurImgPointer);
 4041e64:	d0a03d17 	ldw	r2,-32524(gp)
 4041e68:	1009883a 	mov	r4,r2
 4041e6c:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 2);
 4041e70:	01c00084 	movi	r7,2
 4041e74:	01801e04 	movi	r6,120
 4041e78:	01402804 	movi	r5,160
 4041e7c:	e13ffb17 	ldw	r4,-20(fp)
 4041e80:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4041e84:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,0,0);
 4041e88:	000d883a 	mov	r6,zero
 4041e8c:	000b883a 	mov	r5,zero
 4041e90:	e13ffc17 	ldw	r4,-16(fp)
 4041e94:	40407140 	call	4040714 <imageToBuffer>
			break;
 4041e98:	00001906 	br	4041f00 <imageOneTask+0x1e0>
		//Edge
		case 0b11:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockEdgeImgPointer,0,&err);
 4041e9c:	d0a03517 	ldw	r2,-32556(gp)
 4041ea0:	e0fffe04 	addi	r3,fp,-8
 4041ea4:	180d883a 	mov	r6,r3
 4041ea8:	000b883a 	mov	r5,zero
 4041eac:	1009883a 	mov	r4,r2
 4041eb0:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(EDGEIMG_BASE, BUF_MAX_PIX);
 4041eb4:	0152c004 	movi	r5,19200
 4041eb8:	010000b4 	movhi	r4,2
 4041ebc:	21160004 	addi	r4,r4,22528
 4041ec0:	4041be40 	call	4041be4 <imgToPtr>
 4041ec4:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockEdgeImgPointer);
 4041ec8:	d0a03517 	ldw	r2,-32556(gp)
 4041ecc:	1009883a 	mov	r4,r2
 4041ed0:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 2);
 4041ed4:	01c00084 	movi	r7,2
 4041ed8:	01801e04 	movi	r6,120
 4041edc:	01402804 	movi	r5,160
 4041ee0:	e13ffb17 	ldw	r4,-20(fp)
 4041ee4:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4041ee8:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,0,0);
 4041eec:	000d883a 	mov	r6,zero
 4041ef0:	000b883a 	mov	r5,zero
 4041ef4:	e13ffc17 	ldw	r4,-16(fp)
 4041ef8:	40407140 	call	4040714 <imageToBuffer>
			break;
 4041efc:	0001883a 	nop
		}
		free(img);
 4041f00:	e13ffb17 	ldw	r4,-20(fp)
 4041f04:	40430800 	call	4043080 <free>
		free(imgDS);
 4041f08:	e13ffc17 	ldw	r4,-16(fp)
 4041f0c:	40430800 	call	4043080 <free>
		OSSemPost(semDisplay2);
 4041f10:	d0a03e17 	ldw	r2,-32520(gp)
 4041f14:	1009883a 	mov	r4,r2
 4041f18:	4055f3c0 	call	4055f3c <OSSemPost>
		OSTimeDlyHMSM(0, 0, 0, 250);
 4041f1c:	01c03e84 	movi	r7,250
 4041f20:	000d883a 	mov	r6,zero
 4041f24:	000b883a 	mov	r5,zero
 4041f28:	0009883a 	mov	r4,zero
 4041f2c:	4057acc0 	call	4057acc <OSTimeDlyHMSM>
	}
 4041f30:	003f8006 	br	4041d34 <__flash_rwdata_start+0xfffe7604>

04041f34 <imageTwoTask>:
}

void imageTwoTask(void* pdata) {
 4041f34:	defff904 	addi	sp,sp,-28
 4041f38:	dfc00615 	stw	ra,24(sp)
 4041f3c:	df000515 	stw	fp,20(sp)
 4041f40:	df000504 	addi	fp,sp,20
 4041f44:	e13fff15 	stw	r4,-4(fp)
	int switchVal;
	int* img;
	int* imgDS;
	INT8U err;
	while (1) {
		OSSemPend(semDisplay2,0,&err);
 4041f48:	d0a03e17 	ldw	r2,-32520(gp)
 4041f4c:	e0fffe04 	addi	r3,fp,-8
 4041f50:	180d883a 	mov	r6,r3
 4041f54:	000b883a 	mov	r5,zero
 4041f58:	1009883a 	mov	r4,r2
 4041f5c:	4055bc40 	call	4055bc4 <OSSemPend>
		#if ENABLE_DEBUG_OUTPUT
		printf("I2T GO\n");
		#endif
		switchVal = IORD(SW_IN_BASE, 0);
 4041f60:	00810234 	movhi	r2,1032
 4041f64:	10842804 	addi	r2,r2,4256
 4041f68:	10800037 	ldwio	r2,0(r2)
 4041f6c:	e0bffd15 	stw	r2,-12(fp)
		switchVal = (switchVal & 0b1100) >> 2;
 4041f70:	e0bffd17 	ldw	r2,-12(fp)
 4041f74:	1080030c 	andi	r2,r2,12
 4041f78:	1005d0ba 	srai	r2,r2,2
 4041f7c:	e0bffd15 	stw	r2,-12(fp)
		switch (switchVal) {
 4041f80:	e0bffd17 	ldw	r2,-12(fp)
 4041f84:	10c00060 	cmpeqi	r3,r2,1
 4041f88:	1800181e 	bne	r3,zero,4041fec <imageTwoTask+0xb8>
 4041f8c:	10c00088 	cmpgei	r3,r2,2
 4041f90:	1800021e 	bne	r3,zero,4041f9c <imageTwoTask+0x68>
 4041f94:	10000626 	beq	r2,zero,4041fb0 <imageTwoTask+0x7c>
 4041f98:	00005f06 	br	4042118 <imageTwoTask+0x1e4>
 4041f9c:	10c000a0 	cmpeqi	r3,r2,2
 4041fa0:	18002b1e 	bne	r3,zero,4042050 <imageTwoTask+0x11c>
 4041fa4:	108000e0 	cmpeqi	r2,r2,3
 4041fa8:	1000421e 	bne	r2,zero,40420b4 <imageTwoTask+0x180>
 4041fac:	00005a06 	br	4042118 <imageTwoTask+0x1e4>
		//Base image
		case 0b00:
			//downscale
			img = imgToPtr(SDRAM_BASEADDR, BUF_MAX_PIX);
 4041fb0:	0152c004 	movi	r5,19200
 4041fb4:	0009883a 	mov	r4,zero
 4041fb8:	4041be40 	call	4041be4 <imgToPtr>
 4041fbc:	e0bffb15 	stw	r2,-20(fp)
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 0);
 4041fc0:	000f883a 	mov	r7,zero
 4041fc4:	01801e04 	movi	r6,120
 4041fc8:	01402804 	movi	r5,160
 4041fcc:	e13ffb17 	ldw	r4,-20(fp)
 4041fd0:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4041fd4:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,IMG_WIDTH/2,0);
 4041fd8:	000d883a 	mov	r6,zero
 4041fdc:	01401404 	movi	r5,80
 4041fe0:	e13ffc17 	ldw	r4,-16(fp)
 4041fe4:	40407140 	call	4040714 <imageToBuffer>
			break;
 4041fe8:	00004b06 	br	4042118 <imageTwoTask+0x1e4>
			//Flip
		case 0b01:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockFlipImgPointer,0,&err);
 4041fec:	d0a04017 	ldw	r2,-32512(gp)
 4041ff0:	e0fffe04 	addi	r3,fp,-8
 4041ff4:	180d883a 	mov	r6,r3
 4041ff8:	000b883a 	mov	r5,zero
 4041ffc:	1009883a 	mov	r4,r2
 4042000:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(FLIPIMG_BASE, BUF_MAX_PIX);
 4042004:	0152c004 	movi	r5,19200
 4042008:	01000074 	movhi	r4,1
 404200c:	210b0004 	addi	r4,r4,11264
 4042010:	4041be40 	call	4041be4 <imgToPtr>
 4042014:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockFlipImgPointer);
 4042018:	d0a04017 	ldw	r2,-32512(gp)
 404201c:	1009883a 	mov	r4,r2
 4042020:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 0);
 4042024:	000f883a 	mov	r7,zero
 4042028:	01801e04 	movi	r6,120
 404202c:	01402804 	movi	r5,160
 4042030:	e13ffb17 	ldw	r4,-20(fp)
 4042034:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4042038:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,IMG_WIDTH/2,0);
 404203c:	000d883a 	mov	r6,zero
 4042040:	01401404 	movi	r5,80
 4042044:	e13ffc17 	ldw	r4,-16(fp)
 4042048:	40407140 	call	4040714 <imageToBuffer>
			break;
 404204c:	00003206 	br	4042118 <imageTwoTask+0x1e4>
			//Blur
		case 0b10:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockBlurImgPointer,0,&err);
 4042050:	d0a03d17 	ldw	r2,-32524(gp)
 4042054:	e0fffe04 	addi	r3,fp,-8
 4042058:	180d883a 	mov	r6,r3
 404205c:	000b883a 	mov	r5,zero
 4042060:	1009883a 	mov	r4,r2
 4042064:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(BLURING_BASE, BUF_MAX_PIX);
 4042068:	0152c004 	movi	r5,19200
 404206c:	01000134 	movhi	r4,4
 4042070:	21210004 	addi	r4,r4,-31744
 4042074:	4041be40 	call	4041be4 <imgToPtr>
 4042078:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockBlurImgPointer);
 404207c:	d0a03d17 	ldw	r2,-32524(gp)
 4042080:	1009883a 	mov	r4,r2
 4042084:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 2);
 4042088:	01c00084 	movi	r7,2
 404208c:	01801e04 	movi	r6,120
 4042090:	01402804 	movi	r5,160
 4042094:	e13ffb17 	ldw	r4,-20(fp)
 4042098:	4040aa80 	call	4040aa8 <downscaleImg2x>
 404209c:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,IMG_WIDTH/2,0);
 40420a0:	000d883a 	mov	r6,zero
 40420a4:	01401404 	movi	r5,80
 40420a8:	e13ffc17 	ldw	r4,-16(fp)
 40420ac:	40407140 	call	4040714 <imageToBuffer>
			break;
 40420b0:	00001906 	br	4042118 <imageTwoTask+0x1e4>
			//Edge
		case 0b11:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockEdgeImgPointer,0,&err);
 40420b4:	d0a03517 	ldw	r2,-32556(gp)
 40420b8:	e0fffe04 	addi	r3,fp,-8
 40420bc:	180d883a 	mov	r6,r3
 40420c0:	000b883a 	mov	r5,zero
 40420c4:	1009883a 	mov	r4,r2
 40420c8:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(EDGEIMG_BASE, BUF_MAX_PIX);
 40420cc:	0152c004 	movi	r5,19200
 40420d0:	010000b4 	movhi	r4,2
 40420d4:	21160004 	addi	r4,r4,22528
 40420d8:	4041be40 	call	4041be4 <imgToPtr>
 40420dc:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockEdgeImgPointer);
 40420e0:	d0a03517 	ldw	r2,-32556(gp)
 40420e4:	1009883a 	mov	r4,r2
 40420e8:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 2);
 40420ec:	01c00084 	movi	r7,2
 40420f0:	01801e04 	movi	r6,120
 40420f4:	01402804 	movi	r5,160
 40420f8:	e13ffb17 	ldw	r4,-20(fp)
 40420fc:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4042100:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,IMG_WIDTH/2,0);
 4042104:	000d883a 	mov	r6,zero
 4042108:	01401404 	movi	r5,80
 404210c:	e13ffc17 	ldw	r4,-16(fp)
 4042110:	40407140 	call	4040714 <imageToBuffer>
			break;
 4042114:	0001883a 	nop
		}
		free(img);
 4042118:	e13ffb17 	ldw	r4,-20(fp)
 404211c:	40430800 	call	4043080 <free>
		free(imgDS);
 4042120:	e13ffc17 	ldw	r4,-16(fp)
 4042124:	40430800 	call	4043080 <free>
		OSSemPost(semDisplay3);
 4042128:	d0a03717 	ldw	r2,-32548(gp)
 404212c:	1009883a 	mov	r4,r2
 4042130:	4055f3c0 	call	4055f3c <OSSemPost>
		OSTimeDlyHMSM(0, 0, 0, 250);
 4042134:	01c03e84 	movi	r7,250
 4042138:	000d883a 	mov	r6,zero
 404213c:	000b883a 	mov	r5,zero
 4042140:	0009883a 	mov	r4,zero
 4042144:	4057acc0 	call	4057acc <OSTimeDlyHMSM>
	}
 4042148:	003f7f06 	br	4041f48 <__flash_rwdata_start+0xfffe7818>

0404214c <imageThreeTask>:
}

void imageThreeTask(void* pdata) {
 404214c:	defff904 	addi	sp,sp,-28
 4042150:	dfc00615 	stw	ra,24(sp)
 4042154:	df000515 	stw	fp,20(sp)
 4042158:	df000504 	addi	fp,sp,20
 404215c:	e13fff15 	stw	r4,-4(fp)
	int switchVal;
	int* img;
	int* imgDS;
	INT8U err;
	while (1) {
		OSSemPend(semDisplay3,0,&err);
 4042160:	d0a03717 	ldw	r2,-32548(gp)
 4042164:	e0fffe04 	addi	r3,fp,-8
 4042168:	180d883a 	mov	r6,r3
 404216c:	000b883a 	mov	r5,zero
 4042170:	1009883a 	mov	r4,r2
 4042174:	4055bc40 	call	4055bc4 <OSSemPend>
		#if ENABLE_DEBUG_OUTPUT
		printf("I3T GO\n");
		#endif
		switchVal = IORD(SW_IN_BASE, 0);
 4042178:	00810234 	movhi	r2,1032
 404217c:	10842804 	addi	r2,r2,4256
 4042180:	10800037 	ldwio	r2,0(r2)
 4042184:	e0bffd15 	stw	r2,-12(fp)
		switchVal = (switchVal & 0b110000) >> 4;
 4042188:	e0bffd17 	ldw	r2,-12(fp)
 404218c:	10800c0c 	andi	r2,r2,48
 4042190:	1005d13a 	srai	r2,r2,4
 4042194:	e0bffd15 	stw	r2,-12(fp)
		switch (switchVal) {
 4042198:	e0bffd17 	ldw	r2,-12(fp)
 404219c:	10c00060 	cmpeqi	r3,r2,1
 40421a0:	1800181e 	bne	r3,zero,4042204 <imageThreeTask+0xb8>
 40421a4:	10c00088 	cmpgei	r3,r2,2
 40421a8:	1800021e 	bne	r3,zero,40421b4 <imageThreeTask+0x68>
 40421ac:	10000626 	beq	r2,zero,40421c8 <imageThreeTask+0x7c>
 40421b0:	00005f06 	br	4042330 <imageThreeTask+0x1e4>
 40421b4:	10c000a0 	cmpeqi	r3,r2,2
 40421b8:	18002b1e 	bne	r3,zero,4042268 <imageThreeTask+0x11c>
 40421bc:	108000e0 	cmpeqi	r2,r2,3
 40421c0:	1000421e 	bne	r2,zero,40422cc <imageThreeTask+0x180>
 40421c4:	00005a06 	br	4042330 <imageThreeTask+0x1e4>
		//Base image
		case 0b00:
			//downscale
			img = imgToPtr(SDRAM_BASEADDR, BUF_MAX_PIX);
 40421c8:	0152c004 	movi	r5,19200
 40421cc:	0009883a 	mov	r4,zero
 40421d0:	4041be40 	call	4041be4 <imgToPtr>
 40421d4:	e0bffb15 	stw	r2,-20(fp)
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 0);
 40421d8:	000f883a 	mov	r7,zero
 40421dc:	01801e04 	movi	r6,120
 40421e0:	01402804 	movi	r5,160
 40421e4:	e13ffb17 	ldw	r4,-20(fp)
 40421e8:	4040aa80 	call	4040aa8 <downscaleImg2x>
 40421ec:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,0,IMG_HEIGHT/2*IMG_WIDTH);
 40421f0:	01896004 	movi	r6,9600
 40421f4:	000b883a 	mov	r5,zero
 40421f8:	e13ffc17 	ldw	r4,-16(fp)
 40421fc:	40407140 	call	4040714 <imageToBuffer>
			break;
 4042200:	00004b06 	br	4042330 <imageThreeTask+0x1e4>
		//Flip
		case 0b01:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockFlipImgPointer,0,&err);
 4042204:	d0a04017 	ldw	r2,-32512(gp)
 4042208:	e0fffe04 	addi	r3,fp,-8
 404220c:	180d883a 	mov	r6,r3
 4042210:	000b883a 	mov	r5,zero
 4042214:	1009883a 	mov	r4,r2
 4042218:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(FLIPIMG_BASE, BUF_MAX_PIX);
 404221c:	0152c004 	movi	r5,19200
 4042220:	01000074 	movhi	r4,1
 4042224:	210b0004 	addi	r4,r4,11264
 4042228:	4041be40 	call	4041be4 <imgToPtr>
 404222c:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockFlipImgPointer);
 4042230:	d0a04017 	ldw	r2,-32512(gp)
 4042234:	1009883a 	mov	r4,r2
 4042238:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 0);
 404223c:	000f883a 	mov	r7,zero
 4042240:	01801e04 	movi	r6,120
 4042244:	01402804 	movi	r5,160
 4042248:	e13ffb17 	ldw	r4,-20(fp)
 404224c:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4042250:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,0,IMG_HEIGHT/2*IMG_WIDTH);
 4042254:	01896004 	movi	r6,9600
 4042258:	000b883a 	mov	r5,zero
 404225c:	e13ffc17 	ldw	r4,-16(fp)
 4042260:	40407140 	call	4040714 <imageToBuffer>
			break;
 4042264:	00003206 	br	4042330 <imageThreeTask+0x1e4>
		//Blur
		case 0b10:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockBlurImgPointer,0,&err);
 4042268:	d0a03d17 	ldw	r2,-32524(gp)
 404226c:	e0fffe04 	addi	r3,fp,-8
 4042270:	180d883a 	mov	r6,r3
 4042274:	000b883a 	mov	r5,zero
 4042278:	1009883a 	mov	r4,r2
 404227c:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(BLURING_BASE, BUF_MAX_PIX);
 4042280:	0152c004 	movi	r5,19200
 4042284:	01000134 	movhi	r4,4
 4042288:	21210004 	addi	r4,r4,-31744
 404228c:	4041be40 	call	4041be4 <imgToPtr>
 4042290:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockBlurImgPointer);
 4042294:	d0a03d17 	ldw	r2,-32524(gp)
 4042298:	1009883a 	mov	r4,r2
 404229c:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 2);
 40422a0:	01c00084 	movi	r7,2
 40422a4:	01801e04 	movi	r6,120
 40422a8:	01402804 	movi	r5,160
 40422ac:	e13ffb17 	ldw	r4,-20(fp)
 40422b0:	4040aa80 	call	4040aa8 <downscaleImg2x>
 40422b4:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,0,IMG_HEIGHT/2*IMG_WIDTH);
 40422b8:	01896004 	movi	r6,9600
 40422bc:	000b883a 	mov	r5,zero
 40422c0:	e13ffc17 	ldw	r4,-16(fp)
 40422c4:	40407140 	call	4040714 <imageToBuffer>
			break;
 40422c8:	00001906 	br	4042330 <imageThreeTask+0x1e4>
		//Edge
		case 0b11:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockEdgeImgPointer,0,&err);
 40422cc:	d0a03517 	ldw	r2,-32556(gp)
 40422d0:	e0fffe04 	addi	r3,fp,-8
 40422d4:	180d883a 	mov	r6,r3
 40422d8:	000b883a 	mov	r5,zero
 40422dc:	1009883a 	mov	r4,r2
 40422e0:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(EDGEIMG_BASE, BUF_MAX_PIX);
 40422e4:	0152c004 	movi	r5,19200
 40422e8:	010000b4 	movhi	r4,2
 40422ec:	21160004 	addi	r4,r4,22528
 40422f0:	4041be40 	call	4041be4 <imgToPtr>
 40422f4:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockEdgeImgPointer);
 40422f8:	d0a03517 	ldw	r2,-32556(gp)
 40422fc:	1009883a 	mov	r4,r2
 4042300:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 2);
 4042304:	01c00084 	movi	r7,2
 4042308:	01801e04 	movi	r6,120
 404230c:	01402804 	movi	r5,160
 4042310:	e13ffb17 	ldw	r4,-20(fp)
 4042314:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4042318:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,0,IMG_HEIGHT/2*IMG_WIDTH);
 404231c:	01896004 	movi	r6,9600
 4042320:	000b883a 	mov	r5,zero
 4042324:	e13ffc17 	ldw	r4,-16(fp)
 4042328:	40407140 	call	4040714 <imageToBuffer>
			break;
 404232c:	0001883a 	nop
		}
		free(img);
 4042330:	e13ffb17 	ldw	r4,-20(fp)
 4042334:	40430800 	call	4043080 <free>
		free(imgDS);
 4042338:	e13ffc17 	ldw	r4,-16(fp)
 404233c:	40430800 	call	4043080 <free>
		OSSemPost(semDisplay4);
 4042340:	d0a03617 	ldw	r2,-32552(gp)
 4042344:	1009883a 	mov	r4,r2
 4042348:	4055f3c0 	call	4055f3c <OSSemPost>
		OSTimeDlyHMSM(0, 0, 0, 250);
 404234c:	01c03e84 	movi	r7,250
 4042350:	000d883a 	mov	r6,zero
 4042354:	000b883a 	mov	r5,zero
 4042358:	0009883a 	mov	r4,zero
 404235c:	4057acc0 	call	4057acc <OSTimeDlyHMSM>
	}
 4042360:	003f7f06 	br	4042160 <__flash_rwdata_start+0xfffe7a30>

04042364 <imageFourTask>:
}

void imageFourTask(void* pdata) {
 4042364:	defff904 	addi	sp,sp,-28
 4042368:	dfc00615 	stw	ra,24(sp)
 404236c:	df000515 	stw	fp,20(sp)
 4042370:	df000504 	addi	fp,sp,20
 4042374:	e13fff15 	stw	r4,-4(fp)
	int switchVal;
	int* img;
	int* imgDS;
	INT8U err;
	while (1) {
		OSSemPend(semDisplay4,0,&err);
 4042378:	d0a03617 	ldw	r2,-32552(gp)
 404237c:	e0fffe04 	addi	r3,fp,-8
 4042380:	180d883a 	mov	r6,r3
 4042384:	000b883a 	mov	r5,zero
 4042388:	1009883a 	mov	r4,r2
 404238c:	4055bc40 	call	4055bc4 <OSSemPend>
		#if ENABLE_DEBUG_OUTPUT
		printf("I4T GO\n");
		#endif
		switchVal = IORD(SW_IN_BASE, 0);
 4042390:	00810234 	movhi	r2,1032
 4042394:	10842804 	addi	r2,r2,4256
 4042398:	10800037 	ldwio	r2,0(r2)
 404239c:	e0bffd15 	stw	r2,-12(fp)
		switchVal = (switchVal & 0b11000000) >> 6;
 40423a0:	e0bffd17 	ldw	r2,-12(fp)
 40423a4:	1080300c 	andi	r2,r2,192
 40423a8:	1005d1ba 	srai	r2,r2,6
 40423ac:	e0bffd15 	stw	r2,-12(fp)
		switch (switchVal) {
 40423b0:	e0bffd17 	ldw	r2,-12(fp)
 40423b4:	10c00060 	cmpeqi	r3,r2,1
 40423b8:	1800181e 	bne	r3,zero,404241c <imageFourTask+0xb8>
 40423bc:	10c00088 	cmpgei	r3,r2,2
 40423c0:	1800021e 	bne	r3,zero,40423cc <imageFourTask+0x68>
 40423c4:	10000626 	beq	r2,zero,40423e0 <imageFourTask+0x7c>
 40423c8:	00005f06 	br	4042548 <imageFourTask+0x1e4>
 40423cc:	10c000a0 	cmpeqi	r3,r2,2
 40423d0:	18002b1e 	bne	r3,zero,4042480 <imageFourTask+0x11c>
 40423d4:	108000e0 	cmpeqi	r2,r2,3
 40423d8:	1000421e 	bne	r2,zero,40424e4 <imageFourTask+0x180>
 40423dc:	00005a06 	br	4042548 <imageFourTask+0x1e4>
		//Base image
		case 0b00:
			//downscale
			img = imgToPtr(SDRAM_BASEADDR, BUF_MAX_PIX);
 40423e0:	0152c004 	movi	r5,19200
 40423e4:	0009883a 	mov	r4,zero
 40423e8:	4041be40 	call	4041be4 <imgToPtr>
 40423ec:	e0bffb15 	stw	r2,-20(fp)
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 0);
 40423f0:	000f883a 	mov	r7,zero
 40423f4:	01801e04 	movi	r6,120
 40423f8:	01402804 	movi	r5,160
 40423fc:	e13ffb17 	ldw	r4,-20(fp)
 4042400:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4042404:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,IMG_WIDTH/2,IMG_HEIGHT/2*IMG_WIDTH);
 4042408:	01896004 	movi	r6,9600
 404240c:	01401404 	movi	r5,80
 4042410:	e13ffc17 	ldw	r4,-16(fp)
 4042414:	40407140 	call	4040714 <imageToBuffer>
			break;
 4042418:	00004b06 	br	4042548 <imageFourTask+0x1e4>
		//Flip
		case 0b01:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockFlipImgPointer,0,&err);
 404241c:	d0a04017 	ldw	r2,-32512(gp)
 4042420:	e0fffe04 	addi	r3,fp,-8
 4042424:	180d883a 	mov	r6,r3
 4042428:	000b883a 	mov	r5,zero
 404242c:	1009883a 	mov	r4,r2
 4042430:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(FLIPIMG_BASE, BUF_MAX_PIX);
 4042434:	0152c004 	movi	r5,19200
 4042438:	01000074 	movhi	r4,1
 404243c:	210b0004 	addi	r4,r4,11264
 4042440:	4041be40 	call	4041be4 <imgToPtr>
 4042444:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockFlipImgPointer);
 4042448:	d0a04017 	ldw	r2,-32512(gp)
 404244c:	1009883a 	mov	r4,r2
 4042450:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 0);
 4042454:	000f883a 	mov	r7,zero
 4042458:	01801e04 	movi	r6,120
 404245c:	01402804 	movi	r5,160
 4042460:	e13ffb17 	ldw	r4,-20(fp)
 4042464:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4042468:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,IMG_WIDTH/2,IMG_HEIGHT/2*IMG_WIDTH);
 404246c:	01896004 	movi	r6,9600
 4042470:	01401404 	movi	r5,80
 4042474:	e13ffc17 	ldw	r4,-16(fp)
 4042478:	40407140 	call	4040714 <imageToBuffer>
			break;
 404247c:	00003206 	br	4042548 <imageFourTask+0x1e4>
		//Blur
		case 0b10:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockBlurImgPointer,0,&err);
 4042480:	d0a03d17 	ldw	r2,-32524(gp)
 4042484:	e0fffe04 	addi	r3,fp,-8
 4042488:	180d883a 	mov	r6,r3
 404248c:	000b883a 	mov	r5,zero
 4042490:	1009883a 	mov	r4,r2
 4042494:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(BLURING_BASE, BUF_MAX_PIX);
 4042498:	0152c004 	movi	r5,19200
 404249c:	01000134 	movhi	r4,4
 40424a0:	21210004 	addi	r4,r4,-31744
 40424a4:	4041be40 	call	4041be4 <imgToPtr>
 40424a8:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockBlurImgPointer);			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 2);
 40424ac:	d0a03d17 	ldw	r2,-32524(gp)
 40424b0:	1009883a 	mov	r4,r2
 40424b4:	4055f3c0 	call	4055f3c <OSSemPost>
 40424b8:	01c00084 	movi	r7,2
 40424bc:	01801e04 	movi	r6,120
 40424c0:	01402804 	movi	r5,160
 40424c4:	e13ffb17 	ldw	r4,-20(fp)
 40424c8:	4040aa80 	call	4040aa8 <downscaleImg2x>
 40424cc:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,IMG_WIDTH/2,IMG_HEIGHT/2*IMG_WIDTH);
 40424d0:	01896004 	movi	r6,9600
 40424d4:	01401404 	movi	r5,80
 40424d8:	e13ffc17 	ldw	r4,-16(fp)
 40424dc:	40407140 	call	4040714 <imageToBuffer>
			break;
 40424e0:	00001906 	br	4042548 <imageFourTask+0x1e4>
		//Edge
		case 0b11:
			// Hold Access to image while we retrieve data. Otherwise we will get tearing (if this was video data)
			OSSemPend(semLockEdgeImgPointer,0,&err);
 40424e4:	d0a03517 	ldw	r2,-32556(gp)
 40424e8:	e0fffe04 	addi	r3,fp,-8
 40424ec:	180d883a 	mov	r6,r3
 40424f0:	000b883a 	mov	r5,zero
 40424f4:	1009883a 	mov	r4,r2
 40424f8:	4055bc40 	call	4055bc4 <OSSemPend>
			img = imgToPtr(EDGEIMG_BASE, BUF_MAX_PIX);
 40424fc:	0152c004 	movi	r5,19200
 4042500:	010000b4 	movhi	r4,2
 4042504:	21160004 	addi	r4,r4,22528
 4042508:	4041be40 	call	4041be4 <imgToPtr>
 404250c:	e0bffb15 	stw	r2,-20(fp)
			OSSemPost(semLockEdgeImgPointer);
 4042510:	d0a03517 	ldw	r2,-32556(gp)
 4042514:	1009883a 	mov	r4,r2
 4042518:	4055f3c0 	call	4055f3c <OSSemPost>
			imgDS = downscaleImg2x(img, IMG_WIDTH, IMG_HEIGHT, 2);
 404251c:	01c00084 	movi	r7,2
 4042520:	01801e04 	movi	r6,120
 4042524:	01402804 	movi	r5,160
 4042528:	e13ffb17 	ldw	r4,-20(fp)
 404252c:	4040aa80 	call	4040aa8 <downscaleImg2x>
 4042530:	e0bffc15 	stw	r2,-16(fp)
			imageToBuffer(imgDS,IMG_WIDTH/2,IMG_HEIGHT/2*IMG_WIDTH);
 4042534:	01896004 	movi	r6,9600
 4042538:	01401404 	movi	r5,80
 404253c:	e13ffc17 	ldw	r4,-16(fp)
 4042540:	40407140 	call	4040714 <imageToBuffer>
			break;
 4042544:	0001883a 	nop
		}
		free(img);
 4042548:	e13ffb17 	ldw	r4,-20(fp)
 404254c:	40430800 	call	4043080 <free>
		free(imgDS);
 4042550:	e13ffc17 	ldw	r4,-16(fp)
 4042554:	40430800 	call	4043080 <free>

		OSSemPost(semDisplay1);
 4042558:	d0a03b17 	ldw	r2,-32532(gp)
 404255c:	1009883a 	mov	r4,r2
 4042560:	4055f3c0 	call	4055f3c <OSSemPost>
		OSTimeDlyHMSM(0, 0, 0, 250);
 4042564:	01c03e84 	movi	r7,250
 4042568:	000d883a 	mov	r6,zero
 404256c:	000b883a 	mov	r5,zero
 4042570:	0009883a 	mov	r4,zero
 4042574:	4057acc0 	call	4057acc <OSTimeDlyHMSM>
	}
 4042578:	003f7f06 	br	4042378 <__flash_rwdata_start+0xfffe7c48>

0404257c <buttonManagerTask>:
}
void buttonManagerTask (void* pdata) {
 404257c:	defffc04 	addi	sp,sp,-16
 4042580:	dfc00315 	stw	ra,12(sp)
 4042584:	df000215 	stw	fp,8(sp)
 4042588:	df000204 	addi	fp,sp,8
 404258c:	e13fff15 	stw	r4,-4(fp)
	INT8U semPendErr;
	while (1) {
		// Wait for interrupt
		OSSemPend(semKeyChange,0,&semPendErr);
 4042590:	d0a04117 	ldw	r2,-32508(gp)
 4042594:	e1bffe04 	addi	r6,fp,-8
 4042598:	000b883a 	mov	r5,zero
 404259c:	1009883a 	mov	r4,r2
 40425a0:	4055bc40 	call	4055bc4 <OSSemPend>
		// Received Interrupt Semaphore (GO TIME)
		// Flip the flag in the global variable as required and redraw image
		flipImgFlags ^= keyPressedContext;
 40425a4:	d0a03a17 	ldw	r2,-32536(gp)
 40425a8:	1007883a 	mov	r3,r2
 40425ac:	d0a02f03 	ldbu	r2,-32580(gp)
 40425b0:	1884f03a 	xor	r2,r3,r2
 40425b4:	d0a02f05 	stb	r2,-32580(gp)
		//writeImage(flipImgFlags);
		//printf(" FLIP FLAGS %x\n",flipImgFlags);
	}
 40425b8:	003ff506 	br	4042590 <__flash_rwdata_start+0xfffe7e60>

040425bc <switchManagerTask>:
}

void switchManagerTask (void* pdata) {
 40425bc:	defffc04 	addi	sp,sp,-16
 40425c0:	dfc00315 	stw	ra,12(sp)
 40425c4:	df000215 	stw	fp,8(sp)
 40425c8:	df000204 	addi	fp,sp,8
 40425cc:	e13fff15 	stw	r4,-4(fp)
	INT8U semPendErr;
	INT8U err2;
	while (1) {
		// Wait for interrupt
		OSSemPend(semSwitchChange,0,&semPendErr);
 40425d0:	d0a03917 	ldw	r2,-32540(gp)
 40425d4:	e1bffe04 	addi	r6,fp,-8
 40425d8:	000b883a 	mov	r5,zero
 40425dc:	1009883a 	mov	r4,r2
 40425e0:	4055bc40 	call	4055bc4 <OSSemPend>
		// Received Interrupt Semaphore (GO TIME)
		currentlyDislayed = IORD(SW_IN_BASE,0) >> 8;
 40425e4:	00810234 	movhi	r2,1032
 40425e8:	10842804 	addi	r2,r2,4256
 40425ec:	10800037 	ldwio	r2,0(r2)
 40425f0:	1005d23a 	srai	r2,r2,8
 40425f4:	d0a03415 	stw	r2,-32560(gp)
		} else if ((SwChangedContext & 0b11000000) != 0) {
			err2 = OSSemPost(semDisplay4);
			if (err2 != OS_NO_ERR) printf("Failed to post sem4: %x\n",err2);
			printf("SW4\n");
		}*/
	}
 40425f8:	003ff506 	br	40425d0 <__flash_rwdata_start+0xfffe7ea0>

040425fc <imageProcessorTask>:
}

/* Processes Images */
void imageProcessorTask(void* pdata)
{
 40425fc:	defff704 	addi	sp,sp,-36
 4042600:	dfc00815 	stw	ra,32(sp)
 4042604:	df000715 	stw	fp,28(sp)
 4042608:	df000704 	addi	fp,sp,28
 404260c:	e13fff15 	stw	r4,-4(fp)
	// Create Sem Error Variable
	INT8U semPendErr;

	// Define Img Effect Pointers
	int* img;
	int* imgFlipped = NULL;
 4042610:	e03ff915 	stw	zero,-28(fp)
	int* imgBlurred = NULL;
 4042614:	e03ffa15 	stw	zero,-24(fp)
	int* imgEdgeDetect = NULL;
 4042618:	e03ffb15 	stw	zero,-20(fp)

	// Preload image (this will be replaced when
	// we implement image switching with the switches)
	OSSemPend(semLockBaseImgPointer,0,&semPendErr);
 404261c:	d0a03f17 	ldw	r2,-32516(gp)
 4042620:	e0fffe04 	addi	r3,fp,-8
 4042624:	180d883a 	mov	r6,r3
 4042628:	000b883a 	mov	r5,zero
 404262c:	1009883a 	mov	r4,r2
 4042630:	4055bc40 	call	4055bc4 <OSSemPend>
	img = imgToPtr(SDRAM_BASEADDR,BUF_MAX_PIX);
 4042634:	0152c004 	movi	r5,19200
 4042638:	0009883a 	mov	r4,zero
 404263c:	4041be40 	call	4041be4 <imgToPtr>
 4042640:	e0bffc15 	stw	r2,-16(fp)
	OSSemPost(semLockBaseImgPointer);
 4042644:	d0a03f17 	ldw	r2,-32516(gp)
 4042648:	1009883a 	mov	r4,r2
 404264c:	4055f3c0 	call	4055f3c <OSSemPost>
	#if VERSION == 1
	int* edgeResH = NULL;
	int* edgeResV = NULL;
	#endif

	INT32U timeTemp = 0;
 4042650:	e03ffd15 	stw	zero,-12(fp)
	{
		#if ENABLE_DEBUG_OUTPUT
		printf("ImgProcess GO!\n");
		#endif
		// Lock Pointers
		OSSemPend(semLockFlipImgPointer,0,&semPendErr);
 4042654:	d0a04017 	ldw	r2,-32512(gp)
 4042658:	e0fffe04 	addi	r3,fp,-8
 404265c:	180d883a 	mov	r6,r3
 4042660:	000b883a 	mov	r5,zero
 4042664:	1009883a 	mov	r4,r2
 4042668:	4055bc40 	call	4055bc4 <OSSemPend>
		OSSemPend(semLockBlurImgPointer,0,&semPendErr);
 404266c:	d0a03d17 	ldw	r2,-32524(gp)
 4042670:	e0fffe04 	addi	r3,fp,-8
 4042674:	180d883a 	mov	r6,r3
 4042678:	000b883a 	mov	r5,zero
 404267c:	1009883a 	mov	r4,r2
 4042680:	4055bc40 	call	4055bc4 <OSSemPend>
		OSSemPend(semLockEdgeImgPointer,0,&semPendErr);
 4042684:	d0a03517 	ldw	r2,-32556(gp)
 4042688:	e0fffe04 	addi	r3,fp,-8
 404268c:	180d883a 	mov	r6,r3
 4042690:	000b883a 	mov	r5,zero
 4042694:	1009883a 	mov	r4,r2
 4042698:	4055bc40 	call	4055bc4 <OSSemPend>

		// Free Pointers to prevent Memory Leak
		free(imgFlipped);
 404269c:	e13ff917 	ldw	r4,-28(fp)
 40426a0:	40430800 	call	4043080 <free>
		free(imgBlurred);
 40426a4:	e13ffa17 	ldw	r4,-24(fp)
 40426a8:	40430800 	call	4043080 <free>
		free(imgEdgeDetect);
 40426ac:	e13ffb17 	ldw	r4,-20(fp)
 40426b0:	40430800 	call	4043080 <free>
		//  -- Process Image --
		// Flip Image
		timeTemp = OSTimeGet();
 40426b4:	4057df40 	call	4057df4 <OSTimeGet>
 40426b8:	e0bffd15 	stw	r2,-12(fp)
		imgFlipped = reverseImg(img, BUF_MAX_PIX);
 40426bc:	0152c004 	movi	r5,19200
 40426c0:	e13ffc17 	ldw	r4,-16(fp)
 40426c4:	4041b300 	call	4041b30 <reverseImg>
 40426c8:	e0bff915 	stw	r2,-28(fp)
		flipTime = OSTimeGet()-timeTemp;
 40426cc:	4057df40 	call	4057df4 <OSTimeGet>
 40426d0:	1007883a 	mov	r3,r2
 40426d4:	e0bffd17 	ldw	r2,-12(fp)
 40426d8:	1885c83a 	sub	r2,r3,r2
 40426dc:	d0a03015 	stw	r2,-32576(gp)

		// Blur image
		timeTemp = OSTimeGet();
 40426e0:	4057df40 	call	4057df4 <OSTimeGet>
 40426e4:	e0bffd15 	stw	r2,-12(fp)
		#if VERSION == 2
		imgBlurred = fastBlurImg(img, IMG_WIDTH, IMG_HEIGHT);
 40426e8:	01801e04 	movi	r6,120
 40426ec:	01402804 	movi	r5,160
 40426f0:	e13ffc17 	ldw	r4,-16(fp)
 40426f4:	404181c0 	call	404181c <fastBlurImg>
 40426f8:	e0bffa15 	stw	r2,-24(fp)
		#else
		imgBlurred = blurImgConv(img, IMG_WIDTH, IMG_HEIGHT);
		#endif
		blurTime = OSTimeGet()-timeTemp;
 40426fc:	4057df40 	call	4057df4 <OSTimeGet>
 4042700:	1007883a 	mov	r3,r2
 4042704:	e0bffd17 	ldw	r2,-12(fp)
 4042708:	1885c83a 	sub	r2,r3,r2
 404270c:	d0a03115 	stw	r2,-32572(gp)

		// Perform Edge detection
		timeTemp = OSTimeGet();
 4042710:	4057df40 	call	4057df4 <OSTimeGet>
 4042714:	e0bffd15 	stw	r2,-12(fp)
		#if VERSION == 2
		imgEdgeDetect = fastEdgeDetection(img, IMG_WIDTH, IMG_HEIGHT);
 4042718:	01801e04 	movi	r6,120
 404271c:	01402804 	movi	r5,160
 4042720:	e13ffc17 	ldw	r4,-16(fp)
 4042724:	40411e80 	call	40411e8 <fastEdgeDetection>
 4042728:	e0bffb15 	stw	r2,-20(fp)
		#else
		edgeResH = edgeDetectionConv(img, IMG_WIDTH, IMG_HEIGHT, 0);
		edgeResV = edgeDetectionConv(img, IMG_WIDTH, IMG_HEIGHT, 1);
		imgEdgeDetect = processEdgeDetection(edgeResH, edgeResV, (*edgeResH)*(*(edgeResH+1)));
		#endif
		edgeTime = OSTimeGet()-timeTemp;
 404272c:	4057df40 	call	4057df4 <OSTimeGet>
 4042730:	1007883a 	mov	r3,r2
 4042734:	e0bffd17 	ldw	r2,-12(fp)
 4042738:	1885c83a 	sub	r2,r3,r2
 404273c:	d0a03215 	stw	r2,-32568(gp)

		totalTime = flipTime+edgeTime+blurTime;
 4042740:	d0e03017 	ldw	r3,-32576(gp)
 4042744:	d0a03217 	ldw	r2,-32568(gp)
 4042748:	1887883a 	add	r3,r3,r2
 404274c:	d0a03117 	ldw	r2,-32572(gp)
 4042750:	1885883a 	add	r2,r3,r2
 4042754:	d0a03315 	stw	r2,-32564(gp)
		// Save to SDRAM
		imgToSDRAM(imgFlipped,    FLIPIMG_BASE, BUF_MAX_PIX, 0);
 4042758:	000f883a 	mov	r7,zero
 404275c:	0192c004 	movi	r6,19200
 4042760:	01400074 	movhi	r5,1
 4042764:	294b0004 	addi	r5,r5,11264
 4042768:	e13ff917 	ldw	r4,-28(fp)
 404276c:	4041c880 	call	4041c88 <imgToSDRAM>
		imgToSDRAM(imgEdgeDetect, EDGEIMG_BASE, BUF_MAX_PIX, 2);
 4042770:	01c00084 	movi	r7,2
 4042774:	0192c004 	movi	r6,19200
 4042778:	014000b4 	movhi	r5,2
 404277c:	29560004 	addi	r5,r5,22528
 4042780:	e13ffb17 	ldw	r4,-20(fp)
 4042784:	4041c880 	call	4041c88 <imgToSDRAM>
		imgToSDRAM(imgBlurred,    BLURING_BASE, BUF_MAX_PIX, 2);
 4042788:	01c00084 	movi	r7,2
 404278c:	0192c004 	movi	r6,19200
 4042790:	01400134 	movhi	r5,4
 4042794:	29610004 	addi	r5,r5,-31744
 4042798:	e13ffa17 	ldw	r4,-24(fp)
 404279c:	4041c880 	call	4041c88 <imgToSDRAM>

		// Release img pointers so they can be displayed
		OSSemPost(semLockFlipImgPointer);
 40427a0:	d0a04017 	ldw	r2,-32512(gp)
 40427a4:	1009883a 	mov	r4,r2
 40427a8:	4055f3c0 	call	4055f3c <OSSemPost>
		OSSemPost(semLockBlurImgPointer);
 40427ac:	d0a03d17 	ldw	r2,-32524(gp)
 40427b0:	1009883a 	mov	r4,r2
 40427b4:	4055f3c0 	call	4055f3c <OSSemPost>
		OSSemPost(semLockEdgeImgPointer);
 40427b8:	d0a03517 	ldw	r2,-32556(gp)
 40427bc:	1009883a 	mov	r4,r2
 40427c0:	4055f3c0 	call	4055f3c <OSSemPost>

		// Delay for 500ms
		OSTimeDlyHMSM(0, 0, 0, 500);
 40427c4:	01c07d04 	movi	r7,500
 40427c8:	000d883a 	mov	r6,zero
 40427cc:	000b883a 	mov	r5,zero
 40427d0:	0009883a 	mov	r4,zero
 40427d4:	4057acc0 	call	4057acc <OSTimeDlyHMSM>
	}
 40427d8:	003f9e06 	br	4042654 <__flash_rwdata_start+0xfffe7f24>

040427dc <mainTask>:
}


void mainTask(void* pdata)
{
 40427dc:	defff504 	addi	sp,sp,-44
 40427e0:	dfc00a15 	stw	ra,40(sp)
 40427e4:	df000915 	stw	fp,36(sp)
 40427e8:	df000904 	addi	fp,sp,36
 40427ec:	e13fff15 	stw	r4,-4(fp)
	// Compute CPU capacity with no task running
	INT8U err;
	OSStatInit();
 40427f0:	40512d00 	call	40512d0 <OSStatInit>

	// Create Semaphores and IRQHs
	semLockFlipImgPointer = OSSemCreate(1);
 40427f4:	01000044 	movi	r4,1
 40427f8:	40558ac0 	call	40558ac <OSSemCreate>
 40427fc:	d0a04015 	stw	r2,-32512(gp)
	semLockBlurImgPointer = OSSemCreate(1);
 4042800:	01000044 	movi	r4,1
 4042804:	40558ac0 	call	40558ac <OSSemCreate>
 4042808:	d0a03d15 	stw	r2,-32524(gp)
	semLockEdgeImgPointer = OSSemCreate(1);
 404280c:	01000044 	movi	r4,1
 4042810:	40558ac0 	call	40558ac <OSSemCreate>
 4042814:	d0a03515 	stw	r2,-32556(gp)
	semLockBaseImgPointer = OSSemCreate(1);
 4042818:	01000044 	movi	r4,1
 404281c:	40558ac0 	call	40558ac <OSSemCreate>
 4042820:	d0a03f15 	stw	r2,-32516(gp)

	semSwitchChange = OSSemCreate(1);
 4042824:	01000044 	movi	r4,1
 4042828:	40558ac0 	call	40558ac <OSSemCreate>
 404282c:	d0a03915 	stw	r2,-32540(gp)
	semKeyChange = OSSemCreate(1);
 4042830:	01000044 	movi	r4,1
 4042834:	40558ac0 	call	40558ac <OSSemCreate>
 4042838:	d0a04115 	stw	r2,-32508(gp)

	// Semaphores to block the image display tasks
	semDisplay1 = OSSemCreate(1);
 404283c:	01000044 	movi	r4,1
 4042840:	40558ac0 	call	40558ac <OSSemCreate>
 4042844:	d0a03b15 	stw	r2,-32532(gp)
	semDisplay2 = OSSemCreate(1);
 4042848:	01000044 	movi	r4,1
 404284c:	40558ac0 	call	40558ac <OSSemCreate>
 4042850:	d0a03e15 	stw	r2,-32520(gp)
	semDisplay3 = OSSemCreate(1);
 4042854:	01000044 	movi	r4,1
 4042858:	40558ac0 	call	40558ac <OSSemCreate>
 404285c:	d0a03715 	stw	r2,-32548(gp)
	semDisplay4 = OSSemCreate(1);
 4042860:	01000044 	movi	r4,1
 4042864:	40558ac0 	call	40558ac <OSSemCreate>
 4042868:	d0a03615 	stw	r2,-32552(gp)

	// Do this to cause the image tasks
	// to run in a Round-Robin style
	// Otherwise Disp4 takes forever
	OSSemPend(semDisplay2,0,&err);
 404286c:	d0a03e17 	ldw	r2,-32520(gp)
 4042870:	e0fffe04 	addi	r3,fp,-8
 4042874:	180d883a 	mov	r6,r3
 4042878:	000b883a 	mov	r5,zero
 404287c:	1009883a 	mov	r4,r2
 4042880:	4055bc40 	call	4055bc4 <OSSemPend>
	OSSemPend(semDisplay3,0,&err);
 4042884:	d0a03717 	ldw	r2,-32548(gp)
 4042888:	e0fffe04 	addi	r3,fp,-8
 404288c:	180d883a 	mov	r6,r3
 4042890:	000b883a 	mov	r5,zero
 4042894:	1009883a 	mov	r4,r2
 4042898:	4055bc40 	call	4055bc4 <OSSemPend>
	OSSemPend(semDisplay4,0,&err);
 404289c:	d0a03617 	ldw	r2,-32552(gp)
 40428a0:	e0fffe04 	addi	r3,fp,-8
 40428a4:	180d883a 	mov	r6,r3
 40428a8:	000b883a 	mov	r5,zero
 40428ac:	1009883a 	mov	r4,r2
 40428b0:	4055bc40 	call	4055bc4 <OSSemPend>

	initButtonIRQ();
 40428b4:	404063c0 	call	404063c <initButtonIRQ>
	initSwIRQ();
 40428b8:	40406a80 	call	40406a8 <initSwIRQ>

	/* --------------
		CREATE TASKS
	   -------------- */
	// Create buttonManagerTask to handle IRQ
	printf("Attempting to create buttonManagerTask\n");
 40428bc:	01008034 	movhi	r4,512
 40428c0:	21001604 	addi	r4,r4,88
 40428c4:	4043b140 	call	4043b14 <puts>
	error_code = OSTaskCreateExt(buttonManagerTask,
 40428c8:	d8000415 	stw	zero,16(sp)
 40428cc:	d8000315 	stw	zero,12(sp)
 40428d0:	00800084 	movi	r2,2
 40428d4:	d8800215 	stw	r2,8(sp)
 40428d8:	00808074 	movhi	r2,513
 40428dc:	1080d904 	addi	r2,r2,868
 40428e0:	d8800115 	stw	r2,4(sp)
 40428e4:	00800084 	movi	r2,2
 40428e8:	d8800015 	stw	r2,0(sp)
 40428ec:	01c00084 	movi	r7,2
 40428f0:	01808074 	movhi	r6,513
 40428f4:	3188d804 	addi	r6,r6,9056
 40428f8:	000b883a 	mov	r5,zero
 40428fc:	01010134 	movhi	r4,1028
 4042900:	21095f04 	addi	r4,r4,9596
 4042904:	40568f80 	call	40568f8 <OSTaskCreateExt>
 4042908:	10803fcc 	andi	r2,r2,255
 404290c:	e0bffd15 	stw	r2,-12(fp)
				  BUTTONMANAGERTASK_PRIORITY,
				  buttonManagerTask_stk,
				  BUTTONMANAGERTASK_PRIORITY,
				  NULL,
				  0);
	printf(" --> ");
 4042910:	01008034 	movhi	r4,512
 4042914:	21002004 	addi	r4,r4,128
 4042918:	4043a180 	call	4043a18 <printf>
	if (error_code != 0) printf("Error creating buttonManagerTask with error code %d\n", error_code); else printf("Created task successfully\n");
 404291c:	e0bffd17 	ldw	r2,-12(fp)
 4042920:	10000526 	beq	r2,zero,4042938 <mainTask+0x15c>
 4042924:	e17ffd17 	ldw	r5,-12(fp)
 4042928:	01008034 	movhi	r4,512
 404292c:	21002204 	addi	r4,r4,136
 4042930:	4043a180 	call	4043a18 <printf>
 4042934:	00000306 	br	4042944 <mainTask+0x168>
 4042938:	01008034 	movhi	r4,512
 404293c:	21003004 	addi	r4,r4,192
 4042940:	4043b140 	call	4043b14 <puts>

	printf("Attempting to create imageProcessorTask\n");
 4042944:	01008034 	movhi	r4,512
 4042948:	21003704 	addi	r4,r4,220
 404294c:	4043b140 	call	4043b14 <puts>
	error_code = OSTaskCreateExt(imageProcessorTask,
 4042950:	d8000415 	stw	zero,16(sp)
 4042954:	d8000315 	stw	zero,12(sp)
 4042958:	00800204 	movi	r2,8
 404295c:	d8800215 	stw	r2,8(sp)
 4042960:	00808034 	movhi	r2,512
 4042964:	1098d904 	addi	r2,r2,25444
 4042968:	d8800115 	stw	r2,4(sp)
 404296c:	00800204 	movi	r2,8
 4042970:	d8800015 	stw	r2,0(sp)
 4042974:	01c00204 	movi	r7,8
 4042978:	01808074 	movhi	r6,513
 404297c:	31a0d804 	addi	r6,r6,-31904
 4042980:	000b883a 	mov	r5,zero
 4042984:	01010134 	movhi	r4,1028
 4042988:	21097f04 	addi	r4,r4,9724
 404298c:	40568f80 	call	40568f8 <OSTaskCreateExt>
 4042990:	10803fcc 	andi	r2,r2,255
 4042994:	e0bffd15 	stw	r2,-12(fp)
				  IMAGEPROCESSORTASK_PRIORITY,
				  imageProcessorTask_stk,
				  IMAGEPROCESSORTASK_PRIORITY,
				  NULL,
				  0);
	printf(" --> ");
 4042998:	01008034 	movhi	r4,512
 404299c:	21002004 	addi	r4,r4,128
 40429a0:	4043a180 	call	4043a18 <printf>
	if (error_code != 0) printf("Error creating imageProcessorTask with error code %d\n", error_code); else printf("Created task successfully\n");
 40429a4:	e0bffd17 	ldw	r2,-12(fp)
 40429a8:	10000526 	beq	r2,zero,40429c0 <mainTask+0x1e4>
 40429ac:	e17ffd17 	ldw	r5,-12(fp)
 40429b0:	01008034 	movhi	r4,512
 40429b4:	21004104 	addi	r4,r4,260
 40429b8:	4043a180 	call	4043a18 <printf>
 40429bc:	00000306 	br	40429cc <mainTask+0x1f0>
 40429c0:	01008034 	movhi	r4,512
 40429c4:	21003004 	addi	r4,r4,192
 40429c8:	4043b140 	call	4043b14 <puts>
	//First Quadrant image
	printf("Attempting to create imageOneTask\n");
 40429cc:	01008034 	movhi	r4,512
 40429d0:	21004f04 	addi	r4,r4,316
 40429d4:	4043b140 	call	4043b14 <puts>
	error_code = OSTaskCreateExt(imageOneTask,
 40429d8:	d8000415 	stw	zero,16(sp)
 40429dc:	d8000315 	stw	zero,12(sp)
 40429e0:	00800244 	movi	r2,9
 40429e4:	d8800215 	stw	r2,8(sp)
 40429e8:	00808074 	movhi	r2,513
 40429ec:	10a0d904 	addi	r2,r2,-31900
 40429f0:	d8800115 	stw	r2,4(sp)
 40429f4:	00800244 	movi	r2,9
 40429f8:	d8800015 	stw	r2,0(sp)
 40429fc:	01c00244 	movi	r7,9
 4042a00:	01808074 	movhi	r6,513
 4042a04:	31a8d804 	addi	r6,r6,-23712
 4042a08:	000b883a 	mov	r5,zero
 4042a0c:	01010134 	movhi	r4,1028
 4042a10:	21074804 	addi	r4,r4,7456
 4042a14:	40568f80 	call	40568f8 <OSTaskCreateExt>
 4042a18:	10803fcc 	andi	r2,r2,255
 4042a1c:	e0bffd15 	stw	r2,-12(fp)
		IMAGEONETASK_PRIORITY,
		imageOneTask_stk,
		IMAGEONETASK_PRIORITY,
		NULL,
		0);
	printf(" --> ");
 4042a20:	01008034 	movhi	r4,512
 4042a24:	21002004 	addi	r4,r4,128
 4042a28:	4043a180 	call	4043a18 <printf>
	if (error_code != 0) printf("Error creating imageOneTask with error code %d\n", error_code); else printf("Created task successfully\n");
 4042a2c:	e0bffd17 	ldw	r2,-12(fp)
 4042a30:	10000526 	beq	r2,zero,4042a48 <mainTask+0x26c>
 4042a34:	e17ffd17 	ldw	r5,-12(fp)
 4042a38:	01008034 	movhi	r4,512
 4042a3c:	21005804 	addi	r4,r4,352
 4042a40:	4043a180 	call	4043a18 <printf>
 4042a44:	00000306 	br	4042a54 <mainTask+0x278>
 4042a48:	01008034 	movhi	r4,512
 4042a4c:	21003004 	addi	r4,r4,192
 4042a50:	4043b140 	call	4043b14 <puts>

	//Second quadrant image
	printf("Attempting to create imageTwoTask\n");
 4042a54:	01008034 	movhi	r4,512
 4042a58:	21006404 	addi	r4,r4,400
 4042a5c:	4043b140 	call	4043b14 <puts>
	error_code = OSTaskCreateExt(imageTwoTask,
 4042a60:	d8000415 	stw	zero,16(sp)
 4042a64:	d8000315 	stw	zero,12(sp)
 4042a68:	00800284 	movi	r2,10
 4042a6c:	d8800215 	stw	r2,8(sp)
 4042a70:	00808074 	movhi	r2,513
 4042a74:	10b0d904 	addi	r2,r2,-15516
 4042a78:	d8800115 	stw	r2,4(sp)
 4042a7c:	00800284 	movi	r2,10
 4042a80:	d8800015 	stw	r2,0(sp)
 4042a84:	01c00284 	movi	r7,10
 4042a88:	01808074 	movhi	r6,513
 4042a8c:	31b8d804 	addi	r6,r6,-7328
 4042a90:	000b883a 	mov	r5,zero
 4042a94:	01010134 	movhi	r4,1028
 4042a98:	2107cd04 	addi	r4,r4,7988
 4042a9c:	40568f80 	call	40568f8 <OSTaskCreateExt>
 4042aa0:	10803fcc 	andi	r2,r2,255
 4042aa4:	e0bffd15 	stw	r2,-12(fp)
		IMAGETWOTASK_PRIORITY,
		imageTwoTask_stk,
		IMAGETWOTASK_PRIORITY,
		NULL,
		0);
	printf(" --> ");
 4042aa8:	01008034 	movhi	r4,512
 4042aac:	21002004 	addi	r4,r4,128
 4042ab0:	4043a180 	call	4043a18 <printf>
	if (error_code != 0) printf("Error creating imageOneTask with error code %d\n", error_code); else printf("Created task successfully\n");
 4042ab4:	e0bffd17 	ldw	r2,-12(fp)
 4042ab8:	10000526 	beq	r2,zero,4042ad0 <mainTask+0x2f4>
 4042abc:	e17ffd17 	ldw	r5,-12(fp)
 4042ac0:	01008034 	movhi	r4,512
 4042ac4:	21005804 	addi	r4,r4,352
 4042ac8:	4043a180 	call	4043a18 <printf>
 4042acc:	00000306 	br	4042adc <mainTask+0x300>
 4042ad0:	01008034 	movhi	r4,512
 4042ad4:	21003004 	addi	r4,r4,192
 4042ad8:	4043b140 	call	4043b14 <puts>

	//Third quadrant image
	printf("Attempting to create imageThreeTask\n");
 4042adc:	01008034 	movhi	r4,512
 4042ae0:	21006d04 	addi	r4,r4,436
 4042ae4:	4043b140 	call	4043b14 <puts>
	error_code = OSTaskCreateExt(imageThreeTask,
 4042ae8:	d8000415 	stw	zero,16(sp)
 4042aec:	d8000315 	stw	zero,12(sp)
 4042af0:	008002c4 	movi	r2,11
 4042af4:	d8800215 	stw	r2,8(sp)
 4042af8:	00808034 	movhi	r2,512
 4042afc:	1088d904 	addi	r2,r2,9060
 4042b00:	d8800115 	stw	r2,4(sp)
 4042b04:	008002c4 	movi	r2,11
 4042b08:	d8800015 	stw	r2,0(sp)
 4042b0c:	01c002c4 	movi	r7,11
 4042b10:	01808034 	movhi	r6,512
 4042b14:	3190d804 	addi	r6,r6,17248
 4042b18:	000b883a 	mov	r5,zero
 4042b1c:	01010134 	movhi	r4,1028
 4042b20:	21085304 	addi	r4,r4,8524
 4042b24:	40568f80 	call	40568f8 <OSTaskCreateExt>
 4042b28:	10803fcc 	andi	r2,r2,255
 4042b2c:	e0bffd15 	stw	r2,-12(fp)
		IMAGETHREETASK_PRIORITY,
		imageThreeTask_stk,
		IMAGETHREETASK_PRIORITY,
		NULL,
		0);
	printf(" --> ");
 4042b30:	01008034 	movhi	r4,512
 4042b34:	21002004 	addi	r4,r4,128
 4042b38:	4043a180 	call	4043a18 <printf>
	if (error_code != 0) printf("Error creating imageOneTask with error code %d\n", error_code); else printf("Created task successfully\n");
 4042b3c:	e0bffd17 	ldw	r2,-12(fp)
 4042b40:	10000526 	beq	r2,zero,4042b58 <mainTask+0x37c>
 4042b44:	e17ffd17 	ldw	r5,-12(fp)
 4042b48:	01008034 	movhi	r4,512
 4042b4c:	21005804 	addi	r4,r4,352
 4042b50:	4043a180 	call	4043a18 <printf>
 4042b54:	00000306 	br	4042b64 <mainTask+0x388>
 4042b58:	01008034 	movhi	r4,512
 4042b5c:	21003004 	addi	r4,r4,192
 4042b60:	4043b140 	call	4043b14 <puts>

	//Fourth quadrant image
	printf("Attempting to create imageFourTask\n");
 4042b64:	01008034 	movhi	r4,512
 4042b68:	21007604 	addi	r4,r4,472
 4042b6c:	4043b140 	call	4043b14 <puts>
	error_code = OSTaskCreateExt(imageFourTask,
 4042b70:	d8000415 	stw	zero,16(sp)
 4042b74:	d8000315 	stw	zero,12(sp)
 4042b78:	00800304 	movi	r2,12
 4042b7c:	d8800215 	stw	r2,8(sp)
 4042b80:	00808074 	movhi	r2,513
 4042b84:	10a8d904 	addi	r2,r2,-23708
 4042b88:	d8800115 	stw	r2,4(sp)
 4042b8c:	00800304 	movi	r2,12
 4042b90:	d8800015 	stw	r2,0(sp)
 4042b94:	01c00304 	movi	r7,12
 4042b98:	01808074 	movhi	r6,513
 4042b9c:	31b0d804 	addi	r6,r6,-15520
 4042ba0:	000b883a 	mov	r5,zero
 4042ba4:	01010134 	movhi	r4,1028
 4042ba8:	2108d904 	addi	r4,r4,9060
 4042bac:	40568f80 	call	40568f8 <OSTaskCreateExt>
 4042bb0:	10803fcc 	andi	r2,r2,255
 4042bb4:	e0bffd15 	stw	r2,-12(fp)
		IMAGEFOURTASK_PRIORITY,
		imageFourTask_stk,
		IMAGEFOURTASK_PRIORITY,
		NULL,
		0);
	printf(" --> ");
 4042bb8:	01008034 	movhi	r4,512
 4042bbc:	21002004 	addi	r4,r4,128
 4042bc0:	4043a180 	call	4043a18 <printf>
	if (error_code != 0) printf("Error creating imageOneTask with error code %d\n", error_code); else printf("Created task successfully\n");
 4042bc4:	e0bffd17 	ldw	r2,-12(fp)
 4042bc8:	10000526 	beq	r2,zero,4042be0 <mainTask+0x404>
 4042bcc:	e17ffd17 	ldw	r5,-12(fp)
 4042bd0:	01008034 	movhi	r4,512
 4042bd4:	21005804 	addi	r4,r4,352
 4042bd8:	4043a180 	call	4043a18 <printf>
 4042bdc:	00000306 	br	4042bec <mainTask+0x410>
 4042be0:	01008034 	movhi	r4,512
 4042be4:	21003004 	addi	r4,r4,192
 4042be8:	4043b140 	call	4043b14 <puts>

	//Switch manager
	printf("Attempting to create SwitchTask\n");
 4042bec:	01008034 	movhi	r4,512
 4042bf0:	21007f04 	addi	r4,r4,508
 4042bf4:	4043b140 	call	4043b14 <puts>
		error_code = OSTaskCreateExt(switchManagerTask,
 4042bf8:	d8000415 	stw	zero,16(sp)
 4042bfc:	d8000315 	stw	zero,12(sp)
 4042c00:	008000c4 	movi	r2,3
 4042c04:	d8800215 	stw	r2,8(sp)
 4042c08:	00808034 	movhi	r2,512
 4042c0c:	1090d904 	addi	r2,r2,17252
 4042c10:	d8800115 	stw	r2,4(sp)
 4042c14:	008000c4 	movi	r2,3
 4042c18:	d8800015 	stw	r2,0(sp)
 4042c1c:	01c000c4 	movi	r7,3
 4042c20:	01808034 	movhi	r6,512
 4042c24:	3198d804 	addi	r6,r6,25440
 4042c28:	000b883a 	mov	r5,zero
 4042c2c:	01010134 	movhi	r4,1028
 4042c30:	21096f04 	addi	r4,r4,9660
 4042c34:	40568f80 	call	40568f8 <OSTaskCreateExt>
 4042c38:	10803fcc 	andi	r2,r2,255
 4042c3c:	e0bffd15 	stw	r2,-12(fp)
			SWITCHMANAGERTASK_PRIORITY,
			switchManagerTask_stk,
			SWITCHMANAGERTASK_PRIORITY,
			NULL,
			0);
		printf(" --> ");
 4042c40:	01008034 	movhi	r4,512
 4042c44:	21002004 	addi	r4,r4,128
 4042c48:	4043a180 	call	4043a18 <printf>
		if (error_code != 0) printf("Error creating imageOneTask with error code %d\n", error_code); else printf("Created task successfully\n");
 4042c4c:	e0bffd17 	ldw	r2,-12(fp)
 4042c50:	10000526 	beq	r2,zero,4042c68 <mainTask+0x48c>
 4042c54:	e17ffd17 	ldw	r5,-12(fp)
 4042c58:	01008034 	movhi	r4,512
 4042c5c:	21005804 	addi	r4,r4,352
 4042c60:	4043a180 	call	4043a18 <printf>
 4042c64:	00000306 	br	4042c74 <mainTask+0x498>
 4042c68:	01008034 	movhi	r4,512
 4042c6c:	21003004 	addi	r4,r4,192
 4042c70:	4043b140 	call	4043b14 <puts>
	free(img);
	*/
	INT32U dispTime;
	while (1)
	{
		displayDigit (HEXDISPLAYS5TO3_BASE, 2, ((OSCPUUsage/10)%10));
 4042c74:	d0a05a03 	ldbu	r2,-32408(gp)
 4042c78:	10803fcc 	andi	r2,r2,255
 4042c7c:	01400284 	movi	r5,10
 4042c80:	1009883a 	mov	r4,r2
 4042c84:	4042fb00 	call	4042fb0 <__udivsi3>
 4042c88:	10803fcc 	andi	r2,r2,255
 4042c8c:	01400284 	movi	r5,10
 4042c90:	1009883a 	mov	r4,r2
 4042c94:	40430140 	call	4043014 <__umodsi3>
 4042c98:	10803fcc 	andi	r2,r2,255
 4042c9c:	100d883a 	mov	r6,r2
 4042ca0:	01400084 	movi	r5,2
 4042ca4:	01010234 	movhi	r4,1032
 4042ca8:	21041004 	addi	r4,r4,4160
 4042cac:	40408200 	call	4040820 <displayDigit>
		displayDigit (HEXDISPLAYS5TO3_BASE, 1, OSCPUUsage%10);
 4042cb0:	d0a05a03 	ldbu	r2,-32408(gp)
 4042cb4:	10803fcc 	andi	r2,r2,255
 4042cb8:	01400284 	movi	r5,10
 4042cbc:	1009883a 	mov	r4,r2
 4042cc0:	40430140 	call	4043014 <__umodsi3>
 4042cc4:	10803fcc 	andi	r2,r2,255
 4042cc8:	100d883a 	mov	r6,r2
 4042ccc:	01400044 	movi	r5,1
 4042cd0:	01010234 	movhi	r4,1032
 4042cd4:	21041004 	addi	r4,r4,4160
 4042cd8:	40408200 	call	4040820 <displayDigit>
		if (currentlyDislayed == 0){
 4042cdc:	d0a03417 	ldw	r2,-32560(gp)
 4042ce0:	1000031e 	bne	r2,zero,4042cf0 <mainTask+0x514>
			dispTime = flipTime;
 4042ce4:	d0a03017 	ldw	r2,-32576(gp)
 4042ce8:	e0bffc15 	stw	r2,-16(fp)
 4042cec:	00001106 	br	4042d34 <mainTask+0x558>
		}
		else if (currentlyDislayed == 1){
 4042cf0:	d0a03417 	ldw	r2,-32560(gp)
 4042cf4:	10800058 	cmpnei	r2,r2,1
 4042cf8:	1000031e 	bne	r2,zero,4042d08 <mainTask+0x52c>
			dispTime = blurTime;
 4042cfc:	d0a03117 	ldw	r2,-32572(gp)
 4042d00:	e0bffc15 	stw	r2,-16(fp)
 4042d04:	00000b06 	br	4042d34 <mainTask+0x558>
		}
		else if (currentlyDislayed == 2){
 4042d08:	d0a03417 	ldw	r2,-32560(gp)
 4042d0c:	10800098 	cmpnei	r2,r2,2
 4042d10:	1000031e 	bne	r2,zero,4042d20 <mainTask+0x544>
			dispTime = edgeTime;
 4042d14:	d0a03217 	ldw	r2,-32568(gp)
 4042d18:	e0bffc15 	stw	r2,-16(fp)
 4042d1c:	00000506 	br	4042d34 <mainTask+0x558>
		}
		else if (currentlyDislayed == 3){
 4042d20:	d0a03417 	ldw	r2,-32560(gp)
 4042d24:	108000d8 	cmpnei	r2,r2,3
 4042d28:	1000021e 	bne	r2,zero,4042d34 <mainTask+0x558>
			dispTime = totalTime;
 4042d2c:	d0a03317 	ldw	r2,-32564(gp)
 4042d30:	e0bffc15 	stw	r2,-16(fp)
		}
		displayDigit (HEXDISPLAYS5TO3_BASE, 0, (dispTime/1000)%10);
 4042d34:	e0bffc17 	ldw	r2,-16(fp)
 4042d38:	0140fa04 	movi	r5,1000
 4042d3c:	1009883a 	mov	r4,r2
 4042d40:	4042fb00 	call	4042fb0 <__udivsi3>
 4042d44:	01400284 	movi	r5,10
 4042d48:	1009883a 	mov	r4,r2
 4042d4c:	40430140 	call	4043014 <__umodsi3>
 4042d50:	100d883a 	mov	r6,r2
 4042d54:	000b883a 	mov	r5,zero
 4042d58:	01010234 	movhi	r4,1032
 4042d5c:	21041004 	addi	r4,r4,4160
 4042d60:	40408200 	call	4040820 <displayDigit>
		displayDigit (HEXDISPLAYS2TO0_BASE, 2, (dispTime/100)%10);
 4042d64:	e0bffc17 	ldw	r2,-16(fp)
 4042d68:	01401904 	movi	r5,100
 4042d6c:	1009883a 	mov	r4,r2
 4042d70:	4042fb00 	call	4042fb0 <__udivsi3>
 4042d74:	01400284 	movi	r5,10
 4042d78:	1009883a 	mov	r4,r2
 4042d7c:	40430140 	call	4043014 <__umodsi3>
 4042d80:	100d883a 	mov	r6,r2
 4042d84:	01400084 	movi	r5,2
 4042d88:	01010234 	movhi	r4,1032
 4042d8c:	21041404 	addi	r4,r4,4176
 4042d90:	40408200 	call	4040820 <displayDigit>
		displayDigit (HEXDISPLAYS2TO0_BASE, 1, (dispTime/10)%10);
 4042d94:	e0bffc17 	ldw	r2,-16(fp)
 4042d98:	01400284 	movi	r5,10
 4042d9c:	1009883a 	mov	r4,r2
 4042da0:	4042fb00 	call	4042fb0 <__udivsi3>
 4042da4:	01400284 	movi	r5,10
 4042da8:	1009883a 	mov	r4,r2
 4042dac:	40430140 	call	4043014 <__umodsi3>
 4042db0:	100d883a 	mov	r6,r2
 4042db4:	01400044 	movi	r5,1
 4042db8:	01010234 	movhi	r4,1032
 4042dbc:	21041404 	addi	r4,r4,4176
 4042dc0:	40408200 	call	4040820 <displayDigit>
		displayDigit (HEXDISPLAYS2TO0_BASE, 0, dispTime%10);
 4042dc4:	e0bffc17 	ldw	r2,-16(fp)
 4042dc8:	01400284 	movi	r5,10
 4042dcc:	1009883a 	mov	r4,r2
 4042dd0:	40430140 	call	4043014 <__umodsi3>
 4042dd4:	100d883a 	mov	r6,r2
 4042dd8:	000b883a 	mov	r5,zero
 4042ddc:	01010234 	movhi	r4,1032
 4042de0:	21041404 	addi	r4,r4,4176
 4042de4:	40408200 	call	4040820 <displayDigit>

		// Delay 1s
		OSTimeDlyHMSM(0, 0, 0, 200);
 4042de8:	01c03204 	movi	r7,200
 4042dec:	000d883a 	mov	r6,zero
 4042df0:	000b883a 	mov	r5,zero
 4042df4:	0009883a 	mov	r4,zero
 4042df8:	4057acc0 	call	4057acc <OSTimeDlyHMSM>
	}
 4042dfc:	003f9d06 	br	4042c74 <__flash_rwdata_start+0xfffe8544>

04042e00 <main>:
 *     	  BEGIN MAIN()       *
 * ------------------------- */

/* The main function creates two task and starts multi-tasking */
int main(void)
{
 4042e00:	defff804 	addi	sp,sp,-32
 4042e04:	dfc00715 	stw	ra,28(sp)
 4042e08:	df000615 	stw	fp,24(sp)
 4042e0c:	df000604 	addi	fp,sp,24
	/* --------------
		PERFORM INIT
	   -------------- */
	// Clear buffer
	clrBuffer();
 4042e10:	40402900 	call	4040290 <clrBuffer>

	// Clear Hex displays
	IOWR(HEXDISPLAYS2TO0_BASE, 0, 0xffffff);
 4042e14:	00c04034 	movhi	r3,256
 4042e18:	18ffffc4 	addi	r3,r3,-1
 4042e1c:	00810234 	movhi	r2,1032
 4042e20:	10841404 	addi	r2,r2,4176
 4042e24:	10c00035 	stwio	r3,0(r2)
	IOWR(HEXDISPLAYS5TO3_BASE, 0, 0xffffff);
 4042e28:	00c04034 	movhi	r3,256
 4042e2c:	18ffffc4 	addi	r3,r3,-1
 4042e30:	00810234 	movhi	r2,1032
 4042e34:	10841004 	addi	r2,r2,4160
 4042e38:	10c00035 	stwio	r3,0(r2)
	    CREATE MAIN TASK
	   ------------------ */
	// Check for errors
	int error_code;
	// Attempt to create the main Task
	error_code = OSTaskCreateExt(mainTask,
 4042e3c:	d8000415 	stw	zero,16(sp)
 4042e40:	d8000315 	stw	zero,12(sp)
 4042e44:	00800044 	movi	r2,1
 4042e48:	d8800215 	stw	r2,8(sp)
 4042e4c:	00808074 	movhi	r2,513
 4042e50:	10b8d904 	addi	r2,r2,-7324
 4042e54:	d8800115 	stw	r2,4(sp)
 4042e58:	00800044 	movi	r2,1
 4042e5c:	d8800015 	stw	r2,0(sp)
 4042e60:	01c00044 	movi	r7,1
 4042e64:	01808074 	movhi	r6,513
 4042e68:	3180d804 	addi	r6,r6,864
 4042e6c:	000b883a 	mov	r5,zero
 4042e70:	01010134 	movhi	r4,1028
 4042e74:	2109f704 	addi	r4,r4,10204
 4042e78:	40568f80 	call	40568f8 <OSTaskCreateExt>
 4042e7c:	10803fcc 	andi	r2,r2,255
 4042e80:	e0bfff15 	stw	r2,-4(fp)
				  MAINTASK_PRIORITY,
				  mainTask_stk,
				  MAINTASK_PRIORITY,
				  NULL,
				  0);
	if (error_code != 0) printf("Error creating mainTask with error code %d\n", error_code);
 4042e84:	e0bfff17 	ldw	r2,-4(fp)
 4042e88:	10000426 	beq	r2,zero,4042e9c <main+0x9c>
 4042e8c:	e17fff17 	ldw	r5,-4(fp)
 4042e90:	01008034 	movhi	r4,512
 4042e94:	21008704 	addi	r4,r4,540
 4042e98:	4043a180 	call	4043a18 <printf>
	/* --------------
		 START RTOS
	   -------------- */
	OSStart();
 4042e9c:	40512600 	call	4051260 <OSStart>
	return 0;
 4042ea0:	0005883a 	mov	r2,zero
}
 4042ea4:	e037883a 	mov	sp,fp
 4042ea8:	dfc00117 	ldw	ra,4(sp)
 4042eac:	df000017 	ldw	fp,0(sp)
 4042eb0:	dec00204 	addi	sp,sp,8
 4042eb4:	f800283a 	ret

04042eb8 <__divsi3>:
 4042eb8:	20001b16 	blt	r4,zero,4042f28 <__divsi3+0x70>
 4042ebc:	000f883a 	mov	r7,zero
 4042ec0:	28001616 	blt	r5,zero,4042f1c <__divsi3+0x64>
 4042ec4:	200d883a 	mov	r6,r4
 4042ec8:	29001a2e 	bgeu	r5,r4,4042f34 <__divsi3+0x7c>
 4042ecc:	00800804 	movi	r2,32
 4042ed0:	00c00044 	movi	r3,1
 4042ed4:	00000106 	br	4042edc <__divsi3+0x24>
 4042ed8:	10000d26 	beq	r2,zero,4042f10 <__divsi3+0x58>
 4042edc:	294b883a 	add	r5,r5,r5
 4042ee0:	10bfffc4 	addi	r2,r2,-1
 4042ee4:	18c7883a 	add	r3,r3,r3
 4042ee8:	293ffb36 	bltu	r5,r4,4042ed8 <__flash_rwdata_start+0xfffe87a8>
 4042eec:	0005883a 	mov	r2,zero
 4042ef0:	18000726 	beq	r3,zero,4042f10 <__divsi3+0x58>
 4042ef4:	0005883a 	mov	r2,zero
 4042ef8:	31400236 	bltu	r6,r5,4042f04 <__divsi3+0x4c>
 4042efc:	314dc83a 	sub	r6,r6,r5
 4042f00:	10c4b03a 	or	r2,r2,r3
 4042f04:	1806d07a 	srli	r3,r3,1
 4042f08:	280ad07a 	srli	r5,r5,1
 4042f0c:	183ffa1e 	bne	r3,zero,4042ef8 <__flash_rwdata_start+0xfffe87c8>
 4042f10:	38000126 	beq	r7,zero,4042f18 <__divsi3+0x60>
 4042f14:	0085c83a 	sub	r2,zero,r2
 4042f18:	f800283a 	ret
 4042f1c:	014bc83a 	sub	r5,zero,r5
 4042f20:	39c0005c 	xori	r7,r7,1
 4042f24:	003fe706 	br	4042ec4 <__flash_rwdata_start+0xfffe8794>
 4042f28:	0109c83a 	sub	r4,zero,r4
 4042f2c:	01c00044 	movi	r7,1
 4042f30:	003fe306 	br	4042ec0 <__flash_rwdata_start+0xfffe8790>
 4042f34:	00c00044 	movi	r3,1
 4042f38:	003fee06 	br	4042ef4 <__flash_rwdata_start+0xfffe87c4>

04042f3c <__modsi3>:
 4042f3c:	20001716 	blt	r4,zero,4042f9c <__modsi3+0x60>
 4042f40:	000f883a 	mov	r7,zero
 4042f44:	2005883a 	mov	r2,r4
 4042f48:	28001216 	blt	r5,zero,4042f94 <__modsi3+0x58>
 4042f4c:	2900162e 	bgeu	r5,r4,4042fa8 <__modsi3+0x6c>
 4042f50:	01800804 	movi	r6,32
 4042f54:	00c00044 	movi	r3,1
 4042f58:	00000106 	br	4042f60 <__modsi3+0x24>
 4042f5c:	30000a26 	beq	r6,zero,4042f88 <__modsi3+0x4c>
 4042f60:	294b883a 	add	r5,r5,r5
 4042f64:	31bfffc4 	addi	r6,r6,-1
 4042f68:	18c7883a 	add	r3,r3,r3
 4042f6c:	293ffb36 	bltu	r5,r4,4042f5c <__flash_rwdata_start+0xfffe882c>
 4042f70:	18000526 	beq	r3,zero,4042f88 <__modsi3+0x4c>
 4042f74:	1806d07a 	srli	r3,r3,1
 4042f78:	11400136 	bltu	r2,r5,4042f80 <__modsi3+0x44>
 4042f7c:	1145c83a 	sub	r2,r2,r5
 4042f80:	280ad07a 	srli	r5,r5,1
 4042f84:	183ffb1e 	bne	r3,zero,4042f74 <__flash_rwdata_start+0xfffe8844>
 4042f88:	38000126 	beq	r7,zero,4042f90 <__modsi3+0x54>
 4042f8c:	0085c83a 	sub	r2,zero,r2
 4042f90:	f800283a 	ret
 4042f94:	014bc83a 	sub	r5,zero,r5
 4042f98:	003fec06 	br	4042f4c <__flash_rwdata_start+0xfffe881c>
 4042f9c:	0109c83a 	sub	r4,zero,r4
 4042fa0:	01c00044 	movi	r7,1
 4042fa4:	003fe706 	br	4042f44 <__flash_rwdata_start+0xfffe8814>
 4042fa8:	00c00044 	movi	r3,1
 4042fac:	003ff106 	br	4042f74 <__flash_rwdata_start+0xfffe8844>

04042fb0 <__udivsi3>:
 4042fb0:	200d883a 	mov	r6,r4
 4042fb4:	2900152e 	bgeu	r5,r4,404300c <__udivsi3+0x5c>
 4042fb8:	28001416 	blt	r5,zero,404300c <__udivsi3+0x5c>
 4042fbc:	00800804 	movi	r2,32
 4042fc0:	00c00044 	movi	r3,1
 4042fc4:	00000206 	br	4042fd0 <__udivsi3+0x20>
 4042fc8:	10000e26 	beq	r2,zero,4043004 <__udivsi3+0x54>
 4042fcc:	28000516 	blt	r5,zero,4042fe4 <__udivsi3+0x34>
 4042fd0:	294b883a 	add	r5,r5,r5
 4042fd4:	10bfffc4 	addi	r2,r2,-1
 4042fd8:	18c7883a 	add	r3,r3,r3
 4042fdc:	293ffa36 	bltu	r5,r4,4042fc8 <__flash_rwdata_start+0xfffe8898>
 4042fe0:	18000826 	beq	r3,zero,4043004 <__udivsi3+0x54>
 4042fe4:	0005883a 	mov	r2,zero
 4042fe8:	31400236 	bltu	r6,r5,4042ff4 <__udivsi3+0x44>
 4042fec:	314dc83a 	sub	r6,r6,r5
 4042ff0:	10c4b03a 	or	r2,r2,r3
 4042ff4:	1806d07a 	srli	r3,r3,1
 4042ff8:	280ad07a 	srli	r5,r5,1
 4042ffc:	183ffa1e 	bne	r3,zero,4042fe8 <__flash_rwdata_start+0xfffe88b8>
 4043000:	f800283a 	ret
 4043004:	0005883a 	mov	r2,zero
 4043008:	f800283a 	ret
 404300c:	00c00044 	movi	r3,1
 4043010:	003ff406 	br	4042fe4 <__flash_rwdata_start+0xfffe88b4>

04043014 <__umodsi3>:
 4043014:	2005883a 	mov	r2,r4
 4043018:	2900122e 	bgeu	r5,r4,4043064 <__umodsi3+0x50>
 404301c:	28001116 	blt	r5,zero,4043064 <__umodsi3+0x50>
 4043020:	01800804 	movi	r6,32
 4043024:	00c00044 	movi	r3,1
 4043028:	00000206 	br	4043034 <__umodsi3+0x20>
 404302c:	30000c26 	beq	r6,zero,4043060 <__umodsi3+0x4c>
 4043030:	28000516 	blt	r5,zero,4043048 <__umodsi3+0x34>
 4043034:	294b883a 	add	r5,r5,r5
 4043038:	31bfffc4 	addi	r6,r6,-1
 404303c:	18c7883a 	add	r3,r3,r3
 4043040:	293ffa36 	bltu	r5,r4,404302c <__flash_rwdata_start+0xfffe88fc>
 4043044:	18000626 	beq	r3,zero,4043060 <__umodsi3+0x4c>
 4043048:	1806d07a 	srli	r3,r3,1
 404304c:	11400136 	bltu	r2,r5,4043054 <__umodsi3+0x40>
 4043050:	1145c83a 	sub	r2,r2,r5
 4043054:	280ad07a 	srli	r5,r5,1
 4043058:	183ffb1e 	bne	r3,zero,4043048 <__flash_rwdata_start+0xfffe8918>
 404305c:	f800283a 	ret
 4043060:	f800283a 	ret
 4043064:	00c00044 	movi	r3,1
 4043068:	003ff706 	br	4043048 <__flash_rwdata_start+0xfffe8918>

0404306c <malloc>:
 404306c:	00808034 	movhi	r2,512
 4043070:	10886904 	addi	r2,r2,8612
 4043074:	200b883a 	mov	r5,r4
 4043078:	11000017 	ldw	r4,0(r2)
 404307c:	40430941 	jmpi	4043094 <_malloc_r>

04043080 <free>:
 4043080:	00808034 	movhi	r2,512
 4043084:	10886904 	addi	r2,r2,8612
 4043088:	200b883a 	mov	r5,r4
 404308c:	11000017 	ldw	r4,0(r2)
 4043090:	404802c1 	jmpi	404802c <_free_r>

04043094 <_malloc_r>:
 4043094:	defff504 	addi	sp,sp,-44
 4043098:	dc800315 	stw	r18,12(sp)
 404309c:	dfc00a15 	stw	ra,40(sp)
 40430a0:	df000915 	stw	fp,36(sp)
 40430a4:	ddc00815 	stw	r23,32(sp)
 40430a8:	dd800715 	stw	r22,28(sp)
 40430ac:	dd400615 	stw	r21,24(sp)
 40430b0:	dd000515 	stw	r20,20(sp)
 40430b4:	dcc00415 	stw	r19,16(sp)
 40430b8:	dc400215 	stw	r17,8(sp)
 40430bc:	dc000115 	stw	r16,4(sp)
 40430c0:	288002c4 	addi	r2,r5,11
 40430c4:	00c00584 	movi	r3,22
 40430c8:	2025883a 	mov	r18,r4
 40430cc:	18807f2e 	bgeu	r3,r2,40432cc <_malloc_r+0x238>
 40430d0:	047ffe04 	movi	r17,-8
 40430d4:	1462703a 	and	r17,r2,r17
 40430d8:	8800a316 	blt	r17,zero,4043368 <_malloc_r+0x2d4>
 40430dc:	8940a236 	bltu	r17,r5,4043368 <_malloc_r+0x2d4>
 40430e0:	40505000 	call	4050500 <__malloc_lock>
 40430e4:	00807dc4 	movi	r2,503
 40430e8:	1441e92e 	bgeu	r2,r17,4043890 <_malloc_r+0x7fc>
 40430ec:	8804d27a 	srli	r2,r17,9
 40430f0:	1000a126 	beq	r2,zero,4043378 <_malloc_r+0x2e4>
 40430f4:	00c00104 	movi	r3,4
 40430f8:	18811e36 	bltu	r3,r2,4043574 <_malloc_r+0x4e0>
 40430fc:	8804d1ba 	srli	r2,r17,6
 4043100:	12000e44 	addi	r8,r2,57
 4043104:	11c00e04 	addi	r7,r2,56
 4043108:	4209883a 	add	r4,r8,r8
 404310c:	04c08034 	movhi	r19,512
 4043110:	2109883a 	add	r4,r4,r4
 4043114:	9cc1b804 	addi	r19,r19,1760
 4043118:	2109883a 	add	r4,r4,r4
 404311c:	9909883a 	add	r4,r19,r4
 4043120:	24000117 	ldw	r16,4(r4)
 4043124:	213ffe04 	addi	r4,r4,-8
 4043128:	24009726 	beq	r4,r16,4043388 <_malloc_r+0x2f4>
 404312c:	80800117 	ldw	r2,4(r16)
 4043130:	01bfff04 	movi	r6,-4
 4043134:	014003c4 	movi	r5,15
 4043138:	1184703a 	and	r2,r2,r6
 404313c:	1447c83a 	sub	r3,r2,r17
 4043140:	28c00716 	blt	r5,r3,4043160 <_malloc_r+0xcc>
 4043144:	1800920e 	bge	r3,zero,4043390 <_malloc_r+0x2fc>
 4043148:	84000317 	ldw	r16,12(r16)
 404314c:	24008e26 	beq	r4,r16,4043388 <_malloc_r+0x2f4>
 4043150:	80800117 	ldw	r2,4(r16)
 4043154:	1184703a 	and	r2,r2,r6
 4043158:	1447c83a 	sub	r3,r2,r17
 404315c:	28fff90e 	bge	r5,r3,4043144 <__flash_rwdata_start+0xfffe8a14>
 4043160:	3809883a 	mov	r4,r7
 4043164:	01808034 	movhi	r6,512
 4043168:	9c000417 	ldw	r16,16(r19)
 404316c:	3181b804 	addi	r6,r6,1760
 4043170:	32000204 	addi	r8,r6,8
 4043174:	82013426 	beq	r16,r8,4043648 <_malloc_r+0x5b4>
 4043178:	80c00117 	ldw	r3,4(r16)
 404317c:	00bfff04 	movi	r2,-4
 4043180:	188e703a 	and	r7,r3,r2
 4043184:	3c45c83a 	sub	r2,r7,r17
 4043188:	00c003c4 	movi	r3,15
 404318c:	18811f16 	blt	r3,r2,404360c <_malloc_r+0x578>
 4043190:	32000515 	stw	r8,20(r6)
 4043194:	32000415 	stw	r8,16(r6)
 4043198:	10007f0e 	bge	r2,zero,4043398 <_malloc_r+0x304>
 404319c:	00807fc4 	movi	r2,511
 40431a0:	11c0fd36 	bltu	r2,r7,4043598 <_malloc_r+0x504>
 40431a4:	3806d0fa 	srli	r3,r7,3
 40431a8:	01c00044 	movi	r7,1
 40431ac:	30800117 	ldw	r2,4(r6)
 40431b0:	19400044 	addi	r5,r3,1
 40431b4:	294b883a 	add	r5,r5,r5
 40431b8:	1807d0ba 	srai	r3,r3,2
 40431bc:	294b883a 	add	r5,r5,r5
 40431c0:	294b883a 	add	r5,r5,r5
 40431c4:	298b883a 	add	r5,r5,r6
 40431c8:	38c6983a 	sll	r3,r7,r3
 40431cc:	29c00017 	ldw	r7,0(r5)
 40431d0:	2a7ffe04 	addi	r9,r5,-8
 40431d4:	1886b03a 	or	r3,r3,r2
 40431d8:	82400315 	stw	r9,12(r16)
 40431dc:	81c00215 	stw	r7,8(r16)
 40431e0:	30c00115 	stw	r3,4(r6)
 40431e4:	2c000015 	stw	r16,0(r5)
 40431e8:	3c000315 	stw	r16,12(r7)
 40431ec:	2005d0ba 	srai	r2,r4,2
 40431f0:	01400044 	movi	r5,1
 40431f4:	288a983a 	sll	r5,r5,r2
 40431f8:	19406f36 	bltu	r3,r5,40433b8 <_malloc_r+0x324>
 40431fc:	28c4703a 	and	r2,r5,r3
 4043200:	10000a1e 	bne	r2,zero,404322c <_malloc_r+0x198>
 4043204:	00bfff04 	movi	r2,-4
 4043208:	294b883a 	add	r5,r5,r5
 404320c:	2088703a 	and	r4,r4,r2
 4043210:	28c4703a 	and	r2,r5,r3
 4043214:	21000104 	addi	r4,r4,4
 4043218:	1000041e 	bne	r2,zero,404322c <_malloc_r+0x198>
 404321c:	294b883a 	add	r5,r5,r5
 4043220:	28c4703a 	and	r2,r5,r3
 4043224:	21000104 	addi	r4,r4,4
 4043228:	103ffc26 	beq	r2,zero,404321c <__flash_rwdata_start+0xfffe8aec>
 404322c:	02bfff04 	movi	r10,-4
 4043230:	024003c4 	movi	r9,15
 4043234:	21800044 	addi	r6,r4,1
 4043238:	318d883a 	add	r6,r6,r6
 404323c:	318d883a 	add	r6,r6,r6
 4043240:	318d883a 	add	r6,r6,r6
 4043244:	998d883a 	add	r6,r19,r6
 4043248:	333ffe04 	addi	r12,r6,-8
 404324c:	2017883a 	mov	r11,r4
 4043250:	31800104 	addi	r6,r6,4
 4043254:	34000017 	ldw	r16,0(r6)
 4043258:	31fffd04 	addi	r7,r6,-12
 404325c:	81c0041e 	bne	r16,r7,4043270 <_malloc_r+0x1dc>
 4043260:	0000fb06 	br	4043650 <_malloc_r+0x5bc>
 4043264:	1801030e 	bge	r3,zero,4043674 <_malloc_r+0x5e0>
 4043268:	84000317 	ldw	r16,12(r16)
 404326c:	81c0f826 	beq	r16,r7,4043650 <_malloc_r+0x5bc>
 4043270:	80800117 	ldw	r2,4(r16)
 4043274:	1284703a 	and	r2,r2,r10
 4043278:	1447c83a 	sub	r3,r2,r17
 404327c:	48fff90e 	bge	r9,r3,4043264 <__flash_rwdata_start+0xfffe8b34>
 4043280:	80800317 	ldw	r2,12(r16)
 4043284:	81000217 	ldw	r4,8(r16)
 4043288:	89400054 	ori	r5,r17,1
 404328c:	81400115 	stw	r5,4(r16)
 4043290:	20800315 	stw	r2,12(r4)
 4043294:	11000215 	stw	r4,8(r2)
 4043298:	8463883a 	add	r17,r16,r17
 404329c:	9c400515 	stw	r17,20(r19)
 40432a0:	9c400415 	stw	r17,16(r19)
 40432a4:	18800054 	ori	r2,r3,1
 40432a8:	88800115 	stw	r2,4(r17)
 40432ac:	8a000315 	stw	r8,12(r17)
 40432b0:	8a000215 	stw	r8,8(r17)
 40432b4:	88e3883a 	add	r17,r17,r3
 40432b8:	88c00015 	stw	r3,0(r17)
 40432bc:	9009883a 	mov	r4,r18
 40432c0:	40506200 	call	4050620 <__malloc_unlock>
 40432c4:	80800204 	addi	r2,r16,8
 40432c8:	00001b06 	br	4043338 <_malloc_r+0x2a4>
 40432cc:	04400404 	movi	r17,16
 40432d0:	89402536 	bltu	r17,r5,4043368 <_malloc_r+0x2d4>
 40432d4:	40505000 	call	4050500 <__malloc_lock>
 40432d8:	00800184 	movi	r2,6
 40432dc:	01000084 	movi	r4,2
 40432e0:	04c08034 	movhi	r19,512
 40432e4:	1085883a 	add	r2,r2,r2
 40432e8:	9cc1b804 	addi	r19,r19,1760
 40432ec:	1085883a 	add	r2,r2,r2
 40432f0:	9885883a 	add	r2,r19,r2
 40432f4:	14000117 	ldw	r16,4(r2)
 40432f8:	10fffe04 	addi	r3,r2,-8
 40432fc:	80c0d926 	beq	r16,r3,4043664 <_malloc_r+0x5d0>
 4043300:	80c00117 	ldw	r3,4(r16)
 4043304:	81000317 	ldw	r4,12(r16)
 4043308:	00bfff04 	movi	r2,-4
 404330c:	1884703a 	and	r2,r3,r2
 4043310:	81400217 	ldw	r5,8(r16)
 4043314:	8085883a 	add	r2,r16,r2
 4043318:	10c00117 	ldw	r3,4(r2)
 404331c:	29000315 	stw	r4,12(r5)
 4043320:	21400215 	stw	r5,8(r4)
 4043324:	18c00054 	ori	r3,r3,1
 4043328:	10c00115 	stw	r3,4(r2)
 404332c:	9009883a 	mov	r4,r18
 4043330:	40506200 	call	4050620 <__malloc_unlock>
 4043334:	80800204 	addi	r2,r16,8
 4043338:	dfc00a17 	ldw	ra,40(sp)
 404333c:	df000917 	ldw	fp,36(sp)
 4043340:	ddc00817 	ldw	r23,32(sp)
 4043344:	dd800717 	ldw	r22,28(sp)
 4043348:	dd400617 	ldw	r21,24(sp)
 404334c:	dd000517 	ldw	r20,20(sp)
 4043350:	dcc00417 	ldw	r19,16(sp)
 4043354:	dc800317 	ldw	r18,12(sp)
 4043358:	dc400217 	ldw	r17,8(sp)
 404335c:	dc000117 	ldw	r16,4(sp)
 4043360:	dec00b04 	addi	sp,sp,44
 4043364:	f800283a 	ret
 4043368:	00800304 	movi	r2,12
 404336c:	90800015 	stw	r2,0(r18)
 4043370:	0005883a 	mov	r2,zero
 4043374:	003ff006 	br	4043338 <__flash_rwdata_start+0xfffe8c08>
 4043378:	01002004 	movi	r4,128
 404337c:	02001004 	movi	r8,64
 4043380:	01c00fc4 	movi	r7,63
 4043384:	003f6106 	br	404310c <__flash_rwdata_start+0xfffe89dc>
 4043388:	4009883a 	mov	r4,r8
 404338c:	003f7506 	br	4043164 <__flash_rwdata_start+0xfffe8a34>
 4043390:	81000317 	ldw	r4,12(r16)
 4043394:	003fde06 	br	4043310 <__flash_rwdata_start+0xfffe8be0>
 4043398:	81c5883a 	add	r2,r16,r7
 404339c:	11400117 	ldw	r5,4(r2)
 40433a0:	9009883a 	mov	r4,r18
 40433a4:	29400054 	ori	r5,r5,1
 40433a8:	11400115 	stw	r5,4(r2)
 40433ac:	40506200 	call	4050620 <__malloc_unlock>
 40433b0:	80800204 	addi	r2,r16,8
 40433b4:	003fe006 	br	4043338 <__flash_rwdata_start+0xfffe8c08>
 40433b8:	9c000217 	ldw	r16,8(r19)
 40433bc:	00bfff04 	movi	r2,-4
 40433c0:	85800117 	ldw	r22,4(r16)
 40433c4:	b0ac703a 	and	r22,r22,r2
 40433c8:	b4400336 	bltu	r22,r17,40433d8 <_malloc_r+0x344>
 40433cc:	b445c83a 	sub	r2,r22,r17
 40433d0:	00c003c4 	movi	r3,15
 40433d4:	18805d16 	blt	r3,r2,404354c <_malloc_r+0x4b8>
 40433d8:	05c08034 	movhi	r23,512
 40433dc:	00808034 	movhi	r2,512
 40433e0:	1088aa04 	addi	r2,r2,8872
 40433e4:	bdc86604 	addi	r23,r23,8600
 40433e8:	15400017 	ldw	r21,0(r2)
 40433ec:	b8c00017 	ldw	r3,0(r23)
 40433f0:	00bfffc4 	movi	r2,-1
 40433f4:	858d883a 	add	r6,r16,r22
 40433f8:	8d6b883a 	add	r21,r17,r21
 40433fc:	1880ea26 	beq	r3,r2,40437a8 <_malloc_r+0x714>
 4043400:	ad4403c4 	addi	r21,r21,4111
 4043404:	00bc0004 	movi	r2,-4096
 4043408:	a8aa703a 	and	r21,r21,r2
 404340c:	a80b883a 	mov	r5,r21
 4043410:	9009883a 	mov	r4,r18
 4043414:	d9800015 	stw	r6,0(sp)
 4043418:	4043b280 	call	4043b28 <_sbrk_r>
 404341c:	1029883a 	mov	r20,r2
 4043420:	00bfffc4 	movi	r2,-1
 4043424:	d9800017 	ldw	r6,0(sp)
 4043428:	a080e826 	beq	r20,r2,40437cc <_malloc_r+0x738>
 404342c:	a180a636 	bltu	r20,r6,40436c8 <_malloc_r+0x634>
 4043430:	07008034 	movhi	fp,512
 4043434:	e708cf04 	addi	fp,fp,9020
 4043438:	e0800017 	ldw	r2,0(fp)
 404343c:	a887883a 	add	r3,r21,r2
 4043440:	e0c00015 	stw	r3,0(fp)
 4043444:	3500e626 	beq	r6,r20,40437e0 <_malloc_r+0x74c>
 4043448:	b9000017 	ldw	r4,0(r23)
 404344c:	00bfffc4 	movi	r2,-1
 4043450:	2080ee26 	beq	r4,r2,404380c <_malloc_r+0x778>
 4043454:	a185c83a 	sub	r2,r20,r6
 4043458:	10c5883a 	add	r2,r2,r3
 404345c:	e0800015 	stw	r2,0(fp)
 4043460:	a0c001cc 	andi	r3,r20,7
 4043464:	1800bc26 	beq	r3,zero,4043758 <_malloc_r+0x6c4>
 4043468:	a0e9c83a 	sub	r20,r20,r3
 404346c:	00840204 	movi	r2,4104
 4043470:	a5000204 	addi	r20,r20,8
 4043474:	10c7c83a 	sub	r3,r2,r3
 4043478:	a545883a 	add	r2,r20,r21
 404347c:	1083ffcc 	andi	r2,r2,4095
 4043480:	18abc83a 	sub	r21,r3,r2
 4043484:	a80b883a 	mov	r5,r21
 4043488:	9009883a 	mov	r4,r18
 404348c:	4043b280 	call	4043b28 <_sbrk_r>
 4043490:	00ffffc4 	movi	r3,-1
 4043494:	10c0e126 	beq	r2,r3,404381c <_malloc_r+0x788>
 4043498:	1505c83a 	sub	r2,r2,r20
 404349c:	1545883a 	add	r2,r2,r21
 40434a0:	10800054 	ori	r2,r2,1
 40434a4:	e0c00017 	ldw	r3,0(fp)
 40434a8:	9d000215 	stw	r20,8(r19)
 40434ac:	a0800115 	stw	r2,4(r20)
 40434b0:	a8c7883a 	add	r3,r21,r3
 40434b4:	e0c00015 	stw	r3,0(fp)
 40434b8:	84c00e26 	beq	r16,r19,40434f4 <_malloc_r+0x460>
 40434bc:	018003c4 	movi	r6,15
 40434c0:	3580a72e 	bgeu	r6,r22,4043760 <_malloc_r+0x6cc>
 40434c4:	81400117 	ldw	r5,4(r16)
 40434c8:	013ffe04 	movi	r4,-8
 40434cc:	b0bffd04 	addi	r2,r22,-12
 40434d0:	1104703a 	and	r2,r2,r4
 40434d4:	2900004c 	andi	r4,r5,1
 40434d8:	2088b03a 	or	r4,r4,r2
 40434dc:	81000115 	stw	r4,4(r16)
 40434e0:	01400144 	movi	r5,5
 40434e4:	8089883a 	add	r4,r16,r2
 40434e8:	21400115 	stw	r5,4(r4)
 40434ec:	21400215 	stw	r5,8(r4)
 40434f0:	3080cd36 	bltu	r6,r2,4043828 <_malloc_r+0x794>
 40434f4:	00808034 	movhi	r2,512
 40434f8:	1088a904 	addi	r2,r2,8868
 40434fc:	11000017 	ldw	r4,0(r2)
 4043500:	20c0012e 	bgeu	r4,r3,4043508 <_malloc_r+0x474>
 4043504:	10c00015 	stw	r3,0(r2)
 4043508:	00808034 	movhi	r2,512
 404350c:	1088a804 	addi	r2,r2,8864
 4043510:	11000017 	ldw	r4,0(r2)
 4043514:	9c000217 	ldw	r16,8(r19)
 4043518:	20c0012e 	bgeu	r4,r3,4043520 <_malloc_r+0x48c>
 404351c:	10c00015 	stw	r3,0(r2)
 4043520:	80c00117 	ldw	r3,4(r16)
 4043524:	00bfff04 	movi	r2,-4
 4043528:	1886703a 	and	r3,r3,r2
 404352c:	1c45c83a 	sub	r2,r3,r17
 4043530:	1c400236 	bltu	r3,r17,404353c <_malloc_r+0x4a8>
 4043534:	00c003c4 	movi	r3,15
 4043538:	18800416 	blt	r3,r2,404354c <_malloc_r+0x4b8>
 404353c:	9009883a 	mov	r4,r18
 4043540:	40506200 	call	4050620 <__malloc_unlock>
 4043544:	0005883a 	mov	r2,zero
 4043548:	003f7b06 	br	4043338 <__flash_rwdata_start+0xfffe8c08>
 404354c:	88c00054 	ori	r3,r17,1
 4043550:	80c00115 	stw	r3,4(r16)
 4043554:	8463883a 	add	r17,r16,r17
 4043558:	10800054 	ori	r2,r2,1
 404355c:	9c400215 	stw	r17,8(r19)
 4043560:	88800115 	stw	r2,4(r17)
 4043564:	9009883a 	mov	r4,r18
 4043568:	40506200 	call	4050620 <__malloc_unlock>
 404356c:	80800204 	addi	r2,r16,8
 4043570:	003f7106 	br	4043338 <__flash_rwdata_start+0xfffe8c08>
 4043574:	00c00504 	movi	r3,20
 4043578:	18804a2e 	bgeu	r3,r2,40436a4 <_malloc_r+0x610>
 404357c:	00c01504 	movi	r3,84
 4043580:	18806e36 	bltu	r3,r2,404373c <_malloc_r+0x6a8>
 4043584:	8804d33a 	srli	r2,r17,12
 4043588:	12001bc4 	addi	r8,r2,111
 404358c:	11c01b84 	addi	r7,r2,110
 4043590:	4209883a 	add	r4,r8,r8
 4043594:	003edd06 	br	404310c <__flash_rwdata_start+0xfffe89dc>
 4043598:	3804d27a 	srli	r2,r7,9
 404359c:	00c00104 	movi	r3,4
 40435a0:	1880442e 	bgeu	r3,r2,40436b4 <_malloc_r+0x620>
 40435a4:	00c00504 	movi	r3,20
 40435a8:	18808136 	bltu	r3,r2,40437b0 <_malloc_r+0x71c>
 40435ac:	11401704 	addi	r5,r2,92
 40435b0:	10c016c4 	addi	r3,r2,91
 40435b4:	294b883a 	add	r5,r5,r5
 40435b8:	294b883a 	add	r5,r5,r5
 40435bc:	294b883a 	add	r5,r5,r5
 40435c0:	994b883a 	add	r5,r19,r5
 40435c4:	28800017 	ldw	r2,0(r5)
 40435c8:	01808034 	movhi	r6,512
 40435cc:	297ffe04 	addi	r5,r5,-8
 40435d0:	3181b804 	addi	r6,r6,1760
 40435d4:	28806526 	beq	r5,r2,404376c <_malloc_r+0x6d8>
 40435d8:	01bfff04 	movi	r6,-4
 40435dc:	10c00117 	ldw	r3,4(r2)
 40435e0:	1986703a 	and	r3,r3,r6
 40435e4:	38c0022e 	bgeu	r7,r3,40435f0 <_malloc_r+0x55c>
 40435e8:	10800217 	ldw	r2,8(r2)
 40435ec:	28bffb1e 	bne	r5,r2,40435dc <__flash_rwdata_start+0xfffe8eac>
 40435f0:	11400317 	ldw	r5,12(r2)
 40435f4:	98c00117 	ldw	r3,4(r19)
 40435f8:	81400315 	stw	r5,12(r16)
 40435fc:	80800215 	stw	r2,8(r16)
 4043600:	2c000215 	stw	r16,8(r5)
 4043604:	14000315 	stw	r16,12(r2)
 4043608:	003ef806 	br	40431ec <__flash_rwdata_start+0xfffe8abc>
 404360c:	88c00054 	ori	r3,r17,1
 4043610:	80c00115 	stw	r3,4(r16)
 4043614:	8463883a 	add	r17,r16,r17
 4043618:	34400515 	stw	r17,20(r6)
 404361c:	34400415 	stw	r17,16(r6)
 4043620:	10c00054 	ori	r3,r2,1
 4043624:	8a000315 	stw	r8,12(r17)
 4043628:	8a000215 	stw	r8,8(r17)
 404362c:	88c00115 	stw	r3,4(r17)
 4043630:	88a3883a 	add	r17,r17,r2
 4043634:	88800015 	stw	r2,0(r17)
 4043638:	9009883a 	mov	r4,r18
 404363c:	40506200 	call	4050620 <__malloc_unlock>
 4043640:	80800204 	addi	r2,r16,8
 4043644:	003f3c06 	br	4043338 <__flash_rwdata_start+0xfffe8c08>
 4043648:	30c00117 	ldw	r3,4(r6)
 404364c:	003ee706 	br	40431ec <__flash_rwdata_start+0xfffe8abc>
 4043650:	5ac00044 	addi	r11,r11,1
 4043654:	588000cc 	andi	r2,r11,3
 4043658:	31800204 	addi	r6,r6,8
 404365c:	103efd1e 	bne	r2,zero,4043254 <__flash_rwdata_start+0xfffe8b24>
 4043660:	00002406 	br	40436f4 <_malloc_r+0x660>
 4043664:	14000317 	ldw	r16,12(r2)
 4043668:	143f251e 	bne	r2,r16,4043300 <__flash_rwdata_start+0xfffe8bd0>
 404366c:	21000084 	addi	r4,r4,2
 4043670:	003ebc06 	br	4043164 <__flash_rwdata_start+0xfffe8a34>
 4043674:	8085883a 	add	r2,r16,r2
 4043678:	10c00117 	ldw	r3,4(r2)
 404367c:	81000317 	ldw	r4,12(r16)
 4043680:	81400217 	ldw	r5,8(r16)
 4043684:	18c00054 	ori	r3,r3,1
 4043688:	10c00115 	stw	r3,4(r2)
 404368c:	29000315 	stw	r4,12(r5)
 4043690:	21400215 	stw	r5,8(r4)
 4043694:	9009883a 	mov	r4,r18
 4043698:	40506200 	call	4050620 <__malloc_unlock>
 404369c:	80800204 	addi	r2,r16,8
 40436a0:	003f2506 	br	4043338 <__flash_rwdata_start+0xfffe8c08>
 40436a4:	12001704 	addi	r8,r2,92
 40436a8:	11c016c4 	addi	r7,r2,91
 40436ac:	4209883a 	add	r4,r8,r8
 40436b0:	003e9606 	br	404310c <__flash_rwdata_start+0xfffe89dc>
 40436b4:	3804d1ba 	srli	r2,r7,6
 40436b8:	11400e44 	addi	r5,r2,57
 40436bc:	10c00e04 	addi	r3,r2,56
 40436c0:	294b883a 	add	r5,r5,r5
 40436c4:	003fbc06 	br	40435b8 <__flash_rwdata_start+0xfffe8e88>
 40436c8:	84ff5926 	beq	r16,r19,4043430 <__flash_rwdata_start+0xfffe8d00>
 40436cc:	00808034 	movhi	r2,512
 40436d0:	1081b804 	addi	r2,r2,1760
 40436d4:	14000217 	ldw	r16,8(r2)
 40436d8:	00bfff04 	movi	r2,-4
 40436dc:	80c00117 	ldw	r3,4(r16)
 40436e0:	1886703a 	and	r3,r3,r2
 40436e4:	003f9106 	br	404352c <__flash_rwdata_start+0xfffe8dfc>
 40436e8:	60800217 	ldw	r2,8(r12)
 40436ec:	213fffc4 	addi	r4,r4,-1
 40436f0:	1300651e 	bne	r2,r12,4043888 <_malloc_r+0x7f4>
 40436f4:	208000cc 	andi	r2,r4,3
 40436f8:	633ffe04 	addi	r12,r12,-8
 40436fc:	103ffa1e 	bne	r2,zero,40436e8 <__flash_rwdata_start+0xfffe8fb8>
 4043700:	98800117 	ldw	r2,4(r19)
 4043704:	0146303a 	nor	r3,zero,r5
 4043708:	1884703a 	and	r2,r3,r2
 404370c:	98800115 	stw	r2,4(r19)
 4043710:	294b883a 	add	r5,r5,r5
 4043714:	117f2836 	bltu	r2,r5,40433b8 <__flash_rwdata_start+0xfffe8c88>
 4043718:	283f2726 	beq	r5,zero,40433b8 <__flash_rwdata_start+0xfffe8c88>
 404371c:	2886703a 	and	r3,r5,r2
 4043720:	5809883a 	mov	r4,r11
 4043724:	183ec31e 	bne	r3,zero,4043234 <__flash_rwdata_start+0xfffe8b04>
 4043728:	294b883a 	add	r5,r5,r5
 404372c:	2886703a 	and	r3,r5,r2
 4043730:	21000104 	addi	r4,r4,4
 4043734:	183ffc26 	beq	r3,zero,4043728 <__flash_rwdata_start+0xfffe8ff8>
 4043738:	003ebe06 	br	4043234 <__flash_rwdata_start+0xfffe8b04>
 404373c:	00c05504 	movi	r3,340
 4043740:	18801236 	bltu	r3,r2,404378c <_malloc_r+0x6f8>
 4043744:	8804d3fa 	srli	r2,r17,15
 4043748:	12001e04 	addi	r8,r2,120
 404374c:	11c01dc4 	addi	r7,r2,119
 4043750:	4209883a 	add	r4,r8,r8
 4043754:	003e6d06 	br	404310c <__flash_rwdata_start+0xfffe89dc>
 4043758:	00c40004 	movi	r3,4096
 404375c:	003f4606 	br	4043478 <__flash_rwdata_start+0xfffe8d48>
 4043760:	00800044 	movi	r2,1
 4043764:	a0800115 	stw	r2,4(r20)
 4043768:	003f7406 	br	404353c <__flash_rwdata_start+0xfffe8e0c>
 404376c:	1805d0ba 	srai	r2,r3,2
 4043770:	01c00044 	movi	r7,1
 4043774:	30c00117 	ldw	r3,4(r6)
 4043778:	388e983a 	sll	r7,r7,r2
 404377c:	2805883a 	mov	r2,r5
 4043780:	38c6b03a 	or	r3,r7,r3
 4043784:	30c00115 	stw	r3,4(r6)
 4043788:	003f9b06 	br	40435f8 <__flash_rwdata_start+0xfffe8ec8>
 404378c:	00c15504 	movi	r3,1364
 4043790:	18801a36 	bltu	r3,r2,40437fc <_malloc_r+0x768>
 4043794:	8804d4ba 	srli	r2,r17,18
 4043798:	12001f44 	addi	r8,r2,125
 404379c:	11c01f04 	addi	r7,r2,124
 40437a0:	4209883a 	add	r4,r8,r8
 40437a4:	003e5906 	br	404310c <__flash_rwdata_start+0xfffe89dc>
 40437a8:	ad400404 	addi	r21,r21,16
 40437ac:	003f1706 	br	404340c <__flash_rwdata_start+0xfffe8cdc>
 40437b0:	00c01504 	movi	r3,84
 40437b4:	18802336 	bltu	r3,r2,4043844 <_malloc_r+0x7b0>
 40437b8:	3804d33a 	srli	r2,r7,12
 40437bc:	11401bc4 	addi	r5,r2,111
 40437c0:	10c01b84 	addi	r3,r2,110
 40437c4:	294b883a 	add	r5,r5,r5
 40437c8:	003f7b06 	br	40435b8 <__flash_rwdata_start+0xfffe8e88>
 40437cc:	9c000217 	ldw	r16,8(r19)
 40437d0:	00bfff04 	movi	r2,-4
 40437d4:	80c00117 	ldw	r3,4(r16)
 40437d8:	1886703a 	and	r3,r3,r2
 40437dc:	003f5306 	br	404352c <__flash_rwdata_start+0xfffe8dfc>
 40437e0:	3083ffcc 	andi	r2,r6,4095
 40437e4:	103f181e 	bne	r2,zero,4043448 <__flash_rwdata_start+0xfffe8d18>
 40437e8:	99000217 	ldw	r4,8(r19)
 40437ec:	b545883a 	add	r2,r22,r21
 40437f0:	10800054 	ori	r2,r2,1
 40437f4:	20800115 	stw	r2,4(r4)
 40437f8:	003f3e06 	br	40434f4 <__flash_rwdata_start+0xfffe8dc4>
 40437fc:	01003f84 	movi	r4,254
 4043800:	02001fc4 	movi	r8,127
 4043804:	01c01f84 	movi	r7,126
 4043808:	003e4006 	br	404310c <__flash_rwdata_start+0xfffe89dc>
 404380c:	00808034 	movhi	r2,512
 4043810:	10886604 	addi	r2,r2,8600
 4043814:	15000015 	stw	r20,0(r2)
 4043818:	003f1106 	br	4043460 <__flash_rwdata_start+0xfffe8d30>
 404381c:	00800044 	movi	r2,1
 4043820:	002b883a 	mov	r21,zero
 4043824:	003f1f06 	br	40434a4 <__flash_rwdata_start+0xfffe8d74>
 4043828:	81400204 	addi	r5,r16,8
 404382c:	9009883a 	mov	r4,r18
 4043830:	404802c0 	call	404802c <_free_r>
 4043834:	00808034 	movhi	r2,512
 4043838:	1088cf04 	addi	r2,r2,9020
 404383c:	10c00017 	ldw	r3,0(r2)
 4043840:	003f2c06 	br	40434f4 <__flash_rwdata_start+0xfffe8dc4>
 4043844:	00c05504 	movi	r3,340
 4043848:	18800536 	bltu	r3,r2,4043860 <_malloc_r+0x7cc>
 404384c:	3804d3fa 	srli	r2,r7,15
 4043850:	11401e04 	addi	r5,r2,120
 4043854:	10c01dc4 	addi	r3,r2,119
 4043858:	294b883a 	add	r5,r5,r5
 404385c:	003f5606 	br	40435b8 <__flash_rwdata_start+0xfffe8e88>
 4043860:	00c15504 	movi	r3,1364
 4043864:	18800536 	bltu	r3,r2,404387c <_malloc_r+0x7e8>
 4043868:	3804d4ba 	srli	r2,r7,18
 404386c:	11401f44 	addi	r5,r2,125
 4043870:	10c01f04 	addi	r3,r2,124
 4043874:	294b883a 	add	r5,r5,r5
 4043878:	003f4f06 	br	40435b8 <__flash_rwdata_start+0xfffe8e88>
 404387c:	01403f84 	movi	r5,254
 4043880:	00c01f84 	movi	r3,126
 4043884:	003f4c06 	br	40435b8 <__flash_rwdata_start+0xfffe8e88>
 4043888:	98800117 	ldw	r2,4(r19)
 404388c:	003fa006 	br	4043710 <__flash_rwdata_start+0xfffe8fe0>
 4043890:	8808d0fa 	srli	r4,r17,3
 4043894:	20800044 	addi	r2,r4,1
 4043898:	1085883a 	add	r2,r2,r2
 404389c:	003e9006 	br	40432e0 <__flash_rwdata_start+0xfffe8bb0>

040438a0 <memcpy>:
 40438a0:	defffd04 	addi	sp,sp,-12
 40438a4:	dfc00215 	stw	ra,8(sp)
 40438a8:	dc400115 	stw	r17,4(sp)
 40438ac:	dc000015 	stw	r16,0(sp)
 40438b0:	00c003c4 	movi	r3,15
 40438b4:	2005883a 	mov	r2,r4
 40438b8:	1980452e 	bgeu	r3,r6,40439d0 <memcpy+0x130>
 40438bc:	2906b03a 	or	r3,r5,r4
 40438c0:	18c000cc 	andi	r3,r3,3
 40438c4:	1800441e 	bne	r3,zero,40439d8 <memcpy+0x138>
 40438c8:	347ffc04 	addi	r17,r6,-16
 40438cc:	8822d13a 	srli	r17,r17,4
 40438d0:	28c00104 	addi	r3,r5,4
 40438d4:	23400104 	addi	r13,r4,4
 40438d8:	8820913a 	slli	r16,r17,4
 40438dc:	2b000204 	addi	r12,r5,8
 40438e0:	22c00204 	addi	r11,r4,8
 40438e4:	84000504 	addi	r16,r16,20
 40438e8:	2a800304 	addi	r10,r5,12
 40438ec:	22400304 	addi	r9,r4,12
 40438f0:	2c21883a 	add	r16,r5,r16
 40438f4:	2811883a 	mov	r8,r5
 40438f8:	200f883a 	mov	r7,r4
 40438fc:	41000017 	ldw	r4,0(r8)
 4043900:	1fc00017 	ldw	ra,0(r3)
 4043904:	63c00017 	ldw	r15,0(r12)
 4043908:	39000015 	stw	r4,0(r7)
 404390c:	53800017 	ldw	r14,0(r10)
 4043910:	6fc00015 	stw	ra,0(r13)
 4043914:	5bc00015 	stw	r15,0(r11)
 4043918:	4b800015 	stw	r14,0(r9)
 404391c:	18c00404 	addi	r3,r3,16
 4043920:	39c00404 	addi	r7,r7,16
 4043924:	42000404 	addi	r8,r8,16
 4043928:	6b400404 	addi	r13,r13,16
 404392c:	63000404 	addi	r12,r12,16
 4043930:	5ac00404 	addi	r11,r11,16
 4043934:	52800404 	addi	r10,r10,16
 4043938:	4a400404 	addi	r9,r9,16
 404393c:	1c3fef1e 	bne	r3,r16,40438fc <__flash_rwdata_start+0xfffe91cc>
 4043940:	89c00044 	addi	r7,r17,1
 4043944:	380e913a 	slli	r7,r7,4
 4043948:	310003cc 	andi	r4,r6,15
 404394c:	02c000c4 	movi	r11,3
 4043950:	11c7883a 	add	r3,r2,r7
 4043954:	29cb883a 	add	r5,r5,r7
 4043958:	5900212e 	bgeu	r11,r4,40439e0 <memcpy+0x140>
 404395c:	1813883a 	mov	r9,r3
 4043960:	2811883a 	mov	r8,r5
 4043964:	200f883a 	mov	r7,r4
 4043968:	42800017 	ldw	r10,0(r8)
 404396c:	4a400104 	addi	r9,r9,4
 4043970:	39ffff04 	addi	r7,r7,-4
 4043974:	4abfff15 	stw	r10,-4(r9)
 4043978:	42000104 	addi	r8,r8,4
 404397c:	59fffa36 	bltu	r11,r7,4043968 <__flash_rwdata_start+0xfffe9238>
 4043980:	213fff04 	addi	r4,r4,-4
 4043984:	2008d0ba 	srli	r4,r4,2
 4043988:	318000cc 	andi	r6,r6,3
 404398c:	21000044 	addi	r4,r4,1
 4043990:	2109883a 	add	r4,r4,r4
 4043994:	2109883a 	add	r4,r4,r4
 4043998:	1907883a 	add	r3,r3,r4
 404399c:	290b883a 	add	r5,r5,r4
 40439a0:	30000626 	beq	r6,zero,40439bc <memcpy+0x11c>
 40439a4:	198d883a 	add	r6,r3,r6
 40439a8:	29c00003 	ldbu	r7,0(r5)
 40439ac:	18c00044 	addi	r3,r3,1
 40439b0:	29400044 	addi	r5,r5,1
 40439b4:	19ffffc5 	stb	r7,-1(r3)
 40439b8:	19bffb1e 	bne	r3,r6,40439a8 <__flash_rwdata_start+0xfffe9278>
 40439bc:	dfc00217 	ldw	ra,8(sp)
 40439c0:	dc400117 	ldw	r17,4(sp)
 40439c4:	dc000017 	ldw	r16,0(sp)
 40439c8:	dec00304 	addi	sp,sp,12
 40439cc:	f800283a 	ret
 40439d0:	2007883a 	mov	r3,r4
 40439d4:	003ff206 	br	40439a0 <__flash_rwdata_start+0xfffe9270>
 40439d8:	2007883a 	mov	r3,r4
 40439dc:	003ff106 	br	40439a4 <__flash_rwdata_start+0xfffe9274>
 40439e0:	200d883a 	mov	r6,r4
 40439e4:	003fee06 	br	40439a0 <__flash_rwdata_start+0xfffe9270>

040439e8 <_printf_r>:
 40439e8:	defffd04 	addi	sp,sp,-12
 40439ec:	2805883a 	mov	r2,r5
 40439f0:	dfc00015 	stw	ra,0(sp)
 40439f4:	d9800115 	stw	r6,4(sp)
 40439f8:	d9c00215 	stw	r7,8(sp)
 40439fc:	21400217 	ldw	r5,8(r4)
 4043a00:	d9c00104 	addi	r7,sp,4
 4043a04:	100d883a 	mov	r6,r2
 4043a08:	4043c140 	call	4043c14 <___vfprintf_internal_r>
 4043a0c:	dfc00017 	ldw	ra,0(sp)
 4043a10:	dec00304 	addi	sp,sp,12
 4043a14:	f800283a 	ret

04043a18 <printf>:
 4043a18:	defffc04 	addi	sp,sp,-16
 4043a1c:	dfc00015 	stw	ra,0(sp)
 4043a20:	d9400115 	stw	r5,4(sp)
 4043a24:	d9800215 	stw	r6,8(sp)
 4043a28:	d9c00315 	stw	r7,12(sp)
 4043a2c:	00808034 	movhi	r2,512
 4043a30:	10886904 	addi	r2,r2,8612
 4043a34:	10800017 	ldw	r2,0(r2)
 4043a38:	200b883a 	mov	r5,r4
 4043a3c:	d9800104 	addi	r6,sp,4
 4043a40:	11000217 	ldw	r4,8(r2)
 4043a44:	4045e0c0 	call	4045e0c <__vfprintf_internal>
 4043a48:	dfc00017 	ldw	ra,0(sp)
 4043a4c:	dec00404 	addi	sp,sp,16
 4043a50:	f800283a 	ret

04043a54 <_puts_r>:
 4043a54:	defff604 	addi	sp,sp,-40
 4043a58:	dc000715 	stw	r16,28(sp)
 4043a5c:	2021883a 	mov	r16,r4
 4043a60:	2809883a 	mov	r4,r5
 4043a64:	dc400815 	stw	r17,32(sp)
 4043a68:	dfc00915 	stw	ra,36(sp)
 4043a6c:	2823883a 	mov	r17,r5
 4043a70:	4043b7c0 	call	4043b7c <strlen>
 4043a74:	10c00044 	addi	r3,r2,1
 4043a78:	d8800115 	stw	r2,4(sp)
 4043a7c:	00808034 	movhi	r2,512
 4043a80:	10809204 	addi	r2,r2,584
 4043a84:	d8800215 	stw	r2,8(sp)
 4043a88:	00800044 	movi	r2,1
 4043a8c:	d8800315 	stw	r2,12(sp)
 4043a90:	00800084 	movi	r2,2
 4043a94:	dc400015 	stw	r17,0(sp)
 4043a98:	d8c00615 	stw	r3,24(sp)
 4043a9c:	dec00415 	stw	sp,16(sp)
 4043aa0:	d8800515 	stw	r2,20(sp)
 4043aa4:	80000226 	beq	r16,zero,4043ab0 <_puts_r+0x5c>
 4043aa8:	80800e17 	ldw	r2,56(r16)
 4043aac:	10001426 	beq	r2,zero,4043b00 <_puts_r+0xac>
 4043ab0:	81400217 	ldw	r5,8(r16)
 4043ab4:	2880030b 	ldhu	r2,12(r5)
 4043ab8:	10c8000c 	andi	r3,r2,8192
 4043abc:	1800061e 	bne	r3,zero,4043ad8 <_puts_r+0x84>
 4043ac0:	29001917 	ldw	r4,100(r5)
 4043ac4:	00f7ffc4 	movi	r3,-8193
 4043ac8:	10880014 	ori	r2,r2,8192
 4043acc:	20c6703a 	and	r3,r4,r3
 4043ad0:	2880030d 	sth	r2,12(r5)
 4043ad4:	28c01915 	stw	r3,100(r5)
 4043ad8:	d9800404 	addi	r6,sp,16
 4043adc:	8009883a 	mov	r4,r16
 4043ae0:	404833c0 	call	404833c <__sfvwrite_r>
 4043ae4:	1000091e 	bne	r2,zero,4043b0c <_puts_r+0xb8>
 4043ae8:	00800284 	movi	r2,10
 4043aec:	dfc00917 	ldw	ra,36(sp)
 4043af0:	dc400817 	ldw	r17,32(sp)
 4043af4:	dc000717 	ldw	r16,28(sp)
 4043af8:	dec00a04 	addi	sp,sp,40
 4043afc:	f800283a 	ret
 4043b00:	8009883a 	mov	r4,r16
 4043b04:	4047eb80 	call	4047eb8 <__sinit>
 4043b08:	003fe906 	br	4043ab0 <__flash_rwdata_start+0xfffe9380>
 4043b0c:	00bfffc4 	movi	r2,-1
 4043b10:	003ff606 	br	4043aec <__flash_rwdata_start+0xfffe93bc>

04043b14 <puts>:
 4043b14:	00808034 	movhi	r2,512
 4043b18:	10886904 	addi	r2,r2,8612
 4043b1c:	200b883a 	mov	r5,r4
 4043b20:	11000017 	ldw	r4,0(r2)
 4043b24:	4043a541 	jmpi	4043a54 <_puts_r>

04043b28 <_sbrk_r>:
 4043b28:	defffd04 	addi	sp,sp,-12
 4043b2c:	dc000015 	stw	r16,0(sp)
 4043b30:	04008034 	movhi	r16,512
 4043b34:	dc400115 	stw	r17,4(sp)
 4043b38:	8408ab04 	addi	r16,r16,8876
 4043b3c:	2023883a 	mov	r17,r4
 4043b40:	2809883a 	mov	r4,r5
 4043b44:	dfc00215 	stw	ra,8(sp)
 4043b48:	80000015 	stw	zero,0(r16)
 4043b4c:	40501f80 	call	40501f8 <sbrk>
 4043b50:	00ffffc4 	movi	r3,-1
 4043b54:	10c00526 	beq	r2,r3,4043b6c <_sbrk_r+0x44>
 4043b58:	dfc00217 	ldw	ra,8(sp)
 4043b5c:	dc400117 	ldw	r17,4(sp)
 4043b60:	dc000017 	ldw	r16,0(sp)
 4043b64:	dec00304 	addi	sp,sp,12
 4043b68:	f800283a 	ret
 4043b6c:	80c00017 	ldw	r3,0(r16)
 4043b70:	183ff926 	beq	r3,zero,4043b58 <__flash_rwdata_start+0xfffe9428>
 4043b74:	88c00015 	stw	r3,0(r17)
 4043b78:	003ff706 	br	4043b58 <__flash_rwdata_start+0xfffe9428>

04043b7c <strlen>:
 4043b7c:	208000cc 	andi	r2,r4,3
 4043b80:	10002026 	beq	r2,zero,4043c04 <strlen+0x88>
 4043b84:	20800007 	ldb	r2,0(r4)
 4043b88:	10002026 	beq	r2,zero,4043c0c <strlen+0x90>
 4043b8c:	2005883a 	mov	r2,r4
 4043b90:	00000206 	br	4043b9c <strlen+0x20>
 4043b94:	10c00007 	ldb	r3,0(r2)
 4043b98:	18001826 	beq	r3,zero,4043bfc <strlen+0x80>
 4043b9c:	10800044 	addi	r2,r2,1
 4043ba0:	10c000cc 	andi	r3,r2,3
 4043ba4:	183ffb1e 	bne	r3,zero,4043b94 <__flash_rwdata_start+0xfffe9464>
 4043ba8:	10c00017 	ldw	r3,0(r2)
 4043bac:	01ffbff4 	movhi	r7,65279
 4043bb0:	39ffbfc4 	addi	r7,r7,-257
 4043bb4:	00ca303a 	nor	r5,zero,r3
 4043bb8:	01a02074 	movhi	r6,32897
 4043bbc:	19c7883a 	add	r3,r3,r7
 4043bc0:	31a02004 	addi	r6,r6,-32640
 4043bc4:	1946703a 	and	r3,r3,r5
 4043bc8:	1986703a 	and	r3,r3,r6
 4043bcc:	1800091e 	bne	r3,zero,4043bf4 <strlen+0x78>
 4043bd0:	10800104 	addi	r2,r2,4
 4043bd4:	10c00017 	ldw	r3,0(r2)
 4043bd8:	19cb883a 	add	r5,r3,r7
 4043bdc:	00c6303a 	nor	r3,zero,r3
 4043be0:	28c6703a 	and	r3,r5,r3
 4043be4:	1986703a 	and	r3,r3,r6
 4043be8:	183ff926 	beq	r3,zero,4043bd0 <__flash_rwdata_start+0xfffe94a0>
 4043bec:	00000106 	br	4043bf4 <strlen+0x78>
 4043bf0:	10800044 	addi	r2,r2,1
 4043bf4:	10c00007 	ldb	r3,0(r2)
 4043bf8:	183ffd1e 	bne	r3,zero,4043bf0 <__flash_rwdata_start+0xfffe94c0>
 4043bfc:	1105c83a 	sub	r2,r2,r4
 4043c00:	f800283a 	ret
 4043c04:	2005883a 	mov	r2,r4
 4043c08:	003fe706 	br	4043ba8 <__flash_rwdata_start+0xfffe9478>
 4043c0c:	0005883a 	mov	r2,zero
 4043c10:	f800283a 	ret

04043c14 <___vfprintf_internal_r>:
 4043c14:	deffb804 	addi	sp,sp,-288
 4043c18:	dfc04715 	stw	ra,284(sp)
 4043c1c:	ddc04515 	stw	r23,276(sp)
 4043c20:	dd404315 	stw	r21,268(sp)
 4043c24:	d9002c15 	stw	r4,176(sp)
 4043c28:	282f883a 	mov	r23,r5
 4043c2c:	302b883a 	mov	r21,r6
 4043c30:	d9c02d15 	stw	r7,180(sp)
 4043c34:	df004615 	stw	fp,280(sp)
 4043c38:	dd804415 	stw	r22,272(sp)
 4043c3c:	dd004215 	stw	r20,264(sp)
 4043c40:	dcc04115 	stw	r19,260(sp)
 4043c44:	dc804015 	stw	r18,256(sp)
 4043c48:	dc403f15 	stw	r17,252(sp)
 4043c4c:	dc003e15 	stw	r16,248(sp)
 4043c50:	4048a2c0 	call	4048a2c <_localeconv_r>
 4043c54:	10800017 	ldw	r2,0(r2)
 4043c58:	1009883a 	mov	r4,r2
 4043c5c:	d8803415 	stw	r2,208(sp)
 4043c60:	4043b7c0 	call	4043b7c <strlen>
 4043c64:	d8803715 	stw	r2,220(sp)
 4043c68:	d8802c17 	ldw	r2,176(sp)
 4043c6c:	10000226 	beq	r2,zero,4043c78 <___vfprintf_internal_r+0x64>
 4043c70:	10800e17 	ldw	r2,56(r2)
 4043c74:	1000f926 	beq	r2,zero,404405c <___vfprintf_internal_r+0x448>
 4043c78:	b880030b 	ldhu	r2,12(r23)
 4043c7c:	10c8000c 	andi	r3,r2,8192
 4043c80:	1800061e 	bne	r3,zero,4043c9c <___vfprintf_internal_r+0x88>
 4043c84:	b9001917 	ldw	r4,100(r23)
 4043c88:	00f7ffc4 	movi	r3,-8193
 4043c8c:	10880014 	ori	r2,r2,8192
 4043c90:	20c6703a 	and	r3,r4,r3
 4043c94:	b880030d 	sth	r2,12(r23)
 4043c98:	b8c01915 	stw	r3,100(r23)
 4043c9c:	10c0020c 	andi	r3,r2,8
 4043ca0:	1800c126 	beq	r3,zero,4043fa8 <___vfprintf_internal_r+0x394>
 4043ca4:	b8c00417 	ldw	r3,16(r23)
 4043ca8:	1800bf26 	beq	r3,zero,4043fa8 <___vfprintf_internal_r+0x394>
 4043cac:	1080068c 	andi	r2,r2,26
 4043cb0:	00c00284 	movi	r3,10
 4043cb4:	10c0c426 	beq	r2,r3,4043fc8 <___vfprintf_internal_r+0x3b4>
 4043cb8:	d8c00404 	addi	r3,sp,16
 4043cbc:	05008034 	movhi	r20,512
 4043cc0:	d9001e04 	addi	r4,sp,120
 4043cc4:	a500a384 	addi	r20,r20,654
 4043cc8:	d8c01e15 	stw	r3,120(sp)
 4043ccc:	d8002015 	stw	zero,128(sp)
 4043cd0:	d8001f15 	stw	zero,124(sp)
 4043cd4:	d8003315 	stw	zero,204(sp)
 4043cd8:	d8003615 	stw	zero,216(sp)
 4043cdc:	d8003815 	stw	zero,224(sp)
 4043ce0:	1811883a 	mov	r8,r3
 4043ce4:	d8003915 	stw	zero,228(sp)
 4043ce8:	d8003a15 	stw	zero,232(sp)
 4043cec:	d8002f15 	stw	zero,188(sp)
 4043cf0:	d9002815 	stw	r4,160(sp)
 4043cf4:	a8800007 	ldb	r2,0(r21)
 4043cf8:	10027b26 	beq	r2,zero,40446e8 <___vfprintf_internal_r+0xad4>
 4043cfc:	00c00944 	movi	r3,37
 4043d00:	a821883a 	mov	r16,r21
 4043d04:	10c0021e 	bne	r2,r3,4043d10 <___vfprintf_internal_r+0xfc>
 4043d08:	00001406 	br	4043d5c <___vfprintf_internal_r+0x148>
 4043d0c:	10c00326 	beq	r2,r3,4043d1c <___vfprintf_internal_r+0x108>
 4043d10:	84000044 	addi	r16,r16,1
 4043d14:	80800007 	ldb	r2,0(r16)
 4043d18:	103ffc1e 	bne	r2,zero,4043d0c <__flash_rwdata_start+0xfffe95dc>
 4043d1c:	8563c83a 	sub	r17,r16,r21
 4043d20:	88000e26 	beq	r17,zero,4043d5c <___vfprintf_internal_r+0x148>
 4043d24:	d8c02017 	ldw	r3,128(sp)
 4043d28:	d8801f17 	ldw	r2,124(sp)
 4043d2c:	45400015 	stw	r21,0(r8)
 4043d30:	1c47883a 	add	r3,r3,r17
 4043d34:	10800044 	addi	r2,r2,1
 4043d38:	d8c02015 	stw	r3,128(sp)
 4043d3c:	44400115 	stw	r17,4(r8)
 4043d40:	d8801f15 	stw	r2,124(sp)
 4043d44:	00c001c4 	movi	r3,7
 4043d48:	1880a716 	blt	r3,r2,4043fe8 <___vfprintf_internal_r+0x3d4>
 4043d4c:	42000204 	addi	r8,r8,8
 4043d50:	d9402f17 	ldw	r5,188(sp)
 4043d54:	2c4b883a 	add	r5,r5,r17
 4043d58:	d9402f15 	stw	r5,188(sp)
 4043d5c:	80800007 	ldb	r2,0(r16)
 4043d60:	1000a826 	beq	r2,zero,4044004 <___vfprintf_internal_r+0x3f0>
 4043d64:	84400047 	ldb	r17,1(r16)
 4043d68:	00bfffc4 	movi	r2,-1
 4043d6c:	85400044 	addi	r21,r16,1
 4043d70:	d8002785 	stb	zero,158(sp)
 4043d74:	0007883a 	mov	r3,zero
 4043d78:	000f883a 	mov	r7,zero
 4043d7c:	d8802915 	stw	r2,164(sp)
 4043d80:	d8003115 	stw	zero,196(sp)
 4043d84:	0025883a 	mov	r18,zero
 4043d88:	01401604 	movi	r5,88
 4043d8c:	01800244 	movi	r6,9
 4043d90:	02800a84 	movi	r10,42
 4043d94:	02401b04 	movi	r9,108
 4043d98:	ad400044 	addi	r21,r21,1
 4043d9c:	88bff804 	addi	r2,r17,-32
 4043da0:	28830436 	bltu	r5,r2,40449b4 <___vfprintf_internal_r+0xda0>
 4043da4:	100490ba 	slli	r2,r2,2
 4043da8:	01010134 	movhi	r4,1028
 4043dac:	210f6f04 	addi	r4,r4,15804
 4043db0:	1105883a 	add	r2,r2,r4
 4043db4:	10800017 	ldw	r2,0(r2)
 4043db8:	1000683a 	jmp	r2
 4043dbc:	040448d4 	movui	r16,4387
 4043dc0:	040449b4 	movhi	r16,4390
 4043dc4:	040449b4 	movhi	r16,4390
 4043dc8:	040448f4 	movhi	r16,4387
 4043dcc:	040449b4 	movhi	r16,4390
 4043dd0:	040449b4 	movhi	r16,4390
 4043dd4:	040449b4 	movhi	r16,4390
 4043dd8:	040449b4 	movhi	r16,4390
 4043ddc:	040449b4 	movhi	r16,4390
 4043de0:	040449b4 	movhi	r16,4390
 4043de4:	04044068 	cmpgeui	r16,zero,4353
 4043de8:	04044810 	cmplti	r16,zero,4384
 4043dec:	040449b4 	movhi	r16,4390
 4043df0:	04043f30 	cmpltui	r16,zero,4348
 4043df4:	04044090 	cmplti	r16,zero,4354
 4043df8:	040449b4 	movhi	r16,4390
 4043dfc:	040440d0 	cmplti	r16,zero,4355
 4043e00:	040440dc 	xori	r16,zero,4355
 4043e04:	040440dc 	xori	r16,zero,4355
 4043e08:	040440dc 	xori	r16,zero,4355
 4043e0c:	040440dc 	xori	r16,zero,4355
 4043e10:	040440dc 	xori	r16,zero,4355
 4043e14:	040440dc 	xori	r16,zero,4355
 4043e18:	040440dc 	xori	r16,zero,4355
 4043e1c:	040440dc 	xori	r16,zero,4355
 4043e20:	040440dc 	xori	r16,zero,4355
 4043e24:	040449b4 	movhi	r16,4390
 4043e28:	040449b4 	movhi	r16,4390
 4043e2c:	040449b4 	movhi	r16,4390
 4043e30:	040449b4 	movhi	r16,4390
 4043e34:	040449b4 	movhi	r16,4390
 4043e38:	040449b4 	movhi	r16,4390
 4043e3c:	040449b4 	movhi	r16,4390
 4043e40:	040449b4 	movhi	r16,4390
 4043e44:	040449b4 	movhi	r16,4390
 4043e48:	040449b4 	movhi	r16,4390
 4043e4c:	04044110 	cmplti	r16,zero,4356
 4043e50:	040441cc 	andi	r16,zero,4359
 4043e54:	040449b4 	movhi	r16,4390
 4043e58:	040441cc 	andi	r16,zero,4359
 4043e5c:	040449b4 	movhi	r16,4390
 4043e60:	040449b4 	movhi	r16,4390
 4043e64:	040449b4 	movhi	r16,4390
 4043e68:	040449b4 	movhi	r16,4390
 4043e6c:	0404426c 	andhi	r16,zero,4361
 4043e70:	040449b4 	movhi	r16,4390
 4043e74:	040449b4 	movhi	r16,4390
 4043e78:	04044278 	rdprs	r16,zero,4361
 4043e7c:	040449b4 	movhi	r16,4390
 4043e80:	040449b4 	movhi	r16,4390
 4043e84:	040449b4 	movhi	r16,4390
 4043e88:	040449b4 	movhi	r16,4390
 4043e8c:	040449b4 	movhi	r16,4390
 4043e90:	040446f0 	cmpltui	r16,zero,4379
 4043e94:	040449b4 	movhi	r16,4390
 4043e98:	040449b4 	movhi	r16,4390
 4043e9c:	04044750 	cmplti	r16,zero,4381
 4043ea0:	040449b4 	movhi	r16,4390
 4043ea4:	040449b4 	movhi	r16,4390
 4043ea8:	040449b4 	movhi	r16,4390
 4043eac:	040449b4 	movhi	r16,4390
 4043eb0:	040449b4 	movhi	r16,4390
 4043eb4:	040449b4 	movhi	r16,4390
 4043eb8:	040449b4 	movhi	r16,4390
 4043ebc:	040449b4 	movhi	r16,4390
 4043ec0:	040449b4 	movhi	r16,4390
 4043ec4:	040449b4 	movhi	r16,4390
 4043ec8:	04044960 	cmpeqi	r16,zero,4389
 4043ecc:	04044900 	call	404490 <OSCtxSw_SWITCH_PC+0x404450>
 4043ed0:	040441cc 	andi	r16,zero,4359
 4043ed4:	040441cc 	andi	r16,zero,4359
 4043ed8:	040441cc 	andi	r16,zero,4359
 4043edc:	04044910 	cmplti	r16,zero,4388
 4043ee0:	04044900 	call	404490 <OSCtxSw_SWITCH_PC+0x404450>
 4043ee4:	040449b4 	movhi	r16,4390
 4043ee8:	040449b4 	movhi	r16,4390
 4043eec:	0404491c 	xori	r16,zero,4388
 4043ef0:	040449b4 	movhi	r16,4390
 4043ef4:	0404492c 	andhi	r16,zero,4388
 4043ef8:	04044800 	call	404480 <OSCtxSw_SWITCH_PC+0x404440>
 4043efc:	04043f3c 	xorhi	r16,zero,4348
 4043f00:	04044820 	cmpeqi	r16,zero,4384
 4043f04:	040449b4 	movhi	r16,4390
 4043f08:	0404482c 	andhi	r16,zero,4384
 4043f0c:	040449b4 	movhi	r16,4390
 4043f10:	04044888 	cmpgei	r16,zero,4386
 4043f14:	040449b4 	movhi	r16,4390
 4043f18:	040449b4 	movhi	r16,4390
 4043f1c:	04044898 	cmpnei	r16,zero,4386
 4043f20:	d9003117 	ldw	r4,196(sp)
 4043f24:	d8802d15 	stw	r2,180(sp)
 4043f28:	0109c83a 	sub	r4,zero,r4
 4043f2c:	d9003115 	stw	r4,196(sp)
 4043f30:	94800114 	ori	r18,r18,4
 4043f34:	ac400007 	ldb	r17,0(r21)
 4043f38:	003f9706 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 4043f3c:	00800c04 	movi	r2,48
 4043f40:	d9002d17 	ldw	r4,180(sp)
 4043f44:	d9402917 	ldw	r5,164(sp)
 4043f48:	d8802705 	stb	r2,156(sp)
 4043f4c:	00801e04 	movi	r2,120
 4043f50:	d8802745 	stb	r2,157(sp)
 4043f54:	d8002785 	stb	zero,158(sp)
 4043f58:	20c00104 	addi	r3,r4,4
 4043f5c:	24c00017 	ldw	r19,0(r4)
 4043f60:	002d883a 	mov	r22,zero
 4043f64:	90800094 	ori	r2,r18,2
 4043f68:	28029a16 	blt	r5,zero,40449d4 <___vfprintf_internal_r+0xdc0>
 4043f6c:	00bfdfc4 	movi	r2,-129
 4043f70:	90a4703a 	and	r18,r18,r2
 4043f74:	d8c02d15 	stw	r3,180(sp)
 4043f78:	94800094 	ori	r18,r18,2
 4043f7c:	9802871e 	bne	r19,zero,404499c <___vfprintf_internal_r+0xd88>
 4043f80:	00808034 	movhi	r2,512
 4043f84:	10809c04 	addi	r2,r2,624
 4043f88:	d8803915 	stw	r2,228(sp)
 4043f8c:	04401e04 	movi	r17,120
 4043f90:	d8802917 	ldw	r2,164(sp)
 4043f94:	0039883a 	mov	fp,zero
 4043f98:	1001e926 	beq	r2,zero,4044740 <___vfprintf_internal_r+0xb2c>
 4043f9c:	0027883a 	mov	r19,zero
 4043fa0:	002d883a 	mov	r22,zero
 4043fa4:	00020506 	br	40447bc <___vfprintf_internal_r+0xba8>
 4043fa8:	d9002c17 	ldw	r4,176(sp)
 4043fac:	b80b883a 	mov	r5,r23
 4043fb0:	4045ee40 	call	4045ee4 <__swsetup_r>
 4043fb4:	1005ac1e 	bne	r2,zero,4045668 <___vfprintf_internal_r+0x1a54>
 4043fb8:	b880030b 	ldhu	r2,12(r23)
 4043fbc:	00c00284 	movi	r3,10
 4043fc0:	1080068c 	andi	r2,r2,26
 4043fc4:	10ff3c1e 	bne	r2,r3,4043cb8 <__flash_rwdata_start+0xfffe9588>
 4043fc8:	b880038f 	ldh	r2,14(r23)
 4043fcc:	103f3a16 	blt	r2,zero,4043cb8 <__flash_rwdata_start+0xfffe9588>
 4043fd0:	d9c02d17 	ldw	r7,180(sp)
 4043fd4:	d9002c17 	ldw	r4,176(sp)
 4043fd8:	a80d883a 	mov	r6,r21
 4043fdc:	b80b883a 	mov	r5,r23
 4043fe0:	4045e280 	call	4045e28 <__sbprintf>
 4043fe4:	00001106 	br	404402c <___vfprintf_internal_r+0x418>
 4043fe8:	d9002c17 	ldw	r4,176(sp)
 4043fec:	d9801e04 	addi	r6,sp,120
 4043ff0:	b80b883a 	mov	r5,r23
 4043ff4:	404a8680 	call	404a868 <__sprint_r>
 4043ff8:	1000081e 	bne	r2,zero,404401c <___vfprintf_internal_r+0x408>
 4043ffc:	da000404 	addi	r8,sp,16
 4044000:	003f5306 	br	4043d50 <__flash_rwdata_start+0xfffe9620>
 4044004:	d8802017 	ldw	r2,128(sp)
 4044008:	10000426 	beq	r2,zero,404401c <___vfprintf_internal_r+0x408>
 404400c:	d9002c17 	ldw	r4,176(sp)
 4044010:	d9801e04 	addi	r6,sp,120
 4044014:	b80b883a 	mov	r5,r23
 4044018:	404a8680 	call	404a868 <__sprint_r>
 404401c:	b880030b 	ldhu	r2,12(r23)
 4044020:	1080100c 	andi	r2,r2,64
 4044024:	1005901e 	bne	r2,zero,4045668 <___vfprintf_internal_r+0x1a54>
 4044028:	d8802f17 	ldw	r2,188(sp)
 404402c:	dfc04717 	ldw	ra,284(sp)
 4044030:	df004617 	ldw	fp,280(sp)
 4044034:	ddc04517 	ldw	r23,276(sp)
 4044038:	dd804417 	ldw	r22,272(sp)
 404403c:	dd404317 	ldw	r21,268(sp)
 4044040:	dd004217 	ldw	r20,264(sp)
 4044044:	dcc04117 	ldw	r19,260(sp)
 4044048:	dc804017 	ldw	r18,256(sp)
 404404c:	dc403f17 	ldw	r17,252(sp)
 4044050:	dc003e17 	ldw	r16,248(sp)
 4044054:	dec04804 	addi	sp,sp,288
 4044058:	f800283a 	ret
 404405c:	d9002c17 	ldw	r4,176(sp)
 4044060:	4047eb80 	call	4047eb8 <__sinit>
 4044064:	003f0406 	br	4043c78 <__flash_rwdata_start+0xfffe9548>
 4044068:	d8802d17 	ldw	r2,180(sp)
 404406c:	d9002d17 	ldw	r4,180(sp)
 4044070:	10800017 	ldw	r2,0(r2)
 4044074:	d8803115 	stw	r2,196(sp)
 4044078:	20800104 	addi	r2,r4,4
 404407c:	d9003117 	ldw	r4,196(sp)
 4044080:	203fa716 	blt	r4,zero,4043f20 <__flash_rwdata_start+0xfffe97f0>
 4044084:	d8802d15 	stw	r2,180(sp)
 4044088:	ac400007 	ldb	r17,0(r21)
 404408c:	003f4206 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 4044090:	ac400007 	ldb	r17,0(r21)
 4044094:	aac00044 	addi	r11,r21,1
 4044098:	8a872826 	beq	r17,r10,4045d3c <___vfprintf_internal_r+0x2128>
 404409c:	88bff404 	addi	r2,r17,-48
 40440a0:	0009883a 	mov	r4,zero
 40440a4:	30867d36 	bltu	r6,r2,4045a9c <___vfprintf_internal_r+0x1e88>
 40440a8:	5c400007 	ldb	r17,0(r11)
 40440ac:	210002a4 	muli	r4,r4,10
 40440b0:	5d400044 	addi	r21,r11,1
 40440b4:	a817883a 	mov	r11,r21
 40440b8:	2089883a 	add	r4,r4,r2
 40440bc:	88bff404 	addi	r2,r17,-48
 40440c0:	30bff92e 	bgeu	r6,r2,40440a8 <__flash_rwdata_start+0xfffe9978>
 40440c4:	2005c916 	blt	r4,zero,40457ec <___vfprintf_internal_r+0x1bd8>
 40440c8:	d9002915 	stw	r4,164(sp)
 40440cc:	003f3306 	br	4043d9c <__flash_rwdata_start+0xfffe966c>
 40440d0:	94802014 	ori	r18,r18,128
 40440d4:	ac400007 	ldb	r17,0(r21)
 40440d8:	003f2f06 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 40440dc:	a809883a 	mov	r4,r21
 40440e0:	d8003115 	stw	zero,196(sp)
 40440e4:	88bff404 	addi	r2,r17,-48
 40440e8:	0017883a 	mov	r11,zero
 40440ec:	24400007 	ldb	r17,0(r4)
 40440f0:	5ac002a4 	muli	r11,r11,10
 40440f4:	ad400044 	addi	r21,r21,1
 40440f8:	a809883a 	mov	r4,r21
 40440fc:	12d7883a 	add	r11,r2,r11
 4044100:	88bff404 	addi	r2,r17,-48
 4044104:	30bff92e 	bgeu	r6,r2,40440ec <__flash_rwdata_start+0xfffe99bc>
 4044108:	dac03115 	stw	r11,196(sp)
 404410c:	003f2306 	br	4043d9c <__flash_rwdata_start+0xfffe966c>
 4044110:	18c03fcc 	andi	r3,r3,255
 4044114:	18072b1e 	bne	r3,zero,4045dc4 <___vfprintf_internal_r+0x21b0>
 4044118:	94800414 	ori	r18,r18,16
 404411c:	9080080c 	andi	r2,r18,32
 4044120:	10037b26 	beq	r2,zero,4044f10 <___vfprintf_internal_r+0x12fc>
 4044124:	d9402d17 	ldw	r5,180(sp)
 4044128:	28800117 	ldw	r2,4(r5)
 404412c:	2cc00017 	ldw	r19,0(r5)
 4044130:	29400204 	addi	r5,r5,8
 4044134:	d9402d15 	stw	r5,180(sp)
 4044138:	102d883a 	mov	r22,r2
 404413c:	10044b16 	blt	r2,zero,404526c <___vfprintf_internal_r+0x1658>
 4044140:	d9402917 	ldw	r5,164(sp)
 4044144:	df002783 	ldbu	fp,158(sp)
 4044148:	2803bc16 	blt	r5,zero,404503c <___vfprintf_internal_r+0x1428>
 404414c:	00ffdfc4 	movi	r3,-129
 4044150:	9d84b03a 	or	r2,r19,r22
 4044154:	90e4703a 	and	r18,r18,r3
 4044158:	10017726 	beq	r2,zero,4044738 <___vfprintf_internal_r+0xb24>
 404415c:	b0038326 	beq	r22,zero,4044f6c <___vfprintf_internal_r+0x1358>
 4044160:	dc402a15 	stw	r17,168(sp)
 4044164:	dc001e04 	addi	r16,sp,120
 4044168:	b023883a 	mov	r17,r22
 404416c:	402d883a 	mov	r22,r8
 4044170:	9809883a 	mov	r4,r19
 4044174:	880b883a 	mov	r5,r17
 4044178:	01800284 	movi	r6,10
 404417c:	000f883a 	mov	r7,zero
 4044180:	404cc600 	call	404cc60 <__umoddi3>
 4044184:	10800c04 	addi	r2,r2,48
 4044188:	843fffc4 	addi	r16,r16,-1
 404418c:	9809883a 	mov	r4,r19
 4044190:	880b883a 	mov	r5,r17
 4044194:	80800005 	stb	r2,0(r16)
 4044198:	01800284 	movi	r6,10
 404419c:	000f883a 	mov	r7,zero
 40441a0:	404c6e80 	call	404c6e8 <__udivdi3>
 40441a4:	1027883a 	mov	r19,r2
 40441a8:	10c4b03a 	or	r2,r2,r3
 40441ac:	1823883a 	mov	r17,r3
 40441b0:	103fef1e 	bne	r2,zero,4044170 <__flash_rwdata_start+0xfffe9a40>
 40441b4:	d8c02817 	ldw	r3,160(sp)
 40441b8:	dc402a17 	ldw	r17,168(sp)
 40441bc:	b011883a 	mov	r8,r22
 40441c0:	1c07c83a 	sub	r3,r3,r16
 40441c4:	d8c02e15 	stw	r3,184(sp)
 40441c8:	00005906 	br	4044330 <___vfprintf_internal_r+0x71c>
 40441cc:	18c03fcc 	andi	r3,r3,255
 40441d0:	1806fa1e 	bne	r3,zero,4045dbc <___vfprintf_internal_r+0x21a8>
 40441d4:	9080020c 	andi	r2,r18,8
 40441d8:	10048a26 	beq	r2,zero,4045404 <___vfprintf_internal_r+0x17f0>
 40441dc:	d8c02d17 	ldw	r3,180(sp)
 40441e0:	d9002d17 	ldw	r4,180(sp)
 40441e4:	d9402d17 	ldw	r5,180(sp)
 40441e8:	18c00017 	ldw	r3,0(r3)
 40441ec:	21000117 	ldw	r4,4(r4)
 40441f0:	29400204 	addi	r5,r5,8
 40441f4:	d8c03615 	stw	r3,216(sp)
 40441f8:	d9003815 	stw	r4,224(sp)
 40441fc:	d9402d15 	stw	r5,180(sp)
 4044200:	d9003617 	ldw	r4,216(sp)
 4044204:	d9403817 	ldw	r5,224(sp)
 4044208:	da003d15 	stw	r8,244(sp)
 404420c:	04000044 	movi	r16,1
 4044210:	404a4e00 	call	404a4e0 <__fpclassifyd>
 4044214:	da003d17 	ldw	r8,244(sp)
 4044218:	14041f1e 	bne	r2,r16,4045298 <___vfprintf_internal_r+0x1684>
 404421c:	d9003617 	ldw	r4,216(sp)
 4044220:	d9403817 	ldw	r5,224(sp)
 4044224:	000d883a 	mov	r6,zero
 4044228:	000f883a 	mov	r7,zero
 404422c:	404e4900 	call	404e490 <__ledf2>
 4044230:	da003d17 	ldw	r8,244(sp)
 4044234:	1005be16 	blt	r2,zero,4045930 <___vfprintf_internal_r+0x1d1c>
 4044238:	df002783 	ldbu	fp,158(sp)
 404423c:	008011c4 	movi	r2,71
 4044240:	1445330e 	bge	r2,r17,4045710 <___vfprintf_internal_r+0x1afc>
 4044244:	04008034 	movhi	r16,512
 4044248:	84009404 	addi	r16,r16,592
 404424c:	00c000c4 	movi	r3,3
 4044250:	00bfdfc4 	movi	r2,-129
 4044254:	d8c02a15 	stw	r3,168(sp)
 4044258:	90a4703a 	and	r18,r18,r2
 404425c:	d8c02e15 	stw	r3,184(sp)
 4044260:	d8002915 	stw	zero,164(sp)
 4044264:	d8003215 	stw	zero,200(sp)
 4044268:	00003706 	br	4044348 <___vfprintf_internal_r+0x734>
 404426c:	94800214 	ori	r18,r18,8
 4044270:	ac400007 	ldb	r17,0(r21)
 4044274:	003ec806 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 4044278:	18c03fcc 	andi	r3,r3,255
 404427c:	1806db1e 	bne	r3,zero,4045dec <___vfprintf_internal_r+0x21d8>
 4044280:	94800414 	ori	r18,r18,16
 4044284:	9080080c 	andi	r2,r18,32
 4044288:	1002d826 	beq	r2,zero,4044dec <___vfprintf_internal_r+0x11d8>
 404428c:	d9402d17 	ldw	r5,180(sp)
 4044290:	d8c02917 	ldw	r3,164(sp)
 4044294:	d8002785 	stb	zero,158(sp)
 4044298:	28800204 	addi	r2,r5,8
 404429c:	2cc00017 	ldw	r19,0(r5)
 40442a0:	2d800117 	ldw	r22,4(r5)
 40442a4:	18048f16 	blt	r3,zero,40454e4 <___vfprintf_internal_r+0x18d0>
 40442a8:	013fdfc4 	movi	r4,-129
 40442ac:	9d86b03a 	or	r3,r19,r22
 40442b0:	d8802d15 	stw	r2,180(sp)
 40442b4:	9124703a 	and	r18,r18,r4
 40442b8:	1802d91e 	bne	r3,zero,4044e20 <___vfprintf_internal_r+0x120c>
 40442bc:	d8c02917 	ldw	r3,164(sp)
 40442c0:	0039883a 	mov	fp,zero
 40442c4:	1805c326 	beq	r3,zero,40459d4 <___vfprintf_internal_r+0x1dc0>
 40442c8:	0027883a 	mov	r19,zero
 40442cc:	002d883a 	mov	r22,zero
 40442d0:	dc001e04 	addi	r16,sp,120
 40442d4:	9806d0fa 	srli	r3,r19,3
 40442d8:	b008977a 	slli	r4,r22,29
 40442dc:	b02cd0fa 	srli	r22,r22,3
 40442e0:	9cc001cc 	andi	r19,r19,7
 40442e4:	98800c04 	addi	r2,r19,48
 40442e8:	843fffc4 	addi	r16,r16,-1
 40442ec:	20e6b03a 	or	r19,r4,r3
 40442f0:	80800005 	stb	r2,0(r16)
 40442f4:	9d86b03a 	or	r3,r19,r22
 40442f8:	183ff61e 	bne	r3,zero,40442d4 <__flash_rwdata_start+0xfffe9ba4>
 40442fc:	90c0004c 	andi	r3,r18,1
 4044300:	18013b26 	beq	r3,zero,40447f0 <___vfprintf_internal_r+0xbdc>
 4044304:	10803fcc 	andi	r2,r2,255
 4044308:	1080201c 	xori	r2,r2,128
 404430c:	10bfe004 	addi	r2,r2,-128
 4044310:	00c00c04 	movi	r3,48
 4044314:	10c13626 	beq	r2,r3,40447f0 <___vfprintf_internal_r+0xbdc>
 4044318:	80ffffc5 	stb	r3,-1(r16)
 404431c:	d8c02817 	ldw	r3,160(sp)
 4044320:	80bfffc4 	addi	r2,r16,-1
 4044324:	1021883a 	mov	r16,r2
 4044328:	1887c83a 	sub	r3,r3,r2
 404432c:	d8c02e15 	stw	r3,184(sp)
 4044330:	d8802e17 	ldw	r2,184(sp)
 4044334:	d9002917 	ldw	r4,164(sp)
 4044338:	1100010e 	bge	r2,r4,4044340 <___vfprintf_internal_r+0x72c>
 404433c:	2005883a 	mov	r2,r4
 4044340:	d8802a15 	stw	r2,168(sp)
 4044344:	d8003215 	stw	zero,200(sp)
 4044348:	e7003fcc 	andi	fp,fp,255
 404434c:	e700201c 	xori	fp,fp,128
 4044350:	e73fe004 	addi	fp,fp,-128
 4044354:	e0000326 	beq	fp,zero,4044364 <___vfprintf_internal_r+0x750>
 4044358:	d8c02a17 	ldw	r3,168(sp)
 404435c:	18c00044 	addi	r3,r3,1
 4044360:	d8c02a15 	stw	r3,168(sp)
 4044364:	90c0008c 	andi	r3,r18,2
 4044368:	d8c02b15 	stw	r3,172(sp)
 404436c:	18000326 	beq	r3,zero,404437c <___vfprintf_internal_r+0x768>
 4044370:	d8c02a17 	ldw	r3,168(sp)
 4044374:	18c00084 	addi	r3,r3,2
 4044378:	d8c02a15 	stw	r3,168(sp)
 404437c:	90c0210c 	andi	r3,r18,132
 4044380:	d8c03015 	stw	r3,192(sp)
 4044384:	1801a31e 	bne	r3,zero,4044a14 <___vfprintf_internal_r+0xe00>
 4044388:	d9003117 	ldw	r4,196(sp)
 404438c:	d8c02a17 	ldw	r3,168(sp)
 4044390:	20e7c83a 	sub	r19,r4,r3
 4044394:	04c19f0e 	bge	zero,r19,4044a14 <___vfprintf_internal_r+0xe00>
 4044398:	02400404 	movi	r9,16
 404439c:	d8c02017 	ldw	r3,128(sp)
 40443a0:	d8801f17 	ldw	r2,124(sp)
 40443a4:	4cc50d0e 	bge	r9,r19,40457dc <___vfprintf_internal_r+0x1bc8>
 40443a8:	01408034 	movhi	r5,512
 40443ac:	2940a784 	addi	r5,r5,670
 40443b0:	dc403b15 	stw	r17,236(sp)
 40443b4:	d9403515 	stw	r5,212(sp)
 40443b8:	9823883a 	mov	r17,r19
 40443bc:	482d883a 	mov	r22,r9
 40443c0:	9027883a 	mov	r19,r18
 40443c4:	070001c4 	movi	fp,7
 40443c8:	8025883a 	mov	r18,r16
 40443cc:	dc002c17 	ldw	r16,176(sp)
 40443d0:	00000306 	br	40443e0 <___vfprintf_internal_r+0x7cc>
 40443d4:	8c7ffc04 	addi	r17,r17,-16
 40443d8:	42000204 	addi	r8,r8,8
 40443dc:	b440130e 	bge	r22,r17,404442c <___vfprintf_internal_r+0x818>
 40443e0:	01008034 	movhi	r4,512
 40443e4:	18c00404 	addi	r3,r3,16
 40443e8:	10800044 	addi	r2,r2,1
 40443ec:	2100a784 	addi	r4,r4,670
 40443f0:	41000015 	stw	r4,0(r8)
 40443f4:	45800115 	stw	r22,4(r8)
 40443f8:	d8c02015 	stw	r3,128(sp)
 40443fc:	d8801f15 	stw	r2,124(sp)
 4044400:	e0bff40e 	bge	fp,r2,40443d4 <__flash_rwdata_start+0xfffe9ca4>
 4044404:	d9801e04 	addi	r6,sp,120
 4044408:	b80b883a 	mov	r5,r23
 404440c:	8009883a 	mov	r4,r16
 4044410:	404a8680 	call	404a868 <__sprint_r>
 4044414:	103f011e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044418:	8c7ffc04 	addi	r17,r17,-16
 404441c:	d8c02017 	ldw	r3,128(sp)
 4044420:	d8801f17 	ldw	r2,124(sp)
 4044424:	da000404 	addi	r8,sp,16
 4044428:	b47fed16 	blt	r22,r17,40443e0 <__flash_rwdata_start+0xfffe9cb0>
 404442c:	9021883a 	mov	r16,r18
 4044430:	9825883a 	mov	r18,r19
 4044434:	8827883a 	mov	r19,r17
 4044438:	dc403b17 	ldw	r17,236(sp)
 404443c:	d9403517 	ldw	r5,212(sp)
 4044440:	98c7883a 	add	r3,r19,r3
 4044444:	10800044 	addi	r2,r2,1
 4044448:	41400015 	stw	r5,0(r8)
 404444c:	44c00115 	stw	r19,4(r8)
 4044450:	d8c02015 	stw	r3,128(sp)
 4044454:	d8801f15 	stw	r2,124(sp)
 4044458:	010001c4 	movi	r4,7
 404445c:	2082a316 	blt	r4,r2,4044eec <___vfprintf_internal_r+0x12d8>
 4044460:	df002787 	ldb	fp,158(sp)
 4044464:	42000204 	addi	r8,r8,8
 4044468:	e0000c26 	beq	fp,zero,404449c <___vfprintf_internal_r+0x888>
 404446c:	d8801f17 	ldw	r2,124(sp)
 4044470:	d9002784 	addi	r4,sp,158
 4044474:	18c00044 	addi	r3,r3,1
 4044478:	10800044 	addi	r2,r2,1
 404447c:	41000015 	stw	r4,0(r8)
 4044480:	01000044 	movi	r4,1
 4044484:	41000115 	stw	r4,4(r8)
 4044488:	d8c02015 	stw	r3,128(sp)
 404448c:	d8801f15 	stw	r2,124(sp)
 4044490:	010001c4 	movi	r4,7
 4044494:	20823c16 	blt	r4,r2,4044d88 <___vfprintf_internal_r+0x1174>
 4044498:	42000204 	addi	r8,r8,8
 404449c:	d8802b17 	ldw	r2,172(sp)
 40444a0:	10000c26 	beq	r2,zero,40444d4 <___vfprintf_internal_r+0x8c0>
 40444a4:	d8801f17 	ldw	r2,124(sp)
 40444a8:	d9002704 	addi	r4,sp,156
 40444ac:	18c00084 	addi	r3,r3,2
 40444b0:	10800044 	addi	r2,r2,1
 40444b4:	41000015 	stw	r4,0(r8)
 40444b8:	01000084 	movi	r4,2
 40444bc:	41000115 	stw	r4,4(r8)
 40444c0:	d8c02015 	stw	r3,128(sp)
 40444c4:	d8801f15 	stw	r2,124(sp)
 40444c8:	010001c4 	movi	r4,7
 40444cc:	20823616 	blt	r4,r2,4044da8 <___vfprintf_internal_r+0x1194>
 40444d0:	42000204 	addi	r8,r8,8
 40444d4:	d9003017 	ldw	r4,192(sp)
 40444d8:	00802004 	movi	r2,128
 40444dc:	20819926 	beq	r4,r2,4044b44 <___vfprintf_internal_r+0xf30>
 40444e0:	d9402917 	ldw	r5,164(sp)
 40444e4:	d8802e17 	ldw	r2,184(sp)
 40444e8:	28adc83a 	sub	r22,r5,r2
 40444ec:	0580310e 	bge	zero,r22,40445b4 <___vfprintf_internal_r+0x9a0>
 40444f0:	07000404 	movi	fp,16
 40444f4:	d8801f17 	ldw	r2,124(sp)
 40444f8:	e584140e 	bge	fp,r22,404554c <___vfprintf_internal_r+0x1938>
 40444fc:	01408034 	movhi	r5,512
 4044500:	2940a384 	addi	r5,r5,654
 4044504:	dc402915 	stw	r17,164(sp)
 4044508:	d9402b15 	stw	r5,172(sp)
 404450c:	b023883a 	mov	r17,r22
 4044510:	04c001c4 	movi	r19,7
 4044514:	a82d883a 	mov	r22,r21
 4044518:	902b883a 	mov	r21,r18
 404451c:	8025883a 	mov	r18,r16
 4044520:	dc002c17 	ldw	r16,176(sp)
 4044524:	00000306 	br	4044534 <___vfprintf_internal_r+0x920>
 4044528:	8c7ffc04 	addi	r17,r17,-16
 404452c:	42000204 	addi	r8,r8,8
 4044530:	e440110e 	bge	fp,r17,4044578 <___vfprintf_internal_r+0x964>
 4044534:	18c00404 	addi	r3,r3,16
 4044538:	10800044 	addi	r2,r2,1
 404453c:	45000015 	stw	r20,0(r8)
 4044540:	47000115 	stw	fp,4(r8)
 4044544:	d8c02015 	stw	r3,128(sp)
 4044548:	d8801f15 	stw	r2,124(sp)
 404454c:	98bff60e 	bge	r19,r2,4044528 <__flash_rwdata_start+0xfffe9df8>
 4044550:	d9801e04 	addi	r6,sp,120
 4044554:	b80b883a 	mov	r5,r23
 4044558:	8009883a 	mov	r4,r16
 404455c:	404a8680 	call	404a868 <__sprint_r>
 4044560:	103eae1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044564:	8c7ffc04 	addi	r17,r17,-16
 4044568:	d8c02017 	ldw	r3,128(sp)
 404456c:	d8801f17 	ldw	r2,124(sp)
 4044570:	da000404 	addi	r8,sp,16
 4044574:	e47fef16 	blt	fp,r17,4044534 <__flash_rwdata_start+0xfffe9e04>
 4044578:	9021883a 	mov	r16,r18
 404457c:	a825883a 	mov	r18,r21
 4044580:	b02b883a 	mov	r21,r22
 4044584:	882d883a 	mov	r22,r17
 4044588:	dc402917 	ldw	r17,164(sp)
 404458c:	d9002b17 	ldw	r4,172(sp)
 4044590:	1d87883a 	add	r3,r3,r22
 4044594:	10800044 	addi	r2,r2,1
 4044598:	41000015 	stw	r4,0(r8)
 404459c:	45800115 	stw	r22,4(r8)
 40445a0:	d8c02015 	stw	r3,128(sp)
 40445a4:	d8801f15 	stw	r2,124(sp)
 40445a8:	010001c4 	movi	r4,7
 40445ac:	2081ee16 	blt	r4,r2,4044d68 <___vfprintf_internal_r+0x1154>
 40445b0:	42000204 	addi	r8,r8,8
 40445b4:	9080400c 	andi	r2,r18,256
 40445b8:	1001181e 	bne	r2,zero,4044a1c <___vfprintf_internal_r+0xe08>
 40445bc:	d9402e17 	ldw	r5,184(sp)
 40445c0:	d8801f17 	ldw	r2,124(sp)
 40445c4:	44000015 	stw	r16,0(r8)
 40445c8:	1947883a 	add	r3,r3,r5
 40445cc:	10800044 	addi	r2,r2,1
 40445d0:	41400115 	stw	r5,4(r8)
 40445d4:	d8c02015 	stw	r3,128(sp)
 40445d8:	d8801f15 	stw	r2,124(sp)
 40445dc:	010001c4 	movi	r4,7
 40445e0:	2081d316 	blt	r4,r2,4044d30 <___vfprintf_internal_r+0x111c>
 40445e4:	42000204 	addi	r8,r8,8
 40445e8:	9480010c 	andi	r18,r18,4
 40445ec:	90003226 	beq	r18,zero,40446b8 <___vfprintf_internal_r+0xaa4>
 40445f0:	d9403117 	ldw	r5,196(sp)
 40445f4:	d8802a17 	ldw	r2,168(sp)
 40445f8:	28a1c83a 	sub	r16,r5,r2
 40445fc:	04002e0e 	bge	zero,r16,40446b8 <___vfprintf_internal_r+0xaa4>
 4044600:	04400404 	movi	r17,16
 4044604:	d8801f17 	ldw	r2,124(sp)
 4044608:	8c04a20e 	bge	r17,r16,4045894 <___vfprintf_internal_r+0x1c80>
 404460c:	01408034 	movhi	r5,512
 4044610:	2940a784 	addi	r5,r5,670
 4044614:	d9403515 	stw	r5,212(sp)
 4044618:	048001c4 	movi	r18,7
 404461c:	dcc02c17 	ldw	r19,176(sp)
 4044620:	00000306 	br	4044630 <___vfprintf_internal_r+0xa1c>
 4044624:	843ffc04 	addi	r16,r16,-16
 4044628:	42000204 	addi	r8,r8,8
 404462c:	8c00130e 	bge	r17,r16,404467c <___vfprintf_internal_r+0xa68>
 4044630:	01008034 	movhi	r4,512
 4044634:	18c00404 	addi	r3,r3,16
 4044638:	10800044 	addi	r2,r2,1
 404463c:	2100a784 	addi	r4,r4,670
 4044640:	41000015 	stw	r4,0(r8)
 4044644:	44400115 	stw	r17,4(r8)
 4044648:	d8c02015 	stw	r3,128(sp)
 404464c:	d8801f15 	stw	r2,124(sp)
 4044650:	90bff40e 	bge	r18,r2,4044624 <__flash_rwdata_start+0xfffe9ef4>
 4044654:	d9801e04 	addi	r6,sp,120
 4044658:	b80b883a 	mov	r5,r23
 404465c:	9809883a 	mov	r4,r19
 4044660:	404a8680 	call	404a868 <__sprint_r>
 4044664:	103e6d1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044668:	843ffc04 	addi	r16,r16,-16
 404466c:	d8c02017 	ldw	r3,128(sp)
 4044670:	d8801f17 	ldw	r2,124(sp)
 4044674:	da000404 	addi	r8,sp,16
 4044678:	8c3fed16 	blt	r17,r16,4044630 <__flash_rwdata_start+0xfffe9f00>
 404467c:	d9403517 	ldw	r5,212(sp)
 4044680:	1c07883a 	add	r3,r3,r16
 4044684:	10800044 	addi	r2,r2,1
 4044688:	41400015 	stw	r5,0(r8)
 404468c:	44000115 	stw	r16,4(r8)
 4044690:	d8c02015 	stw	r3,128(sp)
 4044694:	d8801f15 	stw	r2,124(sp)
 4044698:	010001c4 	movi	r4,7
 404469c:	2080060e 	bge	r4,r2,40446b8 <___vfprintf_internal_r+0xaa4>
 40446a0:	d9002c17 	ldw	r4,176(sp)
 40446a4:	d9801e04 	addi	r6,sp,120
 40446a8:	b80b883a 	mov	r5,r23
 40446ac:	404a8680 	call	404a868 <__sprint_r>
 40446b0:	103e5a1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 40446b4:	d8c02017 	ldw	r3,128(sp)
 40446b8:	d8803117 	ldw	r2,196(sp)
 40446bc:	d9002a17 	ldw	r4,168(sp)
 40446c0:	1100010e 	bge	r2,r4,40446c8 <___vfprintf_internal_r+0xab4>
 40446c4:	2005883a 	mov	r2,r4
 40446c8:	d9402f17 	ldw	r5,188(sp)
 40446cc:	288b883a 	add	r5,r5,r2
 40446d0:	d9402f15 	stw	r5,188(sp)
 40446d4:	18019e1e 	bne	r3,zero,4044d50 <___vfprintf_internal_r+0x113c>
 40446d8:	a8800007 	ldb	r2,0(r21)
 40446dc:	d8001f15 	stw	zero,124(sp)
 40446e0:	da000404 	addi	r8,sp,16
 40446e4:	103d851e 	bne	r2,zero,4043cfc <__flash_rwdata_start+0xfffe95cc>
 40446e8:	a821883a 	mov	r16,r21
 40446ec:	003d9b06 	br	4043d5c <__flash_rwdata_start+0xfffe962c>
 40446f0:	18c03fcc 	andi	r3,r3,255
 40446f4:	1805c11e 	bne	r3,zero,4045dfc <___vfprintf_internal_r+0x21e8>
 40446f8:	94800414 	ori	r18,r18,16
 40446fc:	9080080c 	andi	r2,r18,32
 4044700:	10020c26 	beq	r2,zero,4044f34 <___vfprintf_internal_r+0x1320>
 4044704:	d8802d17 	ldw	r2,180(sp)
 4044708:	d9002917 	ldw	r4,164(sp)
 404470c:	d8002785 	stb	zero,158(sp)
 4044710:	10c00204 	addi	r3,r2,8
 4044714:	14c00017 	ldw	r19,0(r2)
 4044718:	15800117 	ldw	r22,4(r2)
 404471c:	20040f16 	blt	r4,zero,404575c <___vfprintf_internal_r+0x1b48>
 4044720:	013fdfc4 	movi	r4,-129
 4044724:	9d84b03a 	or	r2,r19,r22
 4044728:	d8c02d15 	stw	r3,180(sp)
 404472c:	9124703a 	and	r18,r18,r4
 4044730:	0039883a 	mov	fp,zero
 4044734:	103e891e 	bne	r2,zero,404415c <__flash_rwdata_start+0xfffe9a2c>
 4044738:	d9002917 	ldw	r4,164(sp)
 404473c:	2002c11e 	bne	r4,zero,4045244 <___vfprintf_internal_r+0x1630>
 4044740:	d8002915 	stw	zero,164(sp)
 4044744:	d8002e15 	stw	zero,184(sp)
 4044748:	dc001e04 	addi	r16,sp,120
 404474c:	003ef806 	br	4044330 <__flash_rwdata_start+0xfffe9c00>
 4044750:	18c03fcc 	andi	r3,r3,255
 4044754:	18059d1e 	bne	r3,zero,4045dcc <___vfprintf_internal_r+0x21b8>
 4044758:	01408034 	movhi	r5,512
 404475c:	29409704 	addi	r5,r5,604
 4044760:	d9403915 	stw	r5,228(sp)
 4044764:	9080080c 	andi	r2,r18,32
 4044768:	10005226 	beq	r2,zero,40448b4 <___vfprintf_internal_r+0xca0>
 404476c:	d8802d17 	ldw	r2,180(sp)
 4044770:	14c00017 	ldw	r19,0(r2)
 4044774:	15800117 	ldw	r22,4(r2)
 4044778:	10800204 	addi	r2,r2,8
 404477c:	d8802d15 	stw	r2,180(sp)
 4044780:	9080004c 	andi	r2,r18,1
 4044784:	10019026 	beq	r2,zero,4044dc8 <___vfprintf_internal_r+0x11b4>
 4044788:	9d84b03a 	or	r2,r19,r22
 404478c:	10036926 	beq	r2,zero,4045534 <___vfprintf_internal_r+0x1920>
 4044790:	d8c02917 	ldw	r3,164(sp)
 4044794:	00800c04 	movi	r2,48
 4044798:	d8802705 	stb	r2,156(sp)
 404479c:	dc402745 	stb	r17,157(sp)
 40447a0:	d8002785 	stb	zero,158(sp)
 40447a4:	90800094 	ori	r2,r18,2
 40447a8:	18045d16 	blt	r3,zero,4045920 <___vfprintf_internal_r+0x1d0c>
 40447ac:	00bfdfc4 	movi	r2,-129
 40447b0:	90a4703a 	and	r18,r18,r2
 40447b4:	94800094 	ori	r18,r18,2
 40447b8:	0039883a 	mov	fp,zero
 40447bc:	d9003917 	ldw	r4,228(sp)
 40447c0:	dc001e04 	addi	r16,sp,120
 40447c4:	988003cc 	andi	r2,r19,15
 40447c8:	b006973a 	slli	r3,r22,28
 40447cc:	2085883a 	add	r2,r4,r2
 40447d0:	9826d13a 	srli	r19,r19,4
 40447d4:	10800003 	ldbu	r2,0(r2)
 40447d8:	b02cd13a 	srli	r22,r22,4
 40447dc:	843fffc4 	addi	r16,r16,-1
 40447e0:	1ce6b03a 	or	r19,r3,r19
 40447e4:	80800005 	stb	r2,0(r16)
 40447e8:	9d84b03a 	or	r2,r19,r22
 40447ec:	103ff51e 	bne	r2,zero,40447c4 <__flash_rwdata_start+0xfffea094>
 40447f0:	d8c02817 	ldw	r3,160(sp)
 40447f4:	1c07c83a 	sub	r3,r3,r16
 40447f8:	d8c02e15 	stw	r3,184(sp)
 40447fc:	003ecc06 	br	4044330 <__flash_rwdata_start+0xfffe9c00>
 4044800:	18c03fcc 	andi	r3,r3,255
 4044804:	183e9f26 	beq	r3,zero,4044284 <__flash_rwdata_start+0xfffe9b54>
 4044808:	d9c02785 	stb	r7,158(sp)
 404480c:	003e9d06 	br	4044284 <__flash_rwdata_start+0xfffe9b54>
 4044810:	00c00044 	movi	r3,1
 4044814:	01c00ac4 	movi	r7,43
 4044818:	ac400007 	ldb	r17,0(r21)
 404481c:	003d5e06 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 4044820:	94800814 	ori	r18,r18,32
 4044824:	ac400007 	ldb	r17,0(r21)
 4044828:	003d5b06 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 404482c:	d8c02d17 	ldw	r3,180(sp)
 4044830:	d8002785 	stb	zero,158(sp)
 4044834:	1c000017 	ldw	r16,0(r3)
 4044838:	1cc00104 	addi	r19,r3,4
 404483c:	80041926 	beq	r16,zero,40458a4 <___vfprintf_internal_r+0x1c90>
 4044840:	d9002917 	ldw	r4,164(sp)
 4044844:	2003d016 	blt	r4,zero,4045788 <___vfprintf_internal_r+0x1b74>
 4044848:	200d883a 	mov	r6,r4
 404484c:	000b883a 	mov	r5,zero
 4044850:	8009883a 	mov	r4,r16
 4044854:	da003d15 	stw	r8,244(sp)
 4044858:	4048c180 	call	4048c18 <memchr>
 404485c:	da003d17 	ldw	r8,244(sp)
 4044860:	10045426 	beq	r2,zero,40459b4 <___vfprintf_internal_r+0x1da0>
 4044864:	1405c83a 	sub	r2,r2,r16
 4044868:	d8802e15 	stw	r2,184(sp)
 404486c:	1003cc16 	blt	r2,zero,40457a0 <___vfprintf_internal_r+0x1b8c>
 4044870:	df002783 	ldbu	fp,158(sp)
 4044874:	d8802a15 	stw	r2,168(sp)
 4044878:	dcc02d15 	stw	r19,180(sp)
 404487c:	d8002915 	stw	zero,164(sp)
 4044880:	d8003215 	stw	zero,200(sp)
 4044884:	003eb006 	br	4044348 <__flash_rwdata_start+0xfffe9c18>
 4044888:	18c03fcc 	andi	r3,r3,255
 404488c:	183f9b26 	beq	r3,zero,40446fc <__flash_rwdata_start+0xfffe9fcc>
 4044890:	d9c02785 	stb	r7,158(sp)
 4044894:	003f9906 	br	40446fc <__flash_rwdata_start+0xfffe9fcc>
 4044898:	18c03fcc 	andi	r3,r3,255
 404489c:	1805551e 	bne	r3,zero,4045df4 <___vfprintf_internal_r+0x21e0>
 40448a0:	01408034 	movhi	r5,512
 40448a4:	29409c04 	addi	r5,r5,624
 40448a8:	d9403915 	stw	r5,228(sp)
 40448ac:	9080080c 	andi	r2,r18,32
 40448b0:	103fae1e 	bne	r2,zero,404476c <__flash_rwdata_start+0xfffea03c>
 40448b4:	9080040c 	andi	r2,r18,16
 40448b8:	1002de26 	beq	r2,zero,4045434 <___vfprintf_internal_r+0x1820>
 40448bc:	d8c02d17 	ldw	r3,180(sp)
 40448c0:	002d883a 	mov	r22,zero
 40448c4:	1cc00017 	ldw	r19,0(r3)
 40448c8:	18c00104 	addi	r3,r3,4
 40448cc:	d8c02d15 	stw	r3,180(sp)
 40448d0:	003fab06 	br	4044780 <__flash_rwdata_start+0xfffea050>
 40448d4:	38803fcc 	andi	r2,r7,255
 40448d8:	1080201c 	xori	r2,r2,128
 40448dc:	10bfe004 	addi	r2,r2,-128
 40448e0:	1002d21e 	bne	r2,zero,404542c <___vfprintf_internal_r+0x1818>
 40448e4:	00c00044 	movi	r3,1
 40448e8:	01c00804 	movi	r7,32
 40448ec:	ac400007 	ldb	r17,0(r21)
 40448f0:	003d2906 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 40448f4:	94800054 	ori	r18,r18,1
 40448f8:	ac400007 	ldb	r17,0(r21)
 40448fc:	003d2606 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 4044900:	18c03fcc 	andi	r3,r3,255
 4044904:	183e0526 	beq	r3,zero,404411c <__flash_rwdata_start+0xfffe99ec>
 4044908:	d9c02785 	stb	r7,158(sp)
 404490c:	003e0306 	br	404411c <__flash_rwdata_start+0xfffe99ec>
 4044910:	94801014 	ori	r18,r18,64
 4044914:	ac400007 	ldb	r17,0(r21)
 4044918:	003d1f06 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 404491c:	ac400007 	ldb	r17,0(r21)
 4044920:	8a438726 	beq	r17,r9,4045740 <___vfprintf_internal_r+0x1b2c>
 4044924:	94800414 	ori	r18,r18,16
 4044928:	003d1b06 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 404492c:	18c03fcc 	andi	r3,r3,255
 4044930:	1805341e 	bne	r3,zero,4045e04 <___vfprintf_internal_r+0x21f0>
 4044934:	9080080c 	andi	r2,r18,32
 4044938:	1002cd26 	beq	r2,zero,4045470 <___vfprintf_internal_r+0x185c>
 404493c:	d9402d17 	ldw	r5,180(sp)
 4044940:	d9002f17 	ldw	r4,188(sp)
 4044944:	28800017 	ldw	r2,0(r5)
 4044948:	2007d7fa 	srai	r3,r4,31
 404494c:	29400104 	addi	r5,r5,4
 4044950:	d9402d15 	stw	r5,180(sp)
 4044954:	11000015 	stw	r4,0(r2)
 4044958:	10c00115 	stw	r3,4(r2)
 404495c:	003ce506 	br	4043cf4 <__flash_rwdata_start+0xfffe95c4>
 4044960:	d8c02d17 	ldw	r3,180(sp)
 4044964:	d9002d17 	ldw	r4,180(sp)
 4044968:	d8002785 	stb	zero,158(sp)
 404496c:	18800017 	ldw	r2,0(r3)
 4044970:	21000104 	addi	r4,r4,4
 4044974:	00c00044 	movi	r3,1
 4044978:	d8c02a15 	stw	r3,168(sp)
 404497c:	d8801405 	stb	r2,80(sp)
 4044980:	d9002d15 	stw	r4,180(sp)
 4044984:	d8c02e15 	stw	r3,184(sp)
 4044988:	d8002915 	stw	zero,164(sp)
 404498c:	d8003215 	stw	zero,200(sp)
 4044990:	dc001404 	addi	r16,sp,80
 4044994:	0039883a 	mov	fp,zero
 4044998:	003e7206 	br	4044364 <__flash_rwdata_start+0xfffe9c34>
 404499c:	01008034 	movhi	r4,512
 40449a0:	21009c04 	addi	r4,r4,624
 40449a4:	0039883a 	mov	fp,zero
 40449a8:	d9003915 	stw	r4,228(sp)
 40449ac:	04401e04 	movi	r17,120
 40449b0:	003f8206 	br	40447bc <__flash_rwdata_start+0xfffea08c>
 40449b4:	18c03fcc 	andi	r3,r3,255
 40449b8:	1805061e 	bne	r3,zero,4045dd4 <___vfprintf_internal_r+0x21c0>
 40449bc:	883d9126 	beq	r17,zero,4044004 <__flash_rwdata_start+0xfffe98d4>
 40449c0:	00c00044 	movi	r3,1
 40449c4:	d8c02a15 	stw	r3,168(sp)
 40449c8:	dc401405 	stb	r17,80(sp)
 40449cc:	d8002785 	stb	zero,158(sp)
 40449d0:	003fec06 	br	4044984 <__flash_rwdata_start+0xfffea254>
 40449d4:	01408034 	movhi	r5,512
 40449d8:	29409c04 	addi	r5,r5,624
 40449dc:	d9403915 	stw	r5,228(sp)
 40449e0:	d8c02d15 	stw	r3,180(sp)
 40449e4:	1025883a 	mov	r18,r2
 40449e8:	04401e04 	movi	r17,120
 40449ec:	9d84b03a 	or	r2,r19,r22
 40449f0:	1000fc1e 	bne	r2,zero,4044de4 <___vfprintf_internal_r+0x11d0>
 40449f4:	0039883a 	mov	fp,zero
 40449f8:	00800084 	movi	r2,2
 40449fc:	10803fcc 	andi	r2,r2,255
 4044a00:	00c00044 	movi	r3,1
 4044a04:	10c20f26 	beq	r2,r3,4045244 <___vfprintf_internal_r+0x1630>
 4044a08:	00c00084 	movi	r3,2
 4044a0c:	10fd6326 	beq	r2,r3,4043f9c <__flash_rwdata_start+0xfffe986c>
 4044a10:	003e2d06 	br	40442c8 <__flash_rwdata_start+0xfffe9b98>
 4044a14:	d8c02017 	ldw	r3,128(sp)
 4044a18:	003e9306 	br	4044468 <__flash_rwdata_start+0xfffe9d38>
 4044a1c:	00801944 	movi	r2,101
 4044a20:	14407e0e 	bge	r2,r17,4044c1c <___vfprintf_internal_r+0x1008>
 4044a24:	d9003617 	ldw	r4,216(sp)
 4044a28:	d9403817 	ldw	r5,224(sp)
 4044a2c:	000d883a 	mov	r6,zero
 4044a30:	000f883a 	mov	r7,zero
 4044a34:	d8c03c15 	stw	r3,240(sp)
 4044a38:	da003d15 	stw	r8,244(sp)
 4044a3c:	404e32c0 	call	404e32c <__eqdf2>
 4044a40:	d8c03c17 	ldw	r3,240(sp)
 4044a44:	da003d17 	ldw	r8,244(sp)
 4044a48:	1000f71e 	bne	r2,zero,4044e28 <___vfprintf_internal_r+0x1214>
 4044a4c:	d8801f17 	ldw	r2,124(sp)
 4044a50:	01008034 	movhi	r4,512
 4044a54:	2100a304 	addi	r4,r4,652
 4044a58:	18c00044 	addi	r3,r3,1
 4044a5c:	10800044 	addi	r2,r2,1
 4044a60:	41000015 	stw	r4,0(r8)
 4044a64:	01000044 	movi	r4,1
 4044a68:	41000115 	stw	r4,4(r8)
 4044a6c:	d8c02015 	stw	r3,128(sp)
 4044a70:	d8801f15 	stw	r2,124(sp)
 4044a74:	010001c4 	movi	r4,7
 4044a78:	2082b816 	blt	r4,r2,404555c <___vfprintf_internal_r+0x1948>
 4044a7c:	42000204 	addi	r8,r8,8
 4044a80:	d8802617 	ldw	r2,152(sp)
 4044a84:	d9403317 	ldw	r5,204(sp)
 4044a88:	11400216 	blt	r2,r5,4044a94 <___vfprintf_internal_r+0xe80>
 4044a8c:	9080004c 	andi	r2,r18,1
 4044a90:	103ed526 	beq	r2,zero,40445e8 <__flash_rwdata_start+0xfffe9eb8>
 4044a94:	d8803717 	ldw	r2,220(sp)
 4044a98:	d9003417 	ldw	r4,208(sp)
 4044a9c:	d9403717 	ldw	r5,220(sp)
 4044aa0:	1887883a 	add	r3,r3,r2
 4044aa4:	d8801f17 	ldw	r2,124(sp)
 4044aa8:	41000015 	stw	r4,0(r8)
 4044aac:	41400115 	stw	r5,4(r8)
 4044ab0:	10800044 	addi	r2,r2,1
 4044ab4:	d8c02015 	stw	r3,128(sp)
 4044ab8:	d8801f15 	stw	r2,124(sp)
 4044abc:	010001c4 	movi	r4,7
 4044ac0:	20832916 	blt	r4,r2,4045768 <___vfprintf_internal_r+0x1b54>
 4044ac4:	42000204 	addi	r8,r8,8
 4044ac8:	d8803317 	ldw	r2,204(sp)
 4044acc:	143fffc4 	addi	r16,r2,-1
 4044ad0:	043ec50e 	bge	zero,r16,40445e8 <__flash_rwdata_start+0xfffe9eb8>
 4044ad4:	04400404 	movi	r17,16
 4044ad8:	d8801f17 	ldw	r2,124(sp)
 4044adc:	8c00880e 	bge	r17,r16,4044d00 <___vfprintf_internal_r+0x10ec>
 4044ae0:	01408034 	movhi	r5,512
 4044ae4:	2940a384 	addi	r5,r5,654
 4044ae8:	d9402b15 	stw	r5,172(sp)
 4044aec:	058001c4 	movi	r22,7
 4044af0:	dcc02c17 	ldw	r19,176(sp)
 4044af4:	00000306 	br	4044b04 <___vfprintf_internal_r+0xef0>
 4044af8:	42000204 	addi	r8,r8,8
 4044afc:	843ffc04 	addi	r16,r16,-16
 4044b00:	8c00820e 	bge	r17,r16,4044d0c <___vfprintf_internal_r+0x10f8>
 4044b04:	18c00404 	addi	r3,r3,16
 4044b08:	10800044 	addi	r2,r2,1
 4044b0c:	45000015 	stw	r20,0(r8)
 4044b10:	44400115 	stw	r17,4(r8)
 4044b14:	d8c02015 	stw	r3,128(sp)
 4044b18:	d8801f15 	stw	r2,124(sp)
 4044b1c:	b0bff60e 	bge	r22,r2,4044af8 <__flash_rwdata_start+0xfffea3c8>
 4044b20:	d9801e04 	addi	r6,sp,120
 4044b24:	b80b883a 	mov	r5,r23
 4044b28:	9809883a 	mov	r4,r19
 4044b2c:	404a8680 	call	404a868 <__sprint_r>
 4044b30:	103d3a1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044b34:	d8c02017 	ldw	r3,128(sp)
 4044b38:	d8801f17 	ldw	r2,124(sp)
 4044b3c:	da000404 	addi	r8,sp,16
 4044b40:	003fee06 	br	4044afc <__flash_rwdata_start+0xfffea3cc>
 4044b44:	d9403117 	ldw	r5,196(sp)
 4044b48:	d8802a17 	ldw	r2,168(sp)
 4044b4c:	28adc83a 	sub	r22,r5,r2
 4044b50:	05be630e 	bge	zero,r22,40444e0 <__flash_rwdata_start+0xfffe9db0>
 4044b54:	07000404 	movi	fp,16
 4044b58:	d8801f17 	ldw	r2,124(sp)
 4044b5c:	e5838f0e 	bge	fp,r22,404599c <___vfprintf_internal_r+0x1d88>
 4044b60:	01408034 	movhi	r5,512
 4044b64:	2940a384 	addi	r5,r5,654
 4044b68:	dc403015 	stw	r17,192(sp)
 4044b6c:	d9402b15 	stw	r5,172(sp)
 4044b70:	b023883a 	mov	r17,r22
 4044b74:	04c001c4 	movi	r19,7
 4044b78:	a82d883a 	mov	r22,r21
 4044b7c:	902b883a 	mov	r21,r18
 4044b80:	8025883a 	mov	r18,r16
 4044b84:	dc002c17 	ldw	r16,176(sp)
 4044b88:	00000306 	br	4044b98 <___vfprintf_internal_r+0xf84>
 4044b8c:	8c7ffc04 	addi	r17,r17,-16
 4044b90:	42000204 	addi	r8,r8,8
 4044b94:	e440110e 	bge	fp,r17,4044bdc <___vfprintf_internal_r+0xfc8>
 4044b98:	18c00404 	addi	r3,r3,16
 4044b9c:	10800044 	addi	r2,r2,1
 4044ba0:	45000015 	stw	r20,0(r8)
 4044ba4:	47000115 	stw	fp,4(r8)
 4044ba8:	d8c02015 	stw	r3,128(sp)
 4044bac:	d8801f15 	stw	r2,124(sp)
 4044bb0:	98bff60e 	bge	r19,r2,4044b8c <__flash_rwdata_start+0xfffea45c>
 4044bb4:	d9801e04 	addi	r6,sp,120
 4044bb8:	b80b883a 	mov	r5,r23
 4044bbc:	8009883a 	mov	r4,r16
 4044bc0:	404a8680 	call	404a868 <__sprint_r>
 4044bc4:	103d151e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044bc8:	8c7ffc04 	addi	r17,r17,-16
 4044bcc:	d8c02017 	ldw	r3,128(sp)
 4044bd0:	d8801f17 	ldw	r2,124(sp)
 4044bd4:	da000404 	addi	r8,sp,16
 4044bd8:	e47fef16 	blt	fp,r17,4044b98 <__flash_rwdata_start+0xfffea468>
 4044bdc:	9021883a 	mov	r16,r18
 4044be0:	a825883a 	mov	r18,r21
 4044be4:	b02b883a 	mov	r21,r22
 4044be8:	882d883a 	mov	r22,r17
 4044bec:	dc403017 	ldw	r17,192(sp)
 4044bf0:	d9002b17 	ldw	r4,172(sp)
 4044bf4:	1d87883a 	add	r3,r3,r22
 4044bf8:	10800044 	addi	r2,r2,1
 4044bfc:	41000015 	stw	r4,0(r8)
 4044c00:	45800115 	stw	r22,4(r8)
 4044c04:	d8c02015 	stw	r3,128(sp)
 4044c08:	d8801f15 	stw	r2,124(sp)
 4044c0c:	010001c4 	movi	r4,7
 4044c10:	20818e16 	blt	r4,r2,404524c <___vfprintf_internal_r+0x1638>
 4044c14:	42000204 	addi	r8,r8,8
 4044c18:	003e3106 	br	40444e0 <__flash_rwdata_start+0xfffe9db0>
 4044c1c:	d9403317 	ldw	r5,204(sp)
 4044c20:	00800044 	movi	r2,1
 4044c24:	18c00044 	addi	r3,r3,1
 4044c28:	1141530e 	bge	r2,r5,4045178 <___vfprintf_internal_r+0x1564>
 4044c2c:	dc401f17 	ldw	r17,124(sp)
 4044c30:	00800044 	movi	r2,1
 4044c34:	40800115 	stw	r2,4(r8)
 4044c38:	8c400044 	addi	r17,r17,1
 4044c3c:	44000015 	stw	r16,0(r8)
 4044c40:	d8c02015 	stw	r3,128(sp)
 4044c44:	dc401f15 	stw	r17,124(sp)
 4044c48:	008001c4 	movi	r2,7
 4044c4c:	14416b16 	blt	r2,r17,40451fc <___vfprintf_internal_r+0x15e8>
 4044c50:	42000204 	addi	r8,r8,8
 4044c54:	d8803717 	ldw	r2,220(sp)
 4044c58:	d9003417 	ldw	r4,208(sp)
 4044c5c:	8c400044 	addi	r17,r17,1
 4044c60:	10c7883a 	add	r3,r2,r3
 4044c64:	40800115 	stw	r2,4(r8)
 4044c68:	41000015 	stw	r4,0(r8)
 4044c6c:	d8c02015 	stw	r3,128(sp)
 4044c70:	dc401f15 	stw	r17,124(sp)
 4044c74:	008001c4 	movi	r2,7
 4044c78:	14416916 	blt	r2,r17,4045220 <___vfprintf_internal_r+0x160c>
 4044c7c:	45800204 	addi	r22,r8,8
 4044c80:	d9003617 	ldw	r4,216(sp)
 4044c84:	d9403817 	ldw	r5,224(sp)
 4044c88:	000d883a 	mov	r6,zero
 4044c8c:	000f883a 	mov	r7,zero
 4044c90:	d8c03c15 	stw	r3,240(sp)
 4044c94:	404e32c0 	call	404e32c <__eqdf2>
 4044c98:	d8c03c17 	ldw	r3,240(sp)
 4044c9c:	1000bc26 	beq	r2,zero,4044f90 <___vfprintf_internal_r+0x137c>
 4044ca0:	d9403317 	ldw	r5,204(sp)
 4044ca4:	84000044 	addi	r16,r16,1
 4044ca8:	8c400044 	addi	r17,r17,1
 4044cac:	28bfffc4 	addi	r2,r5,-1
 4044cb0:	1887883a 	add	r3,r3,r2
 4044cb4:	b0800115 	stw	r2,4(r22)
 4044cb8:	b4000015 	stw	r16,0(r22)
 4044cbc:	d8c02015 	stw	r3,128(sp)
 4044cc0:	dc401f15 	stw	r17,124(sp)
 4044cc4:	008001c4 	movi	r2,7
 4044cc8:	14414316 	blt	r2,r17,40451d8 <___vfprintf_internal_r+0x15c4>
 4044ccc:	b5800204 	addi	r22,r22,8
 4044cd0:	d9003a17 	ldw	r4,232(sp)
 4044cd4:	df0022c4 	addi	fp,sp,139
 4044cd8:	8c400044 	addi	r17,r17,1
 4044cdc:	20c7883a 	add	r3,r4,r3
 4044ce0:	b7000015 	stw	fp,0(r22)
 4044ce4:	b1000115 	stw	r4,4(r22)
 4044ce8:	d8c02015 	stw	r3,128(sp)
 4044cec:	dc401f15 	stw	r17,124(sp)
 4044cf0:	008001c4 	movi	r2,7
 4044cf4:	14400e16 	blt	r2,r17,4044d30 <___vfprintf_internal_r+0x111c>
 4044cf8:	b2000204 	addi	r8,r22,8
 4044cfc:	003e3a06 	br	40445e8 <__flash_rwdata_start+0xfffe9eb8>
 4044d00:	01008034 	movhi	r4,512
 4044d04:	2100a384 	addi	r4,r4,654
 4044d08:	d9002b15 	stw	r4,172(sp)
 4044d0c:	d9002b17 	ldw	r4,172(sp)
 4044d10:	1c07883a 	add	r3,r3,r16
 4044d14:	44000115 	stw	r16,4(r8)
 4044d18:	41000015 	stw	r4,0(r8)
 4044d1c:	10800044 	addi	r2,r2,1
 4044d20:	d8c02015 	stw	r3,128(sp)
 4044d24:	d8801f15 	stw	r2,124(sp)
 4044d28:	010001c4 	movi	r4,7
 4044d2c:	20be2d0e 	bge	r4,r2,40445e4 <__flash_rwdata_start+0xfffe9eb4>
 4044d30:	d9002c17 	ldw	r4,176(sp)
 4044d34:	d9801e04 	addi	r6,sp,120
 4044d38:	b80b883a 	mov	r5,r23
 4044d3c:	404a8680 	call	404a868 <__sprint_r>
 4044d40:	103cb61e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044d44:	d8c02017 	ldw	r3,128(sp)
 4044d48:	da000404 	addi	r8,sp,16
 4044d4c:	003e2606 	br	40445e8 <__flash_rwdata_start+0xfffe9eb8>
 4044d50:	d9002c17 	ldw	r4,176(sp)
 4044d54:	d9801e04 	addi	r6,sp,120
 4044d58:	b80b883a 	mov	r5,r23
 4044d5c:	404a8680 	call	404a868 <__sprint_r>
 4044d60:	103e5d26 	beq	r2,zero,40446d8 <__flash_rwdata_start+0xfffe9fa8>
 4044d64:	003cad06 	br	404401c <__flash_rwdata_start+0xfffe98ec>
 4044d68:	d9002c17 	ldw	r4,176(sp)
 4044d6c:	d9801e04 	addi	r6,sp,120
 4044d70:	b80b883a 	mov	r5,r23
 4044d74:	404a8680 	call	404a868 <__sprint_r>
 4044d78:	103ca81e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044d7c:	d8c02017 	ldw	r3,128(sp)
 4044d80:	da000404 	addi	r8,sp,16
 4044d84:	003e0b06 	br	40445b4 <__flash_rwdata_start+0xfffe9e84>
 4044d88:	d9002c17 	ldw	r4,176(sp)
 4044d8c:	d9801e04 	addi	r6,sp,120
 4044d90:	b80b883a 	mov	r5,r23
 4044d94:	404a8680 	call	404a868 <__sprint_r>
 4044d98:	103ca01e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044d9c:	d8c02017 	ldw	r3,128(sp)
 4044da0:	da000404 	addi	r8,sp,16
 4044da4:	003dbd06 	br	404449c <__flash_rwdata_start+0xfffe9d6c>
 4044da8:	d9002c17 	ldw	r4,176(sp)
 4044dac:	d9801e04 	addi	r6,sp,120
 4044db0:	b80b883a 	mov	r5,r23
 4044db4:	404a8680 	call	404a868 <__sprint_r>
 4044db8:	103c981e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044dbc:	d8c02017 	ldw	r3,128(sp)
 4044dc0:	da000404 	addi	r8,sp,16
 4044dc4:	003dc306 	br	40444d4 <__flash_rwdata_start+0xfffe9da4>
 4044dc8:	d8802917 	ldw	r2,164(sp)
 4044dcc:	d8002785 	stb	zero,158(sp)
 4044dd0:	103f0616 	blt	r2,zero,40449ec <__flash_rwdata_start+0xfffea2bc>
 4044dd4:	00ffdfc4 	movi	r3,-129
 4044dd8:	9d84b03a 	or	r2,r19,r22
 4044ddc:	90e4703a 	and	r18,r18,r3
 4044de0:	103c6b26 	beq	r2,zero,4043f90 <__flash_rwdata_start+0xfffe9860>
 4044de4:	0039883a 	mov	fp,zero
 4044de8:	003e7406 	br	40447bc <__flash_rwdata_start+0xfffea08c>
 4044dec:	9080040c 	andi	r2,r18,16
 4044df0:	1001b326 	beq	r2,zero,40454c0 <___vfprintf_internal_r+0x18ac>
 4044df4:	d9002d17 	ldw	r4,180(sp)
 4044df8:	d9402917 	ldw	r5,164(sp)
 4044dfc:	d8002785 	stb	zero,158(sp)
 4044e00:	20800104 	addi	r2,r4,4
 4044e04:	24c00017 	ldw	r19,0(r4)
 4044e08:	002d883a 	mov	r22,zero
 4044e0c:	2801b516 	blt	r5,zero,40454e4 <___vfprintf_internal_r+0x18d0>
 4044e10:	00ffdfc4 	movi	r3,-129
 4044e14:	d8802d15 	stw	r2,180(sp)
 4044e18:	90e4703a 	and	r18,r18,r3
 4044e1c:	983d2726 	beq	r19,zero,40442bc <__flash_rwdata_start+0xfffe9b8c>
 4044e20:	0039883a 	mov	fp,zero
 4044e24:	003d2a06 	br	40442d0 <__flash_rwdata_start+0xfffe9ba0>
 4044e28:	dc402617 	ldw	r17,152(sp)
 4044e2c:	0441d30e 	bge	zero,r17,404557c <___vfprintf_internal_r+0x1968>
 4044e30:	dc403217 	ldw	r17,200(sp)
 4044e34:	d8803317 	ldw	r2,204(sp)
 4044e38:	1440010e 	bge	r2,r17,4044e40 <___vfprintf_internal_r+0x122c>
 4044e3c:	1023883a 	mov	r17,r2
 4044e40:	04400a0e 	bge	zero,r17,4044e6c <___vfprintf_internal_r+0x1258>
 4044e44:	d8801f17 	ldw	r2,124(sp)
 4044e48:	1c47883a 	add	r3,r3,r17
 4044e4c:	44000015 	stw	r16,0(r8)
 4044e50:	10800044 	addi	r2,r2,1
 4044e54:	44400115 	stw	r17,4(r8)
 4044e58:	d8c02015 	stw	r3,128(sp)
 4044e5c:	d8801f15 	stw	r2,124(sp)
 4044e60:	010001c4 	movi	r4,7
 4044e64:	20826516 	blt	r4,r2,40457fc <___vfprintf_internal_r+0x1be8>
 4044e68:	42000204 	addi	r8,r8,8
 4044e6c:	88026116 	blt	r17,zero,40457f4 <___vfprintf_internal_r+0x1be0>
 4044e70:	d9003217 	ldw	r4,200(sp)
 4044e74:	2463c83a 	sub	r17,r4,r17
 4044e78:	04407b0e 	bge	zero,r17,4045068 <___vfprintf_internal_r+0x1454>
 4044e7c:	05800404 	movi	r22,16
 4044e80:	d8801f17 	ldw	r2,124(sp)
 4044e84:	b4419d0e 	bge	r22,r17,40454fc <___vfprintf_internal_r+0x18e8>
 4044e88:	01008034 	movhi	r4,512
 4044e8c:	2100a384 	addi	r4,r4,654
 4044e90:	d9002b15 	stw	r4,172(sp)
 4044e94:	070001c4 	movi	fp,7
 4044e98:	dcc02c17 	ldw	r19,176(sp)
 4044e9c:	00000306 	br	4044eac <___vfprintf_internal_r+0x1298>
 4044ea0:	42000204 	addi	r8,r8,8
 4044ea4:	8c7ffc04 	addi	r17,r17,-16
 4044ea8:	b441970e 	bge	r22,r17,4045508 <___vfprintf_internal_r+0x18f4>
 4044eac:	18c00404 	addi	r3,r3,16
 4044eb0:	10800044 	addi	r2,r2,1
 4044eb4:	45000015 	stw	r20,0(r8)
 4044eb8:	45800115 	stw	r22,4(r8)
 4044ebc:	d8c02015 	stw	r3,128(sp)
 4044ec0:	d8801f15 	stw	r2,124(sp)
 4044ec4:	e0bff60e 	bge	fp,r2,4044ea0 <__flash_rwdata_start+0xfffea770>
 4044ec8:	d9801e04 	addi	r6,sp,120
 4044ecc:	b80b883a 	mov	r5,r23
 4044ed0:	9809883a 	mov	r4,r19
 4044ed4:	404a8680 	call	404a868 <__sprint_r>
 4044ed8:	103c501e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044edc:	d8c02017 	ldw	r3,128(sp)
 4044ee0:	d8801f17 	ldw	r2,124(sp)
 4044ee4:	da000404 	addi	r8,sp,16
 4044ee8:	003fee06 	br	4044ea4 <__flash_rwdata_start+0xfffea774>
 4044eec:	d9002c17 	ldw	r4,176(sp)
 4044ef0:	d9801e04 	addi	r6,sp,120
 4044ef4:	b80b883a 	mov	r5,r23
 4044ef8:	404a8680 	call	404a868 <__sprint_r>
 4044efc:	103c471e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4044f00:	d8c02017 	ldw	r3,128(sp)
 4044f04:	df002787 	ldb	fp,158(sp)
 4044f08:	da000404 	addi	r8,sp,16
 4044f0c:	003d5606 	br	4044468 <__flash_rwdata_start+0xfffe9d38>
 4044f10:	9080040c 	andi	r2,r18,16
 4044f14:	10016126 	beq	r2,zero,404549c <___vfprintf_internal_r+0x1888>
 4044f18:	d8802d17 	ldw	r2,180(sp)
 4044f1c:	14c00017 	ldw	r19,0(r2)
 4044f20:	10800104 	addi	r2,r2,4
 4044f24:	d8802d15 	stw	r2,180(sp)
 4044f28:	982dd7fa 	srai	r22,r19,31
 4044f2c:	b005883a 	mov	r2,r22
 4044f30:	003c8206 	br	404413c <__flash_rwdata_start+0xfffe9a0c>
 4044f34:	9080040c 	andi	r2,r18,16
 4044f38:	10003526 	beq	r2,zero,4045010 <___vfprintf_internal_r+0x13fc>
 4044f3c:	d9402d17 	ldw	r5,180(sp)
 4044f40:	d8c02917 	ldw	r3,164(sp)
 4044f44:	d8002785 	stb	zero,158(sp)
 4044f48:	28800104 	addi	r2,r5,4
 4044f4c:	2cc00017 	ldw	r19,0(r5)
 4044f50:	002d883a 	mov	r22,zero
 4044f54:	18003716 	blt	r3,zero,4045034 <___vfprintf_internal_r+0x1420>
 4044f58:	00ffdfc4 	movi	r3,-129
 4044f5c:	d8802d15 	stw	r2,180(sp)
 4044f60:	90e4703a 	and	r18,r18,r3
 4044f64:	0039883a 	mov	fp,zero
 4044f68:	983df326 	beq	r19,zero,4044738 <__flash_rwdata_start+0xfffea008>
 4044f6c:	00800244 	movi	r2,9
 4044f70:	14fc7b36 	bltu	r2,r19,4044160 <__flash_rwdata_start+0xfffe9a30>
 4044f74:	d8c02817 	ldw	r3,160(sp)
 4044f78:	dc001dc4 	addi	r16,sp,119
 4044f7c:	9cc00c04 	addi	r19,r19,48
 4044f80:	1c07c83a 	sub	r3,r3,r16
 4044f84:	dcc01dc5 	stb	r19,119(sp)
 4044f88:	d8c02e15 	stw	r3,184(sp)
 4044f8c:	003ce806 	br	4044330 <__flash_rwdata_start+0xfffe9c00>
 4044f90:	d8803317 	ldw	r2,204(sp)
 4044f94:	143fffc4 	addi	r16,r2,-1
 4044f98:	043f4d0e 	bge	zero,r16,4044cd0 <__flash_rwdata_start+0xfffea5a0>
 4044f9c:	07000404 	movi	fp,16
 4044fa0:	e400810e 	bge	fp,r16,40451a8 <___vfprintf_internal_r+0x1594>
 4044fa4:	01408034 	movhi	r5,512
 4044fa8:	2940a384 	addi	r5,r5,654
 4044fac:	d9402b15 	stw	r5,172(sp)
 4044fb0:	01c001c4 	movi	r7,7
 4044fb4:	dcc02c17 	ldw	r19,176(sp)
 4044fb8:	00000306 	br	4044fc8 <___vfprintf_internal_r+0x13b4>
 4044fbc:	b5800204 	addi	r22,r22,8
 4044fc0:	843ffc04 	addi	r16,r16,-16
 4044fc4:	e4007b0e 	bge	fp,r16,40451b4 <___vfprintf_internal_r+0x15a0>
 4044fc8:	18c00404 	addi	r3,r3,16
 4044fcc:	8c400044 	addi	r17,r17,1
 4044fd0:	b5000015 	stw	r20,0(r22)
 4044fd4:	b7000115 	stw	fp,4(r22)
 4044fd8:	d8c02015 	stw	r3,128(sp)
 4044fdc:	dc401f15 	stw	r17,124(sp)
 4044fe0:	3c7ff60e 	bge	r7,r17,4044fbc <__flash_rwdata_start+0xfffea88c>
 4044fe4:	d9801e04 	addi	r6,sp,120
 4044fe8:	b80b883a 	mov	r5,r23
 4044fec:	9809883a 	mov	r4,r19
 4044ff0:	d9c03c15 	stw	r7,240(sp)
 4044ff4:	404a8680 	call	404a868 <__sprint_r>
 4044ff8:	d9c03c17 	ldw	r7,240(sp)
 4044ffc:	103c071e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045000:	d8c02017 	ldw	r3,128(sp)
 4045004:	dc401f17 	ldw	r17,124(sp)
 4045008:	dd800404 	addi	r22,sp,16
 404500c:	003fec06 	br	4044fc0 <__flash_rwdata_start+0xfffea890>
 4045010:	9080100c 	andi	r2,r18,64
 4045014:	d8002785 	stb	zero,158(sp)
 4045018:	10010e26 	beq	r2,zero,4045454 <___vfprintf_internal_r+0x1840>
 404501c:	d9002d17 	ldw	r4,180(sp)
 4045020:	d9402917 	ldw	r5,164(sp)
 4045024:	002d883a 	mov	r22,zero
 4045028:	20800104 	addi	r2,r4,4
 404502c:	24c0000b 	ldhu	r19,0(r4)
 4045030:	283fc90e 	bge	r5,zero,4044f58 <__flash_rwdata_start+0xfffea828>
 4045034:	d8802d15 	stw	r2,180(sp)
 4045038:	0039883a 	mov	fp,zero
 404503c:	9d84b03a 	or	r2,r19,r22
 4045040:	103c461e 	bne	r2,zero,404415c <__flash_rwdata_start+0xfffe9a2c>
 4045044:	00800044 	movi	r2,1
 4045048:	003e6c06 	br	40449fc <__flash_rwdata_start+0xfffea2cc>
 404504c:	d9002c17 	ldw	r4,176(sp)
 4045050:	d9801e04 	addi	r6,sp,120
 4045054:	b80b883a 	mov	r5,r23
 4045058:	404a8680 	call	404a868 <__sprint_r>
 404505c:	103bef1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045060:	d8c02017 	ldw	r3,128(sp)
 4045064:	da000404 	addi	r8,sp,16
 4045068:	d9003217 	ldw	r4,200(sp)
 404506c:	d8802617 	ldw	r2,152(sp)
 4045070:	d9403317 	ldw	r5,204(sp)
 4045074:	8123883a 	add	r17,r16,r4
 4045078:	11400216 	blt	r2,r5,4045084 <___vfprintf_internal_r+0x1470>
 404507c:	9100004c 	andi	r4,r18,1
 4045080:	20000d26 	beq	r4,zero,40450b8 <___vfprintf_internal_r+0x14a4>
 4045084:	d9003717 	ldw	r4,220(sp)
 4045088:	d9403417 	ldw	r5,208(sp)
 404508c:	1907883a 	add	r3,r3,r4
 4045090:	d9001f17 	ldw	r4,124(sp)
 4045094:	41400015 	stw	r5,0(r8)
 4045098:	d9403717 	ldw	r5,220(sp)
 404509c:	21000044 	addi	r4,r4,1
 40450a0:	d8c02015 	stw	r3,128(sp)
 40450a4:	41400115 	stw	r5,4(r8)
 40450a8:	d9001f15 	stw	r4,124(sp)
 40450ac:	014001c4 	movi	r5,7
 40450b0:	2901e816 	blt	r5,r4,4045854 <___vfprintf_internal_r+0x1c40>
 40450b4:	42000204 	addi	r8,r8,8
 40450b8:	d9003317 	ldw	r4,204(sp)
 40450bc:	8121883a 	add	r16,r16,r4
 40450c0:	2085c83a 	sub	r2,r4,r2
 40450c4:	8461c83a 	sub	r16,r16,r17
 40450c8:	1400010e 	bge	r2,r16,40450d0 <___vfprintf_internal_r+0x14bc>
 40450cc:	1021883a 	mov	r16,r2
 40450d0:	04000a0e 	bge	zero,r16,40450fc <___vfprintf_internal_r+0x14e8>
 40450d4:	d9001f17 	ldw	r4,124(sp)
 40450d8:	1c07883a 	add	r3,r3,r16
 40450dc:	44400015 	stw	r17,0(r8)
 40450e0:	21000044 	addi	r4,r4,1
 40450e4:	44000115 	stw	r16,4(r8)
 40450e8:	d8c02015 	stw	r3,128(sp)
 40450ec:	d9001f15 	stw	r4,124(sp)
 40450f0:	014001c4 	movi	r5,7
 40450f4:	2901fb16 	blt	r5,r4,40458e4 <___vfprintf_internal_r+0x1cd0>
 40450f8:	42000204 	addi	r8,r8,8
 40450fc:	8001f716 	blt	r16,zero,40458dc <___vfprintf_internal_r+0x1cc8>
 4045100:	1421c83a 	sub	r16,r2,r16
 4045104:	043d380e 	bge	zero,r16,40445e8 <__flash_rwdata_start+0xfffe9eb8>
 4045108:	04400404 	movi	r17,16
 404510c:	d8801f17 	ldw	r2,124(sp)
 4045110:	8c3efb0e 	bge	r17,r16,4044d00 <__flash_rwdata_start+0xfffea5d0>
 4045114:	01408034 	movhi	r5,512
 4045118:	2940a384 	addi	r5,r5,654
 404511c:	d9402b15 	stw	r5,172(sp)
 4045120:	058001c4 	movi	r22,7
 4045124:	dcc02c17 	ldw	r19,176(sp)
 4045128:	00000306 	br	4045138 <___vfprintf_internal_r+0x1524>
 404512c:	42000204 	addi	r8,r8,8
 4045130:	843ffc04 	addi	r16,r16,-16
 4045134:	8c3ef50e 	bge	r17,r16,4044d0c <__flash_rwdata_start+0xfffea5dc>
 4045138:	18c00404 	addi	r3,r3,16
 404513c:	10800044 	addi	r2,r2,1
 4045140:	45000015 	stw	r20,0(r8)
 4045144:	44400115 	stw	r17,4(r8)
 4045148:	d8c02015 	stw	r3,128(sp)
 404514c:	d8801f15 	stw	r2,124(sp)
 4045150:	b0bff60e 	bge	r22,r2,404512c <__flash_rwdata_start+0xfffea9fc>
 4045154:	d9801e04 	addi	r6,sp,120
 4045158:	b80b883a 	mov	r5,r23
 404515c:	9809883a 	mov	r4,r19
 4045160:	404a8680 	call	404a868 <__sprint_r>
 4045164:	103bad1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045168:	d8c02017 	ldw	r3,128(sp)
 404516c:	d8801f17 	ldw	r2,124(sp)
 4045170:	da000404 	addi	r8,sp,16
 4045174:	003fee06 	br	4045130 <__flash_rwdata_start+0xfffeaa00>
 4045178:	9088703a 	and	r4,r18,r2
 404517c:	203eab1e 	bne	r4,zero,4044c2c <__flash_rwdata_start+0xfffea4fc>
 4045180:	dc401f17 	ldw	r17,124(sp)
 4045184:	40800115 	stw	r2,4(r8)
 4045188:	44000015 	stw	r16,0(r8)
 404518c:	8c400044 	addi	r17,r17,1
 4045190:	d8c02015 	stw	r3,128(sp)
 4045194:	dc401f15 	stw	r17,124(sp)
 4045198:	008001c4 	movi	r2,7
 404519c:	14400e16 	blt	r2,r17,40451d8 <___vfprintf_internal_r+0x15c4>
 40451a0:	45800204 	addi	r22,r8,8
 40451a4:	003eca06 	br	4044cd0 <__flash_rwdata_start+0xfffea5a0>
 40451a8:	01008034 	movhi	r4,512
 40451ac:	2100a384 	addi	r4,r4,654
 40451b0:	d9002b15 	stw	r4,172(sp)
 40451b4:	d8802b17 	ldw	r2,172(sp)
 40451b8:	1c07883a 	add	r3,r3,r16
 40451bc:	8c400044 	addi	r17,r17,1
 40451c0:	b0800015 	stw	r2,0(r22)
 40451c4:	b4000115 	stw	r16,4(r22)
 40451c8:	d8c02015 	stw	r3,128(sp)
 40451cc:	dc401f15 	stw	r17,124(sp)
 40451d0:	008001c4 	movi	r2,7
 40451d4:	147ebd0e 	bge	r2,r17,4044ccc <__flash_rwdata_start+0xfffea59c>
 40451d8:	d9002c17 	ldw	r4,176(sp)
 40451dc:	d9801e04 	addi	r6,sp,120
 40451e0:	b80b883a 	mov	r5,r23
 40451e4:	404a8680 	call	404a868 <__sprint_r>
 40451e8:	103b8c1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 40451ec:	d8c02017 	ldw	r3,128(sp)
 40451f0:	dc401f17 	ldw	r17,124(sp)
 40451f4:	dd800404 	addi	r22,sp,16
 40451f8:	003eb506 	br	4044cd0 <__flash_rwdata_start+0xfffea5a0>
 40451fc:	d9002c17 	ldw	r4,176(sp)
 4045200:	d9801e04 	addi	r6,sp,120
 4045204:	b80b883a 	mov	r5,r23
 4045208:	404a8680 	call	404a868 <__sprint_r>
 404520c:	103b831e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045210:	d8c02017 	ldw	r3,128(sp)
 4045214:	dc401f17 	ldw	r17,124(sp)
 4045218:	da000404 	addi	r8,sp,16
 404521c:	003e8d06 	br	4044c54 <__flash_rwdata_start+0xfffea524>
 4045220:	d9002c17 	ldw	r4,176(sp)
 4045224:	d9801e04 	addi	r6,sp,120
 4045228:	b80b883a 	mov	r5,r23
 404522c:	404a8680 	call	404a868 <__sprint_r>
 4045230:	103b7a1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045234:	d8c02017 	ldw	r3,128(sp)
 4045238:	dc401f17 	ldw	r17,124(sp)
 404523c:	dd800404 	addi	r22,sp,16
 4045240:	003e8f06 	br	4044c80 <__flash_rwdata_start+0xfffea550>
 4045244:	0027883a 	mov	r19,zero
 4045248:	003f4a06 	br	4044f74 <__flash_rwdata_start+0xfffea844>
 404524c:	d9002c17 	ldw	r4,176(sp)
 4045250:	d9801e04 	addi	r6,sp,120
 4045254:	b80b883a 	mov	r5,r23
 4045258:	404a8680 	call	404a868 <__sprint_r>
 404525c:	103b6f1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045260:	d8c02017 	ldw	r3,128(sp)
 4045264:	da000404 	addi	r8,sp,16
 4045268:	003c9d06 	br	40444e0 <__flash_rwdata_start+0xfffe9db0>
 404526c:	04e7c83a 	sub	r19,zero,r19
 4045270:	9804c03a 	cmpne	r2,r19,zero
 4045274:	05adc83a 	sub	r22,zero,r22
 4045278:	b0adc83a 	sub	r22,r22,r2
 404527c:	d8802917 	ldw	r2,164(sp)
 4045280:	07000b44 	movi	fp,45
 4045284:	df002785 	stb	fp,158(sp)
 4045288:	10017b16 	blt	r2,zero,4045878 <___vfprintf_internal_r+0x1c64>
 404528c:	00bfdfc4 	movi	r2,-129
 4045290:	90a4703a 	and	r18,r18,r2
 4045294:	003bb106 	br	404415c <__flash_rwdata_start+0xfffe9a2c>
 4045298:	d9003617 	ldw	r4,216(sp)
 404529c:	d9403817 	ldw	r5,224(sp)
 40452a0:	da003d15 	stw	r8,244(sp)
 40452a4:	404a4e00 	call	404a4e0 <__fpclassifyd>
 40452a8:	da003d17 	ldw	r8,244(sp)
 40452ac:	1000f026 	beq	r2,zero,4045670 <___vfprintf_internal_r+0x1a5c>
 40452b0:	d9002917 	ldw	r4,164(sp)
 40452b4:	05bff7c4 	movi	r22,-33
 40452b8:	00bfffc4 	movi	r2,-1
 40452bc:	8dac703a 	and	r22,r17,r22
 40452c0:	20820026 	beq	r4,r2,4045ac4 <___vfprintf_internal_r+0x1eb0>
 40452c4:	008011c4 	movi	r2,71
 40452c8:	b081f726 	beq	r22,r2,4045aa8 <___vfprintf_internal_r+0x1e94>
 40452cc:	d9003817 	ldw	r4,224(sp)
 40452d0:	90c04014 	ori	r3,r18,256
 40452d4:	d8c02b15 	stw	r3,172(sp)
 40452d8:	20021516 	blt	r4,zero,4045b30 <___vfprintf_internal_r+0x1f1c>
 40452dc:	dcc03817 	ldw	r19,224(sp)
 40452e0:	d8002a05 	stb	zero,168(sp)
 40452e4:	00801984 	movi	r2,102
 40452e8:	8881f926 	beq	r17,r2,4045ad0 <___vfprintf_internal_r+0x1ebc>
 40452ec:	00801184 	movi	r2,70
 40452f0:	88821c26 	beq	r17,r2,4045b64 <___vfprintf_internal_r+0x1f50>
 40452f4:	00801144 	movi	r2,69
 40452f8:	b081ef26 	beq	r22,r2,4045ab8 <___vfprintf_internal_r+0x1ea4>
 40452fc:	d8c02917 	ldw	r3,164(sp)
 4045300:	d8802104 	addi	r2,sp,132
 4045304:	d8800315 	stw	r2,12(sp)
 4045308:	d9403617 	ldw	r5,216(sp)
 404530c:	d8802504 	addi	r2,sp,148
 4045310:	d9002c17 	ldw	r4,176(sp)
 4045314:	d8800215 	stw	r2,8(sp)
 4045318:	d8802604 	addi	r2,sp,152
 404531c:	d8c00015 	stw	r3,0(sp)
 4045320:	d8800115 	stw	r2,4(sp)
 4045324:	01c00084 	movi	r7,2
 4045328:	980d883a 	mov	r6,r19
 404532c:	d8c03c15 	stw	r3,240(sp)
 4045330:	da003d15 	stw	r8,244(sp)
 4045334:	40462380 	call	4046238 <_dtoa_r>
 4045338:	1021883a 	mov	r16,r2
 404533c:	008019c4 	movi	r2,103
 4045340:	d8c03c17 	ldw	r3,240(sp)
 4045344:	da003d17 	ldw	r8,244(sp)
 4045348:	88817126 	beq	r17,r2,4045910 <___vfprintf_internal_r+0x1cfc>
 404534c:	008011c4 	movi	r2,71
 4045350:	88829226 	beq	r17,r2,4045d9c <___vfprintf_internal_r+0x2188>
 4045354:	80f9883a 	add	fp,r16,r3
 4045358:	d9003617 	ldw	r4,216(sp)
 404535c:	000d883a 	mov	r6,zero
 4045360:	000f883a 	mov	r7,zero
 4045364:	980b883a 	mov	r5,r19
 4045368:	da003d15 	stw	r8,244(sp)
 404536c:	404e32c0 	call	404e32c <__eqdf2>
 4045370:	da003d17 	ldw	r8,244(sp)
 4045374:	10018d26 	beq	r2,zero,40459ac <___vfprintf_internal_r+0x1d98>
 4045378:	d8802117 	ldw	r2,132(sp)
 404537c:	1700062e 	bgeu	r2,fp,4045398 <___vfprintf_internal_r+0x1784>
 4045380:	01000c04 	movi	r4,48
 4045384:	10c00044 	addi	r3,r2,1
 4045388:	d8c02115 	stw	r3,132(sp)
 404538c:	11000005 	stb	r4,0(r2)
 4045390:	d8802117 	ldw	r2,132(sp)
 4045394:	173ffb36 	bltu	r2,fp,4045384 <__flash_rwdata_start+0xfffeac54>
 4045398:	1405c83a 	sub	r2,r2,r16
 404539c:	d8803315 	stw	r2,204(sp)
 40453a0:	008011c4 	movi	r2,71
 40453a4:	b0817626 	beq	r22,r2,4045980 <___vfprintf_internal_r+0x1d6c>
 40453a8:	00801944 	movi	r2,101
 40453ac:	1442810e 	bge	r2,r17,4045db4 <___vfprintf_internal_r+0x21a0>
 40453b0:	d8c02617 	ldw	r3,152(sp)
 40453b4:	00801984 	movi	r2,102
 40453b8:	d8c03215 	stw	r3,200(sp)
 40453bc:	8881fe26 	beq	r17,r2,4045bb8 <___vfprintf_internal_r+0x1fa4>
 40453c0:	d8c03217 	ldw	r3,200(sp)
 40453c4:	d9003317 	ldw	r4,204(sp)
 40453c8:	1901dd16 	blt	r3,r4,4045b40 <___vfprintf_internal_r+0x1f2c>
 40453cc:	9480004c 	andi	r18,r18,1
 40453d0:	90022b1e 	bne	r18,zero,4045c80 <___vfprintf_internal_r+0x206c>
 40453d4:	1805883a 	mov	r2,r3
 40453d8:	18028016 	blt	r3,zero,4045ddc <___vfprintf_internal_r+0x21c8>
 40453dc:	d8c03217 	ldw	r3,200(sp)
 40453e0:	044019c4 	movi	r17,103
 40453e4:	d8c02e15 	stw	r3,184(sp)
 40453e8:	df002a07 	ldb	fp,168(sp)
 40453ec:	e001531e 	bne	fp,zero,404593c <___vfprintf_internal_r+0x1d28>
 40453f0:	df002783 	ldbu	fp,158(sp)
 40453f4:	d8802a15 	stw	r2,168(sp)
 40453f8:	dc802b17 	ldw	r18,172(sp)
 40453fc:	d8002915 	stw	zero,164(sp)
 4045400:	003bd106 	br	4044348 <__flash_rwdata_start+0xfffe9c18>
 4045404:	d8802d17 	ldw	r2,180(sp)
 4045408:	d8c02d17 	ldw	r3,180(sp)
 404540c:	d9002d17 	ldw	r4,180(sp)
 4045410:	10800017 	ldw	r2,0(r2)
 4045414:	18c00117 	ldw	r3,4(r3)
 4045418:	21000204 	addi	r4,r4,8
 404541c:	d8803615 	stw	r2,216(sp)
 4045420:	d8c03815 	stw	r3,224(sp)
 4045424:	d9002d15 	stw	r4,180(sp)
 4045428:	003b7506 	br	4044200 <__flash_rwdata_start+0xfffe9ad0>
 404542c:	ac400007 	ldb	r17,0(r21)
 4045430:	003a5906 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 4045434:	9080100c 	andi	r2,r18,64
 4045438:	1000a826 	beq	r2,zero,40456dc <___vfprintf_internal_r+0x1ac8>
 404543c:	d9002d17 	ldw	r4,180(sp)
 4045440:	002d883a 	mov	r22,zero
 4045444:	24c0000b 	ldhu	r19,0(r4)
 4045448:	21000104 	addi	r4,r4,4
 404544c:	d9002d15 	stw	r4,180(sp)
 4045450:	003ccb06 	br	4044780 <__flash_rwdata_start+0xfffea050>
 4045454:	d8c02d17 	ldw	r3,180(sp)
 4045458:	d9002917 	ldw	r4,164(sp)
 404545c:	002d883a 	mov	r22,zero
 4045460:	18800104 	addi	r2,r3,4
 4045464:	1cc00017 	ldw	r19,0(r3)
 4045468:	203ebb0e 	bge	r4,zero,4044f58 <__flash_rwdata_start+0xfffea828>
 404546c:	003ef106 	br	4045034 <__flash_rwdata_start+0xfffea904>
 4045470:	9080040c 	andi	r2,r18,16
 4045474:	1000921e 	bne	r2,zero,40456c0 <___vfprintf_internal_r+0x1aac>
 4045478:	9480100c 	andi	r18,r18,64
 404547c:	90013926 	beq	r18,zero,4045964 <___vfprintf_internal_r+0x1d50>
 4045480:	d9002d17 	ldw	r4,180(sp)
 4045484:	d9402f17 	ldw	r5,188(sp)
 4045488:	20800017 	ldw	r2,0(r4)
 404548c:	21000104 	addi	r4,r4,4
 4045490:	d9002d15 	stw	r4,180(sp)
 4045494:	1140000d 	sth	r5,0(r2)
 4045498:	003a1606 	br	4043cf4 <__flash_rwdata_start+0xfffe95c4>
 404549c:	9080100c 	andi	r2,r18,64
 40454a0:	10008026 	beq	r2,zero,40456a4 <___vfprintf_internal_r+0x1a90>
 40454a4:	d8c02d17 	ldw	r3,180(sp)
 40454a8:	1cc0000f 	ldh	r19,0(r3)
 40454ac:	18c00104 	addi	r3,r3,4
 40454b0:	d8c02d15 	stw	r3,180(sp)
 40454b4:	982dd7fa 	srai	r22,r19,31
 40454b8:	b005883a 	mov	r2,r22
 40454bc:	003b1f06 	br	404413c <__flash_rwdata_start+0xfffe9a0c>
 40454c0:	9080100c 	andi	r2,r18,64
 40454c4:	d8002785 	stb	zero,158(sp)
 40454c8:	10008a1e 	bne	r2,zero,40456f4 <___vfprintf_internal_r+0x1ae0>
 40454cc:	d9402d17 	ldw	r5,180(sp)
 40454d0:	d8c02917 	ldw	r3,164(sp)
 40454d4:	002d883a 	mov	r22,zero
 40454d8:	28800104 	addi	r2,r5,4
 40454dc:	2cc00017 	ldw	r19,0(r5)
 40454e0:	183e4b0e 	bge	r3,zero,4044e10 <__flash_rwdata_start+0xfffea6e0>
 40454e4:	9d86b03a 	or	r3,r19,r22
 40454e8:	d8802d15 	stw	r2,180(sp)
 40454ec:	183e4c1e 	bne	r3,zero,4044e20 <__flash_rwdata_start+0xfffea6f0>
 40454f0:	0039883a 	mov	fp,zero
 40454f4:	0005883a 	mov	r2,zero
 40454f8:	003d4006 	br	40449fc <__flash_rwdata_start+0xfffea2cc>
 40454fc:	01408034 	movhi	r5,512
 4045500:	2940a384 	addi	r5,r5,654
 4045504:	d9402b15 	stw	r5,172(sp)
 4045508:	d9402b17 	ldw	r5,172(sp)
 404550c:	1c47883a 	add	r3,r3,r17
 4045510:	10800044 	addi	r2,r2,1
 4045514:	41400015 	stw	r5,0(r8)
 4045518:	44400115 	stw	r17,4(r8)
 404551c:	d8c02015 	stw	r3,128(sp)
 4045520:	d8801f15 	stw	r2,124(sp)
 4045524:	010001c4 	movi	r4,7
 4045528:	20bec816 	blt	r4,r2,404504c <__flash_rwdata_start+0xfffea91c>
 404552c:	42000204 	addi	r8,r8,8
 4045530:	003ecd06 	br	4045068 <__flash_rwdata_start+0xfffea938>
 4045534:	d9002917 	ldw	r4,164(sp)
 4045538:	d8002785 	stb	zero,158(sp)
 404553c:	203d2d16 	blt	r4,zero,40449f4 <__flash_rwdata_start+0xfffea2c4>
 4045540:	00bfdfc4 	movi	r2,-129
 4045544:	90a4703a 	and	r18,r18,r2
 4045548:	003a9106 	br	4043f90 <__flash_rwdata_start+0xfffe9860>
 404554c:	01008034 	movhi	r4,512
 4045550:	2100a384 	addi	r4,r4,654
 4045554:	d9002b15 	stw	r4,172(sp)
 4045558:	003c0c06 	br	404458c <__flash_rwdata_start+0xfffe9e5c>
 404555c:	d9002c17 	ldw	r4,176(sp)
 4045560:	d9801e04 	addi	r6,sp,120
 4045564:	b80b883a 	mov	r5,r23
 4045568:	404a8680 	call	404a868 <__sprint_r>
 404556c:	103aab1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045570:	d8c02017 	ldw	r3,128(sp)
 4045574:	da000404 	addi	r8,sp,16
 4045578:	003d4106 	br	4044a80 <__flash_rwdata_start+0xfffea350>
 404557c:	d8801f17 	ldw	r2,124(sp)
 4045580:	01408034 	movhi	r5,512
 4045584:	01000044 	movi	r4,1
 4045588:	18c00044 	addi	r3,r3,1
 404558c:	10800044 	addi	r2,r2,1
 4045590:	2940a304 	addi	r5,r5,652
 4045594:	41000115 	stw	r4,4(r8)
 4045598:	41400015 	stw	r5,0(r8)
 404559c:	d8c02015 	stw	r3,128(sp)
 40455a0:	d8801f15 	stw	r2,124(sp)
 40455a4:	010001c4 	movi	r4,7
 40455a8:	20805c16 	blt	r4,r2,404571c <___vfprintf_internal_r+0x1b08>
 40455ac:	42000204 	addi	r8,r8,8
 40455b0:	8800041e 	bne	r17,zero,40455c4 <___vfprintf_internal_r+0x19b0>
 40455b4:	d8803317 	ldw	r2,204(sp)
 40455b8:	1000021e 	bne	r2,zero,40455c4 <___vfprintf_internal_r+0x19b0>
 40455bc:	9080004c 	andi	r2,r18,1
 40455c0:	103c0926 	beq	r2,zero,40445e8 <__flash_rwdata_start+0xfffe9eb8>
 40455c4:	d9003717 	ldw	r4,220(sp)
 40455c8:	d8801f17 	ldw	r2,124(sp)
 40455cc:	d9403417 	ldw	r5,208(sp)
 40455d0:	20c7883a 	add	r3,r4,r3
 40455d4:	10800044 	addi	r2,r2,1
 40455d8:	41000115 	stw	r4,4(r8)
 40455dc:	41400015 	stw	r5,0(r8)
 40455e0:	d8c02015 	stw	r3,128(sp)
 40455e4:	d8801f15 	stw	r2,124(sp)
 40455e8:	010001c4 	movi	r4,7
 40455ec:	20812116 	blt	r4,r2,4045a74 <___vfprintf_internal_r+0x1e60>
 40455f0:	42000204 	addi	r8,r8,8
 40455f4:	0463c83a 	sub	r17,zero,r17
 40455f8:	0440730e 	bge	zero,r17,40457c8 <___vfprintf_internal_r+0x1bb4>
 40455fc:	05800404 	movi	r22,16
 4045600:	b440860e 	bge	r22,r17,404581c <___vfprintf_internal_r+0x1c08>
 4045604:	01408034 	movhi	r5,512
 4045608:	2940a384 	addi	r5,r5,654
 404560c:	d9402b15 	stw	r5,172(sp)
 4045610:	070001c4 	movi	fp,7
 4045614:	dcc02c17 	ldw	r19,176(sp)
 4045618:	00000306 	br	4045628 <___vfprintf_internal_r+0x1a14>
 404561c:	42000204 	addi	r8,r8,8
 4045620:	8c7ffc04 	addi	r17,r17,-16
 4045624:	b440800e 	bge	r22,r17,4045828 <___vfprintf_internal_r+0x1c14>
 4045628:	18c00404 	addi	r3,r3,16
 404562c:	10800044 	addi	r2,r2,1
 4045630:	45000015 	stw	r20,0(r8)
 4045634:	45800115 	stw	r22,4(r8)
 4045638:	d8c02015 	stw	r3,128(sp)
 404563c:	d8801f15 	stw	r2,124(sp)
 4045640:	e0bff60e 	bge	fp,r2,404561c <__flash_rwdata_start+0xfffeaeec>
 4045644:	d9801e04 	addi	r6,sp,120
 4045648:	b80b883a 	mov	r5,r23
 404564c:	9809883a 	mov	r4,r19
 4045650:	404a8680 	call	404a868 <__sprint_r>
 4045654:	103a711e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045658:	d8c02017 	ldw	r3,128(sp)
 404565c:	d8801f17 	ldw	r2,124(sp)
 4045660:	da000404 	addi	r8,sp,16
 4045664:	003fee06 	br	4045620 <__flash_rwdata_start+0xfffeaef0>
 4045668:	00bfffc4 	movi	r2,-1
 404566c:	003a6f06 	br	404402c <__flash_rwdata_start+0xfffe98fc>
 4045670:	008011c4 	movi	r2,71
 4045674:	1440b816 	blt	r2,r17,4045958 <___vfprintf_internal_r+0x1d44>
 4045678:	04008034 	movhi	r16,512
 404567c:	84009504 	addi	r16,r16,596
 4045680:	00c000c4 	movi	r3,3
 4045684:	00bfdfc4 	movi	r2,-129
 4045688:	d8c02a15 	stw	r3,168(sp)
 404568c:	90a4703a 	and	r18,r18,r2
 4045690:	df002783 	ldbu	fp,158(sp)
 4045694:	d8c02e15 	stw	r3,184(sp)
 4045698:	d8002915 	stw	zero,164(sp)
 404569c:	d8003215 	stw	zero,200(sp)
 40456a0:	003b2906 	br	4044348 <__flash_rwdata_start+0xfffe9c18>
 40456a4:	d9002d17 	ldw	r4,180(sp)
 40456a8:	24c00017 	ldw	r19,0(r4)
 40456ac:	21000104 	addi	r4,r4,4
 40456b0:	d9002d15 	stw	r4,180(sp)
 40456b4:	982dd7fa 	srai	r22,r19,31
 40456b8:	b005883a 	mov	r2,r22
 40456bc:	003a9f06 	br	404413c <__flash_rwdata_start+0xfffe9a0c>
 40456c0:	d9402d17 	ldw	r5,180(sp)
 40456c4:	d8c02f17 	ldw	r3,188(sp)
 40456c8:	28800017 	ldw	r2,0(r5)
 40456cc:	29400104 	addi	r5,r5,4
 40456d0:	d9402d15 	stw	r5,180(sp)
 40456d4:	10c00015 	stw	r3,0(r2)
 40456d8:	00398606 	br	4043cf4 <__flash_rwdata_start+0xfffe95c4>
 40456dc:	d9402d17 	ldw	r5,180(sp)
 40456e0:	002d883a 	mov	r22,zero
 40456e4:	2cc00017 	ldw	r19,0(r5)
 40456e8:	29400104 	addi	r5,r5,4
 40456ec:	d9402d15 	stw	r5,180(sp)
 40456f0:	003c2306 	br	4044780 <__flash_rwdata_start+0xfffea050>
 40456f4:	d8c02d17 	ldw	r3,180(sp)
 40456f8:	d9002917 	ldw	r4,164(sp)
 40456fc:	002d883a 	mov	r22,zero
 4045700:	18800104 	addi	r2,r3,4
 4045704:	1cc0000b 	ldhu	r19,0(r3)
 4045708:	203dc10e 	bge	r4,zero,4044e10 <__flash_rwdata_start+0xfffea6e0>
 404570c:	003f7506 	br	40454e4 <__flash_rwdata_start+0xfffeadb4>
 4045710:	04008034 	movhi	r16,512
 4045714:	84009304 	addi	r16,r16,588
 4045718:	003acc06 	br	404424c <__flash_rwdata_start+0xfffe9b1c>
 404571c:	d9002c17 	ldw	r4,176(sp)
 4045720:	d9801e04 	addi	r6,sp,120
 4045724:	b80b883a 	mov	r5,r23
 4045728:	404a8680 	call	404a868 <__sprint_r>
 404572c:	103a3b1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045730:	dc402617 	ldw	r17,152(sp)
 4045734:	d8c02017 	ldw	r3,128(sp)
 4045738:	da000404 	addi	r8,sp,16
 404573c:	003f9c06 	br	40455b0 <__flash_rwdata_start+0xfffeae80>
 4045740:	ac400043 	ldbu	r17,1(r21)
 4045744:	94800814 	ori	r18,r18,32
 4045748:	ad400044 	addi	r21,r21,1
 404574c:	8c403fcc 	andi	r17,r17,255
 4045750:	8c40201c 	xori	r17,r17,128
 4045754:	8c7fe004 	addi	r17,r17,-128
 4045758:	00398f06 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 404575c:	d8c02d15 	stw	r3,180(sp)
 4045760:	0039883a 	mov	fp,zero
 4045764:	003e3506 	br	404503c <__flash_rwdata_start+0xfffea90c>
 4045768:	d9002c17 	ldw	r4,176(sp)
 404576c:	d9801e04 	addi	r6,sp,120
 4045770:	b80b883a 	mov	r5,r23
 4045774:	404a8680 	call	404a868 <__sprint_r>
 4045778:	103a281e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 404577c:	d8c02017 	ldw	r3,128(sp)
 4045780:	da000404 	addi	r8,sp,16
 4045784:	003cd006 	br	4044ac8 <__flash_rwdata_start+0xfffea398>
 4045788:	8009883a 	mov	r4,r16
 404578c:	da003d15 	stw	r8,244(sp)
 4045790:	4043b7c0 	call	4043b7c <strlen>
 4045794:	d8802e15 	stw	r2,184(sp)
 4045798:	da003d17 	ldw	r8,244(sp)
 404579c:	103c340e 	bge	r2,zero,4044870 <__flash_rwdata_start+0xfffea140>
 40457a0:	0005883a 	mov	r2,zero
 40457a4:	003c3206 	br	4044870 <__flash_rwdata_start+0xfffea140>
 40457a8:	d9002c17 	ldw	r4,176(sp)
 40457ac:	d9801e04 	addi	r6,sp,120
 40457b0:	b80b883a 	mov	r5,r23
 40457b4:	404a8680 	call	404a868 <__sprint_r>
 40457b8:	103a181e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 40457bc:	d8c02017 	ldw	r3,128(sp)
 40457c0:	d8801f17 	ldw	r2,124(sp)
 40457c4:	da000404 	addi	r8,sp,16
 40457c8:	d9403317 	ldw	r5,204(sp)
 40457cc:	10800044 	addi	r2,r2,1
 40457d0:	44000015 	stw	r16,0(r8)
 40457d4:	28c7883a 	add	r3,r5,r3
 40457d8:	003b7d06 	br	40445d0 <__flash_rwdata_start+0xfffe9ea0>
 40457dc:	01008034 	movhi	r4,512
 40457e0:	2100a784 	addi	r4,r4,670
 40457e4:	d9003515 	stw	r4,212(sp)
 40457e8:	003b1406 	br	404443c <__flash_rwdata_start+0xfffe9d0c>
 40457ec:	013fffc4 	movi	r4,-1
 40457f0:	003a3506 	br	40440c8 <__flash_rwdata_start+0xfffe9998>
 40457f4:	0023883a 	mov	r17,zero
 40457f8:	003d9d06 	br	4044e70 <__flash_rwdata_start+0xfffea740>
 40457fc:	d9002c17 	ldw	r4,176(sp)
 4045800:	d9801e04 	addi	r6,sp,120
 4045804:	b80b883a 	mov	r5,r23
 4045808:	404a8680 	call	404a868 <__sprint_r>
 404580c:	103a031e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045810:	d8c02017 	ldw	r3,128(sp)
 4045814:	da000404 	addi	r8,sp,16
 4045818:	003d9406 	br	4044e6c <__flash_rwdata_start+0xfffea73c>
 404581c:	01008034 	movhi	r4,512
 4045820:	2100a384 	addi	r4,r4,654
 4045824:	d9002b15 	stw	r4,172(sp)
 4045828:	d9002b17 	ldw	r4,172(sp)
 404582c:	1c47883a 	add	r3,r3,r17
 4045830:	10800044 	addi	r2,r2,1
 4045834:	41000015 	stw	r4,0(r8)
 4045838:	44400115 	stw	r17,4(r8)
 404583c:	d8c02015 	stw	r3,128(sp)
 4045840:	d8801f15 	stw	r2,124(sp)
 4045844:	010001c4 	movi	r4,7
 4045848:	20bfd716 	blt	r4,r2,40457a8 <__flash_rwdata_start+0xfffeb078>
 404584c:	42000204 	addi	r8,r8,8
 4045850:	003fdd06 	br	40457c8 <__flash_rwdata_start+0xfffeb098>
 4045854:	d9002c17 	ldw	r4,176(sp)
 4045858:	d9801e04 	addi	r6,sp,120
 404585c:	b80b883a 	mov	r5,r23
 4045860:	404a8680 	call	404a868 <__sprint_r>
 4045864:	1039ed1e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045868:	d8802617 	ldw	r2,152(sp)
 404586c:	d8c02017 	ldw	r3,128(sp)
 4045870:	da000404 	addi	r8,sp,16
 4045874:	003e1006 	br	40450b8 <__flash_rwdata_start+0xfffea988>
 4045878:	00800044 	movi	r2,1
 404587c:	10803fcc 	andi	r2,r2,255
 4045880:	00c00044 	movi	r3,1
 4045884:	10fa3526 	beq	r2,r3,404415c <__flash_rwdata_start+0xfffe9a2c>
 4045888:	00c00084 	movi	r3,2
 404588c:	10fbcb26 	beq	r2,r3,40447bc <__flash_rwdata_start+0xfffea08c>
 4045890:	003a8f06 	br	40442d0 <__flash_rwdata_start+0xfffe9ba0>
 4045894:	01008034 	movhi	r4,512
 4045898:	2100a784 	addi	r4,r4,670
 404589c:	d9003515 	stw	r4,212(sp)
 40458a0:	003b7606 	br	404467c <__flash_rwdata_start+0xfffe9f4c>
 40458a4:	d8802917 	ldw	r2,164(sp)
 40458a8:	00c00184 	movi	r3,6
 40458ac:	1880012e 	bgeu	r3,r2,40458b4 <___vfprintf_internal_r+0x1ca0>
 40458b0:	1805883a 	mov	r2,r3
 40458b4:	d8802e15 	stw	r2,184(sp)
 40458b8:	1000ef16 	blt	r2,zero,4045c78 <___vfprintf_internal_r+0x2064>
 40458bc:	04008034 	movhi	r16,512
 40458c0:	d8802a15 	stw	r2,168(sp)
 40458c4:	dcc02d15 	stw	r19,180(sp)
 40458c8:	d8002915 	stw	zero,164(sp)
 40458cc:	d8003215 	stw	zero,200(sp)
 40458d0:	8400a104 	addi	r16,r16,644
 40458d4:	0039883a 	mov	fp,zero
 40458d8:	003aa206 	br	4044364 <__flash_rwdata_start+0xfffe9c34>
 40458dc:	0021883a 	mov	r16,zero
 40458e0:	003e0706 	br	4045100 <__flash_rwdata_start+0xfffea9d0>
 40458e4:	d9002c17 	ldw	r4,176(sp)
 40458e8:	d9801e04 	addi	r6,sp,120
 40458ec:	b80b883a 	mov	r5,r23
 40458f0:	404a8680 	call	404a868 <__sprint_r>
 40458f4:	1039c91e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 40458f8:	d8802617 	ldw	r2,152(sp)
 40458fc:	d9403317 	ldw	r5,204(sp)
 4045900:	d8c02017 	ldw	r3,128(sp)
 4045904:	da000404 	addi	r8,sp,16
 4045908:	2885c83a 	sub	r2,r5,r2
 404590c:	003dfb06 	br	40450fc <__flash_rwdata_start+0xfffea9cc>
 4045910:	9080004c 	andi	r2,r18,1
 4045914:	103e8f1e 	bne	r2,zero,4045354 <__flash_rwdata_start+0xfffeac24>
 4045918:	d8802117 	ldw	r2,132(sp)
 404591c:	003e9e06 	br	4045398 <__flash_rwdata_start+0xfffeac68>
 4045920:	1025883a 	mov	r18,r2
 4045924:	0039883a 	mov	fp,zero
 4045928:	00800084 	movi	r2,2
 404592c:	003fd306 	br	404587c <__flash_rwdata_start+0xfffeb14c>
 4045930:	07000b44 	movi	fp,45
 4045934:	df002785 	stb	fp,158(sp)
 4045938:	003a4006 	br	404423c <__flash_rwdata_start+0xfffe9b0c>
 404593c:	00c00b44 	movi	r3,45
 4045940:	d8c02785 	stb	r3,158(sp)
 4045944:	d8802a15 	stw	r2,168(sp)
 4045948:	dc802b17 	ldw	r18,172(sp)
 404594c:	d8002915 	stw	zero,164(sp)
 4045950:	07000b44 	movi	fp,45
 4045954:	003a8006 	br	4044358 <__flash_rwdata_start+0xfffe9c28>
 4045958:	04008034 	movhi	r16,512
 404595c:	84009604 	addi	r16,r16,600
 4045960:	003f4706 	br	4045680 <__flash_rwdata_start+0xfffeaf50>
 4045964:	d8c02d17 	ldw	r3,180(sp)
 4045968:	d9002f17 	ldw	r4,188(sp)
 404596c:	18800017 	ldw	r2,0(r3)
 4045970:	18c00104 	addi	r3,r3,4
 4045974:	d8c02d15 	stw	r3,180(sp)
 4045978:	11000015 	stw	r4,0(r2)
 404597c:	0038dd06 	br	4043cf4 <__flash_rwdata_start+0xfffe95c4>
 4045980:	dd802617 	ldw	r22,152(sp)
 4045984:	00bfff44 	movi	r2,-3
 4045988:	b0801c16 	blt	r22,r2,40459fc <___vfprintf_internal_r+0x1de8>
 404598c:	d9402917 	ldw	r5,164(sp)
 4045990:	2d801a16 	blt	r5,r22,40459fc <___vfprintf_internal_r+0x1de8>
 4045994:	dd803215 	stw	r22,200(sp)
 4045998:	003e8906 	br	40453c0 <__flash_rwdata_start+0xfffeac90>
 404599c:	01008034 	movhi	r4,512
 40459a0:	2100a384 	addi	r4,r4,654
 40459a4:	d9002b15 	stw	r4,172(sp)
 40459a8:	003c9106 	br	4044bf0 <__flash_rwdata_start+0xfffea4c0>
 40459ac:	e005883a 	mov	r2,fp
 40459b0:	003e7906 	br	4045398 <__flash_rwdata_start+0xfffeac68>
 40459b4:	d9402917 	ldw	r5,164(sp)
 40459b8:	df002783 	ldbu	fp,158(sp)
 40459bc:	dcc02d15 	stw	r19,180(sp)
 40459c0:	d9402a15 	stw	r5,168(sp)
 40459c4:	d9402e15 	stw	r5,184(sp)
 40459c8:	d8002915 	stw	zero,164(sp)
 40459cc:	d8003215 	stw	zero,200(sp)
 40459d0:	003a5d06 	br	4044348 <__flash_rwdata_start+0xfffe9c18>
 40459d4:	9080004c 	andi	r2,r18,1
 40459d8:	0039883a 	mov	fp,zero
 40459dc:	10000426 	beq	r2,zero,40459f0 <___vfprintf_internal_r+0x1ddc>
 40459e0:	00800c04 	movi	r2,48
 40459e4:	dc001dc4 	addi	r16,sp,119
 40459e8:	d8801dc5 	stb	r2,119(sp)
 40459ec:	003b8006 	br	40447f0 <__flash_rwdata_start+0xfffea0c0>
 40459f0:	d8002e15 	stw	zero,184(sp)
 40459f4:	dc001e04 	addi	r16,sp,120
 40459f8:	003a4d06 	br	4044330 <__flash_rwdata_start+0xfffe9c00>
 40459fc:	8c7fff84 	addi	r17,r17,-2
 4045a00:	b5bfffc4 	addi	r22,r22,-1
 4045a04:	dd802615 	stw	r22,152(sp)
 4045a08:	dc4022c5 	stb	r17,139(sp)
 4045a0c:	b000bf16 	blt	r22,zero,4045d0c <___vfprintf_internal_r+0x20f8>
 4045a10:	00800ac4 	movi	r2,43
 4045a14:	d8802305 	stb	r2,140(sp)
 4045a18:	00800244 	movi	r2,9
 4045a1c:	15807016 	blt	r2,r22,4045be0 <___vfprintf_internal_r+0x1fcc>
 4045a20:	00800c04 	movi	r2,48
 4045a24:	b5800c04 	addi	r22,r22,48
 4045a28:	d8802345 	stb	r2,141(sp)
 4045a2c:	dd802385 	stb	r22,142(sp)
 4045a30:	d88023c4 	addi	r2,sp,143
 4045a34:	df0022c4 	addi	fp,sp,139
 4045a38:	d8c03317 	ldw	r3,204(sp)
 4045a3c:	1739c83a 	sub	fp,r2,fp
 4045a40:	d9003317 	ldw	r4,204(sp)
 4045a44:	e0c7883a 	add	r3,fp,r3
 4045a48:	df003a15 	stw	fp,232(sp)
 4045a4c:	d8c02e15 	stw	r3,184(sp)
 4045a50:	00800044 	movi	r2,1
 4045a54:	1100b30e 	bge	r2,r4,4045d24 <___vfprintf_internal_r+0x2110>
 4045a58:	d8c02e17 	ldw	r3,184(sp)
 4045a5c:	18c00044 	addi	r3,r3,1
 4045a60:	d8c02e15 	stw	r3,184(sp)
 4045a64:	1805883a 	mov	r2,r3
 4045a68:	1800ac16 	blt	r3,zero,4045d1c <___vfprintf_internal_r+0x2108>
 4045a6c:	d8003215 	stw	zero,200(sp)
 4045a70:	003e5d06 	br	40453e8 <__flash_rwdata_start+0xfffeacb8>
 4045a74:	d9002c17 	ldw	r4,176(sp)
 4045a78:	d9801e04 	addi	r6,sp,120
 4045a7c:	b80b883a 	mov	r5,r23
 4045a80:	404a8680 	call	404a868 <__sprint_r>
 4045a84:	1039651e 	bne	r2,zero,404401c <__flash_rwdata_start+0xfffe98ec>
 4045a88:	dc402617 	ldw	r17,152(sp)
 4045a8c:	d8c02017 	ldw	r3,128(sp)
 4045a90:	d8801f17 	ldw	r2,124(sp)
 4045a94:	da000404 	addi	r8,sp,16
 4045a98:	003ed606 	br	40455f4 <__flash_rwdata_start+0xfffeaec4>
 4045a9c:	582b883a 	mov	r21,r11
 4045aa0:	d8002915 	stw	zero,164(sp)
 4045aa4:	0038bd06 	br	4043d9c <__flash_rwdata_start+0xfffe966c>
 4045aa8:	d8802917 	ldw	r2,164(sp)
 4045aac:	103e071e 	bne	r2,zero,40452cc <__flash_rwdata_start+0xfffeab9c>
 4045ab0:	dc002915 	stw	r16,164(sp)
 4045ab4:	003e0506 	br	40452cc <__flash_rwdata_start+0xfffeab9c>
 4045ab8:	d9002917 	ldw	r4,164(sp)
 4045abc:	20c00044 	addi	r3,r4,1
 4045ac0:	003e0f06 	br	4045300 <__flash_rwdata_start+0xfffeabd0>
 4045ac4:	01400184 	movi	r5,6
 4045ac8:	d9402915 	stw	r5,164(sp)
 4045acc:	003dff06 	br	40452cc <__flash_rwdata_start+0xfffeab9c>
 4045ad0:	d8802104 	addi	r2,sp,132
 4045ad4:	d8800315 	stw	r2,12(sp)
 4045ad8:	d8802504 	addi	r2,sp,148
 4045adc:	d8800215 	stw	r2,8(sp)
 4045ae0:	d8802604 	addi	r2,sp,152
 4045ae4:	d8800115 	stw	r2,4(sp)
 4045ae8:	d8802917 	ldw	r2,164(sp)
 4045aec:	d9403617 	ldw	r5,216(sp)
 4045af0:	d9002c17 	ldw	r4,176(sp)
 4045af4:	d8800015 	stw	r2,0(sp)
 4045af8:	01c000c4 	movi	r7,3
 4045afc:	980d883a 	mov	r6,r19
 4045b00:	da003d15 	stw	r8,244(sp)
 4045b04:	40462380 	call	4046238 <_dtoa_r>
 4045b08:	d8c02917 	ldw	r3,164(sp)
 4045b0c:	da003d17 	ldw	r8,244(sp)
 4045b10:	1021883a 	mov	r16,r2
 4045b14:	10f9883a 	add	fp,r2,r3
 4045b18:	81000007 	ldb	r4,0(r16)
 4045b1c:	00800c04 	movi	r2,48
 4045b20:	20805e26 	beq	r4,r2,4045c9c <___vfprintf_internal_r+0x2088>
 4045b24:	d8c02617 	ldw	r3,152(sp)
 4045b28:	e0f9883a 	add	fp,fp,r3
 4045b2c:	003e0a06 	br	4045358 <__flash_rwdata_start+0xfffeac28>
 4045b30:	00c00b44 	movi	r3,45
 4045b34:	24e0003c 	xorhi	r19,r4,32768
 4045b38:	d8c02a05 	stb	r3,168(sp)
 4045b3c:	003de906 	br	40452e4 <__flash_rwdata_start+0xfffeabb4>
 4045b40:	d8c03217 	ldw	r3,200(sp)
 4045b44:	00c07a0e 	bge	zero,r3,4045d30 <___vfprintf_internal_r+0x211c>
 4045b48:	00800044 	movi	r2,1
 4045b4c:	d9003317 	ldw	r4,204(sp)
 4045b50:	1105883a 	add	r2,r2,r4
 4045b54:	d8802e15 	stw	r2,184(sp)
 4045b58:	10004e16 	blt	r2,zero,4045c94 <___vfprintf_internal_r+0x2080>
 4045b5c:	044019c4 	movi	r17,103
 4045b60:	003e2106 	br	40453e8 <__flash_rwdata_start+0xfffeacb8>
 4045b64:	d9002917 	ldw	r4,164(sp)
 4045b68:	d8802104 	addi	r2,sp,132
 4045b6c:	d8800315 	stw	r2,12(sp)
 4045b70:	d9000015 	stw	r4,0(sp)
 4045b74:	d8802504 	addi	r2,sp,148
 4045b78:	d9403617 	ldw	r5,216(sp)
 4045b7c:	d9002c17 	ldw	r4,176(sp)
 4045b80:	d8800215 	stw	r2,8(sp)
 4045b84:	d8802604 	addi	r2,sp,152
 4045b88:	d8800115 	stw	r2,4(sp)
 4045b8c:	01c000c4 	movi	r7,3
 4045b90:	980d883a 	mov	r6,r19
 4045b94:	da003d15 	stw	r8,244(sp)
 4045b98:	40462380 	call	4046238 <_dtoa_r>
 4045b9c:	d8c02917 	ldw	r3,164(sp)
 4045ba0:	da003d17 	ldw	r8,244(sp)
 4045ba4:	1021883a 	mov	r16,r2
 4045ba8:	00801184 	movi	r2,70
 4045bac:	80f9883a 	add	fp,r16,r3
 4045bb0:	88bfd926 	beq	r17,r2,4045b18 <__flash_rwdata_start+0xfffeb3e8>
 4045bb4:	003de806 	br	4045358 <__flash_rwdata_start+0xfffeac28>
 4045bb8:	d9002917 	ldw	r4,164(sp)
 4045bbc:	00c04d0e 	bge	zero,r3,4045cf4 <___vfprintf_internal_r+0x20e0>
 4045bc0:	2000441e 	bne	r4,zero,4045cd4 <___vfprintf_internal_r+0x20c0>
 4045bc4:	9480004c 	andi	r18,r18,1
 4045bc8:	9000421e 	bne	r18,zero,4045cd4 <___vfprintf_internal_r+0x20c0>
 4045bcc:	1805883a 	mov	r2,r3
 4045bd0:	18007016 	blt	r3,zero,4045d94 <___vfprintf_internal_r+0x2180>
 4045bd4:	d8c03217 	ldw	r3,200(sp)
 4045bd8:	d8c02e15 	stw	r3,184(sp)
 4045bdc:	003e0206 	br	40453e8 <__flash_rwdata_start+0xfffeacb8>
 4045be0:	df0022c4 	addi	fp,sp,139
 4045be4:	dc002915 	stw	r16,164(sp)
 4045be8:	4027883a 	mov	r19,r8
 4045bec:	e021883a 	mov	r16,fp
 4045bf0:	b009883a 	mov	r4,r22
 4045bf4:	01400284 	movi	r5,10
 4045bf8:	4042f3c0 	call	4042f3c <__modsi3>
 4045bfc:	10800c04 	addi	r2,r2,48
 4045c00:	843fffc4 	addi	r16,r16,-1
 4045c04:	b009883a 	mov	r4,r22
 4045c08:	01400284 	movi	r5,10
 4045c0c:	80800005 	stb	r2,0(r16)
 4045c10:	4042eb80 	call	4042eb8 <__divsi3>
 4045c14:	102d883a 	mov	r22,r2
 4045c18:	00800244 	movi	r2,9
 4045c1c:	15bff416 	blt	r2,r22,4045bf0 <__flash_rwdata_start+0xfffeb4c0>
 4045c20:	9811883a 	mov	r8,r19
 4045c24:	b0800c04 	addi	r2,r22,48
 4045c28:	8027883a 	mov	r19,r16
 4045c2c:	997fffc4 	addi	r5,r19,-1
 4045c30:	98bfffc5 	stb	r2,-1(r19)
 4045c34:	dc002917 	ldw	r16,164(sp)
 4045c38:	2f006a2e 	bgeu	r5,fp,4045de4 <___vfprintf_internal_r+0x21d0>
 4045c3c:	d9c02384 	addi	r7,sp,142
 4045c40:	3ccfc83a 	sub	r7,r7,r19
 4045c44:	d9002344 	addi	r4,sp,141
 4045c48:	e1cf883a 	add	r7,fp,r7
 4045c4c:	00000106 	br	4045c54 <___vfprintf_internal_r+0x2040>
 4045c50:	28800003 	ldbu	r2,0(r5)
 4045c54:	20800005 	stb	r2,0(r4)
 4045c58:	21000044 	addi	r4,r4,1
 4045c5c:	29400044 	addi	r5,r5,1
 4045c60:	393ffb1e 	bne	r7,r4,4045c50 <__flash_rwdata_start+0xfffeb520>
 4045c64:	d8802304 	addi	r2,sp,140
 4045c68:	14c5c83a 	sub	r2,r2,r19
 4045c6c:	d8c02344 	addi	r3,sp,141
 4045c70:	1885883a 	add	r2,r3,r2
 4045c74:	003f7006 	br	4045a38 <__flash_rwdata_start+0xfffeb308>
 4045c78:	0005883a 	mov	r2,zero
 4045c7c:	003f0f06 	br	40458bc <__flash_rwdata_start+0xfffeb18c>
 4045c80:	d8c03217 	ldw	r3,200(sp)
 4045c84:	18c00044 	addi	r3,r3,1
 4045c88:	d8c02e15 	stw	r3,184(sp)
 4045c8c:	1805883a 	mov	r2,r3
 4045c90:	183fb20e 	bge	r3,zero,4045b5c <__flash_rwdata_start+0xfffeb42c>
 4045c94:	0005883a 	mov	r2,zero
 4045c98:	003fb006 	br	4045b5c <__flash_rwdata_start+0xfffeb42c>
 4045c9c:	d9003617 	ldw	r4,216(sp)
 4045ca0:	000d883a 	mov	r6,zero
 4045ca4:	000f883a 	mov	r7,zero
 4045ca8:	980b883a 	mov	r5,r19
 4045cac:	d8c03c15 	stw	r3,240(sp)
 4045cb0:	da003d15 	stw	r8,244(sp)
 4045cb4:	404e32c0 	call	404e32c <__eqdf2>
 4045cb8:	d8c03c17 	ldw	r3,240(sp)
 4045cbc:	da003d17 	ldw	r8,244(sp)
 4045cc0:	103f9826 	beq	r2,zero,4045b24 <__flash_rwdata_start+0xfffeb3f4>
 4045cc4:	00800044 	movi	r2,1
 4045cc8:	10c7c83a 	sub	r3,r2,r3
 4045ccc:	d8c02615 	stw	r3,152(sp)
 4045cd0:	003f9506 	br	4045b28 <__flash_rwdata_start+0xfffeb3f8>
 4045cd4:	d9002917 	ldw	r4,164(sp)
 4045cd8:	d8c03217 	ldw	r3,200(sp)
 4045cdc:	20800044 	addi	r2,r4,1
 4045ce0:	1885883a 	add	r2,r3,r2
 4045ce4:	d8802e15 	stw	r2,184(sp)
 4045ce8:	103dbf0e 	bge	r2,zero,40453e8 <__flash_rwdata_start+0xfffeacb8>
 4045cec:	0005883a 	mov	r2,zero
 4045cf0:	003dbd06 	br	40453e8 <__flash_rwdata_start+0xfffeacb8>
 4045cf4:	2000211e 	bne	r4,zero,4045d7c <___vfprintf_internal_r+0x2168>
 4045cf8:	9480004c 	andi	r18,r18,1
 4045cfc:	90001f1e 	bne	r18,zero,4045d7c <___vfprintf_internal_r+0x2168>
 4045d00:	00800044 	movi	r2,1
 4045d04:	d8802e15 	stw	r2,184(sp)
 4045d08:	003db706 	br	40453e8 <__flash_rwdata_start+0xfffeacb8>
 4045d0c:	00800b44 	movi	r2,45
 4045d10:	05adc83a 	sub	r22,zero,r22
 4045d14:	d8802305 	stb	r2,140(sp)
 4045d18:	003f3f06 	br	4045a18 <__flash_rwdata_start+0xfffeb2e8>
 4045d1c:	0005883a 	mov	r2,zero
 4045d20:	003f5206 	br	4045a6c <__flash_rwdata_start+0xfffeb33c>
 4045d24:	90a4703a 	and	r18,r18,r2
 4045d28:	903f4e26 	beq	r18,zero,4045a64 <__flash_rwdata_start+0xfffeb334>
 4045d2c:	003f4a06 	br	4045a58 <__flash_rwdata_start+0xfffeb328>
 4045d30:	00800084 	movi	r2,2
 4045d34:	10c5c83a 	sub	r2,r2,r3
 4045d38:	003f8406 	br	4045b4c <__flash_rwdata_start+0xfffeb41c>
 4045d3c:	d8802d17 	ldw	r2,180(sp)
 4045d40:	d9002d17 	ldw	r4,180(sp)
 4045d44:	ac400043 	ldbu	r17,1(r21)
 4045d48:	10800017 	ldw	r2,0(r2)
 4045d4c:	582b883a 	mov	r21,r11
 4045d50:	d8802915 	stw	r2,164(sp)
 4045d54:	20800104 	addi	r2,r4,4
 4045d58:	d9002917 	ldw	r4,164(sp)
 4045d5c:	d8802d15 	stw	r2,180(sp)
 4045d60:	203e7a0e 	bge	r4,zero,404574c <__flash_rwdata_start+0xfffeb01c>
 4045d64:	8c403fcc 	andi	r17,r17,255
 4045d68:	00bfffc4 	movi	r2,-1
 4045d6c:	8c40201c 	xori	r17,r17,128
 4045d70:	d8802915 	stw	r2,164(sp)
 4045d74:	8c7fe004 	addi	r17,r17,-128
 4045d78:	00380706 	br	4043d98 <__flash_rwdata_start+0xfffe9668>
 4045d7c:	d8c02917 	ldw	r3,164(sp)
 4045d80:	18c00084 	addi	r3,r3,2
 4045d84:	d8c02e15 	stw	r3,184(sp)
 4045d88:	1805883a 	mov	r2,r3
 4045d8c:	183d960e 	bge	r3,zero,40453e8 <__flash_rwdata_start+0xfffeacb8>
 4045d90:	003fd606 	br	4045cec <__flash_rwdata_start+0xfffeb5bc>
 4045d94:	0005883a 	mov	r2,zero
 4045d98:	003f8e06 	br	4045bd4 <__flash_rwdata_start+0xfffeb4a4>
 4045d9c:	9080004c 	andi	r2,r18,1
 4045da0:	103f811e 	bne	r2,zero,4045ba8 <__flash_rwdata_start+0xfffeb478>
 4045da4:	d8802117 	ldw	r2,132(sp)
 4045da8:	1405c83a 	sub	r2,r2,r16
 4045dac:	d8803315 	stw	r2,204(sp)
 4045db0:	b47ef326 	beq	r22,r17,4045980 <__flash_rwdata_start+0xfffeb250>
 4045db4:	dd802617 	ldw	r22,152(sp)
 4045db8:	003f1106 	br	4045a00 <__flash_rwdata_start+0xfffeb2d0>
 4045dbc:	d9c02785 	stb	r7,158(sp)
 4045dc0:	00390406 	br	40441d4 <__flash_rwdata_start+0xfffe9aa4>
 4045dc4:	d9c02785 	stb	r7,158(sp)
 4045dc8:	0038d306 	br	4044118 <__flash_rwdata_start+0xfffe99e8>
 4045dcc:	d9c02785 	stb	r7,158(sp)
 4045dd0:	003a6106 	br	4044758 <__flash_rwdata_start+0xfffea028>
 4045dd4:	d9c02785 	stb	r7,158(sp)
 4045dd8:	003af806 	br	40449bc <__flash_rwdata_start+0xfffea28c>
 4045ddc:	0005883a 	mov	r2,zero
 4045de0:	003d7e06 	br	40453dc <__flash_rwdata_start+0xfffeacac>
 4045de4:	d8802344 	addi	r2,sp,141
 4045de8:	003f1306 	br	4045a38 <__flash_rwdata_start+0xfffeb308>
 4045dec:	d9c02785 	stb	r7,158(sp)
 4045df0:	00392306 	br	4044280 <__flash_rwdata_start+0xfffe9b50>
 4045df4:	d9c02785 	stb	r7,158(sp)
 4045df8:	003aa906 	br	40448a0 <__flash_rwdata_start+0xfffea170>
 4045dfc:	d9c02785 	stb	r7,158(sp)
 4045e00:	003a3d06 	br	40446f8 <__flash_rwdata_start+0xfffe9fc8>
 4045e04:	d9c02785 	stb	r7,158(sp)
 4045e08:	003aca06 	br	4044934 <__flash_rwdata_start+0xfffea204>

04045e0c <__vfprintf_internal>:
 4045e0c:	00808034 	movhi	r2,512
 4045e10:	10886904 	addi	r2,r2,8612
 4045e14:	300f883a 	mov	r7,r6
 4045e18:	280d883a 	mov	r6,r5
 4045e1c:	200b883a 	mov	r5,r4
 4045e20:	11000017 	ldw	r4,0(r2)
 4045e24:	4043c141 	jmpi	4043c14 <___vfprintf_internal_r>

04045e28 <__sbprintf>:
 4045e28:	2880030b 	ldhu	r2,12(r5)
 4045e2c:	2ac01917 	ldw	r11,100(r5)
 4045e30:	2a80038b 	ldhu	r10,14(r5)
 4045e34:	2a400717 	ldw	r9,28(r5)
 4045e38:	2a000917 	ldw	r8,36(r5)
 4045e3c:	defee204 	addi	sp,sp,-1144
 4045e40:	00c10004 	movi	r3,1024
 4045e44:	dc011a15 	stw	r16,1128(sp)
 4045e48:	10bfff4c 	andi	r2,r2,65533
 4045e4c:	2821883a 	mov	r16,r5
 4045e50:	d8cb883a 	add	r5,sp,r3
 4045e54:	dc811c15 	stw	r18,1136(sp)
 4045e58:	dc411b15 	stw	r17,1132(sp)
 4045e5c:	dfc11d15 	stw	ra,1140(sp)
 4045e60:	2025883a 	mov	r18,r4
 4045e64:	d881030d 	sth	r2,1036(sp)
 4045e68:	dac11915 	stw	r11,1124(sp)
 4045e6c:	da81038d 	sth	r10,1038(sp)
 4045e70:	da410715 	stw	r9,1052(sp)
 4045e74:	da010915 	stw	r8,1060(sp)
 4045e78:	dec10015 	stw	sp,1024(sp)
 4045e7c:	dec10415 	stw	sp,1040(sp)
 4045e80:	d8c10215 	stw	r3,1032(sp)
 4045e84:	d8c10515 	stw	r3,1044(sp)
 4045e88:	d8010615 	stw	zero,1048(sp)
 4045e8c:	4043c140 	call	4043c14 <___vfprintf_internal_r>
 4045e90:	1023883a 	mov	r17,r2
 4045e94:	10000416 	blt	r2,zero,4045ea8 <__sbprintf+0x80>
 4045e98:	d9410004 	addi	r5,sp,1024
 4045e9c:	9009883a 	mov	r4,r18
 4045ea0:	4047adc0 	call	4047adc <_fflush_r>
 4045ea4:	10000d1e 	bne	r2,zero,4045edc <__sbprintf+0xb4>
 4045ea8:	d881030b 	ldhu	r2,1036(sp)
 4045eac:	1080100c 	andi	r2,r2,64
 4045eb0:	10000326 	beq	r2,zero,4045ec0 <__sbprintf+0x98>
 4045eb4:	8080030b 	ldhu	r2,12(r16)
 4045eb8:	10801014 	ori	r2,r2,64
 4045ebc:	8080030d 	sth	r2,12(r16)
 4045ec0:	8805883a 	mov	r2,r17
 4045ec4:	dfc11d17 	ldw	ra,1140(sp)
 4045ec8:	dc811c17 	ldw	r18,1136(sp)
 4045ecc:	dc411b17 	ldw	r17,1132(sp)
 4045ed0:	dc011a17 	ldw	r16,1128(sp)
 4045ed4:	dec11e04 	addi	sp,sp,1144
 4045ed8:	f800283a 	ret
 4045edc:	047fffc4 	movi	r17,-1
 4045ee0:	003ff106 	br	4045ea8 <__flash_rwdata_start+0xfffeb778>

04045ee4 <__swsetup_r>:
 4045ee4:	00808034 	movhi	r2,512
 4045ee8:	defffd04 	addi	sp,sp,-12
 4045eec:	10886904 	addi	r2,r2,8612
 4045ef0:	dc400115 	stw	r17,4(sp)
 4045ef4:	2023883a 	mov	r17,r4
 4045ef8:	11000017 	ldw	r4,0(r2)
 4045efc:	dc000015 	stw	r16,0(sp)
 4045f00:	dfc00215 	stw	ra,8(sp)
 4045f04:	2821883a 	mov	r16,r5
 4045f08:	20000226 	beq	r4,zero,4045f14 <__swsetup_r+0x30>
 4045f0c:	20800e17 	ldw	r2,56(r4)
 4045f10:	10003126 	beq	r2,zero,4045fd8 <__swsetup_r+0xf4>
 4045f14:	8080030b 	ldhu	r2,12(r16)
 4045f18:	10c0020c 	andi	r3,r2,8
 4045f1c:	1009883a 	mov	r4,r2
 4045f20:	18000f26 	beq	r3,zero,4045f60 <__swsetup_r+0x7c>
 4045f24:	80c00417 	ldw	r3,16(r16)
 4045f28:	18001526 	beq	r3,zero,4045f80 <__swsetup_r+0x9c>
 4045f2c:	1100004c 	andi	r4,r2,1
 4045f30:	20001c1e 	bne	r4,zero,4045fa4 <__swsetup_r+0xc0>
 4045f34:	1080008c 	andi	r2,r2,2
 4045f38:	1000291e 	bne	r2,zero,4045fe0 <__swsetup_r+0xfc>
 4045f3c:	80800517 	ldw	r2,20(r16)
 4045f40:	80800215 	stw	r2,8(r16)
 4045f44:	18001c26 	beq	r3,zero,4045fb8 <__swsetup_r+0xd4>
 4045f48:	0005883a 	mov	r2,zero
 4045f4c:	dfc00217 	ldw	ra,8(sp)
 4045f50:	dc400117 	ldw	r17,4(sp)
 4045f54:	dc000017 	ldw	r16,0(sp)
 4045f58:	dec00304 	addi	sp,sp,12
 4045f5c:	f800283a 	ret
 4045f60:	2080040c 	andi	r2,r4,16
 4045f64:	10002e26 	beq	r2,zero,4046020 <__swsetup_r+0x13c>
 4045f68:	2080010c 	andi	r2,r4,4
 4045f6c:	10001e1e 	bne	r2,zero,4045fe8 <__swsetup_r+0x104>
 4045f70:	80c00417 	ldw	r3,16(r16)
 4045f74:	20800214 	ori	r2,r4,8
 4045f78:	8080030d 	sth	r2,12(r16)
 4045f7c:	183feb1e 	bne	r3,zero,4045f2c <__flash_rwdata_start+0xfffeb7fc>
 4045f80:	1100a00c 	andi	r4,r2,640
 4045f84:	01408004 	movi	r5,512
 4045f88:	217fe826 	beq	r4,r5,4045f2c <__flash_rwdata_start+0xfffeb7fc>
 4045f8c:	800b883a 	mov	r5,r16
 4045f90:	8809883a 	mov	r4,r17
 4045f94:	4048a5c0 	call	4048a5c <__smakebuf_r>
 4045f98:	8080030b 	ldhu	r2,12(r16)
 4045f9c:	80c00417 	ldw	r3,16(r16)
 4045fa0:	003fe206 	br	4045f2c <__flash_rwdata_start+0xfffeb7fc>
 4045fa4:	80800517 	ldw	r2,20(r16)
 4045fa8:	80000215 	stw	zero,8(r16)
 4045fac:	0085c83a 	sub	r2,zero,r2
 4045fb0:	80800615 	stw	r2,24(r16)
 4045fb4:	183fe41e 	bne	r3,zero,4045f48 <__flash_rwdata_start+0xfffeb818>
 4045fb8:	80c0030b 	ldhu	r3,12(r16)
 4045fbc:	0005883a 	mov	r2,zero
 4045fc0:	1900200c 	andi	r4,r3,128
 4045fc4:	203fe126 	beq	r4,zero,4045f4c <__flash_rwdata_start+0xfffeb81c>
 4045fc8:	18c01014 	ori	r3,r3,64
 4045fcc:	80c0030d 	sth	r3,12(r16)
 4045fd0:	00bfffc4 	movi	r2,-1
 4045fd4:	003fdd06 	br	4045f4c <__flash_rwdata_start+0xfffeb81c>
 4045fd8:	4047eb80 	call	4047eb8 <__sinit>
 4045fdc:	003fcd06 	br	4045f14 <__flash_rwdata_start+0xfffeb7e4>
 4045fe0:	0005883a 	mov	r2,zero
 4045fe4:	003fd606 	br	4045f40 <__flash_rwdata_start+0xfffeb810>
 4045fe8:	81400c17 	ldw	r5,48(r16)
 4045fec:	28000626 	beq	r5,zero,4046008 <__swsetup_r+0x124>
 4045ff0:	80801004 	addi	r2,r16,64
 4045ff4:	28800326 	beq	r5,r2,4046004 <__swsetup_r+0x120>
 4045ff8:	8809883a 	mov	r4,r17
 4045ffc:	404802c0 	call	404802c <_free_r>
 4046000:	8100030b 	ldhu	r4,12(r16)
 4046004:	80000c15 	stw	zero,48(r16)
 4046008:	80c00417 	ldw	r3,16(r16)
 404600c:	00bff6c4 	movi	r2,-37
 4046010:	1108703a 	and	r4,r2,r4
 4046014:	80000115 	stw	zero,4(r16)
 4046018:	80c00015 	stw	r3,0(r16)
 404601c:	003fd506 	br	4045f74 <__flash_rwdata_start+0xfffeb844>
 4046020:	00800244 	movi	r2,9
 4046024:	88800015 	stw	r2,0(r17)
 4046028:	20801014 	ori	r2,r4,64
 404602c:	8080030d 	sth	r2,12(r16)
 4046030:	00bfffc4 	movi	r2,-1
 4046034:	003fc506 	br	4045f4c <__flash_rwdata_start+0xfffeb81c>

04046038 <quorem>:
 4046038:	defff704 	addi	sp,sp,-36
 404603c:	dc800215 	stw	r18,8(sp)
 4046040:	20800417 	ldw	r2,16(r4)
 4046044:	2c800417 	ldw	r18,16(r5)
 4046048:	dfc00815 	stw	ra,32(sp)
 404604c:	ddc00715 	stw	r23,28(sp)
 4046050:	dd800615 	stw	r22,24(sp)
 4046054:	dd400515 	stw	r21,20(sp)
 4046058:	dd000415 	stw	r20,16(sp)
 404605c:	dcc00315 	stw	r19,12(sp)
 4046060:	dc400115 	stw	r17,4(sp)
 4046064:	dc000015 	stw	r16,0(sp)
 4046068:	14807116 	blt	r2,r18,4046230 <quorem+0x1f8>
 404606c:	94bfffc4 	addi	r18,r18,-1
 4046070:	94ad883a 	add	r22,r18,r18
 4046074:	b5ad883a 	add	r22,r22,r22
 4046078:	2c400504 	addi	r17,r5,20
 404607c:	8da9883a 	add	r20,r17,r22
 4046080:	25400504 	addi	r21,r4,20
 4046084:	282f883a 	mov	r23,r5
 4046088:	adad883a 	add	r22,r21,r22
 404608c:	a1400017 	ldw	r5,0(r20)
 4046090:	2021883a 	mov	r16,r4
 4046094:	b1000017 	ldw	r4,0(r22)
 4046098:	29400044 	addi	r5,r5,1
 404609c:	4042fb00 	call	4042fb0 <__udivsi3>
 40460a0:	1027883a 	mov	r19,r2
 40460a4:	10002c26 	beq	r2,zero,4046158 <quorem+0x120>
 40460a8:	a813883a 	mov	r9,r21
 40460ac:	880b883a 	mov	r5,r17
 40460b0:	0009883a 	mov	r4,zero
 40460b4:	000d883a 	mov	r6,zero
 40460b8:	2a000017 	ldw	r8,0(r5)
 40460bc:	49c00017 	ldw	r7,0(r9)
 40460c0:	29400104 	addi	r5,r5,4
 40460c4:	40bfffcc 	andi	r2,r8,65535
 40460c8:	14c5383a 	mul	r2,r2,r19
 40460cc:	4010d43a 	srli	r8,r8,16
 40460d0:	38ffffcc 	andi	r3,r7,65535
 40460d4:	1105883a 	add	r2,r2,r4
 40460d8:	1008d43a 	srli	r4,r2,16
 40460dc:	44d1383a 	mul	r8,r8,r19
 40460e0:	198d883a 	add	r6,r3,r6
 40460e4:	10ffffcc 	andi	r3,r2,65535
 40460e8:	30c7c83a 	sub	r3,r6,r3
 40460ec:	380ed43a 	srli	r7,r7,16
 40460f0:	4105883a 	add	r2,r8,r4
 40460f4:	180dd43a 	srai	r6,r3,16
 40460f8:	113fffcc 	andi	r4,r2,65535
 40460fc:	390fc83a 	sub	r7,r7,r4
 4046100:	398d883a 	add	r6,r7,r6
 4046104:	300e943a 	slli	r7,r6,16
 4046108:	18ffffcc 	andi	r3,r3,65535
 404610c:	1008d43a 	srli	r4,r2,16
 4046110:	38ceb03a 	or	r7,r7,r3
 4046114:	49c00015 	stw	r7,0(r9)
 4046118:	300dd43a 	srai	r6,r6,16
 404611c:	4a400104 	addi	r9,r9,4
 4046120:	a17fe52e 	bgeu	r20,r5,40460b8 <__flash_rwdata_start+0xfffeb988>
 4046124:	b0800017 	ldw	r2,0(r22)
 4046128:	10000b1e 	bne	r2,zero,4046158 <quorem+0x120>
 404612c:	b0bfff04 	addi	r2,r22,-4
 4046130:	a880082e 	bgeu	r21,r2,4046154 <quorem+0x11c>
 4046134:	b0ffff17 	ldw	r3,-4(r22)
 4046138:	18000326 	beq	r3,zero,4046148 <quorem+0x110>
 404613c:	00000506 	br	4046154 <quorem+0x11c>
 4046140:	10c00017 	ldw	r3,0(r2)
 4046144:	1800031e 	bne	r3,zero,4046154 <quorem+0x11c>
 4046148:	10bfff04 	addi	r2,r2,-4
 404614c:	94bfffc4 	addi	r18,r18,-1
 4046150:	a8bffb36 	bltu	r21,r2,4046140 <__flash_rwdata_start+0xfffeba10>
 4046154:	84800415 	stw	r18,16(r16)
 4046158:	b80b883a 	mov	r5,r23
 404615c:	8009883a 	mov	r4,r16
 4046160:	40498480 	call	4049848 <__mcmp>
 4046164:	10002616 	blt	r2,zero,4046200 <quorem+0x1c8>
 4046168:	9cc00044 	addi	r19,r19,1
 404616c:	a805883a 	mov	r2,r21
 4046170:	000b883a 	mov	r5,zero
 4046174:	11000017 	ldw	r4,0(r2)
 4046178:	89800017 	ldw	r6,0(r17)
 404617c:	10800104 	addi	r2,r2,4
 4046180:	20ffffcc 	andi	r3,r4,65535
 4046184:	194b883a 	add	r5,r3,r5
 4046188:	30ffffcc 	andi	r3,r6,65535
 404618c:	28c7c83a 	sub	r3,r5,r3
 4046190:	300cd43a 	srli	r6,r6,16
 4046194:	2008d43a 	srli	r4,r4,16
 4046198:	180bd43a 	srai	r5,r3,16
 404619c:	18ffffcc 	andi	r3,r3,65535
 40461a0:	2189c83a 	sub	r4,r4,r6
 40461a4:	2149883a 	add	r4,r4,r5
 40461a8:	200c943a 	slli	r6,r4,16
 40461ac:	8c400104 	addi	r17,r17,4
 40461b0:	200bd43a 	srai	r5,r4,16
 40461b4:	30c6b03a 	or	r3,r6,r3
 40461b8:	10ffff15 	stw	r3,-4(r2)
 40461bc:	a47fed2e 	bgeu	r20,r17,4046174 <__flash_rwdata_start+0xfffeba44>
 40461c0:	9485883a 	add	r2,r18,r18
 40461c4:	1085883a 	add	r2,r2,r2
 40461c8:	a887883a 	add	r3,r21,r2
 40461cc:	18800017 	ldw	r2,0(r3)
 40461d0:	10000b1e 	bne	r2,zero,4046200 <quorem+0x1c8>
 40461d4:	18bfff04 	addi	r2,r3,-4
 40461d8:	a880082e 	bgeu	r21,r2,40461fc <quorem+0x1c4>
 40461dc:	18ffff17 	ldw	r3,-4(r3)
 40461e0:	18000326 	beq	r3,zero,40461f0 <quorem+0x1b8>
 40461e4:	00000506 	br	40461fc <quorem+0x1c4>
 40461e8:	10c00017 	ldw	r3,0(r2)
 40461ec:	1800031e 	bne	r3,zero,40461fc <quorem+0x1c4>
 40461f0:	10bfff04 	addi	r2,r2,-4
 40461f4:	94bfffc4 	addi	r18,r18,-1
 40461f8:	a8bffb36 	bltu	r21,r2,40461e8 <__flash_rwdata_start+0xfffebab8>
 40461fc:	84800415 	stw	r18,16(r16)
 4046200:	9805883a 	mov	r2,r19
 4046204:	dfc00817 	ldw	ra,32(sp)
 4046208:	ddc00717 	ldw	r23,28(sp)
 404620c:	dd800617 	ldw	r22,24(sp)
 4046210:	dd400517 	ldw	r21,20(sp)
 4046214:	dd000417 	ldw	r20,16(sp)
 4046218:	dcc00317 	ldw	r19,12(sp)
 404621c:	dc800217 	ldw	r18,8(sp)
 4046220:	dc400117 	ldw	r17,4(sp)
 4046224:	dc000017 	ldw	r16,0(sp)
 4046228:	dec00904 	addi	sp,sp,36
 404622c:	f800283a 	ret
 4046230:	0005883a 	mov	r2,zero
 4046234:	003ff306 	br	4046204 <__flash_rwdata_start+0xfffebad4>

04046238 <_dtoa_r>:
 4046238:	20801017 	ldw	r2,64(r4)
 404623c:	deffde04 	addi	sp,sp,-136
 4046240:	df002015 	stw	fp,128(sp)
 4046244:	dcc01b15 	stw	r19,108(sp)
 4046248:	dc801a15 	stw	r18,104(sp)
 404624c:	dc401915 	stw	r17,100(sp)
 4046250:	dc001815 	stw	r16,96(sp)
 4046254:	dfc02115 	stw	ra,132(sp)
 4046258:	ddc01f15 	stw	r23,124(sp)
 404625c:	dd801e15 	stw	r22,120(sp)
 4046260:	dd401d15 	stw	r21,116(sp)
 4046264:	dd001c15 	stw	r20,112(sp)
 4046268:	d9c00315 	stw	r7,12(sp)
 404626c:	2039883a 	mov	fp,r4
 4046270:	3023883a 	mov	r17,r6
 4046274:	2825883a 	mov	r18,r5
 4046278:	dc002417 	ldw	r16,144(sp)
 404627c:	3027883a 	mov	r19,r6
 4046280:	10000826 	beq	r2,zero,40462a4 <_dtoa_r+0x6c>
 4046284:	21801117 	ldw	r6,68(r4)
 4046288:	00c00044 	movi	r3,1
 404628c:	100b883a 	mov	r5,r2
 4046290:	1986983a 	sll	r3,r3,r6
 4046294:	11800115 	stw	r6,4(r2)
 4046298:	10c00215 	stw	r3,8(r2)
 404629c:	40490280 	call	4049028 <_Bfree>
 40462a0:	e0001015 	stw	zero,64(fp)
 40462a4:	88002e16 	blt	r17,zero,4046360 <_dtoa_r+0x128>
 40462a8:	80000015 	stw	zero,0(r16)
 40462ac:	889ffc2c 	andhi	r2,r17,32752
 40462b0:	00dffc34 	movhi	r3,32752
 40462b4:	10c01c26 	beq	r2,r3,4046328 <_dtoa_r+0xf0>
 40462b8:	000d883a 	mov	r6,zero
 40462bc:	000f883a 	mov	r7,zero
 40462c0:	9009883a 	mov	r4,r18
 40462c4:	980b883a 	mov	r5,r19
 40462c8:	404e32c0 	call	404e32c <__eqdf2>
 40462cc:	10002b1e 	bne	r2,zero,404637c <_dtoa_r+0x144>
 40462d0:	d9c02317 	ldw	r7,140(sp)
 40462d4:	00800044 	movi	r2,1
 40462d8:	38800015 	stw	r2,0(r7)
 40462dc:	d8802517 	ldw	r2,148(sp)
 40462e0:	10019e26 	beq	r2,zero,404695c <_dtoa_r+0x724>
 40462e4:	d8c02517 	ldw	r3,148(sp)
 40462e8:	00808034 	movhi	r2,512
 40462ec:	1080a344 	addi	r2,r2,653
 40462f0:	18800015 	stw	r2,0(r3)
 40462f4:	10bfffc4 	addi	r2,r2,-1
 40462f8:	dfc02117 	ldw	ra,132(sp)
 40462fc:	df002017 	ldw	fp,128(sp)
 4046300:	ddc01f17 	ldw	r23,124(sp)
 4046304:	dd801e17 	ldw	r22,120(sp)
 4046308:	dd401d17 	ldw	r21,116(sp)
 404630c:	dd001c17 	ldw	r20,112(sp)
 4046310:	dcc01b17 	ldw	r19,108(sp)
 4046314:	dc801a17 	ldw	r18,104(sp)
 4046318:	dc401917 	ldw	r17,100(sp)
 404631c:	dc001817 	ldw	r16,96(sp)
 4046320:	dec02204 	addi	sp,sp,136
 4046324:	f800283a 	ret
 4046328:	d8c02317 	ldw	r3,140(sp)
 404632c:	0089c3c4 	movi	r2,9999
 4046330:	18800015 	stw	r2,0(r3)
 4046334:	90017726 	beq	r18,zero,4046914 <_dtoa_r+0x6dc>
 4046338:	00808034 	movhi	r2,512
 404633c:	1080af04 	addi	r2,r2,700
 4046340:	d9002517 	ldw	r4,148(sp)
 4046344:	203fec26 	beq	r4,zero,40462f8 <__flash_rwdata_start+0xfffebbc8>
 4046348:	10c000c7 	ldb	r3,3(r2)
 404634c:	1801781e 	bne	r3,zero,4046930 <_dtoa_r+0x6f8>
 4046350:	10c000c4 	addi	r3,r2,3
 4046354:	d9802517 	ldw	r6,148(sp)
 4046358:	30c00015 	stw	r3,0(r6)
 404635c:	003fe606 	br	40462f8 <__flash_rwdata_start+0xfffebbc8>
 4046360:	04e00034 	movhi	r19,32768
 4046364:	9cffffc4 	addi	r19,r19,-1
 4046368:	00800044 	movi	r2,1
 404636c:	8ce6703a 	and	r19,r17,r19
 4046370:	80800015 	stw	r2,0(r16)
 4046374:	9823883a 	mov	r17,r19
 4046378:	003fcc06 	br	40462ac <__flash_rwdata_start+0xfffebb7c>
 404637c:	d8800204 	addi	r2,sp,8
 4046380:	d8800015 	stw	r2,0(sp)
 4046384:	d9c00104 	addi	r7,sp,4
 4046388:	900b883a 	mov	r5,r18
 404638c:	980d883a 	mov	r6,r19
 4046390:	e009883a 	mov	r4,fp
 4046394:	8820d53a 	srli	r16,r17,20
 4046398:	4049c140 	call	4049c14 <__d2b>
 404639c:	d8800915 	stw	r2,36(sp)
 40463a0:	8001651e 	bne	r16,zero,4046938 <_dtoa_r+0x700>
 40463a4:	dd800217 	ldw	r22,8(sp)
 40463a8:	dc000117 	ldw	r16,4(sp)
 40463ac:	00800804 	movi	r2,32
 40463b0:	b421883a 	add	r16,r22,r16
 40463b4:	80c10c84 	addi	r3,r16,1074
 40463b8:	10c2d10e 	bge	r2,r3,4046f00 <_dtoa_r+0xcc8>
 40463bc:	00801004 	movi	r2,64
 40463c0:	81010484 	addi	r4,r16,1042
 40463c4:	10c7c83a 	sub	r3,r2,r3
 40463c8:	9108d83a 	srl	r4,r18,r4
 40463cc:	88e2983a 	sll	r17,r17,r3
 40463d0:	2448b03a 	or	r4,r4,r17
 40463d4:	404f6f40 	call	404f6f4 <__floatunsidf>
 40463d8:	017f8434 	movhi	r5,65040
 40463dc:	01800044 	movi	r6,1
 40463e0:	1009883a 	mov	r4,r2
 40463e4:	194b883a 	add	r5,r3,r5
 40463e8:	843fffc4 	addi	r16,r16,-1
 40463ec:	d9801115 	stw	r6,68(sp)
 40463f0:	000d883a 	mov	r6,zero
 40463f4:	01cffe34 	movhi	r7,16376
 40463f8:	404ec9c0 	call	404ec9c <__subdf3>
 40463fc:	0198dbf4 	movhi	r6,25455
 4046400:	01cff4f4 	movhi	r7,16339
 4046404:	3190d844 	addi	r6,r6,17249
 4046408:	39e1e9c4 	addi	r7,r7,-30809
 404640c:	1009883a 	mov	r4,r2
 4046410:	180b883a 	mov	r5,r3
 4046414:	404e5840 	call	404e584 <__muldf3>
 4046418:	01a2d874 	movhi	r6,35681
 404641c:	01cff1f4 	movhi	r7,16327
 4046420:	31b22cc4 	addi	r6,r6,-14157
 4046424:	39e28a04 	addi	r7,r7,-30168
 4046428:	180b883a 	mov	r5,r3
 404642c:	1009883a 	mov	r4,r2
 4046430:	404d1980 	call	404d198 <__adddf3>
 4046434:	8009883a 	mov	r4,r16
 4046438:	1029883a 	mov	r20,r2
 404643c:	1823883a 	mov	r17,r3
 4046440:	404f6180 	call	404f618 <__floatsidf>
 4046444:	019427f4 	movhi	r6,20639
 4046448:	01cff4f4 	movhi	r7,16339
 404644c:	319e7ec4 	addi	r6,r6,31227
 4046450:	39d104c4 	addi	r7,r7,17427
 4046454:	1009883a 	mov	r4,r2
 4046458:	180b883a 	mov	r5,r3
 404645c:	404e5840 	call	404e584 <__muldf3>
 4046460:	100d883a 	mov	r6,r2
 4046464:	180f883a 	mov	r7,r3
 4046468:	a009883a 	mov	r4,r20
 404646c:	880b883a 	mov	r5,r17
 4046470:	404d1980 	call	404d198 <__adddf3>
 4046474:	1009883a 	mov	r4,r2
 4046478:	180b883a 	mov	r5,r3
 404647c:	1029883a 	mov	r20,r2
 4046480:	1823883a 	mov	r17,r3
 4046484:	404f5980 	call	404f598 <__fixdfsi>
 4046488:	000d883a 	mov	r6,zero
 404648c:	000f883a 	mov	r7,zero
 4046490:	a009883a 	mov	r4,r20
 4046494:	880b883a 	mov	r5,r17
 4046498:	d8800515 	stw	r2,20(sp)
 404649c:	404e4900 	call	404e490 <__ledf2>
 40464a0:	10028716 	blt	r2,zero,4046ec0 <_dtoa_r+0xc88>
 40464a4:	d8c00517 	ldw	r3,20(sp)
 40464a8:	00800584 	movi	r2,22
 40464ac:	10c27536 	bltu	r2,r3,4046e84 <_dtoa_r+0xc4c>
 40464b0:	180490fa 	slli	r2,r3,3
 40464b4:	00c08034 	movhi	r3,512
 40464b8:	18c0cb04 	addi	r3,r3,812
 40464bc:	1885883a 	add	r2,r3,r2
 40464c0:	11000017 	ldw	r4,0(r2)
 40464c4:	11400117 	ldw	r5,4(r2)
 40464c8:	900d883a 	mov	r6,r18
 40464cc:	980f883a 	mov	r7,r19
 40464d0:	404e3b40 	call	404e3b4 <__gedf2>
 40464d4:	00828d0e 	bge	zero,r2,4046f0c <_dtoa_r+0xcd4>
 40464d8:	d9000517 	ldw	r4,20(sp)
 40464dc:	d8000e15 	stw	zero,56(sp)
 40464e0:	213fffc4 	addi	r4,r4,-1
 40464e4:	d9000515 	stw	r4,20(sp)
 40464e8:	b42dc83a 	sub	r22,r22,r16
 40464ec:	b5bfffc4 	addi	r22,r22,-1
 40464f0:	b0026f16 	blt	r22,zero,4046eb0 <_dtoa_r+0xc78>
 40464f4:	d8000815 	stw	zero,32(sp)
 40464f8:	d9c00517 	ldw	r7,20(sp)
 40464fc:	38026416 	blt	r7,zero,4046e90 <_dtoa_r+0xc58>
 4046500:	b1ed883a 	add	r22,r22,r7
 4046504:	d9c00d15 	stw	r7,52(sp)
 4046508:	d8000a15 	stw	zero,40(sp)
 404650c:	d9800317 	ldw	r6,12(sp)
 4046510:	00800244 	movi	r2,9
 4046514:	11811436 	bltu	r2,r6,4046968 <_dtoa_r+0x730>
 4046518:	00800144 	movi	r2,5
 404651c:	1184e10e 	bge	r2,r6,40478a4 <_dtoa_r+0x166c>
 4046520:	31bfff04 	addi	r6,r6,-4
 4046524:	d9800315 	stw	r6,12(sp)
 4046528:	0023883a 	mov	r17,zero
 404652c:	d9800317 	ldw	r6,12(sp)
 4046530:	008000c4 	movi	r2,3
 4046534:	30836726 	beq	r6,r2,40472d4 <_dtoa_r+0x109c>
 4046538:	1183410e 	bge	r2,r6,4047240 <_dtoa_r+0x1008>
 404653c:	d9c00317 	ldw	r7,12(sp)
 4046540:	00800104 	movi	r2,4
 4046544:	38827c26 	beq	r7,r2,4046f38 <_dtoa_r+0xd00>
 4046548:	00800144 	movi	r2,5
 404654c:	3884c41e 	bne	r7,r2,4047860 <_dtoa_r+0x1628>
 4046550:	00800044 	movi	r2,1
 4046554:	d8800b15 	stw	r2,44(sp)
 4046558:	d8c00517 	ldw	r3,20(sp)
 404655c:	d9002217 	ldw	r4,136(sp)
 4046560:	1907883a 	add	r3,r3,r4
 4046564:	19800044 	addi	r6,r3,1
 4046568:	d8c00c15 	stw	r3,48(sp)
 404656c:	d9800615 	stw	r6,24(sp)
 4046570:	0183a40e 	bge	zero,r6,4047404 <_dtoa_r+0x11cc>
 4046574:	d9800617 	ldw	r6,24(sp)
 4046578:	3021883a 	mov	r16,r6
 404657c:	e0001115 	stw	zero,68(fp)
 4046580:	008005c4 	movi	r2,23
 4046584:	1184c92e 	bgeu	r2,r6,40478ac <_dtoa_r+0x1674>
 4046588:	00c00044 	movi	r3,1
 404658c:	00800104 	movi	r2,4
 4046590:	1085883a 	add	r2,r2,r2
 4046594:	11000504 	addi	r4,r2,20
 4046598:	180b883a 	mov	r5,r3
 404659c:	18c00044 	addi	r3,r3,1
 40465a0:	313ffb2e 	bgeu	r6,r4,4046590 <__flash_rwdata_start+0xfffebe60>
 40465a4:	e1401115 	stw	r5,68(fp)
 40465a8:	e009883a 	mov	r4,fp
 40465ac:	4048f800 	call	4048f80 <_Balloc>
 40465b0:	d8800715 	stw	r2,28(sp)
 40465b4:	e0801015 	stw	r2,64(fp)
 40465b8:	00800384 	movi	r2,14
 40465bc:	1400f736 	bltu	r2,r16,404699c <_dtoa_r+0x764>
 40465c0:	8800f626 	beq	r17,zero,404699c <_dtoa_r+0x764>
 40465c4:	d9c00517 	ldw	r7,20(sp)
 40465c8:	01c39a0e 	bge	zero,r7,4047434 <_dtoa_r+0x11fc>
 40465cc:	388003cc 	andi	r2,r7,15
 40465d0:	100490fa 	slli	r2,r2,3
 40465d4:	382bd13a 	srai	r21,r7,4
 40465d8:	00c08034 	movhi	r3,512
 40465dc:	18c0cb04 	addi	r3,r3,812
 40465e0:	1885883a 	add	r2,r3,r2
 40465e4:	a8c0040c 	andi	r3,r21,16
 40465e8:	12400017 	ldw	r9,0(r2)
 40465ec:	12000117 	ldw	r8,4(r2)
 40465f0:	18037926 	beq	r3,zero,40473d8 <_dtoa_r+0x11a0>
 40465f4:	00808034 	movhi	r2,512
 40465f8:	1080c104 	addi	r2,r2,772
 40465fc:	11800817 	ldw	r6,32(r2)
 4046600:	11c00917 	ldw	r7,36(r2)
 4046604:	9009883a 	mov	r4,r18
 4046608:	980b883a 	mov	r5,r19
 404660c:	da001715 	stw	r8,92(sp)
 4046610:	da401615 	stw	r9,88(sp)
 4046614:	404da440 	call	404da44 <__divdf3>
 4046618:	da001717 	ldw	r8,92(sp)
 404661c:	da401617 	ldw	r9,88(sp)
 4046620:	ad4003cc 	andi	r21,r21,15
 4046624:	040000c4 	movi	r16,3
 4046628:	1023883a 	mov	r17,r2
 404662c:	1829883a 	mov	r20,r3
 4046630:	a8001126 	beq	r21,zero,4046678 <_dtoa_r+0x440>
 4046634:	05c08034 	movhi	r23,512
 4046638:	bdc0c104 	addi	r23,r23,772
 404663c:	4805883a 	mov	r2,r9
 4046640:	4007883a 	mov	r3,r8
 4046644:	a980004c 	andi	r6,r21,1
 4046648:	1009883a 	mov	r4,r2
 404664c:	a82bd07a 	srai	r21,r21,1
 4046650:	180b883a 	mov	r5,r3
 4046654:	30000426 	beq	r6,zero,4046668 <_dtoa_r+0x430>
 4046658:	b9800017 	ldw	r6,0(r23)
 404665c:	b9c00117 	ldw	r7,4(r23)
 4046660:	84000044 	addi	r16,r16,1
 4046664:	404e5840 	call	404e584 <__muldf3>
 4046668:	bdc00204 	addi	r23,r23,8
 404666c:	a83ff51e 	bne	r21,zero,4046644 <__flash_rwdata_start+0xfffebf14>
 4046670:	1013883a 	mov	r9,r2
 4046674:	1811883a 	mov	r8,r3
 4046678:	480d883a 	mov	r6,r9
 404667c:	400f883a 	mov	r7,r8
 4046680:	8809883a 	mov	r4,r17
 4046684:	a00b883a 	mov	r5,r20
 4046688:	404da440 	call	404da44 <__divdf3>
 404668c:	d8800f15 	stw	r2,60(sp)
 4046690:	d8c01015 	stw	r3,64(sp)
 4046694:	d8c00e17 	ldw	r3,56(sp)
 4046698:	18000626 	beq	r3,zero,40466b4 <_dtoa_r+0x47c>
 404669c:	d9000f17 	ldw	r4,60(sp)
 40466a0:	d9401017 	ldw	r5,64(sp)
 40466a4:	000d883a 	mov	r6,zero
 40466a8:	01cffc34 	movhi	r7,16368
 40466ac:	404e4900 	call	404e490 <__ledf2>
 40466b0:	10040b16 	blt	r2,zero,40476e0 <_dtoa_r+0x14a8>
 40466b4:	8009883a 	mov	r4,r16
 40466b8:	404f6180 	call	404f618 <__floatsidf>
 40466bc:	d9800f17 	ldw	r6,60(sp)
 40466c0:	d9c01017 	ldw	r7,64(sp)
 40466c4:	1009883a 	mov	r4,r2
 40466c8:	180b883a 	mov	r5,r3
 40466cc:	404e5840 	call	404e584 <__muldf3>
 40466d0:	000d883a 	mov	r6,zero
 40466d4:	01d00734 	movhi	r7,16412
 40466d8:	1009883a 	mov	r4,r2
 40466dc:	180b883a 	mov	r5,r3
 40466e0:	404d1980 	call	404d198 <__adddf3>
 40466e4:	1021883a 	mov	r16,r2
 40466e8:	d8800617 	ldw	r2,24(sp)
 40466ec:	047f3034 	movhi	r17,64704
 40466f0:	1c63883a 	add	r17,r3,r17
 40466f4:	10031826 	beq	r2,zero,4047358 <_dtoa_r+0x1120>
 40466f8:	d8c00517 	ldw	r3,20(sp)
 40466fc:	db000617 	ldw	r12,24(sp)
 4046700:	d8c01315 	stw	r3,76(sp)
 4046704:	d9000b17 	ldw	r4,44(sp)
 4046708:	20038f26 	beq	r4,zero,4047548 <_dtoa_r+0x1310>
 404670c:	60bfffc4 	addi	r2,r12,-1
 4046710:	100490fa 	slli	r2,r2,3
 4046714:	00c08034 	movhi	r3,512
 4046718:	18c0cb04 	addi	r3,r3,812
 404671c:	1885883a 	add	r2,r3,r2
 4046720:	11800017 	ldw	r6,0(r2)
 4046724:	11c00117 	ldw	r7,4(r2)
 4046728:	d8800717 	ldw	r2,28(sp)
 404672c:	0009883a 	mov	r4,zero
 4046730:	014ff834 	movhi	r5,16352
 4046734:	db001615 	stw	r12,88(sp)
 4046738:	15c00044 	addi	r23,r2,1
 404673c:	404da440 	call	404da44 <__divdf3>
 4046740:	800d883a 	mov	r6,r16
 4046744:	880f883a 	mov	r7,r17
 4046748:	1009883a 	mov	r4,r2
 404674c:	180b883a 	mov	r5,r3
 4046750:	404ec9c0 	call	404ec9c <__subdf3>
 4046754:	d9401017 	ldw	r5,64(sp)
 4046758:	d9000f17 	ldw	r4,60(sp)
 404675c:	102b883a 	mov	r21,r2
 4046760:	d8c01215 	stw	r3,72(sp)
 4046764:	404f5980 	call	404f598 <__fixdfsi>
 4046768:	1009883a 	mov	r4,r2
 404676c:	1029883a 	mov	r20,r2
 4046770:	404f6180 	call	404f618 <__floatsidf>
 4046774:	d9000f17 	ldw	r4,60(sp)
 4046778:	d9401017 	ldw	r5,64(sp)
 404677c:	100d883a 	mov	r6,r2
 4046780:	180f883a 	mov	r7,r3
 4046784:	404ec9c0 	call	404ec9c <__subdf3>
 4046788:	1823883a 	mov	r17,r3
 404678c:	d8c00717 	ldw	r3,28(sp)
 4046790:	d9401217 	ldw	r5,72(sp)
 4046794:	a2000c04 	addi	r8,r20,48
 4046798:	1021883a 	mov	r16,r2
 404679c:	1a000005 	stb	r8,0(r3)
 40467a0:	800d883a 	mov	r6,r16
 40467a4:	880f883a 	mov	r7,r17
 40467a8:	a809883a 	mov	r4,r21
 40467ac:	4029883a 	mov	r20,r8
 40467b0:	404e3b40 	call	404e3b4 <__gedf2>
 40467b4:	00841d16 	blt	zero,r2,404782c <_dtoa_r+0x15f4>
 40467b8:	800d883a 	mov	r6,r16
 40467bc:	880f883a 	mov	r7,r17
 40467c0:	0009883a 	mov	r4,zero
 40467c4:	014ffc34 	movhi	r5,16368
 40467c8:	404ec9c0 	call	404ec9c <__subdf3>
 40467cc:	d9401217 	ldw	r5,72(sp)
 40467d0:	100d883a 	mov	r6,r2
 40467d4:	180f883a 	mov	r7,r3
 40467d8:	a809883a 	mov	r4,r21
 40467dc:	404e3b40 	call	404e3b4 <__gedf2>
 40467e0:	db001617 	ldw	r12,88(sp)
 40467e4:	00840e16 	blt	zero,r2,4047820 <_dtoa_r+0x15e8>
 40467e8:	00800044 	movi	r2,1
 40467ec:	13006b0e 	bge	r2,r12,404699c <_dtoa_r+0x764>
 40467f0:	d9000717 	ldw	r4,28(sp)
 40467f4:	dd800f15 	stw	r22,60(sp)
 40467f8:	dcc01015 	stw	r19,64(sp)
 40467fc:	2319883a 	add	r12,r4,r12
 4046800:	dcc01217 	ldw	r19,72(sp)
 4046804:	602d883a 	mov	r22,r12
 4046808:	dc801215 	stw	r18,72(sp)
 404680c:	b825883a 	mov	r18,r23
 4046810:	00000906 	br	4046838 <_dtoa_r+0x600>
 4046814:	404ec9c0 	call	404ec9c <__subdf3>
 4046818:	a80d883a 	mov	r6,r21
 404681c:	980f883a 	mov	r7,r19
 4046820:	1009883a 	mov	r4,r2
 4046824:	180b883a 	mov	r5,r3
 4046828:	404e4900 	call	404e490 <__ledf2>
 404682c:	1003e816 	blt	r2,zero,40477d0 <_dtoa_r+0x1598>
 4046830:	b825883a 	mov	r18,r23
 4046834:	bd83e926 	beq	r23,r22,40477dc <_dtoa_r+0x15a4>
 4046838:	a809883a 	mov	r4,r21
 404683c:	980b883a 	mov	r5,r19
 4046840:	000d883a 	mov	r6,zero
 4046844:	01d00934 	movhi	r7,16420
 4046848:	404e5840 	call	404e584 <__muldf3>
 404684c:	000d883a 	mov	r6,zero
 4046850:	01d00934 	movhi	r7,16420
 4046854:	8009883a 	mov	r4,r16
 4046858:	880b883a 	mov	r5,r17
 404685c:	102b883a 	mov	r21,r2
 4046860:	1827883a 	mov	r19,r3
 4046864:	404e5840 	call	404e584 <__muldf3>
 4046868:	180b883a 	mov	r5,r3
 404686c:	1009883a 	mov	r4,r2
 4046870:	1821883a 	mov	r16,r3
 4046874:	1023883a 	mov	r17,r2
 4046878:	404f5980 	call	404f598 <__fixdfsi>
 404687c:	1009883a 	mov	r4,r2
 4046880:	1029883a 	mov	r20,r2
 4046884:	404f6180 	call	404f618 <__floatsidf>
 4046888:	8809883a 	mov	r4,r17
 404688c:	800b883a 	mov	r5,r16
 4046890:	100d883a 	mov	r6,r2
 4046894:	180f883a 	mov	r7,r3
 4046898:	404ec9c0 	call	404ec9c <__subdf3>
 404689c:	a5000c04 	addi	r20,r20,48
 40468a0:	a80d883a 	mov	r6,r21
 40468a4:	980f883a 	mov	r7,r19
 40468a8:	1009883a 	mov	r4,r2
 40468ac:	180b883a 	mov	r5,r3
 40468b0:	95000005 	stb	r20,0(r18)
 40468b4:	1021883a 	mov	r16,r2
 40468b8:	1823883a 	mov	r17,r3
 40468bc:	404e4900 	call	404e490 <__ledf2>
 40468c0:	bdc00044 	addi	r23,r23,1
 40468c4:	800d883a 	mov	r6,r16
 40468c8:	880f883a 	mov	r7,r17
 40468cc:	0009883a 	mov	r4,zero
 40468d0:	014ffc34 	movhi	r5,16368
 40468d4:	103fcf0e 	bge	r2,zero,4046814 <__flash_rwdata_start+0xfffec0e4>
 40468d8:	d8c01317 	ldw	r3,76(sp)
 40468dc:	d8c00515 	stw	r3,20(sp)
 40468e0:	d9400917 	ldw	r5,36(sp)
 40468e4:	e009883a 	mov	r4,fp
 40468e8:	40490280 	call	4049028 <_Bfree>
 40468ec:	d9000517 	ldw	r4,20(sp)
 40468f0:	d9802317 	ldw	r6,140(sp)
 40468f4:	d9c02517 	ldw	r7,148(sp)
 40468f8:	b8000005 	stb	zero,0(r23)
 40468fc:	20800044 	addi	r2,r4,1
 4046900:	30800015 	stw	r2,0(r6)
 4046904:	3802aa26 	beq	r7,zero,40473b0 <_dtoa_r+0x1178>
 4046908:	3dc00015 	stw	r23,0(r7)
 404690c:	d8800717 	ldw	r2,28(sp)
 4046910:	003e7906 	br	40462f8 <__flash_rwdata_start+0xfffebbc8>
 4046914:	00800434 	movhi	r2,16
 4046918:	10bfffc4 	addi	r2,r2,-1
 404691c:	88a2703a 	and	r17,r17,r2
 4046920:	883e851e 	bne	r17,zero,4046338 <__flash_rwdata_start+0xfffebc08>
 4046924:	00808034 	movhi	r2,512
 4046928:	1080ac04 	addi	r2,r2,688
 404692c:	003e8406 	br	4046340 <__flash_rwdata_start+0xfffebc10>
 4046930:	10c00204 	addi	r3,r2,8
 4046934:	003e8706 	br	4046354 <__flash_rwdata_start+0xfffebc24>
 4046938:	01400434 	movhi	r5,16
 404693c:	297fffc4 	addi	r5,r5,-1
 4046940:	994a703a 	and	r5,r19,r5
 4046944:	9009883a 	mov	r4,r18
 4046948:	843f0044 	addi	r16,r16,-1023
 404694c:	294ffc34 	orhi	r5,r5,16368
 4046950:	dd800217 	ldw	r22,8(sp)
 4046954:	d8001115 	stw	zero,68(sp)
 4046958:	003ea506 	br	40463f0 <__flash_rwdata_start+0xfffebcc0>
 404695c:	00808034 	movhi	r2,512
 4046960:	1080a304 	addi	r2,r2,652
 4046964:	003e6406 	br	40462f8 <__flash_rwdata_start+0xfffebbc8>
 4046968:	e0001115 	stw	zero,68(fp)
 404696c:	000b883a 	mov	r5,zero
 4046970:	e009883a 	mov	r4,fp
 4046974:	4048f800 	call	4048f80 <_Balloc>
 4046978:	01bfffc4 	movi	r6,-1
 404697c:	01c00044 	movi	r7,1
 4046980:	d8800715 	stw	r2,28(sp)
 4046984:	d9800c15 	stw	r6,48(sp)
 4046988:	e0801015 	stw	r2,64(fp)
 404698c:	d8000315 	stw	zero,12(sp)
 4046990:	d9c00b15 	stw	r7,44(sp)
 4046994:	d9800615 	stw	r6,24(sp)
 4046998:	d8002215 	stw	zero,136(sp)
 404699c:	d8800117 	ldw	r2,4(sp)
 40469a0:	10008916 	blt	r2,zero,4046bc8 <_dtoa_r+0x990>
 40469a4:	d9000517 	ldw	r4,20(sp)
 40469a8:	00c00384 	movi	r3,14
 40469ac:	19008616 	blt	r3,r4,4046bc8 <_dtoa_r+0x990>
 40469b0:	200490fa 	slli	r2,r4,3
 40469b4:	00c08034 	movhi	r3,512
 40469b8:	d9802217 	ldw	r6,136(sp)
 40469bc:	18c0cb04 	addi	r3,r3,812
 40469c0:	1885883a 	add	r2,r3,r2
 40469c4:	14000017 	ldw	r16,0(r2)
 40469c8:	14400117 	ldw	r17,4(r2)
 40469cc:	30016316 	blt	r6,zero,4046f5c <_dtoa_r+0xd24>
 40469d0:	800d883a 	mov	r6,r16
 40469d4:	880f883a 	mov	r7,r17
 40469d8:	9009883a 	mov	r4,r18
 40469dc:	980b883a 	mov	r5,r19
 40469e0:	404da440 	call	404da44 <__divdf3>
 40469e4:	180b883a 	mov	r5,r3
 40469e8:	1009883a 	mov	r4,r2
 40469ec:	404f5980 	call	404f598 <__fixdfsi>
 40469f0:	1009883a 	mov	r4,r2
 40469f4:	102b883a 	mov	r21,r2
 40469f8:	404f6180 	call	404f618 <__floatsidf>
 40469fc:	800d883a 	mov	r6,r16
 4046a00:	880f883a 	mov	r7,r17
 4046a04:	1009883a 	mov	r4,r2
 4046a08:	180b883a 	mov	r5,r3
 4046a0c:	404e5840 	call	404e584 <__muldf3>
 4046a10:	100d883a 	mov	r6,r2
 4046a14:	180f883a 	mov	r7,r3
 4046a18:	9009883a 	mov	r4,r18
 4046a1c:	980b883a 	mov	r5,r19
 4046a20:	404ec9c0 	call	404ec9c <__subdf3>
 4046a24:	d9c00717 	ldw	r7,28(sp)
 4046a28:	1009883a 	mov	r4,r2
 4046a2c:	a8800c04 	addi	r2,r21,48
 4046a30:	38800005 	stb	r2,0(r7)
 4046a34:	3dc00044 	addi	r23,r7,1
 4046a38:	d9c00617 	ldw	r7,24(sp)
 4046a3c:	01800044 	movi	r6,1
 4046a40:	180b883a 	mov	r5,r3
 4046a44:	2005883a 	mov	r2,r4
 4046a48:	39803826 	beq	r7,r6,4046b2c <_dtoa_r+0x8f4>
 4046a4c:	000d883a 	mov	r6,zero
 4046a50:	01d00934 	movhi	r7,16420
 4046a54:	404e5840 	call	404e584 <__muldf3>
 4046a58:	000d883a 	mov	r6,zero
 4046a5c:	000f883a 	mov	r7,zero
 4046a60:	1009883a 	mov	r4,r2
 4046a64:	180b883a 	mov	r5,r3
 4046a68:	1025883a 	mov	r18,r2
 4046a6c:	1827883a 	mov	r19,r3
 4046a70:	404e32c0 	call	404e32c <__eqdf2>
 4046a74:	103f9a26 	beq	r2,zero,40468e0 <__flash_rwdata_start+0xfffec1b0>
 4046a78:	d9c00617 	ldw	r7,24(sp)
 4046a7c:	d8c00717 	ldw	r3,28(sp)
 4046a80:	b829883a 	mov	r20,r23
 4046a84:	38bfffc4 	addi	r2,r7,-1
 4046a88:	18ad883a 	add	r22,r3,r2
 4046a8c:	00000a06 	br	4046ab8 <_dtoa_r+0x880>
 4046a90:	404e5840 	call	404e584 <__muldf3>
 4046a94:	000d883a 	mov	r6,zero
 4046a98:	000f883a 	mov	r7,zero
 4046a9c:	1009883a 	mov	r4,r2
 4046aa0:	180b883a 	mov	r5,r3
 4046aa4:	1025883a 	mov	r18,r2
 4046aa8:	1827883a 	mov	r19,r3
 4046aac:	b829883a 	mov	r20,r23
 4046ab0:	404e32c0 	call	404e32c <__eqdf2>
 4046ab4:	103f8a26 	beq	r2,zero,40468e0 <__flash_rwdata_start+0xfffec1b0>
 4046ab8:	800d883a 	mov	r6,r16
 4046abc:	880f883a 	mov	r7,r17
 4046ac0:	9009883a 	mov	r4,r18
 4046ac4:	980b883a 	mov	r5,r19
 4046ac8:	404da440 	call	404da44 <__divdf3>
 4046acc:	180b883a 	mov	r5,r3
 4046ad0:	1009883a 	mov	r4,r2
 4046ad4:	404f5980 	call	404f598 <__fixdfsi>
 4046ad8:	1009883a 	mov	r4,r2
 4046adc:	102b883a 	mov	r21,r2
 4046ae0:	404f6180 	call	404f618 <__floatsidf>
 4046ae4:	800d883a 	mov	r6,r16
 4046ae8:	880f883a 	mov	r7,r17
 4046aec:	1009883a 	mov	r4,r2
 4046af0:	180b883a 	mov	r5,r3
 4046af4:	404e5840 	call	404e584 <__muldf3>
 4046af8:	100d883a 	mov	r6,r2
 4046afc:	180f883a 	mov	r7,r3
 4046b00:	9009883a 	mov	r4,r18
 4046b04:	980b883a 	mov	r5,r19
 4046b08:	404ec9c0 	call	404ec9c <__subdf3>
 4046b0c:	aa000c04 	addi	r8,r21,48
 4046b10:	a2000005 	stb	r8,0(r20)
 4046b14:	000d883a 	mov	r6,zero
 4046b18:	01d00934 	movhi	r7,16420
 4046b1c:	1009883a 	mov	r4,r2
 4046b20:	180b883a 	mov	r5,r3
 4046b24:	a5c00044 	addi	r23,r20,1
 4046b28:	b53fd91e 	bne	r22,r20,4046a90 <__flash_rwdata_start+0xfffec360>
 4046b2c:	100d883a 	mov	r6,r2
 4046b30:	180f883a 	mov	r7,r3
 4046b34:	1009883a 	mov	r4,r2
 4046b38:	180b883a 	mov	r5,r3
 4046b3c:	404d1980 	call	404d198 <__adddf3>
 4046b40:	100d883a 	mov	r6,r2
 4046b44:	180f883a 	mov	r7,r3
 4046b48:	8009883a 	mov	r4,r16
 4046b4c:	880b883a 	mov	r5,r17
 4046b50:	1027883a 	mov	r19,r2
 4046b54:	1825883a 	mov	r18,r3
 4046b58:	404e4900 	call	404e490 <__ledf2>
 4046b5c:	10000816 	blt	r2,zero,4046b80 <_dtoa_r+0x948>
 4046b60:	980d883a 	mov	r6,r19
 4046b64:	900f883a 	mov	r7,r18
 4046b68:	8009883a 	mov	r4,r16
 4046b6c:	880b883a 	mov	r5,r17
 4046b70:	404e32c0 	call	404e32c <__eqdf2>
 4046b74:	103f5a1e 	bne	r2,zero,40468e0 <__flash_rwdata_start+0xfffec1b0>
 4046b78:	ad40004c 	andi	r21,r21,1
 4046b7c:	a83f5826 	beq	r21,zero,40468e0 <__flash_rwdata_start+0xfffec1b0>
 4046b80:	bd3fffc3 	ldbu	r20,-1(r23)
 4046b84:	b8bfffc4 	addi	r2,r23,-1
 4046b88:	1007883a 	mov	r3,r2
 4046b8c:	01400e44 	movi	r5,57
 4046b90:	d9800717 	ldw	r6,28(sp)
 4046b94:	00000506 	br	4046bac <_dtoa_r+0x974>
 4046b98:	18ffffc4 	addi	r3,r3,-1
 4046b9c:	11824726 	beq	r2,r6,40474bc <_dtoa_r+0x1284>
 4046ba0:	1d000003 	ldbu	r20,0(r3)
 4046ba4:	102f883a 	mov	r23,r2
 4046ba8:	10bfffc4 	addi	r2,r2,-1
 4046bac:	a1003fcc 	andi	r4,r20,255
 4046bb0:	2100201c 	xori	r4,r4,128
 4046bb4:	213fe004 	addi	r4,r4,-128
 4046bb8:	217ff726 	beq	r4,r5,4046b98 <__flash_rwdata_start+0xfffec468>
 4046bbc:	a2000044 	addi	r8,r20,1
 4046bc0:	12000005 	stb	r8,0(r2)
 4046bc4:	003f4606 	br	40468e0 <__flash_rwdata_start+0xfffec1b0>
 4046bc8:	d9000b17 	ldw	r4,44(sp)
 4046bcc:	2000c826 	beq	r4,zero,4046ef0 <_dtoa_r+0xcb8>
 4046bd0:	d9800317 	ldw	r6,12(sp)
 4046bd4:	00c00044 	movi	r3,1
 4046bd8:	1980f90e 	bge	r3,r6,4046fc0 <_dtoa_r+0xd88>
 4046bdc:	d8800617 	ldw	r2,24(sp)
 4046be0:	d8c00a17 	ldw	r3,40(sp)
 4046be4:	157fffc4 	addi	r21,r2,-1
 4046be8:	1d41f316 	blt	r3,r21,40473b8 <_dtoa_r+0x1180>
 4046bec:	1d6bc83a 	sub	r21,r3,r21
 4046bf0:	d9c00617 	ldw	r7,24(sp)
 4046bf4:	3802aa16 	blt	r7,zero,40476a0 <_dtoa_r+0x1468>
 4046bf8:	dd000817 	ldw	r20,32(sp)
 4046bfc:	d8800617 	ldw	r2,24(sp)
 4046c00:	d8c00817 	ldw	r3,32(sp)
 4046c04:	01400044 	movi	r5,1
 4046c08:	e009883a 	mov	r4,fp
 4046c0c:	1887883a 	add	r3,r3,r2
 4046c10:	d8c00815 	stw	r3,32(sp)
 4046c14:	b0ad883a 	add	r22,r22,r2
 4046c18:	404938c0 	call	404938c <__i2b>
 4046c1c:	1023883a 	mov	r17,r2
 4046c20:	a0000826 	beq	r20,zero,4046c44 <_dtoa_r+0xa0c>
 4046c24:	0580070e 	bge	zero,r22,4046c44 <_dtoa_r+0xa0c>
 4046c28:	a005883a 	mov	r2,r20
 4046c2c:	b500b916 	blt	r22,r20,4046f14 <_dtoa_r+0xcdc>
 4046c30:	d9000817 	ldw	r4,32(sp)
 4046c34:	a0a9c83a 	sub	r20,r20,r2
 4046c38:	b0adc83a 	sub	r22,r22,r2
 4046c3c:	2089c83a 	sub	r4,r4,r2
 4046c40:	d9000815 	stw	r4,32(sp)
 4046c44:	d9800a17 	ldw	r6,40(sp)
 4046c48:	0181810e 	bge	zero,r6,4047250 <_dtoa_r+0x1018>
 4046c4c:	d9c00b17 	ldw	r7,44(sp)
 4046c50:	3800b326 	beq	r7,zero,4046f20 <_dtoa_r+0xce8>
 4046c54:	a800b226 	beq	r21,zero,4046f20 <_dtoa_r+0xce8>
 4046c58:	880b883a 	mov	r5,r17
 4046c5c:	a80d883a 	mov	r6,r21
 4046c60:	e009883a 	mov	r4,fp
 4046c64:	40495c00 	call	40495c0 <__pow5mult>
 4046c68:	d9800917 	ldw	r6,36(sp)
 4046c6c:	100b883a 	mov	r5,r2
 4046c70:	e009883a 	mov	r4,fp
 4046c74:	1023883a 	mov	r17,r2
 4046c78:	40493c80 	call	40493c8 <__multiply>
 4046c7c:	1021883a 	mov	r16,r2
 4046c80:	d8800a17 	ldw	r2,40(sp)
 4046c84:	d9400917 	ldw	r5,36(sp)
 4046c88:	e009883a 	mov	r4,fp
 4046c8c:	1545c83a 	sub	r2,r2,r21
 4046c90:	d8800a15 	stw	r2,40(sp)
 4046c94:	40490280 	call	4049028 <_Bfree>
 4046c98:	d8c00a17 	ldw	r3,40(sp)
 4046c9c:	18009f1e 	bne	r3,zero,4046f1c <_dtoa_r+0xce4>
 4046ca0:	05c00044 	movi	r23,1
 4046ca4:	e009883a 	mov	r4,fp
 4046ca8:	b80b883a 	mov	r5,r23
 4046cac:	404938c0 	call	404938c <__i2b>
 4046cb0:	d9000d17 	ldw	r4,52(sp)
 4046cb4:	102b883a 	mov	r21,r2
 4046cb8:	2000ce26 	beq	r4,zero,4046ff4 <_dtoa_r+0xdbc>
 4046cbc:	200d883a 	mov	r6,r4
 4046cc0:	100b883a 	mov	r5,r2
 4046cc4:	e009883a 	mov	r4,fp
 4046cc8:	40495c00 	call	40495c0 <__pow5mult>
 4046ccc:	d9800317 	ldw	r6,12(sp)
 4046cd0:	102b883a 	mov	r21,r2
 4046cd4:	b981810e 	bge	r23,r6,40472dc <_dtoa_r+0x10a4>
 4046cd8:	0027883a 	mov	r19,zero
 4046cdc:	a8800417 	ldw	r2,16(r21)
 4046ce0:	05c00804 	movi	r23,32
 4046ce4:	10800104 	addi	r2,r2,4
 4046ce8:	1085883a 	add	r2,r2,r2
 4046cec:	1085883a 	add	r2,r2,r2
 4046cf0:	a885883a 	add	r2,r21,r2
 4046cf4:	11000017 	ldw	r4,0(r2)
 4046cf8:	40492740 	call	4049274 <__hi0bits>
 4046cfc:	b885c83a 	sub	r2,r23,r2
 4046d00:	1585883a 	add	r2,r2,r22
 4046d04:	108007cc 	andi	r2,r2,31
 4046d08:	1000b326 	beq	r2,zero,4046fd8 <_dtoa_r+0xda0>
 4046d0c:	00c00804 	movi	r3,32
 4046d10:	1887c83a 	sub	r3,r3,r2
 4046d14:	01000104 	movi	r4,4
 4046d18:	20c2cd0e 	bge	r4,r3,4047850 <_dtoa_r+0x1618>
 4046d1c:	00c00704 	movi	r3,28
 4046d20:	1885c83a 	sub	r2,r3,r2
 4046d24:	d8c00817 	ldw	r3,32(sp)
 4046d28:	a0a9883a 	add	r20,r20,r2
 4046d2c:	b0ad883a 	add	r22,r22,r2
 4046d30:	1887883a 	add	r3,r3,r2
 4046d34:	d8c00815 	stw	r3,32(sp)
 4046d38:	d9800817 	ldw	r6,32(sp)
 4046d3c:	0180040e 	bge	zero,r6,4046d50 <_dtoa_r+0xb18>
 4046d40:	800b883a 	mov	r5,r16
 4046d44:	e009883a 	mov	r4,fp
 4046d48:	40497000 	call	4049700 <__lshift>
 4046d4c:	1021883a 	mov	r16,r2
 4046d50:	0580050e 	bge	zero,r22,4046d68 <_dtoa_r+0xb30>
 4046d54:	a80b883a 	mov	r5,r21
 4046d58:	b00d883a 	mov	r6,r22
 4046d5c:	e009883a 	mov	r4,fp
 4046d60:	40497000 	call	4049700 <__lshift>
 4046d64:	102b883a 	mov	r21,r2
 4046d68:	d9c00e17 	ldw	r7,56(sp)
 4046d6c:	3801211e 	bne	r7,zero,40471f4 <_dtoa_r+0xfbc>
 4046d70:	d9800617 	ldw	r6,24(sp)
 4046d74:	0181380e 	bge	zero,r6,4047258 <_dtoa_r+0x1020>
 4046d78:	d8c00b17 	ldw	r3,44(sp)
 4046d7c:	1800ab1e 	bne	r3,zero,404702c <_dtoa_r+0xdf4>
 4046d80:	dc800717 	ldw	r18,28(sp)
 4046d84:	dcc00617 	ldw	r19,24(sp)
 4046d88:	9029883a 	mov	r20,r18
 4046d8c:	00000206 	br	4046d98 <_dtoa_r+0xb60>
 4046d90:	40490500 	call	4049050 <__multadd>
 4046d94:	1021883a 	mov	r16,r2
 4046d98:	a80b883a 	mov	r5,r21
 4046d9c:	8009883a 	mov	r4,r16
 4046da0:	40460380 	call	4046038 <quorem>
 4046da4:	10800c04 	addi	r2,r2,48
 4046da8:	90800005 	stb	r2,0(r18)
 4046dac:	94800044 	addi	r18,r18,1
 4046db0:	9507c83a 	sub	r3,r18,r20
 4046db4:	000f883a 	mov	r7,zero
 4046db8:	01800284 	movi	r6,10
 4046dbc:	800b883a 	mov	r5,r16
 4046dc0:	e009883a 	mov	r4,fp
 4046dc4:	1cfff216 	blt	r3,r19,4046d90 <__flash_rwdata_start+0xfffec660>
 4046dc8:	1011883a 	mov	r8,r2
 4046dcc:	d8800617 	ldw	r2,24(sp)
 4046dd0:	0082370e 	bge	zero,r2,40476b0 <_dtoa_r+0x1478>
 4046dd4:	d9000717 	ldw	r4,28(sp)
 4046dd8:	0025883a 	mov	r18,zero
 4046ddc:	20af883a 	add	r23,r4,r2
 4046de0:	01800044 	movi	r6,1
 4046de4:	800b883a 	mov	r5,r16
 4046de8:	e009883a 	mov	r4,fp
 4046dec:	da001715 	stw	r8,92(sp)
 4046df0:	40497000 	call	4049700 <__lshift>
 4046df4:	a80b883a 	mov	r5,r21
 4046df8:	1009883a 	mov	r4,r2
 4046dfc:	d8800915 	stw	r2,36(sp)
 4046e00:	40498480 	call	4049848 <__mcmp>
 4046e04:	da001717 	ldw	r8,92(sp)
 4046e08:	0081800e 	bge	zero,r2,404740c <_dtoa_r+0x11d4>
 4046e0c:	b93fffc3 	ldbu	r4,-1(r23)
 4046e10:	b8bfffc4 	addi	r2,r23,-1
 4046e14:	1007883a 	mov	r3,r2
 4046e18:	01800e44 	movi	r6,57
 4046e1c:	d9c00717 	ldw	r7,28(sp)
 4046e20:	00000506 	br	4046e38 <_dtoa_r+0xc00>
 4046e24:	18ffffc4 	addi	r3,r3,-1
 4046e28:	11c12326 	beq	r2,r7,40472b8 <_dtoa_r+0x1080>
 4046e2c:	19000003 	ldbu	r4,0(r3)
 4046e30:	102f883a 	mov	r23,r2
 4046e34:	10bfffc4 	addi	r2,r2,-1
 4046e38:	21403fcc 	andi	r5,r4,255
 4046e3c:	2940201c 	xori	r5,r5,128
 4046e40:	297fe004 	addi	r5,r5,-128
 4046e44:	29bff726 	beq	r5,r6,4046e24 <__flash_rwdata_start+0xfffec6f4>
 4046e48:	21000044 	addi	r4,r4,1
 4046e4c:	11000005 	stb	r4,0(r2)
 4046e50:	a80b883a 	mov	r5,r21
 4046e54:	e009883a 	mov	r4,fp
 4046e58:	40490280 	call	4049028 <_Bfree>
 4046e5c:	883ea026 	beq	r17,zero,40468e0 <__flash_rwdata_start+0xfffec1b0>
 4046e60:	90000426 	beq	r18,zero,4046e74 <_dtoa_r+0xc3c>
 4046e64:	94400326 	beq	r18,r17,4046e74 <_dtoa_r+0xc3c>
 4046e68:	900b883a 	mov	r5,r18
 4046e6c:	e009883a 	mov	r4,fp
 4046e70:	40490280 	call	4049028 <_Bfree>
 4046e74:	880b883a 	mov	r5,r17
 4046e78:	e009883a 	mov	r4,fp
 4046e7c:	40490280 	call	4049028 <_Bfree>
 4046e80:	003e9706 	br	40468e0 <__flash_rwdata_start+0xfffec1b0>
 4046e84:	01800044 	movi	r6,1
 4046e88:	d9800e15 	stw	r6,56(sp)
 4046e8c:	003d9606 	br	40464e8 <__flash_rwdata_start+0xfffebdb8>
 4046e90:	d8800817 	ldw	r2,32(sp)
 4046e94:	d8c00517 	ldw	r3,20(sp)
 4046e98:	d8000d15 	stw	zero,52(sp)
 4046e9c:	10c5c83a 	sub	r2,r2,r3
 4046ea0:	00c9c83a 	sub	r4,zero,r3
 4046ea4:	d8800815 	stw	r2,32(sp)
 4046ea8:	d9000a15 	stw	r4,40(sp)
 4046eac:	003d9706 	br	404650c <__flash_rwdata_start+0xfffebddc>
 4046eb0:	05adc83a 	sub	r22,zero,r22
 4046eb4:	dd800815 	stw	r22,32(sp)
 4046eb8:	002d883a 	mov	r22,zero
 4046ebc:	003d8e06 	br	40464f8 <__flash_rwdata_start+0xfffebdc8>
 4046ec0:	d9000517 	ldw	r4,20(sp)
 4046ec4:	404f6180 	call	404f618 <__floatsidf>
 4046ec8:	100d883a 	mov	r6,r2
 4046ecc:	180f883a 	mov	r7,r3
 4046ed0:	a009883a 	mov	r4,r20
 4046ed4:	880b883a 	mov	r5,r17
 4046ed8:	404e32c0 	call	404e32c <__eqdf2>
 4046edc:	103d7126 	beq	r2,zero,40464a4 <__flash_rwdata_start+0xfffebd74>
 4046ee0:	d9c00517 	ldw	r7,20(sp)
 4046ee4:	39ffffc4 	addi	r7,r7,-1
 4046ee8:	d9c00515 	stw	r7,20(sp)
 4046eec:	003d6d06 	br	40464a4 <__flash_rwdata_start+0xfffebd74>
 4046ef0:	dd400a17 	ldw	r21,40(sp)
 4046ef4:	dd000817 	ldw	r20,32(sp)
 4046ef8:	0023883a 	mov	r17,zero
 4046efc:	003f4806 	br	4046c20 <__flash_rwdata_start+0xfffec4f0>
 4046f00:	10e3c83a 	sub	r17,r2,r3
 4046f04:	9448983a 	sll	r4,r18,r17
 4046f08:	003d3206 	br	40463d4 <__flash_rwdata_start+0xfffebca4>
 4046f0c:	d8000e15 	stw	zero,56(sp)
 4046f10:	003d7506 	br	40464e8 <__flash_rwdata_start+0xfffebdb8>
 4046f14:	b005883a 	mov	r2,r22
 4046f18:	003f4506 	br	4046c30 <__flash_rwdata_start+0xfffec500>
 4046f1c:	dc000915 	stw	r16,36(sp)
 4046f20:	d9800a17 	ldw	r6,40(sp)
 4046f24:	d9400917 	ldw	r5,36(sp)
 4046f28:	e009883a 	mov	r4,fp
 4046f2c:	40495c00 	call	40495c0 <__pow5mult>
 4046f30:	1021883a 	mov	r16,r2
 4046f34:	003f5a06 	br	4046ca0 <__flash_rwdata_start+0xfffec570>
 4046f38:	01c00044 	movi	r7,1
 4046f3c:	d9c00b15 	stw	r7,44(sp)
 4046f40:	d8802217 	ldw	r2,136(sp)
 4046f44:	0081280e 	bge	zero,r2,40473e8 <_dtoa_r+0x11b0>
 4046f48:	100d883a 	mov	r6,r2
 4046f4c:	1021883a 	mov	r16,r2
 4046f50:	d8800c15 	stw	r2,48(sp)
 4046f54:	d8800615 	stw	r2,24(sp)
 4046f58:	003d8806 	br	404657c <__flash_rwdata_start+0xfffebe4c>
 4046f5c:	d8800617 	ldw	r2,24(sp)
 4046f60:	00be9b16 	blt	zero,r2,40469d0 <__flash_rwdata_start+0xfffec2a0>
 4046f64:	10010f1e 	bne	r2,zero,40473a4 <_dtoa_r+0x116c>
 4046f68:	880b883a 	mov	r5,r17
 4046f6c:	000d883a 	mov	r6,zero
 4046f70:	01d00534 	movhi	r7,16404
 4046f74:	8009883a 	mov	r4,r16
 4046f78:	404e5840 	call	404e584 <__muldf3>
 4046f7c:	900d883a 	mov	r6,r18
 4046f80:	980f883a 	mov	r7,r19
 4046f84:	1009883a 	mov	r4,r2
 4046f88:	180b883a 	mov	r5,r3
 4046f8c:	404e3b40 	call	404e3b4 <__gedf2>
 4046f90:	002b883a 	mov	r21,zero
 4046f94:	0023883a 	mov	r17,zero
 4046f98:	1000bf16 	blt	r2,zero,4047298 <_dtoa_r+0x1060>
 4046f9c:	d9802217 	ldw	r6,136(sp)
 4046fa0:	ddc00717 	ldw	r23,28(sp)
 4046fa4:	018c303a 	nor	r6,zero,r6
 4046fa8:	d9800515 	stw	r6,20(sp)
 4046fac:	a80b883a 	mov	r5,r21
 4046fb0:	e009883a 	mov	r4,fp
 4046fb4:	40490280 	call	4049028 <_Bfree>
 4046fb8:	883e4926 	beq	r17,zero,40468e0 <__flash_rwdata_start+0xfffec1b0>
 4046fbc:	003fad06 	br	4046e74 <__flash_rwdata_start+0xfffec744>
 4046fc0:	d9c01117 	ldw	r7,68(sp)
 4046fc4:	3801bc26 	beq	r7,zero,40476b8 <_dtoa_r+0x1480>
 4046fc8:	10810cc4 	addi	r2,r2,1075
 4046fcc:	dd400a17 	ldw	r21,40(sp)
 4046fd0:	dd000817 	ldw	r20,32(sp)
 4046fd4:	003f0a06 	br	4046c00 <__flash_rwdata_start+0xfffec4d0>
 4046fd8:	00800704 	movi	r2,28
 4046fdc:	d9000817 	ldw	r4,32(sp)
 4046fe0:	a0a9883a 	add	r20,r20,r2
 4046fe4:	b0ad883a 	add	r22,r22,r2
 4046fe8:	2089883a 	add	r4,r4,r2
 4046fec:	d9000815 	stw	r4,32(sp)
 4046ff0:	003f5106 	br	4046d38 <__flash_rwdata_start+0xfffec608>
 4046ff4:	d8c00317 	ldw	r3,12(sp)
 4046ff8:	b8c1fc0e 	bge	r23,r3,40477ec <_dtoa_r+0x15b4>
 4046ffc:	0027883a 	mov	r19,zero
 4047000:	b805883a 	mov	r2,r23
 4047004:	003f3e06 	br	4046d00 <__flash_rwdata_start+0xfffec5d0>
 4047008:	880b883a 	mov	r5,r17
 404700c:	e009883a 	mov	r4,fp
 4047010:	000f883a 	mov	r7,zero
 4047014:	01800284 	movi	r6,10
 4047018:	40490500 	call	4049050 <__multadd>
 404701c:	d9000c17 	ldw	r4,48(sp)
 4047020:	1023883a 	mov	r17,r2
 4047024:	0102040e 	bge	zero,r4,4047838 <_dtoa_r+0x1600>
 4047028:	d9000615 	stw	r4,24(sp)
 404702c:	0500050e 	bge	zero,r20,4047044 <_dtoa_r+0xe0c>
 4047030:	880b883a 	mov	r5,r17
 4047034:	a00d883a 	mov	r6,r20
 4047038:	e009883a 	mov	r4,fp
 404703c:	40497000 	call	4049700 <__lshift>
 4047040:	1023883a 	mov	r17,r2
 4047044:	9801241e 	bne	r19,zero,40474d8 <_dtoa_r+0x12a0>
 4047048:	8829883a 	mov	r20,r17
 404704c:	d9000617 	ldw	r4,24(sp)
 4047050:	dcc00717 	ldw	r19,28(sp)
 4047054:	9480004c 	andi	r18,r18,1
 4047058:	20bfffc4 	addi	r2,r4,-1
 404705c:	9885883a 	add	r2,r19,r2
 4047060:	d8800415 	stw	r2,16(sp)
 4047064:	dc800615 	stw	r18,24(sp)
 4047068:	a80b883a 	mov	r5,r21
 404706c:	8009883a 	mov	r4,r16
 4047070:	40460380 	call	4046038 <quorem>
 4047074:	880b883a 	mov	r5,r17
 4047078:	8009883a 	mov	r4,r16
 404707c:	102f883a 	mov	r23,r2
 4047080:	40498480 	call	4049848 <__mcmp>
 4047084:	a80b883a 	mov	r5,r21
 4047088:	a00d883a 	mov	r6,r20
 404708c:	e009883a 	mov	r4,fp
 4047090:	102d883a 	mov	r22,r2
 4047094:	40498a80 	call	40498a8 <__mdiff>
 4047098:	1007883a 	mov	r3,r2
 404709c:	10800317 	ldw	r2,12(r2)
 40470a0:	bc800c04 	addi	r18,r23,48
 40470a4:	180b883a 	mov	r5,r3
 40470a8:	10004e1e 	bne	r2,zero,40471e4 <_dtoa_r+0xfac>
 40470ac:	8009883a 	mov	r4,r16
 40470b0:	d8c01615 	stw	r3,88(sp)
 40470b4:	40498480 	call	4049848 <__mcmp>
 40470b8:	d8c01617 	ldw	r3,88(sp)
 40470bc:	e009883a 	mov	r4,fp
 40470c0:	d8801615 	stw	r2,88(sp)
 40470c4:	180b883a 	mov	r5,r3
 40470c8:	40490280 	call	4049028 <_Bfree>
 40470cc:	d8801617 	ldw	r2,88(sp)
 40470d0:	1000041e 	bne	r2,zero,40470e4 <_dtoa_r+0xeac>
 40470d4:	d9800317 	ldw	r6,12(sp)
 40470d8:	3000021e 	bne	r6,zero,40470e4 <_dtoa_r+0xeac>
 40470dc:	d8c00617 	ldw	r3,24(sp)
 40470e0:	18003726 	beq	r3,zero,40471c0 <_dtoa_r+0xf88>
 40470e4:	b0002016 	blt	r22,zero,4047168 <_dtoa_r+0xf30>
 40470e8:	b000041e 	bne	r22,zero,40470fc <_dtoa_r+0xec4>
 40470ec:	d9000317 	ldw	r4,12(sp)
 40470f0:	2000021e 	bne	r4,zero,40470fc <_dtoa_r+0xec4>
 40470f4:	d8c00617 	ldw	r3,24(sp)
 40470f8:	18001b26 	beq	r3,zero,4047168 <_dtoa_r+0xf30>
 40470fc:	00810716 	blt	zero,r2,404751c <_dtoa_r+0x12e4>
 4047100:	d8c00417 	ldw	r3,16(sp)
 4047104:	9d800044 	addi	r22,r19,1
 4047108:	9c800005 	stb	r18,0(r19)
 404710c:	b02f883a 	mov	r23,r22
 4047110:	98c10626 	beq	r19,r3,404752c <_dtoa_r+0x12f4>
 4047114:	800b883a 	mov	r5,r16
 4047118:	000f883a 	mov	r7,zero
 404711c:	01800284 	movi	r6,10
 4047120:	e009883a 	mov	r4,fp
 4047124:	40490500 	call	4049050 <__multadd>
 4047128:	1021883a 	mov	r16,r2
 404712c:	000f883a 	mov	r7,zero
 4047130:	01800284 	movi	r6,10
 4047134:	880b883a 	mov	r5,r17
 4047138:	e009883a 	mov	r4,fp
 404713c:	8d002526 	beq	r17,r20,40471d4 <_dtoa_r+0xf9c>
 4047140:	40490500 	call	4049050 <__multadd>
 4047144:	a00b883a 	mov	r5,r20
 4047148:	000f883a 	mov	r7,zero
 404714c:	01800284 	movi	r6,10
 4047150:	e009883a 	mov	r4,fp
 4047154:	1023883a 	mov	r17,r2
 4047158:	40490500 	call	4049050 <__multadd>
 404715c:	1029883a 	mov	r20,r2
 4047160:	b027883a 	mov	r19,r22
 4047164:	003fc006 	br	4047068 <__flash_rwdata_start+0xfffec938>
 4047168:	9011883a 	mov	r8,r18
 404716c:	00800e0e 	bge	zero,r2,40471a8 <_dtoa_r+0xf70>
 4047170:	800b883a 	mov	r5,r16
 4047174:	01800044 	movi	r6,1
 4047178:	e009883a 	mov	r4,fp
 404717c:	da001715 	stw	r8,92(sp)
 4047180:	40497000 	call	4049700 <__lshift>
 4047184:	a80b883a 	mov	r5,r21
 4047188:	1009883a 	mov	r4,r2
 404718c:	1021883a 	mov	r16,r2
 4047190:	40498480 	call	4049848 <__mcmp>
 4047194:	da001717 	ldw	r8,92(sp)
 4047198:	0081960e 	bge	zero,r2,40477f4 <_dtoa_r+0x15bc>
 404719c:	00800e44 	movi	r2,57
 40471a0:	40817026 	beq	r8,r2,4047764 <_dtoa_r+0x152c>
 40471a4:	ba000c44 	addi	r8,r23,49
 40471a8:	8825883a 	mov	r18,r17
 40471ac:	9dc00044 	addi	r23,r19,1
 40471b0:	9a000005 	stb	r8,0(r19)
 40471b4:	a023883a 	mov	r17,r20
 40471b8:	dc000915 	stw	r16,36(sp)
 40471bc:	003f2406 	br	4046e50 <__flash_rwdata_start+0xfffec720>
 40471c0:	00800e44 	movi	r2,57
 40471c4:	9011883a 	mov	r8,r18
 40471c8:	90816626 	beq	r18,r2,4047764 <_dtoa_r+0x152c>
 40471cc:	05bff516 	blt	zero,r22,40471a4 <__flash_rwdata_start+0xfffeca74>
 40471d0:	003ff506 	br	40471a8 <__flash_rwdata_start+0xfffeca78>
 40471d4:	40490500 	call	4049050 <__multadd>
 40471d8:	1023883a 	mov	r17,r2
 40471dc:	1029883a 	mov	r20,r2
 40471e0:	003fdf06 	br	4047160 <__flash_rwdata_start+0xfffeca30>
 40471e4:	e009883a 	mov	r4,fp
 40471e8:	40490280 	call	4049028 <_Bfree>
 40471ec:	00800044 	movi	r2,1
 40471f0:	003fbc06 	br	40470e4 <__flash_rwdata_start+0xfffec9b4>
 40471f4:	a80b883a 	mov	r5,r21
 40471f8:	8009883a 	mov	r4,r16
 40471fc:	40498480 	call	4049848 <__mcmp>
 4047200:	103edb0e 	bge	r2,zero,4046d70 <__flash_rwdata_start+0xfffec640>
 4047204:	800b883a 	mov	r5,r16
 4047208:	000f883a 	mov	r7,zero
 404720c:	01800284 	movi	r6,10
 4047210:	e009883a 	mov	r4,fp
 4047214:	40490500 	call	4049050 <__multadd>
 4047218:	1021883a 	mov	r16,r2
 404721c:	d8800517 	ldw	r2,20(sp)
 4047220:	d8c00b17 	ldw	r3,44(sp)
 4047224:	10bfffc4 	addi	r2,r2,-1
 4047228:	d8800515 	stw	r2,20(sp)
 404722c:	183f761e 	bne	r3,zero,4047008 <__flash_rwdata_start+0xfffec8d8>
 4047230:	d9000c17 	ldw	r4,48(sp)
 4047234:	0101730e 	bge	zero,r4,4047804 <_dtoa_r+0x15cc>
 4047238:	d9000615 	stw	r4,24(sp)
 404723c:	003ed006 	br	4046d80 <__flash_rwdata_start+0xfffec650>
 4047240:	00800084 	movi	r2,2
 4047244:	3081861e 	bne	r6,r2,4047860 <_dtoa_r+0x1628>
 4047248:	d8000b15 	stw	zero,44(sp)
 404724c:	003f3c06 	br	4046f40 <__flash_rwdata_start+0xfffec810>
 4047250:	dc000917 	ldw	r16,36(sp)
 4047254:	003e9206 	br	4046ca0 <__flash_rwdata_start+0xfffec570>
 4047258:	d9c00317 	ldw	r7,12(sp)
 404725c:	00800084 	movi	r2,2
 4047260:	11fec50e 	bge	r2,r7,4046d78 <__flash_rwdata_start+0xfffec648>
 4047264:	d9000617 	ldw	r4,24(sp)
 4047268:	20013c1e 	bne	r4,zero,404775c <_dtoa_r+0x1524>
 404726c:	a80b883a 	mov	r5,r21
 4047270:	000f883a 	mov	r7,zero
 4047274:	01800144 	movi	r6,5
 4047278:	e009883a 	mov	r4,fp
 404727c:	40490500 	call	4049050 <__multadd>
 4047280:	100b883a 	mov	r5,r2
 4047284:	8009883a 	mov	r4,r16
 4047288:	102b883a 	mov	r21,r2
 404728c:	40498480 	call	4049848 <__mcmp>
 4047290:	dc000915 	stw	r16,36(sp)
 4047294:	00bf410e 	bge	zero,r2,4046f9c <__flash_rwdata_start+0xfffec86c>
 4047298:	d9c00717 	ldw	r7,28(sp)
 404729c:	00800c44 	movi	r2,49
 40472a0:	38800005 	stb	r2,0(r7)
 40472a4:	d8800517 	ldw	r2,20(sp)
 40472a8:	3dc00044 	addi	r23,r7,1
 40472ac:	10800044 	addi	r2,r2,1
 40472b0:	d8800515 	stw	r2,20(sp)
 40472b4:	003f3d06 	br	4046fac <__flash_rwdata_start+0xfffec87c>
 40472b8:	d9800517 	ldw	r6,20(sp)
 40472bc:	d9c00717 	ldw	r7,28(sp)
 40472c0:	00800c44 	movi	r2,49
 40472c4:	31800044 	addi	r6,r6,1
 40472c8:	d9800515 	stw	r6,20(sp)
 40472cc:	38800005 	stb	r2,0(r7)
 40472d0:	003edf06 	br	4046e50 <__flash_rwdata_start+0xfffec720>
 40472d4:	d8000b15 	stw	zero,44(sp)
 40472d8:	003c9f06 	br	4046558 <__flash_rwdata_start+0xfffebe28>
 40472dc:	903e7e1e 	bne	r18,zero,4046cd8 <__flash_rwdata_start+0xfffec5a8>
 40472e0:	00800434 	movhi	r2,16
 40472e4:	10bfffc4 	addi	r2,r2,-1
 40472e8:	9884703a 	and	r2,r19,r2
 40472ec:	1000ea1e 	bne	r2,zero,4047698 <_dtoa_r+0x1460>
 40472f0:	9cdffc2c 	andhi	r19,r19,32752
 40472f4:	9800e826 	beq	r19,zero,4047698 <_dtoa_r+0x1460>
 40472f8:	d9c00817 	ldw	r7,32(sp)
 40472fc:	b5800044 	addi	r22,r22,1
 4047300:	04c00044 	movi	r19,1
 4047304:	39c00044 	addi	r7,r7,1
 4047308:	d9c00815 	stw	r7,32(sp)
 404730c:	d8800d17 	ldw	r2,52(sp)
 4047310:	103e721e 	bne	r2,zero,4046cdc <__flash_rwdata_start+0xfffec5ac>
 4047314:	00800044 	movi	r2,1
 4047318:	003e7906 	br	4046d00 <__flash_rwdata_start+0xfffec5d0>
 404731c:	8009883a 	mov	r4,r16
 4047320:	404f6180 	call	404f618 <__floatsidf>
 4047324:	d9800f17 	ldw	r6,60(sp)
 4047328:	d9c01017 	ldw	r7,64(sp)
 404732c:	1009883a 	mov	r4,r2
 4047330:	180b883a 	mov	r5,r3
 4047334:	404e5840 	call	404e584 <__muldf3>
 4047338:	000d883a 	mov	r6,zero
 404733c:	01d00734 	movhi	r7,16412
 4047340:	1009883a 	mov	r4,r2
 4047344:	180b883a 	mov	r5,r3
 4047348:	404d1980 	call	404d198 <__adddf3>
 404734c:	047f3034 	movhi	r17,64704
 4047350:	1021883a 	mov	r16,r2
 4047354:	1c63883a 	add	r17,r3,r17
 4047358:	d9000f17 	ldw	r4,60(sp)
 404735c:	d9401017 	ldw	r5,64(sp)
 4047360:	000d883a 	mov	r6,zero
 4047364:	01d00534 	movhi	r7,16404
 4047368:	404ec9c0 	call	404ec9c <__subdf3>
 404736c:	800d883a 	mov	r6,r16
 4047370:	880f883a 	mov	r7,r17
 4047374:	1009883a 	mov	r4,r2
 4047378:	180b883a 	mov	r5,r3
 404737c:	102b883a 	mov	r21,r2
 4047380:	1829883a 	mov	r20,r3
 4047384:	404e3b40 	call	404e3b4 <__gedf2>
 4047388:	00806c16 	blt	zero,r2,404753c <_dtoa_r+0x1304>
 404738c:	89e0003c 	xorhi	r7,r17,32768
 4047390:	800d883a 	mov	r6,r16
 4047394:	a809883a 	mov	r4,r21
 4047398:	a00b883a 	mov	r5,r20
 404739c:	404e4900 	call	404e490 <__ledf2>
 40473a0:	103d7e0e 	bge	r2,zero,404699c <__flash_rwdata_start+0xfffec26c>
 40473a4:	002b883a 	mov	r21,zero
 40473a8:	0023883a 	mov	r17,zero
 40473ac:	003efb06 	br	4046f9c <__flash_rwdata_start+0xfffec86c>
 40473b0:	d8800717 	ldw	r2,28(sp)
 40473b4:	003bd006 	br	40462f8 <__flash_rwdata_start+0xfffebbc8>
 40473b8:	d9000a17 	ldw	r4,40(sp)
 40473bc:	d9800d17 	ldw	r6,52(sp)
 40473c0:	dd400a15 	stw	r21,40(sp)
 40473c4:	a905c83a 	sub	r2,r21,r4
 40473c8:	308d883a 	add	r6,r6,r2
 40473cc:	d9800d15 	stw	r6,52(sp)
 40473d0:	002b883a 	mov	r21,zero
 40473d4:	003e0606 	br	4046bf0 <__flash_rwdata_start+0xfffec4c0>
 40473d8:	9023883a 	mov	r17,r18
 40473dc:	9829883a 	mov	r20,r19
 40473e0:	04000084 	movi	r16,2
 40473e4:	003c9206 	br	4046630 <__flash_rwdata_start+0xfffebf00>
 40473e8:	04000044 	movi	r16,1
 40473ec:	dc000c15 	stw	r16,48(sp)
 40473f0:	dc000615 	stw	r16,24(sp)
 40473f4:	dc002215 	stw	r16,136(sp)
 40473f8:	e0001115 	stw	zero,68(fp)
 40473fc:	000b883a 	mov	r5,zero
 4047400:	003c6906 	br	40465a8 <__flash_rwdata_start+0xfffebe78>
 4047404:	3021883a 	mov	r16,r6
 4047408:	003ffb06 	br	40473f8 <__flash_rwdata_start+0xfffeccc8>
 404740c:	1000021e 	bne	r2,zero,4047418 <_dtoa_r+0x11e0>
 4047410:	4200004c 	andi	r8,r8,1
 4047414:	403e7d1e 	bne	r8,zero,4046e0c <__flash_rwdata_start+0xfffec6dc>
 4047418:	01000c04 	movi	r4,48
 404741c:	00000106 	br	4047424 <_dtoa_r+0x11ec>
 4047420:	102f883a 	mov	r23,r2
 4047424:	b8bfffc4 	addi	r2,r23,-1
 4047428:	10c00007 	ldb	r3,0(r2)
 404742c:	193ffc26 	beq	r3,r4,4047420 <__flash_rwdata_start+0xfffeccf0>
 4047430:	003e8706 	br	4046e50 <__flash_rwdata_start+0xfffec720>
 4047434:	d8800517 	ldw	r2,20(sp)
 4047438:	00a3c83a 	sub	r17,zero,r2
 404743c:	8800a426 	beq	r17,zero,40476d0 <_dtoa_r+0x1498>
 4047440:	888003cc 	andi	r2,r17,15
 4047444:	100490fa 	slli	r2,r2,3
 4047448:	00c08034 	movhi	r3,512
 404744c:	18c0cb04 	addi	r3,r3,812
 4047450:	1885883a 	add	r2,r3,r2
 4047454:	11800017 	ldw	r6,0(r2)
 4047458:	11c00117 	ldw	r7,4(r2)
 404745c:	9009883a 	mov	r4,r18
 4047460:	980b883a 	mov	r5,r19
 4047464:	8823d13a 	srai	r17,r17,4
 4047468:	404e5840 	call	404e584 <__muldf3>
 404746c:	d8800f15 	stw	r2,60(sp)
 4047470:	d8c01015 	stw	r3,64(sp)
 4047474:	8800e826 	beq	r17,zero,4047818 <_dtoa_r+0x15e0>
 4047478:	05008034 	movhi	r20,512
 404747c:	a500c104 	addi	r20,r20,772
 4047480:	04000084 	movi	r16,2
 4047484:	8980004c 	andi	r6,r17,1
 4047488:	1009883a 	mov	r4,r2
 404748c:	8823d07a 	srai	r17,r17,1
 4047490:	180b883a 	mov	r5,r3
 4047494:	30000426 	beq	r6,zero,40474a8 <_dtoa_r+0x1270>
 4047498:	a1800017 	ldw	r6,0(r20)
 404749c:	a1c00117 	ldw	r7,4(r20)
 40474a0:	84000044 	addi	r16,r16,1
 40474a4:	404e5840 	call	404e584 <__muldf3>
 40474a8:	a5000204 	addi	r20,r20,8
 40474ac:	883ff51e 	bne	r17,zero,4047484 <__flash_rwdata_start+0xfffecd54>
 40474b0:	d8800f15 	stw	r2,60(sp)
 40474b4:	d8c01015 	stw	r3,64(sp)
 40474b8:	003c7606 	br	4046694 <__flash_rwdata_start+0xfffebf64>
 40474bc:	00c00c04 	movi	r3,48
 40474c0:	10c00005 	stb	r3,0(r2)
 40474c4:	d8c00517 	ldw	r3,20(sp)
 40474c8:	bd3fffc3 	ldbu	r20,-1(r23)
 40474cc:	18c00044 	addi	r3,r3,1
 40474d0:	d8c00515 	stw	r3,20(sp)
 40474d4:	003db906 	br	4046bbc <__flash_rwdata_start+0xfffec48c>
 40474d8:	89400117 	ldw	r5,4(r17)
 40474dc:	e009883a 	mov	r4,fp
 40474e0:	4048f800 	call	4048f80 <_Balloc>
 40474e4:	89800417 	ldw	r6,16(r17)
 40474e8:	89400304 	addi	r5,r17,12
 40474ec:	11000304 	addi	r4,r2,12
 40474f0:	31800084 	addi	r6,r6,2
 40474f4:	318d883a 	add	r6,r6,r6
 40474f8:	318d883a 	add	r6,r6,r6
 40474fc:	1027883a 	mov	r19,r2
 4047500:	40438a00 	call	40438a0 <memcpy>
 4047504:	01800044 	movi	r6,1
 4047508:	980b883a 	mov	r5,r19
 404750c:	e009883a 	mov	r4,fp
 4047510:	40497000 	call	4049700 <__lshift>
 4047514:	1029883a 	mov	r20,r2
 4047518:	003ecc06 	br	404704c <__flash_rwdata_start+0xfffec91c>
 404751c:	00800e44 	movi	r2,57
 4047520:	90809026 	beq	r18,r2,4047764 <_dtoa_r+0x152c>
 4047524:	92000044 	addi	r8,r18,1
 4047528:	003f1f06 	br	40471a8 <__flash_rwdata_start+0xfffeca78>
 404752c:	9011883a 	mov	r8,r18
 4047530:	8825883a 	mov	r18,r17
 4047534:	a023883a 	mov	r17,r20
 4047538:	003e2906 	br	4046de0 <__flash_rwdata_start+0xfffec6b0>
 404753c:	002b883a 	mov	r21,zero
 4047540:	0023883a 	mov	r17,zero
 4047544:	003f5406 	br	4047298 <__flash_rwdata_start+0xfffecb68>
 4047548:	61bfffc4 	addi	r6,r12,-1
 404754c:	300490fa 	slli	r2,r6,3
 4047550:	00c08034 	movhi	r3,512
 4047554:	18c0cb04 	addi	r3,r3,812
 4047558:	1885883a 	add	r2,r3,r2
 404755c:	11000017 	ldw	r4,0(r2)
 4047560:	11400117 	ldw	r5,4(r2)
 4047564:	d8800717 	ldw	r2,28(sp)
 4047568:	880f883a 	mov	r7,r17
 404756c:	d9801215 	stw	r6,72(sp)
 4047570:	800d883a 	mov	r6,r16
 4047574:	db001615 	stw	r12,88(sp)
 4047578:	15c00044 	addi	r23,r2,1
 404757c:	404e5840 	call	404e584 <__muldf3>
 4047580:	d9401017 	ldw	r5,64(sp)
 4047584:	d9000f17 	ldw	r4,60(sp)
 4047588:	d8c01515 	stw	r3,84(sp)
 404758c:	d8801415 	stw	r2,80(sp)
 4047590:	404f5980 	call	404f598 <__fixdfsi>
 4047594:	1009883a 	mov	r4,r2
 4047598:	1021883a 	mov	r16,r2
 404759c:	404f6180 	call	404f618 <__floatsidf>
 40475a0:	d9000f17 	ldw	r4,60(sp)
 40475a4:	d9401017 	ldw	r5,64(sp)
 40475a8:	100d883a 	mov	r6,r2
 40475ac:	180f883a 	mov	r7,r3
 40475b0:	404ec9c0 	call	404ec9c <__subdf3>
 40475b4:	1829883a 	mov	r20,r3
 40475b8:	d8c00717 	ldw	r3,28(sp)
 40475bc:	84000c04 	addi	r16,r16,48
 40475c0:	1023883a 	mov	r17,r2
 40475c4:	1c000005 	stb	r16,0(r3)
 40475c8:	db001617 	ldw	r12,88(sp)
 40475cc:	00800044 	movi	r2,1
 40475d0:	60802226 	beq	r12,r2,404765c <_dtoa_r+0x1424>
 40475d4:	d9c00717 	ldw	r7,28(sp)
 40475d8:	8805883a 	mov	r2,r17
 40475dc:	b82b883a 	mov	r21,r23
 40475e0:	3b19883a 	add	r12,r7,r12
 40475e4:	6023883a 	mov	r17,r12
 40475e8:	a007883a 	mov	r3,r20
 40475ec:	dc800f15 	stw	r18,60(sp)
 40475f0:	000d883a 	mov	r6,zero
 40475f4:	01d00934 	movhi	r7,16420
 40475f8:	1009883a 	mov	r4,r2
 40475fc:	180b883a 	mov	r5,r3
 4047600:	404e5840 	call	404e584 <__muldf3>
 4047604:	180b883a 	mov	r5,r3
 4047608:	1009883a 	mov	r4,r2
 404760c:	1829883a 	mov	r20,r3
 4047610:	1025883a 	mov	r18,r2
 4047614:	404f5980 	call	404f598 <__fixdfsi>
 4047618:	1009883a 	mov	r4,r2
 404761c:	1021883a 	mov	r16,r2
 4047620:	404f6180 	call	404f618 <__floatsidf>
 4047624:	100d883a 	mov	r6,r2
 4047628:	180f883a 	mov	r7,r3
 404762c:	9009883a 	mov	r4,r18
 4047630:	a00b883a 	mov	r5,r20
 4047634:	84000c04 	addi	r16,r16,48
 4047638:	404ec9c0 	call	404ec9c <__subdf3>
 404763c:	ad400044 	addi	r21,r21,1
 4047640:	ac3fffc5 	stb	r16,-1(r21)
 4047644:	ac7fea1e 	bne	r21,r17,40475f0 <__flash_rwdata_start+0xfffecec0>
 4047648:	1023883a 	mov	r17,r2
 404764c:	d8801217 	ldw	r2,72(sp)
 4047650:	dc800f17 	ldw	r18,60(sp)
 4047654:	1829883a 	mov	r20,r3
 4047658:	b8af883a 	add	r23,r23,r2
 404765c:	d9001417 	ldw	r4,80(sp)
 4047660:	d9401517 	ldw	r5,84(sp)
 4047664:	000d883a 	mov	r6,zero
 4047668:	01cff834 	movhi	r7,16352
 404766c:	404d1980 	call	404d198 <__adddf3>
 4047670:	880d883a 	mov	r6,r17
 4047674:	a00f883a 	mov	r7,r20
 4047678:	1009883a 	mov	r4,r2
 404767c:	180b883a 	mov	r5,r3
 4047680:	404e4900 	call	404e490 <__ledf2>
 4047684:	10003e0e 	bge	r2,zero,4047780 <_dtoa_r+0x1548>
 4047688:	d9001317 	ldw	r4,76(sp)
 404768c:	bd3fffc3 	ldbu	r20,-1(r23)
 4047690:	d9000515 	stw	r4,20(sp)
 4047694:	003d3b06 	br	4046b84 <__flash_rwdata_start+0xfffec454>
 4047698:	0027883a 	mov	r19,zero
 404769c:	003f1b06 	br	404730c <__flash_rwdata_start+0xfffecbdc>
 40476a0:	d8800817 	ldw	r2,32(sp)
 40476a4:	11e9c83a 	sub	r20,r2,r7
 40476a8:	0005883a 	mov	r2,zero
 40476ac:	003d5406 	br	4046c00 <__flash_rwdata_start+0xfffec4d0>
 40476b0:	00800044 	movi	r2,1
 40476b4:	003dc706 	br	4046dd4 <__flash_rwdata_start+0xfffec6a4>
 40476b8:	d8c00217 	ldw	r3,8(sp)
 40476bc:	00800d84 	movi	r2,54
 40476c0:	dd400a17 	ldw	r21,40(sp)
 40476c4:	10c5c83a 	sub	r2,r2,r3
 40476c8:	dd000817 	ldw	r20,32(sp)
 40476cc:	003d4c06 	br	4046c00 <__flash_rwdata_start+0xfffec4d0>
 40476d0:	dc800f15 	stw	r18,60(sp)
 40476d4:	dcc01015 	stw	r19,64(sp)
 40476d8:	04000084 	movi	r16,2
 40476dc:	003bed06 	br	4046694 <__flash_rwdata_start+0xfffebf64>
 40476e0:	d9000617 	ldw	r4,24(sp)
 40476e4:	203f0d26 	beq	r4,zero,404731c <__flash_rwdata_start+0xfffecbec>
 40476e8:	d9800c17 	ldw	r6,48(sp)
 40476ec:	01bcab0e 	bge	zero,r6,404699c <__flash_rwdata_start+0xfffec26c>
 40476f0:	d9401017 	ldw	r5,64(sp)
 40476f4:	d9000f17 	ldw	r4,60(sp)
 40476f8:	000d883a 	mov	r6,zero
 40476fc:	01d00934 	movhi	r7,16420
 4047700:	404e5840 	call	404e584 <__muldf3>
 4047704:	81000044 	addi	r4,r16,1
 4047708:	d8800f15 	stw	r2,60(sp)
 404770c:	d8c01015 	stw	r3,64(sp)
 4047710:	404f6180 	call	404f618 <__floatsidf>
 4047714:	d9800f17 	ldw	r6,60(sp)
 4047718:	d9c01017 	ldw	r7,64(sp)
 404771c:	1009883a 	mov	r4,r2
 4047720:	180b883a 	mov	r5,r3
 4047724:	404e5840 	call	404e584 <__muldf3>
 4047728:	01d00734 	movhi	r7,16412
 404772c:	000d883a 	mov	r6,zero
 4047730:	1009883a 	mov	r4,r2
 4047734:	180b883a 	mov	r5,r3
 4047738:	404d1980 	call	404d198 <__adddf3>
 404773c:	d9c00517 	ldw	r7,20(sp)
 4047740:	047f3034 	movhi	r17,64704
 4047744:	1021883a 	mov	r16,r2
 4047748:	39ffffc4 	addi	r7,r7,-1
 404774c:	d9c01315 	stw	r7,76(sp)
 4047750:	1c63883a 	add	r17,r3,r17
 4047754:	db000c17 	ldw	r12,48(sp)
 4047758:	003bea06 	br	4046704 <__flash_rwdata_start+0xfffebfd4>
 404775c:	dc000915 	stw	r16,36(sp)
 4047760:	003e0e06 	br	4046f9c <__flash_rwdata_start+0xfffec86c>
 4047764:	01000e44 	movi	r4,57
 4047768:	8825883a 	mov	r18,r17
 404776c:	9dc00044 	addi	r23,r19,1
 4047770:	99000005 	stb	r4,0(r19)
 4047774:	a023883a 	mov	r17,r20
 4047778:	dc000915 	stw	r16,36(sp)
 404777c:	003da406 	br	4046e10 <__flash_rwdata_start+0xfffec6e0>
 4047780:	d9801417 	ldw	r6,80(sp)
 4047784:	d9c01517 	ldw	r7,84(sp)
 4047788:	0009883a 	mov	r4,zero
 404778c:	014ff834 	movhi	r5,16352
 4047790:	404ec9c0 	call	404ec9c <__subdf3>
 4047794:	880d883a 	mov	r6,r17
 4047798:	a00f883a 	mov	r7,r20
 404779c:	1009883a 	mov	r4,r2
 40477a0:	180b883a 	mov	r5,r3
 40477a4:	404e3b40 	call	404e3b4 <__gedf2>
 40477a8:	00bc7c0e 	bge	zero,r2,404699c <__flash_rwdata_start+0xfffec26c>
 40477ac:	01000c04 	movi	r4,48
 40477b0:	00000106 	br	40477b8 <_dtoa_r+0x1580>
 40477b4:	102f883a 	mov	r23,r2
 40477b8:	b8bfffc4 	addi	r2,r23,-1
 40477bc:	10c00007 	ldb	r3,0(r2)
 40477c0:	193ffc26 	beq	r3,r4,40477b4 <__flash_rwdata_start+0xfffed084>
 40477c4:	d9801317 	ldw	r6,76(sp)
 40477c8:	d9800515 	stw	r6,20(sp)
 40477cc:	003c4406 	br	40468e0 <__flash_rwdata_start+0xfffec1b0>
 40477d0:	d9801317 	ldw	r6,76(sp)
 40477d4:	d9800515 	stw	r6,20(sp)
 40477d8:	003cea06 	br	4046b84 <__flash_rwdata_start+0xfffec454>
 40477dc:	dd800f17 	ldw	r22,60(sp)
 40477e0:	dcc01017 	ldw	r19,64(sp)
 40477e4:	dc801217 	ldw	r18,72(sp)
 40477e8:	003c6c06 	br	404699c <__flash_rwdata_start+0xfffec26c>
 40477ec:	903e031e 	bne	r18,zero,4046ffc <__flash_rwdata_start+0xfffec8cc>
 40477f0:	003ebb06 	br	40472e0 <__flash_rwdata_start+0xfffecbb0>
 40477f4:	103e6c1e 	bne	r2,zero,40471a8 <__flash_rwdata_start+0xfffeca78>
 40477f8:	4080004c 	andi	r2,r8,1
 40477fc:	103e6a26 	beq	r2,zero,40471a8 <__flash_rwdata_start+0xfffeca78>
 4047800:	003e6606 	br	404719c <__flash_rwdata_start+0xfffeca6c>
 4047804:	d8c00317 	ldw	r3,12(sp)
 4047808:	00800084 	movi	r2,2
 404780c:	10c02916 	blt	r2,r3,40478b4 <_dtoa_r+0x167c>
 4047810:	d9000c17 	ldw	r4,48(sp)
 4047814:	003e8806 	br	4047238 <__flash_rwdata_start+0xfffecb08>
 4047818:	04000084 	movi	r16,2
 404781c:	003b9d06 	br	4046694 <__flash_rwdata_start+0xfffebf64>
 4047820:	d9001317 	ldw	r4,76(sp)
 4047824:	d9000515 	stw	r4,20(sp)
 4047828:	003cd606 	br	4046b84 <__flash_rwdata_start+0xfffec454>
 404782c:	d8801317 	ldw	r2,76(sp)
 4047830:	d8800515 	stw	r2,20(sp)
 4047834:	003c2a06 	br	40468e0 <__flash_rwdata_start+0xfffec1b0>
 4047838:	d9800317 	ldw	r6,12(sp)
 404783c:	00800084 	movi	r2,2
 4047840:	11801516 	blt	r2,r6,4047898 <_dtoa_r+0x1660>
 4047844:	d9c00c17 	ldw	r7,48(sp)
 4047848:	d9c00615 	stw	r7,24(sp)
 404784c:	003df706 	br	404702c <__flash_rwdata_start+0xfffec8fc>
 4047850:	193d3926 	beq	r3,r4,4046d38 <__flash_rwdata_start+0xfffec608>
 4047854:	00c00f04 	movi	r3,60
 4047858:	1885c83a 	sub	r2,r3,r2
 404785c:	003ddf06 	br	4046fdc <__flash_rwdata_start+0xfffec8ac>
 4047860:	e009883a 	mov	r4,fp
 4047864:	e0001115 	stw	zero,68(fp)
 4047868:	000b883a 	mov	r5,zero
 404786c:	4048f800 	call	4048f80 <_Balloc>
 4047870:	d8800715 	stw	r2,28(sp)
 4047874:	d8c00717 	ldw	r3,28(sp)
 4047878:	00bfffc4 	movi	r2,-1
 404787c:	01000044 	movi	r4,1
 4047880:	d8800c15 	stw	r2,48(sp)
 4047884:	e0c01015 	stw	r3,64(fp)
 4047888:	d9000b15 	stw	r4,44(sp)
 404788c:	d8800615 	stw	r2,24(sp)
 4047890:	d8002215 	stw	zero,136(sp)
 4047894:	003c4106 	br	404699c <__flash_rwdata_start+0xfffec26c>
 4047898:	d8c00c17 	ldw	r3,48(sp)
 404789c:	d8c00615 	stw	r3,24(sp)
 40478a0:	003e7006 	br	4047264 <__flash_rwdata_start+0xfffecb34>
 40478a4:	04400044 	movi	r17,1
 40478a8:	003b2006 	br	404652c <__flash_rwdata_start+0xfffebdfc>
 40478ac:	000b883a 	mov	r5,zero
 40478b0:	003b3d06 	br	40465a8 <__flash_rwdata_start+0xfffebe78>
 40478b4:	d8800c17 	ldw	r2,48(sp)
 40478b8:	d8800615 	stw	r2,24(sp)
 40478bc:	003e6906 	br	4047264 <__flash_rwdata_start+0xfffecb34>

040478c0 <__sflush_r>:
 40478c0:	2880030b 	ldhu	r2,12(r5)
 40478c4:	defffb04 	addi	sp,sp,-20
 40478c8:	dcc00315 	stw	r19,12(sp)
 40478cc:	dc400115 	stw	r17,4(sp)
 40478d0:	dfc00415 	stw	ra,16(sp)
 40478d4:	dc800215 	stw	r18,8(sp)
 40478d8:	dc000015 	stw	r16,0(sp)
 40478dc:	10c0020c 	andi	r3,r2,8
 40478e0:	2823883a 	mov	r17,r5
 40478e4:	2027883a 	mov	r19,r4
 40478e8:	1800311e 	bne	r3,zero,40479b0 <__sflush_r+0xf0>
 40478ec:	28c00117 	ldw	r3,4(r5)
 40478f0:	10820014 	ori	r2,r2,2048
 40478f4:	2880030d 	sth	r2,12(r5)
 40478f8:	00c04b0e 	bge	zero,r3,4047a28 <__sflush_r+0x168>
 40478fc:	8a000a17 	ldw	r8,40(r17)
 4047900:	40002326 	beq	r8,zero,4047990 <__sflush_r+0xd0>
 4047904:	9c000017 	ldw	r16,0(r19)
 4047908:	10c4000c 	andi	r3,r2,4096
 404790c:	98000015 	stw	zero,0(r19)
 4047910:	18004826 	beq	r3,zero,4047a34 <__sflush_r+0x174>
 4047914:	89801417 	ldw	r6,80(r17)
 4047918:	10c0010c 	andi	r3,r2,4
 404791c:	18000626 	beq	r3,zero,4047938 <__sflush_r+0x78>
 4047920:	88c00117 	ldw	r3,4(r17)
 4047924:	88800c17 	ldw	r2,48(r17)
 4047928:	30cdc83a 	sub	r6,r6,r3
 404792c:	10000226 	beq	r2,zero,4047938 <__sflush_r+0x78>
 4047930:	88800f17 	ldw	r2,60(r17)
 4047934:	308dc83a 	sub	r6,r6,r2
 4047938:	89400717 	ldw	r5,28(r17)
 404793c:	000f883a 	mov	r7,zero
 4047940:	9809883a 	mov	r4,r19
 4047944:	403ee83a 	callr	r8
 4047948:	00ffffc4 	movi	r3,-1
 404794c:	10c04426 	beq	r2,r3,4047a60 <__sflush_r+0x1a0>
 4047950:	88c0030b 	ldhu	r3,12(r17)
 4047954:	89000417 	ldw	r4,16(r17)
 4047958:	88000115 	stw	zero,4(r17)
 404795c:	197dffcc 	andi	r5,r3,63487
 4047960:	8940030d 	sth	r5,12(r17)
 4047964:	89000015 	stw	r4,0(r17)
 4047968:	18c4000c 	andi	r3,r3,4096
 404796c:	18002c1e 	bne	r3,zero,4047a20 <__sflush_r+0x160>
 4047970:	89400c17 	ldw	r5,48(r17)
 4047974:	9c000015 	stw	r16,0(r19)
 4047978:	28000526 	beq	r5,zero,4047990 <__sflush_r+0xd0>
 404797c:	88801004 	addi	r2,r17,64
 4047980:	28800226 	beq	r5,r2,404798c <__sflush_r+0xcc>
 4047984:	9809883a 	mov	r4,r19
 4047988:	404802c0 	call	404802c <_free_r>
 404798c:	88000c15 	stw	zero,48(r17)
 4047990:	0005883a 	mov	r2,zero
 4047994:	dfc00417 	ldw	ra,16(sp)
 4047998:	dcc00317 	ldw	r19,12(sp)
 404799c:	dc800217 	ldw	r18,8(sp)
 40479a0:	dc400117 	ldw	r17,4(sp)
 40479a4:	dc000017 	ldw	r16,0(sp)
 40479a8:	dec00504 	addi	sp,sp,20
 40479ac:	f800283a 	ret
 40479b0:	2c800417 	ldw	r18,16(r5)
 40479b4:	903ff626 	beq	r18,zero,4047990 <__flash_rwdata_start+0xfffed260>
 40479b8:	2c000017 	ldw	r16,0(r5)
 40479bc:	108000cc 	andi	r2,r2,3
 40479c0:	2c800015 	stw	r18,0(r5)
 40479c4:	84a1c83a 	sub	r16,r16,r18
 40479c8:	1000131e 	bne	r2,zero,4047a18 <__sflush_r+0x158>
 40479cc:	28800517 	ldw	r2,20(r5)
 40479d0:	88800215 	stw	r2,8(r17)
 40479d4:	04000316 	blt	zero,r16,40479e4 <__sflush_r+0x124>
 40479d8:	003fed06 	br	4047990 <__flash_rwdata_start+0xfffed260>
 40479dc:	90a5883a 	add	r18,r18,r2
 40479e0:	043feb0e 	bge	zero,r16,4047990 <__flash_rwdata_start+0xfffed260>
 40479e4:	88800917 	ldw	r2,36(r17)
 40479e8:	89400717 	ldw	r5,28(r17)
 40479ec:	800f883a 	mov	r7,r16
 40479f0:	900d883a 	mov	r6,r18
 40479f4:	9809883a 	mov	r4,r19
 40479f8:	103ee83a 	callr	r2
 40479fc:	80a1c83a 	sub	r16,r16,r2
 4047a00:	00bff616 	blt	zero,r2,40479dc <__flash_rwdata_start+0xfffed2ac>
 4047a04:	88c0030b 	ldhu	r3,12(r17)
 4047a08:	00bfffc4 	movi	r2,-1
 4047a0c:	18c01014 	ori	r3,r3,64
 4047a10:	88c0030d 	sth	r3,12(r17)
 4047a14:	003fdf06 	br	4047994 <__flash_rwdata_start+0xfffed264>
 4047a18:	0005883a 	mov	r2,zero
 4047a1c:	003fec06 	br	40479d0 <__flash_rwdata_start+0xfffed2a0>
 4047a20:	88801415 	stw	r2,80(r17)
 4047a24:	003fd206 	br	4047970 <__flash_rwdata_start+0xfffed240>
 4047a28:	28c00f17 	ldw	r3,60(r5)
 4047a2c:	00ffb316 	blt	zero,r3,40478fc <__flash_rwdata_start+0xfffed1cc>
 4047a30:	003fd706 	br	4047990 <__flash_rwdata_start+0xfffed260>
 4047a34:	89400717 	ldw	r5,28(r17)
 4047a38:	000d883a 	mov	r6,zero
 4047a3c:	01c00044 	movi	r7,1
 4047a40:	9809883a 	mov	r4,r19
 4047a44:	403ee83a 	callr	r8
 4047a48:	100d883a 	mov	r6,r2
 4047a4c:	00bfffc4 	movi	r2,-1
 4047a50:	30801426 	beq	r6,r2,4047aa4 <__sflush_r+0x1e4>
 4047a54:	8880030b 	ldhu	r2,12(r17)
 4047a58:	8a000a17 	ldw	r8,40(r17)
 4047a5c:	003fae06 	br	4047918 <__flash_rwdata_start+0xfffed1e8>
 4047a60:	98c00017 	ldw	r3,0(r19)
 4047a64:	183fba26 	beq	r3,zero,4047950 <__flash_rwdata_start+0xfffed220>
 4047a68:	01000744 	movi	r4,29
 4047a6c:	19000626 	beq	r3,r4,4047a88 <__sflush_r+0x1c8>
 4047a70:	01000584 	movi	r4,22
 4047a74:	19000426 	beq	r3,r4,4047a88 <__sflush_r+0x1c8>
 4047a78:	88c0030b 	ldhu	r3,12(r17)
 4047a7c:	18c01014 	ori	r3,r3,64
 4047a80:	88c0030d 	sth	r3,12(r17)
 4047a84:	003fc306 	br	4047994 <__flash_rwdata_start+0xfffed264>
 4047a88:	8880030b 	ldhu	r2,12(r17)
 4047a8c:	88c00417 	ldw	r3,16(r17)
 4047a90:	88000115 	stw	zero,4(r17)
 4047a94:	10bdffcc 	andi	r2,r2,63487
 4047a98:	8880030d 	sth	r2,12(r17)
 4047a9c:	88c00015 	stw	r3,0(r17)
 4047aa0:	003fb306 	br	4047970 <__flash_rwdata_start+0xfffed240>
 4047aa4:	98800017 	ldw	r2,0(r19)
 4047aa8:	103fea26 	beq	r2,zero,4047a54 <__flash_rwdata_start+0xfffed324>
 4047aac:	00c00744 	movi	r3,29
 4047ab0:	10c00226 	beq	r2,r3,4047abc <__sflush_r+0x1fc>
 4047ab4:	00c00584 	movi	r3,22
 4047ab8:	10c0031e 	bne	r2,r3,4047ac8 <__sflush_r+0x208>
 4047abc:	9c000015 	stw	r16,0(r19)
 4047ac0:	0005883a 	mov	r2,zero
 4047ac4:	003fb306 	br	4047994 <__flash_rwdata_start+0xfffed264>
 4047ac8:	88c0030b 	ldhu	r3,12(r17)
 4047acc:	3005883a 	mov	r2,r6
 4047ad0:	18c01014 	ori	r3,r3,64
 4047ad4:	88c0030d 	sth	r3,12(r17)
 4047ad8:	003fae06 	br	4047994 <__flash_rwdata_start+0xfffed264>

04047adc <_fflush_r>:
 4047adc:	defffd04 	addi	sp,sp,-12
 4047ae0:	dc000115 	stw	r16,4(sp)
 4047ae4:	dfc00215 	stw	ra,8(sp)
 4047ae8:	2021883a 	mov	r16,r4
 4047aec:	20000226 	beq	r4,zero,4047af8 <_fflush_r+0x1c>
 4047af0:	20800e17 	ldw	r2,56(r4)
 4047af4:	10000c26 	beq	r2,zero,4047b28 <_fflush_r+0x4c>
 4047af8:	2880030f 	ldh	r2,12(r5)
 4047afc:	1000051e 	bne	r2,zero,4047b14 <_fflush_r+0x38>
 4047b00:	0005883a 	mov	r2,zero
 4047b04:	dfc00217 	ldw	ra,8(sp)
 4047b08:	dc000117 	ldw	r16,4(sp)
 4047b0c:	dec00304 	addi	sp,sp,12
 4047b10:	f800283a 	ret
 4047b14:	8009883a 	mov	r4,r16
 4047b18:	dfc00217 	ldw	ra,8(sp)
 4047b1c:	dc000117 	ldw	r16,4(sp)
 4047b20:	dec00304 	addi	sp,sp,12
 4047b24:	40478c01 	jmpi	40478c0 <__sflush_r>
 4047b28:	d9400015 	stw	r5,0(sp)
 4047b2c:	4047eb80 	call	4047eb8 <__sinit>
 4047b30:	d9400017 	ldw	r5,0(sp)
 4047b34:	003ff006 	br	4047af8 <__flash_rwdata_start+0xfffed3c8>

04047b38 <fflush>:
 4047b38:	20000526 	beq	r4,zero,4047b50 <fflush+0x18>
 4047b3c:	00808034 	movhi	r2,512
 4047b40:	10886904 	addi	r2,r2,8612
 4047b44:	200b883a 	mov	r5,r4
 4047b48:	11000017 	ldw	r4,0(r2)
 4047b4c:	4047adc1 	jmpi	4047adc <_fflush_r>
 4047b50:	00808034 	movhi	r2,512
 4047b54:	10886804 	addi	r2,r2,8608
 4047b58:	11000017 	ldw	r4,0(r2)
 4047b5c:	01410134 	movhi	r5,1028
 4047b60:	295eb704 	addi	r5,r5,31452
 4047b64:	40488bc1 	jmpi	40488bc <_fwalk_reent>

04047b68 <__fp_unlock>:
 4047b68:	0005883a 	mov	r2,zero
 4047b6c:	f800283a 	ret

04047b70 <_cleanup_r>:
 4047b70:	01410174 	movhi	r5,1029
 4047b74:	296fcb04 	addi	r5,r5,-16596
 4047b78:	40488bc1 	jmpi	40488bc <_fwalk_reent>

04047b7c <__sinit.part.1>:
 4047b7c:	defff704 	addi	sp,sp,-36
 4047b80:	00c10134 	movhi	r3,1028
 4047b84:	dfc00815 	stw	ra,32(sp)
 4047b88:	ddc00715 	stw	r23,28(sp)
 4047b8c:	dd800615 	stw	r22,24(sp)
 4047b90:	dd400515 	stw	r21,20(sp)
 4047b94:	dd000415 	stw	r20,16(sp)
 4047b98:	dcc00315 	stw	r19,12(sp)
 4047b9c:	dc800215 	stw	r18,8(sp)
 4047ba0:	dc400115 	stw	r17,4(sp)
 4047ba4:	dc000015 	stw	r16,0(sp)
 4047ba8:	18dedc04 	addi	r3,r3,31600
 4047bac:	24000117 	ldw	r16,4(r4)
 4047bb0:	20c00f15 	stw	r3,60(r4)
 4047bb4:	2080bb04 	addi	r2,r4,748
 4047bb8:	00c000c4 	movi	r3,3
 4047bbc:	20c0b915 	stw	r3,740(r4)
 4047bc0:	2080ba15 	stw	r2,744(r4)
 4047bc4:	2000b815 	stw	zero,736(r4)
 4047bc8:	05c00204 	movi	r23,8
 4047bcc:	00800104 	movi	r2,4
 4047bd0:	2025883a 	mov	r18,r4
 4047bd4:	b80d883a 	mov	r6,r23
 4047bd8:	81001704 	addi	r4,r16,92
 4047bdc:	000b883a 	mov	r5,zero
 4047be0:	80000015 	stw	zero,0(r16)
 4047be4:	80000115 	stw	zero,4(r16)
 4047be8:	80000215 	stw	zero,8(r16)
 4047bec:	8080030d 	sth	r2,12(r16)
 4047bf0:	80001915 	stw	zero,100(r16)
 4047bf4:	8000038d 	sth	zero,14(r16)
 4047bf8:	80000415 	stw	zero,16(r16)
 4047bfc:	80000515 	stw	zero,20(r16)
 4047c00:	80000615 	stw	zero,24(r16)
 4047c04:	4048e580 	call	4048e58 <memset>
 4047c08:	05810174 	movhi	r22,1029
 4047c0c:	94400217 	ldw	r17,8(r18)
 4047c10:	05410174 	movhi	r21,1029
 4047c14:	05010174 	movhi	r20,1029
 4047c18:	04c10174 	movhi	r19,1029
 4047c1c:	b5a95504 	addi	r22,r22,-23212
 4047c20:	ad696c04 	addi	r21,r21,-23120
 4047c24:	a5298b04 	addi	r20,r20,-22996
 4047c28:	9ce9a204 	addi	r19,r19,-22904
 4047c2c:	85800815 	stw	r22,32(r16)
 4047c30:	85400915 	stw	r21,36(r16)
 4047c34:	85000a15 	stw	r20,40(r16)
 4047c38:	84c00b15 	stw	r19,44(r16)
 4047c3c:	84000715 	stw	r16,28(r16)
 4047c40:	00800284 	movi	r2,10
 4047c44:	8880030d 	sth	r2,12(r17)
 4047c48:	00800044 	movi	r2,1
 4047c4c:	b80d883a 	mov	r6,r23
 4047c50:	89001704 	addi	r4,r17,92
 4047c54:	000b883a 	mov	r5,zero
 4047c58:	88000015 	stw	zero,0(r17)
 4047c5c:	88000115 	stw	zero,4(r17)
 4047c60:	88000215 	stw	zero,8(r17)
 4047c64:	88001915 	stw	zero,100(r17)
 4047c68:	8880038d 	sth	r2,14(r17)
 4047c6c:	88000415 	stw	zero,16(r17)
 4047c70:	88000515 	stw	zero,20(r17)
 4047c74:	88000615 	stw	zero,24(r17)
 4047c78:	4048e580 	call	4048e58 <memset>
 4047c7c:	94000317 	ldw	r16,12(r18)
 4047c80:	00800484 	movi	r2,18
 4047c84:	8c400715 	stw	r17,28(r17)
 4047c88:	8d800815 	stw	r22,32(r17)
 4047c8c:	8d400915 	stw	r21,36(r17)
 4047c90:	8d000a15 	stw	r20,40(r17)
 4047c94:	8cc00b15 	stw	r19,44(r17)
 4047c98:	8080030d 	sth	r2,12(r16)
 4047c9c:	00800084 	movi	r2,2
 4047ca0:	80000015 	stw	zero,0(r16)
 4047ca4:	80000115 	stw	zero,4(r16)
 4047ca8:	80000215 	stw	zero,8(r16)
 4047cac:	80001915 	stw	zero,100(r16)
 4047cb0:	8080038d 	sth	r2,14(r16)
 4047cb4:	80000415 	stw	zero,16(r16)
 4047cb8:	80000515 	stw	zero,20(r16)
 4047cbc:	80000615 	stw	zero,24(r16)
 4047cc0:	b80d883a 	mov	r6,r23
 4047cc4:	000b883a 	mov	r5,zero
 4047cc8:	81001704 	addi	r4,r16,92
 4047ccc:	4048e580 	call	4048e58 <memset>
 4047cd0:	00800044 	movi	r2,1
 4047cd4:	84000715 	stw	r16,28(r16)
 4047cd8:	85800815 	stw	r22,32(r16)
 4047cdc:	85400915 	stw	r21,36(r16)
 4047ce0:	85000a15 	stw	r20,40(r16)
 4047ce4:	84c00b15 	stw	r19,44(r16)
 4047ce8:	90800e15 	stw	r2,56(r18)
 4047cec:	dfc00817 	ldw	ra,32(sp)
 4047cf0:	ddc00717 	ldw	r23,28(sp)
 4047cf4:	dd800617 	ldw	r22,24(sp)
 4047cf8:	dd400517 	ldw	r21,20(sp)
 4047cfc:	dd000417 	ldw	r20,16(sp)
 4047d00:	dcc00317 	ldw	r19,12(sp)
 4047d04:	dc800217 	ldw	r18,8(sp)
 4047d08:	dc400117 	ldw	r17,4(sp)
 4047d0c:	dc000017 	ldw	r16,0(sp)
 4047d10:	dec00904 	addi	sp,sp,36
 4047d14:	f800283a 	ret

04047d18 <__fp_lock>:
 4047d18:	0005883a 	mov	r2,zero
 4047d1c:	f800283a 	ret

04047d20 <__sfmoreglue>:
 4047d20:	defffc04 	addi	sp,sp,-16
 4047d24:	dc400115 	stw	r17,4(sp)
 4047d28:	2c7fffc4 	addi	r17,r5,-1
 4047d2c:	8c401a24 	muli	r17,r17,104
 4047d30:	dc800215 	stw	r18,8(sp)
 4047d34:	2825883a 	mov	r18,r5
 4047d38:	89401d04 	addi	r5,r17,116
 4047d3c:	dc000015 	stw	r16,0(sp)
 4047d40:	dfc00315 	stw	ra,12(sp)
 4047d44:	40430940 	call	4043094 <_malloc_r>
 4047d48:	1021883a 	mov	r16,r2
 4047d4c:	10000726 	beq	r2,zero,4047d6c <__sfmoreglue+0x4c>
 4047d50:	11000304 	addi	r4,r2,12
 4047d54:	10000015 	stw	zero,0(r2)
 4047d58:	14800115 	stw	r18,4(r2)
 4047d5c:	11000215 	stw	r4,8(r2)
 4047d60:	89801a04 	addi	r6,r17,104
 4047d64:	000b883a 	mov	r5,zero
 4047d68:	4048e580 	call	4048e58 <memset>
 4047d6c:	8005883a 	mov	r2,r16
 4047d70:	dfc00317 	ldw	ra,12(sp)
 4047d74:	dc800217 	ldw	r18,8(sp)
 4047d78:	dc400117 	ldw	r17,4(sp)
 4047d7c:	dc000017 	ldw	r16,0(sp)
 4047d80:	dec00404 	addi	sp,sp,16
 4047d84:	f800283a 	ret

04047d88 <__sfp>:
 4047d88:	defffb04 	addi	sp,sp,-20
 4047d8c:	dc000015 	stw	r16,0(sp)
 4047d90:	04008034 	movhi	r16,512
 4047d94:	84086804 	addi	r16,r16,8608
 4047d98:	dcc00315 	stw	r19,12(sp)
 4047d9c:	2027883a 	mov	r19,r4
 4047da0:	81000017 	ldw	r4,0(r16)
 4047da4:	dfc00415 	stw	ra,16(sp)
 4047da8:	dc800215 	stw	r18,8(sp)
 4047dac:	20800e17 	ldw	r2,56(r4)
 4047db0:	dc400115 	stw	r17,4(sp)
 4047db4:	1000021e 	bne	r2,zero,4047dc0 <__sfp+0x38>
 4047db8:	4047b7c0 	call	4047b7c <__sinit.part.1>
 4047dbc:	81000017 	ldw	r4,0(r16)
 4047dc0:	2480b804 	addi	r18,r4,736
 4047dc4:	047fffc4 	movi	r17,-1
 4047dc8:	91000117 	ldw	r4,4(r18)
 4047dcc:	94000217 	ldw	r16,8(r18)
 4047dd0:	213fffc4 	addi	r4,r4,-1
 4047dd4:	20000a16 	blt	r4,zero,4047e00 <__sfp+0x78>
 4047dd8:	8080030f 	ldh	r2,12(r16)
 4047ddc:	10000c26 	beq	r2,zero,4047e10 <__sfp+0x88>
 4047de0:	80c01d04 	addi	r3,r16,116
 4047de4:	00000206 	br	4047df0 <__sfp+0x68>
 4047de8:	18bfe60f 	ldh	r2,-104(r3)
 4047dec:	10000826 	beq	r2,zero,4047e10 <__sfp+0x88>
 4047df0:	213fffc4 	addi	r4,r4,-1
 4047df4:	1c3ffd04 	addi	r16,r3,-12
 4047df8:	18c01a04 	addi	r3,r3,104
 4047dfc:	247ffa1e 	bne	r4,r17,4047de8 <__flash_rwdata_start+0xfffed6b8>
 4047e00:	90800017 	ldw	r2,0(r18)
 4047e04:	10001d26 	beq	r2,zero,4047e7c <__sfp+0xf4>
 4047e08:	1025883a 	mov	r18,r2
 4047e0c:	003fee06 	br	4047dc8 <__flash_rwdata_start+0xfffed698>
 4047e10:	00bfffc4 	movi	r2,-1
 4047e14:	8080038d 	sth	r2,14(r16)
 4047e18:	00800044 	movi	r2,1
 4047e1c:	8080030d 	sth	r2,12(r16)
 4047e20:	80001915 	stw	zero,100(r16)
 4047e24:	80000015 	stw	zero,0(r16)
 4047e28:	80000215 	stw	zero,8(r16)
 4047e2c:	80000115 	stw	zero,4(r16)
 4047e30:	80000415 	stw	zero,16(r16)
 4047e34:	80000515 	stw	zero,20(r16)
 4047e38:	80000615 	stw	zero,24(r16)
 4047e3c:	01800204 	movi	r6,8
 4047e40:	000b883a 	mov	r5,zero
 4047e44:	81001704 	addi	r4,r16,92
 4047e48:	4048e580 	call	4048e58 <memset>
 4047e4c:	8005883a 	mov	r2,r16
 4047e50:	80000c15 	stw	zero,48(r16)
 4047e54:	80000d15 	stw	zero,52(r16)
 4047e58:	80001115 	stw	zero,68(r16)
 4047e5c:	80001215 	stw	zero,72(r16)
 4047e60:	dfc00417 	ldw	ra,16(sp)
 4047e64:	dcc00317 	ldw	r19,12(sp)
 4047e68:	dc800217 	ldw	r18,8(sp)
 4047e6c:	dc400117 	ldw	r17,4(sp)
 4047e70:	dc000017 	ldw	r16,0(sp)
 4047e74:	dec00504 	addi	sp,sp,20
 4047e78:	f800283a 	ret
 4047e7c:	01400104 	movi	r5,4
 4047e80:	9809883a 	mov	r4,r19
 4047e84:	4047d200 	call	4047d20 <__sfmoreglue>
 4047e88:	90800015 	stw	r2,0(r18)
 4047e8c:	103fde1e 	bne	r2,zero,4047e08 <__flash_rwdata_start+0xfffed6d8>
 4047e90:	00800304 	movi	r2,12
 4047e94:	98800015 	stw	r2,0(r19)
 4047e98:	0005883a 	mov	r2,zero
 4047e9c:	003ff006 	br	4047e60 <__flash_rwdata_start+0xfffed730>

04047ea0 <_cleanup>:
 4047ea0:	00808034 	movhi	r2,512
 4047ea4:	10886804 	addi	r2,r2,8608
 4047ea8:	11000017 	ldw	r4,0(r2)
 4047eac:	01410174 	movhi	r5,1029
 4047eb0:	296fcb04 	addi	r5,r5,-16596
 4047eb4:	40488bc1 	jmpi	40488bc <_fwalk_reent>

04047eb8 <__sinit>:
 4047eb8:	20800e17 	ldw	r2,56(r4)
 4047ebc:	10000126 	beq	r2,zero,4047ec4 <__sinit+0xc>
 4047ec0:	f800283a 	ret
 4047ec4:	4047b7c1 	jmpi	4047b7c <__sinit.part.1>

04047ec8 <__sfp_lock_acquire>:
 4047ec8:	f800283a 	ret

04047ecc <__sfp_lock_release>:
 4047ecc:	f800283a 	ret

04047ed0 <__sinit_lock_acquire>:
 4047ed0:	f800283a 	ret

04047ed4 <__sinit_lock_release>:
 4047ed4:	f800283a 	ret

04047ed8 <__fp_lock_all>:
 4047ed8:	00808034 	movhi	r2,512
 4047edc:	10886904 	addi	r2,r2,8612
 4047ee0:	11000017 	ldw	r4,0(r2)
 4047ee4:	01410134 	movhi	r5,1028
 4047ee8:	295f4604 	addi	r5,r5,32024
 4047eec:	40487f81 	jmpi	40487f8 <_fwalk>

04047ef0 <__fp_unlock_all>:
 4047ef0:	00808034 	movhi	r2,512
 4047ef4:	10886904 	addi	r2,r2,8612
 4047ef8:	11000017 	ldw	r4,0(r2)
 4047efc:	01410134 	movhi	r5,1028
 4047f00:	295eda04 	addi	r5,r5,31592
 4047f04:	40487f81 	jmpi	40487f8 <_fwalk>

04047f08 <_malloc_trim_r>:
 4047f08:	defffb04 	addi	sp,sp,-20
 4047f0c:	dcc00315 	stw	r19,12(sp)
 4047f10:	04c08034 	movhi	r19,512
 4047f14:	dc800215 	stw	r18,8(sp)
 4047f18:	dc400115 	stw	r17,4(sp)
 4047f1c:	dc000015 	stw	r16,0(sp)
 4047f20:	dfc00415 	stw	ra,16(sp)
 4047f24:	2821883a 	mov	r16,r5
 4047f28:	9cc1b804 	addi	r19,r19,1760
 4047f2c:	2025883a 	mov	r18,r4
 4047f30:	40505000 	call	4050500 <__malloc_lock>
 4047f34:	98800217 	ldw	r2,8(r19)
 4047f38:	14400117 	ldw	r17,4(r2)
 4047f3c:	00bfff04 	movi	r2,-4
 4047f40:	88a2703a 	and	r17,r17,r2
 4047f44:	8c21c83a 	sub	r16,r17,r16
 4047f48:	8403fbc4 	addi	r16,r16,4079
 4047f4c:	8020d33a 	srli	r16,r16,12
 4047f50:	0083ffc4 	movi	r2,4095
 4047f54:	843fffc4 	addi	r16,r16,-1
 4047f58:	8020933a 	slli	r16,r16,12
 4047f5c:	1400060e 	bge	r2,r16,4047f78 <_malloc_trim_r+0x70>
 4047f60:	000b883a 	mov	r5,zero
 4047f64:	9009883a 	mov	r4,r18
 4047f68:	4043b280 	call	4043b28 <_sbrk_r>
 4047f6c:	98c00217 	ldw	r3,8(r19)
 4047f70:	1c47883a 	add	r3,r3,r17
 4047f74:	10c00a26 	beq	r2,r3,4047fa0 <_malloc_trim_r+0x98>
 4047f78:	9009883a 	mov	r4,r18
 4047f7c:	40506200 	call	4050620 <__malloc_unlock>
 4047f80:	0005883a 	mov	r2,zero
 4047f84:	dfc00417 	ldw	ra,16(sp)
 4047f88:	dcc00317 	ldw	r19,12(sp)
 4047f8c:	dc800217 	ldw	r18,8(sp)
 4047f90:	dc400117 	ldw	r17,4(sp)
 4047f94:	dc000017 	ldw	r16,0(sp)
 4047f98:	dec00504 	addi	sp,sp,20
 4047f9c:	f800283a 	ret
 4047fa0:	040bc83a 	sub	r5,zero,r16
 4047fa4:	9009883a 	mov	r4,r18
 4047fa8:	4043b280 	call	4043b28 <_sbrk_r>
 4047fac:	00ffffc4 	movi	r3,-1
 4047fb0:	10c00d26 	beq	r2,r3,4047fe8 <_malloc_trim_r+0xe0>
 4047fb4:	00c08034 	movhi	r3,512
 4047fb8:	18c8cf04 	addi	r3,r3,9020
 4047fbc:	18800017 	ldw	r2,0(r3)
 4047fc0:	99000217 	ldw	r4,8(r19)
 4047fc4:	8c23c83a 	sub	r17,r17,r16
 4047fc8:	8c400054 	ori	r17,r17,1
 4047fcc:	1421c83a 	sub	r16,r2,r16
 4047fd0:	24400115 	stw	r17,4(r4)
 4047fd4:	9009883a 	mov	r4,r18
 4047fd8:	1c000015 	stw	r16,0(r3)
 4047fdc:	40506200 	call	4050620 <__malloc_unlock>
 4047fe0:	00800044 	movi	r2,1
 4047fe4:	003fe706 	br	4047f84 <__flash_rwdata_start+0xfffed854>
 4047fe8:	000b883a 	mov	r5,zero
 4047fec:	9009883a 	mov	r4,r18
 4047ff0:	4043b280 	call	4043b28 <_sbrk_r>
 4047ff4:	99000217 	ldw	r4,8(r19)
 4047ff8:	014003c4 	movi	r5,15
 4047ffc:	1107c83a 	sub	r3,r2,r4
 4048000:	28ffdd0e 	bge	r5,r3,4047f78 <__flash_rwdata_start+0xfffed848>
 4048004:	01408034 	movhi	r5,512
 4048008:	29486604 	addi	r5,r5,8600
 404800c:	29400017 	ldw	r5,0(r5)
 4048010:	18c00054 	ori	r3,r3,1
 4048014:	20c00115 	stw	r3,4(r4)
 4048018:	00c08034 	movhi	r3,512
 404801c:	1145c83a 	sub	r2,r2,r5
 4048020:	18c8cf04 	addi	r3,r3,9020
 4048024:	18800015 	stw	r2,0(r3)
 4048028:	003fd306 	br	4047f78 <__flash_rwdata_start+0xfffed848>

0404802c <_free_r>:
 404802c:	28004126 	beq	r5,zero,4048134 <_free_r+0x108>
 4048030:	defffd04 	addi	sp,sp,-12
 4048034:	dc400115 	stw	r17,4(sp)
 4048038:	dc000015 	stw	r16,0(sp)
 404803c:	2023883a 	mov	r17,r4
 4048040:	2821883a 	mov	r16,r5
 4048044:	dfc00215 	stw	ra,8(sp)
 4048048:	40505000 	call	4050500 <__malloc_lock>
 404804c:	81ffff17 	ldw	r7,-4(r16)
 4048050:	00bfff84 	movi	r2,-2
 4048054:	01008034 	movhi	r4,512
 4048058:	81bffe04 	addi	r6,r16,-8
 404805c:	3884703a 	and	r2,r7,r2
 4048060:	2101b804 	addi	r4,r4,1760
 4048064:	308b883a 	add	r5,r6,r2
 4048068:	2a400117 	ldw	r9,4(r5)
 404806c:	22000217 	ldw	r8,8(r4)
 4048070:	00ffff04 	movi	r3,-4
 4048074:	48c6703a 	and	r3,r9,r3
 4048078:	2a005726 	beq	r5,r8,40481d8 <_free_r+0x1ac>
 404807c:	28c00115 	stw	r3,4(r5)
 4048080:	39c0004c 	andi	r7,r7,1
 4048084:	3800091e 	bne	r7,zero,40480ac <_free_r+0x80>
 4048088:	823ffe17 	ldw	r8,-8(r16)
 404808c:	22400204 	addi	r9,r4,8
 4048090:	320dc83a 	sub	r6,r6,r8
 4048094:	31c00217 	ldw	r7,8(r6)
 4048098:	1205883a 	add	r2,r2,r8
 404809c:	3a406526 	beq	r7,r9,4048234 <_free_r+0x208>
 40480a0:	32000317 	ldw	r8,12(r6)
 40480a4:	3a000315 	stw	r8,12(r7)
 40480a8:	41c00215 	stw	r7,8(r8)
 40480ac:	28cf883a 	add	r7,r5,r3
 40480b0:	39c00117 	ldw	r7,4(r7)
 40480b4:	39c0004c 	andi	r7,r7,1
 40480b8:	38003a26 	beq	r7,zero,40481a4 <_free_r+0x178>
 40480bc:	10c00054 	ori	r3,r2,1
 40480c0:	30c00115 	stw	r3,4(r6)
 40480c4:	3087883a 	add	r3,r6,r2
 40480c8:	18800015 	stw	r2,0(r3)
 40480cc:	00c07fc4 	movi	r3,511
 40480d0:	18801936 	bltu	r3,r2,4048138 <_free_r+0x10c>
 40480d4:	1004d0fa 	srli	r2,r2,3
 40480d8:	01c00044 	movi	r7,1
 40480dc:	21400117 	ldw	r5,4(r4)
 40480e0:	10c00044 	addi	r3,r2,1
 40480e4:	18c7883a 	add	r3,r3,r3
 40480e8:	1005d0ba 	srai	r2,r2,2
 40480ec:	18c7883a 	add	r3,r3,r3
 40480f0:	18c7883a 	add	r3,r3,r3
 40480f4:	1907883a 	add	r3,r3,r4
 40480f8:	3884983a 	sll	r2,r7,r2
 40480fc:	19c00017 	ldw	r7,0(r3)
 4048100:	1a3ffe04 	addi	r8,r3,-8
 4048104:	1144b03a 	or	r2,r2,r5
 4048108:	32000315 	stw	r8,12(r6)
 404810c:	31c00215 	stw	r7,8(r6)
 4048110:	20800115 	stw	r2,4(r4)
 4048114:	19800015 	stw	r6,0(r3)
 4048118:	39800315 	stw	r6,12(r7)
 404811c:	8809883a 	mov	r4,r17
 4048120:	dfc00217 	ldw	ra,8(sp)
 4048124:	dc400117 	ldw	r17,4(sp)
 4048128:	dc000017 	ldw	r16,0(sp)
 404812c:	dec00304 	addi	sp,sp,12
 4048130:	40506201 	jmpi	4050620 <__malloc_unlock>
 4048134:	f800283a 	ret
 4048138:	100ad27a 	srli	r5,r2,9
 404813c:	00c00104 	movi	r3,4
 4048140:	19404a36 	bltu	r3,r5,404826c <_free_r+0x240>
 4048144:	100ad1ba 	srli	r5,r2,6
 4048148:	28c00e44 	addi	r3,r5,57
 404814c:	18c7883a 	add	r3,r3,r3
 4048150:	29400e04 	addi	r5,r5,56
 4048154:	18c7883a 	add	r3,r3,r3
 4048158:	18c7883a 	add	r3,r3,r3
 404815c:	1909883a 	add	r4,r3,r4
 4048160:	20c00017 	ldw	r3,0(r4)
 4048164:	01c08034 	movhi	r7,512
 4048168:	213ffe04 	addi	r4,r4,-8
 404816c:	39c1b804 	addi	r7,r7,1760
 4048170:	20c04426 	beq	r4,r3,4048284 <_free_r+0x258>
 4048174:	01ffff04 	movi	r7,-4
 4048178:	19400117 	ldw	r5,4(r3)
 404817c:	29ca703a 	and	r5,r5,r7
 4048180:	1140022e 	bgeu	r2,r5,404818c <_free_r+0x160>
 4048184:	18c00217 	ldw	r3,8(r3)
 4048188:	20fffb1e 	bne	r4,r3,4048178 <__flash_rwdata_start+0xfffeda48>
 404818c:	19000317 	ldw	r4,12(r3)
 4048190:	31000315 	stw	r4,12(r6)
 4048194:	30c00215 	stw	r3,8(r6)
 4048198:	21800215 	stw	r6,8(r4)
 404819c:	19800315 	stw	r6,12(r3)
 40481a0:	003fde06 	br	404811c <__flash_rwdata_start+0xfffed9ec>
 40481a4:	29c00217 	ldw	r7,8(r5)
 40481a8:	10c5883a 	add	r2,r2,r3
 40481ac:	00c08034 	movhi	r3,512
 40481b0:	18c1ba04 	addi	r3,r3,1768
 40481b4:	38c03b26 	beq	r7,r3,40482a4 <_free_r+0x278>
 40481b8:	2a000317 	ldw	r8,12(r5)
 40481bc:	11400054 	ori	r5,r2,1
 40481c0:	3087883a 	add	r3,r6,r2
 40481c4:	3a000315 	stw	r8,12(r7)
 40481c8:	41c00215 	stw	r7,8(r8)
 40481cc:	31400115 	stw	r5,4(r6)
 40481d0:	18800015 	stw	r2,0(r3)
 40481d4:	003fbd06 	br	40480cc <__flash_rwdata_start+0xfffed99c>
 40481d8:	39c0004c 	andi	r7,r7,1
 40481dc:	10c5883a 	add	r2,r2,r3
 40481e0:	3800071e 	bne	r7,zero,4048200 <_free_r+0x1d4>
 40481e4:	81fffe17 	ldw	r7,-8(r16)
 40481e8:	31cdc83a 	sub	r6,r6,r7
 40481ec:	30c00317 	ldw	r3,12(r6)
 40481f0:	31400217 	ldw	r5,8(r6)
 40481f4:	11c5883a 	add	r2,r2,r7
 40481f8:	28c00315 	stw	r3,12(r5)
 40481fc:	19400215 	stw	r5,8(r3)
 4048200:	10c00054 	ori	r3,r2,1
 4048204:	30c00115 	stw	r3,4(r6)
 4048208:	00c08034 	movhi	r3,512
 404820c:	18c86704 	addi	r3,r3,8604
 4048210:	18c00017 	ldw	r3,0(r3)
 4048214:	21800215 	stw	r6,8(r4)
 4048218:	10ffc036 	bltu	r2,r3,404811c <__flash_rwdata_start+0xfffed9ec>
 404821c:	00808034 	movhi	r2,512
 4048220:	1088aa04 	addi	r2,r2,8872
 4048224:	11400017 	ldw	r5,0(r2)
 4048228:	8809883a 	mov	r4,r17
 404822c:	4047f080 	call	4047f08 <_malloc_trim_r>
 4048230:	003fba06 	br	404811c <__flash_rwdata_start+0xfffed9ec>
 4048234:	28c9883a 	add	r4,r5,r3
 4048238:	21000117 	ldw	r4,4(r4)
 404823c:	2100004c 	andi	r4,r4,1
 4048240:	2000391e 	bne	r4,zero,4048328 <_free_r+0x2fc>
 4048244:	29c00217 	ldw	r7,8(r5)
 4048248:	29000317 	ldw	r4,12(r5)
 404824c:	1885883a 	add	r2,r3,r2
 4048250:	10c00054 	ori	r3,r2,1
 4048254:	39000315 	stw	r4,12(r7)
 4048258:	21c00215 	stw	r7,8(r4)
 404825c:	30c00115 	stw	r3,4(r6)
 4048260:	308d883a 	add	r6,r6,r2
 4048264:	30800015 	stw	r2,0(r6)
 4048268:	003fac06 	br	404811c <__flash_rwdata_start+0xfffed9ec>
 404826c:	00c00504 	movi	r3,20
 4048270:	19401536 	bltu	r3,r5,40482c8 <_free_r+0x29c>
 4048274:	28c01704 	addi	r3,r5,92
 4048278:	18c7883a 	add	r3,r3,r3
 404827c:	294016c4 	addi	r5,r5,91
 4048280:	003fb406 	br	4048154 <__flash_rwdata_start+0xfffeda24>
 4048284:	280bd0ba 	srai	r5,r5,2
 4048288:	00c00044 	movi	r3,1
 404828c:	38800117 	ldw	r2,4(r7)
 4048290:	194a983a 	sll	r5,r3,r5
 4048294:	2007883a 	mov	r3,r4
 4048298:	2884b03a 	or	r2,r5,r2
 404829c:	38800115 	stw	r2,4(r7)
 40482a0:	003fbb06 	br	4048190 <__flash_rwdata_start+0xfffeda60>
 40482a4:	21800515 	stw	r6,20(r4)
 40482a8:	21800415 	stw	r6,16(r4)
 40482ac:	10c00054 	ori	r3,r2,1
 40482b0:	31c00315 	stw	r7,12(r6)
 40482b4:	31c00215 	stw	r7,8(r6)
 40482b8:	30c00115 	stw	r3,4(r6)
 40482bc:	308d883a 	add	r6,r6,r2
 40482c0:	30800015 	stw	r2,0(r6)
 40482c4:	003f9506 	br	404811c <__flash_rwdata_start+0xfffed9ec>
 40482c8:	00c01504 	movi	r3,84
 40482cc:	19400536 	bltu	r3,r5,40482e4 <_free_r+0x2b8>
 40482d0:	100ad33a 	srli	r5,r2,12
 40482d4:	28c01bc4 	addi	r3,r5,111
 40482d8:	18c7883a 	add	r3,r3,r3
 40482dc:	29401b84 	addi	r5,r5,110
 40482e0:	003f9c06 	br	4048154 <__flash_rwdata_start+0xfffeda24>
 40482e4:	00c05504 	movi	r3,340
 40482e8:	19400536 	bltu	r3,r5,4048300 <_free_r+0x2d4>
 40482ec:	100ad3fa 	srli	r5,r2,15
 40482f0:	28c01e04 	addi	r3,r5,120
 40482f4:	18c7883a 	add	r3,r3,r3
 40482f8:	29401dc4 	addi	r5,r5,119
 40482fc:	003f9506 	br	4048154 <__flash_rwdata_start+0xfffeda24>
 4048300:	00c15504 	movi	r3,1364
 4048304:	19400536 	bltu	r3,r5,404831c <_free_r+0x2f0>
 4048308:	100ad4ba 	srli	r5,r2,18
 404830c:	28c01f44 	addi	r3,r5,125
 4048310:	18c7883a 	add	r3,r3,r3
 4048314:	29401f04 	addi	r5,r5,124
 4048318:	003f8e06 	br	4048154 <__flash_rwdata_start+0xfffeda24>
 404831c:	00c03f84 	movi	r3,254
 4048320:	01401f84 	movi	r5,126
 4048324:	003f8b06 	br	4048154 <__flash_rwdata_start+0xfffeda24>
 4048328:	10c00054 	ori	r3,r2,1
 404832c:	30c00115 	stw	r3,4(r6)
 4048330:	308d883a 	add	r6,r6,r2
 4048334:	30800015 	stw	r2,0(r6)
 4048338:	003f7806 	br	404811c <__flash_rwdata_start+0xfffed9ec>

0404833c <__sfvwrite_r>:
 404833c:	30800217 	ldw	r2,8(r6)
 4048340:	10006726 	beq	r2,zero,40484e0 <__sfvwrite_r+0x1a4>
 4048344:	28c0030b 	ldhu	r3,12(r5)
 4048348:	defff404 	addi	sp,sp,-48
 404834c:	dd400715 	stw	r21,28(sp)
 4048350:	dd000615 	stw	r20,24(sp)
 4048354:	dc000215 	stw	r16,8(sp)
 4048358:	dfc00b15 	stw	ra,44(sp)
 404835c:	df000a15 	stw	fp,40(sp)
 4048360:	ddc00915 	stw	r23,36(sp)
 4048364:	dd800815 	stw	r22,32(sp)
 4048368:	dcc00515 	stw	r19,20(sp)
 404836c:	dc800415 	stw	r18,16(sp)
 4048370:	dc400315 	stw	r17,12(sp)
 4048374:	1880020c 	andi	r2,r3,8
 4048378:	2821883a 	mov	r16,r5
 404837c:	202b883a 	mov	r21,r4
 4048380:	3029883a 	mov	r20,r6
 4048384:	10002726 	beq	r2,zero,4048424 <__sfvwrite_r+0xe8>
 4048388:	28800417 	ldw	r2,16(r5)
 404838c:	10002526 	beq	r2,zero,4048424 <__sfvwrite_r+0xe8>
 4048390:	1880008c 	andi	r2,r3,2
 4048394:	a4400017 	ldw	r17,0(r20)
 4048398:	10002a26 	beq	r2,zero,4048444 <__sfvwrite_r+0x108>
 404839c:	05a00034 	movhi	r22,32768
 40483a0:	0027883a 	mov	r19,zero
 40483a4:	0025883a 	mov	r18,zero
 40483a8:	b5bf0004 	addi	r22,r22,-1024
 40483ac:	980d883a 	mov	r6,r19
 40483b0:	a809883a 	mov	r4,r21
 40483b4:	90004626 	beq	r18,zero,40484d0 <__sfvwrite_r+0x194>
 40483b8:	900f883a 	mov	r7,r18
 40483bc:	b480022e 	bgeu	r22,r18,40483c8 <__sfvwrite_r+0x8c>
 40483c0:	01e00034 	movhi	r7,32768
 40483c4:	39ff0004 	addi	r7,r7,-1024
 40483c8:	80800917 	ldw	r2,36(r16)
 40483cc:	81400717 	ldw	r5,28(r16)
 40483d0:	103ee83a 	callr	r2
 40483d4:	0080570e 	bge	zero,r2,4048534 <__sfvwrite_r+0x1f8>
 40483d8:	a0c00217 	ldw	r3,8(r20)
 40483dc:	98a7883a 	add	r19,r19,r2
 40483e0:	90a5c83a 	sub	r18,r18,r2
 40483e4:	1885c83a 	sub	r2,r3,r2
 40483e8:	a0800215 	stw	r2,8(r20)
 40483ec:	103fef1e 	bne	r2,zero,40483ac <__flash_rwdata_start+0xfffedc7c>
 40483f0:	0005883a 	mov	r2,zero
 40483f4:	dfc00b17 	ldw	ra,44(sp)
 40483f8:	df000a17 	ldw	fp,40(sp)
 40483fc:	ddc00917 	ldw	r23,36(sp)
 4048400:	dd800817 	ldw	r22,32(sp)
 4048404:	dd400717 	ldw	r21,28(sp)
 4048408:	dd000617 	ldw	r20,24(sp)
 404840c:	dcc00517 	ldw	r19,20(sp)
 4048410:	dc800417 	ldw	r18,16(sp)
 4048414:	dc400317 	ldw	r17,12(sp)
 4048418:	dc000217 	ldw	r16,8(sp)
 404841c:	dec00c04 	addi	sp,sp,48
 4048420:	f800283a 	ret
 4048424:	800b883a 	mov	r5,r16
 4048428:	a809883a 	mov	r4,r21
 404842c:	4045ee40 	call	4045ee4 <__swsetup_r>
 4048430:	1000eb1e 	bne	r2,zero,40487e0 <__sfvwrite_r+0x4a4>
 4048434:	80c0030b 	ldhu	r3,12(r16)
 4048438:	a4400017 	ldw	r17,0(r20)
 404843c:	1880008c 	andi	r2,r3,2
 4048440:	103fd61e 	bne	r2,zero,404839c <__flash_rwdata_start+0xfffedc6c>
 4048444:	1880004c 	andi	r2,r3,1
 4048448:	10003f1e 	bne	r2,zero,4048548 <__sfvwrite_r+0x20c>
 404844c:	0039883a 	mov	fp,zero
 4048450:	0025883a 	mov	r18,zero
 4048454:	90001a26 	beq	r18,zero,40484c0 <__sfvwrite_r+0x184>
 4048458:	1880800c 	andi	r2,r3,512
 404845c:	84c00217 	ldw	r19,8(r16)
 4048460:	10002126 	beq	r2,zero,40484e8 <__sfvwrite_r+0x1ac>
 4048464:	982f883a 	mov	r23,r19
 4048468:	94c09336 	bltu	r18,r19,40486b8 <__sfvwrite_r+0x37c>
 404846c:	1881200c 	andi	r2,r3,1152
 4048470:	10009e1e 	bne	r2,zero,40486ec <__sfvwrite_r+0x3b0>
 4048474:	81000017 	ldw	r4,0(r16)
 4048478:	b80d883a 	mov	r6,r23
 404847c:	e00b883a 	mov	r5,fp
 4048480:	4048cfc0 	call	4048cfc <memmove>
 4048484:	80c00217 	ldw	r3,8(r16)
 4048488:	81000017 	ldw	r4,0(r16)
 404848c:	9005883a 	mov	r2,r18
 4048490:	1ce7c83a 	sub	r19,r3,r19
 4048494:	25cf883a 	add	r7,r4,r23
 4048498:	84c00215 	stw	r19,8(r16)
 404849c:	81c00015 	stw	r7,0(r16)
 40484a0:	a0c00217 	ldw	r3,8(r20)
 40484a4:	e0b9883a 	add	fp,fp,r2
 40484a8:	90a5c83a 	sub	r18,r18,r2
 40484ac:	18a7c83a 	sub	r19,r3,r2
 40484b0:	a4c00215 	stw	r19,8(r20)
 40484b4:	983fce26 	beq	r19,zero,40483f0 <__flash_rwdata_start+0xfffedcc0>
 40484b8:	80c0030b 	ldhu	r3,12(r16)
 40484bc:	903fe61e 	bne	r18,zero,4048458 <__flash_rwdata_start+0xfffedd28>
 40484c0:	8f000017 	ldw	fp,0(r17)
 40484c4:	8c800117 	ldw	r18,4(r17)
 40484c8:	8c400204 	addi	r17,r17,8
 40484cc:	003fe106 	br	4048454 <__flash_rwdata_start+0xfffedd24>
 40484d0:	8cc00017 	ldw	r19,0(r17)
 40484d4:	8c800117 	ldw	r18,4(r17)
 40484d8:	8c400204 	addi	r17,r17,8
 40484dc:	003fb306 	br	40483ac <__flash_rwdata_start+0xfffedc7c>
 40484e0:	0005883a 	mov	r2,zero
 40484e4:	f800283a 	ret
 40484e8:	81000017 	ldw	r4,0(r16)
 40484ec:	80800417 	ldw	r2,16(r16)
 40484f0:	11005736 	bltu	r2,r4,4048650 <__sfvwrite_r+0x314>
 40484f4:	85c00517 	ldw	r23,20(r16)
 40484f8:	95c05536 	bltu	r18,r23,4048650 <__sfvwrite_r+0x314>
 40484fc:	00a00034 	movhi	r2,32768
 4048500:	10bfffc4 	addi	r2,r2,-1
 4048504:	9009883a 	mov	r4,r18
 4048508:	1480012e 	bgeu	r2,r18,4048510 <__sfvwrite_r+0x1d4>
 404850c:	1009883a 	mov	r4,r2
 4048510:	b80b883a 	mov	r5,r23
 4048514:	4042eb80 	call	4042eb8 <__divsi3>
 4048518:	15cf383a 	mul	r7,r2,r23
 404851c:	81400717 	ldw	r5,28(r16)
 4048520:	80800917 	ldw	r2,36(r16)
 4048524:	e00d883a 	mov	r6,fp
 4048528:	a809883a 	mov	r4,r21
 404852c:	103ee83a 	callr	r2
 4048530:	00bfdb16 	blt	zero,r2,40484a0 <__flash_rwdata_start+0xfffedd70>
 4048534:	8080030b 	ldhu	r2,12(r16)
 4048538:	10801014 	ori	r2,r2,64
 404853c:	8080030d 	sth	r2,12(r16)
 4048540:	00bfffc4 	movi	r2,-1
 4048544:	003fab06 	br	40483f4 <__flash_rwdata_start+0xfffedcc4>
 4048548:	0027883a 	mov	r19,zero
 404854c:	0011883a 	mov	r8,zero
 4048550:	0039883a 	mov	fp,zero
 4048554:	0025883a 	mov	r18,zero
 4048558:	90001f26 	beq	r18,zero,40485d8 <__sfvwrite_r+0x29c>
 404855c:	40005a26 	beq	r8,zero,40486c8 <__sfvwrite_r+0x38c>
 4048560:	982d883a 	mov	r22,r19
 4048564:	94c0012e 	bgeu	r18,r19,404856c <__sfvwrite_r+0x230>
 4048568:	902d883a 	mov	r22,r18
 404856c:	81000017 	ldw	r4,0(r16)
 4048570:	80800417 	ldw	r2,16(r16)
 4048574:	b02f883a 	mov	r23,r22
 4048578:	81c00517 	ldw	r7,20(r16)
 404857c:	1100032e 	bgeu	r2,r4,404858c <__sfvwrite_r+0x250>
 4048580:	80c00217 	ldw	r3,8(r16)
 4048584:	38c7883a 	add	r3,r7,r3
 4048588:	1d801816 	blt	r3,r22,40485ec <__sfvwrite_r+0x2b0>
 404858c:	b1c03e16 	blt	r22,r7,4048688 <__sfvwrite_r+0x34c>
 4048590:	80800917 	ldw	r2,36(r16)
 4048594:	81400717 	ldw	r5,28(r16)
 4048598:	e00d883a 	mov	r6,fp
 404859c:	da000115 	stw	r8,4(sp)
 40485a0:	a809883a 	mov	r4,r21
 40485a4:	103ee83a 	callr	r2
 40485a8:	102f883a 	mov	r23,r2
 40485ac:	da000117 	ldw	r8,4(sp)
 40485b0:	00bfe00e 	bge	zero,r2,4048534 <__flash_rwdata_start+0xfffede04>
 40485b4:	9de7c83a 	sub	r19,r19,r23
 40485b8:	98001f26 	beq	r19,zero,4048638 <__sfvwrite_r+0x2fc>
 40485bc:	a0800217 	ldw	r2,8(r20)
 40485c0:	e5f9883a 	add	fp,fp,r23
 40485c4:	95e5c83a 	sub	r18,r18,r23
 40485c8:	15efc83a 	sub	r23,r2,r23
 40485cc:	a5c00215 	stw	r23,8(r20)
 40485d0:	b83f8726 	beq	r23,zero,40483f0 <__flash_rwdata_start+0xfffedcc0>
 40485d4:	903fe11e 	bne	r18,zero,404855c <__flash_rwdata_start+0xfffede2c>
 40485d8:	8f000017 	ldw	fp,0(r17)
 40485dc:	8c800117 	ldw	r18,4(r17)
 40485e0:	0011883a 	mov	r8,zero
 40485e4:	8c400204 	addi	r17,r17,8
 40485e8:	003fdb06 	br	4048558 <__flash_rwdata_start+0xfffede28>
 40485ec:	180d883a 	mov	r6,r3
 40485f0:	e00b883a 	mov	r5,fp
 40485f4:	da000115 	stw	r8,4(sp)
 40485f8:	d8c00015 	stw	r3,0(sp)
 40485fc:	4048cfc0 	call	4048cfc <memmove>
 4048600:	d8c00017 	ldw	r3,0(sp)
 4048604:	80800017 	ldw	r2,0(r16)
 4048608:	800b883a 	mov	r5,r16
 404860c:	a809883a 	mov	r4,r21
 4048610:	10c5883a 	add	r2,r2,r3
 4048614:	80800015 	stw	r2,0(r16)
 4048618:	d8c00015 	stw	r3,0(sp)
 404861c:	4047adc0 	call	4047adc <_fflush_r>
 4048620:	d8c00017 	ldw	r3,0(sp)
 4048624:	da000117 	ldw	r8,4(sp)
 4048628:	103fc21e 	bne	r2,zero,4048534 <__flash_rwdata_start+0xfffede04>
 404862c:	182f883a 	mov	r23,r3
 4048630:	9de7c83a 	sub	r19,r19,r23
 4048634:	983fe11e 	bne	r19,zero,40485bc <__flash_rwdata_start+0xfffede8c>
 4048638:	800b883a 	mov	r5,r16
 404863c:	a809883a 	mov	r4,r21
 4048640:	4047adc0 	call	4047adc <_fflush_r>
 4048644:	103fbb1e 	bne	r2,zero,4048534 <__flash_rwdata_start+0xfffede04>
 4048648:	0011883a 	mov	r8,zero
 404864c:	003fdb06 	br	40485bc <__flash_rwdata_start+0xfffede8c>
 4048650:	94c0012e 	bgeu	r18,r19,4048658 <__sfvwrite_r+0x31c>
 4048654:	9027883a 	mov	r19,r18
 4048658:	980d883a 	mov	r6,r19
 404865c:	e00b883a 	mov	r5,fp
 4048660:	4048cfc0 	call	4048cfc <memmove>
 4048664:	80800217 	ldw	r2,8(r16)
 4048668:	80c00017 	ldw	r3,0(r16)
 404866c:	14c5c83a 	sub	r2,r2,r19
 4048670:	1cc7883a 	add	r3,r3,r19
 4048674:	80800215 	stw	r2,8(r16)
 4048678:	80c00015 	stw	r3,0(r16)
 404867c:	10004326 	beq	r2,zero,404878c <__sfvwrite_r+0x450>
 4048680:	9805883a 	mov	r2,r19
 4048684:	003f8606 	br	40484a0 <__flash_rwdata_start+0xfffedd70>
 4048688:	b00d883a 	mov	r6,r22
 404868c:	e00b883a 	mov	r5,fp
 4048690:	da000115 	stw	r8,4(sp)
 4048694:	4048cfc0 	call	4048cfc <memmove>
 4048698:	80800217 	ldw	r2,8(r16)
 404869c:	80c00017 	ldw	r3,0(r16)
 40486a0:	da000117 	ldw	r8,4(sp)
 40486a4:	1585c83a 	sub	r2,r2,r22
 40486a8:	1dad883a 	add	r22,r3,r22
 40486ac:	80800215 	stw	r2,8(r16)
 40486b0:	85800015 	stw	r22,0(r16)
 40486b4:	003fbf06 	br	40485b4 <__flash_rwdata_start+0xfffede84>
 40486b8:	81000017 	ldw	r4,0(r16)
 40486bc:	9027883a 	mov	r19,r18
 40486c0:	902f883a 	mov	r23,r18
 40486c4:	003f6c06 	br	4048478 <__flash_rwdata_start+0xfffedd48>
 40486c8:	900d883a 	mov	r6,r18
 40486cc:	01400284 	movi	r5,10
 40486d0:	e009883a 	mov	r4,fp
 40486d4:	4048c180 	call	4048c18 <memchr>
 40486d8:	10003e26 	beq	r2,zero,40487d4 <__sfvwrite_r+0x498>
 40486dc:	10800044 	addi	r2,r2,1
 40486e0:	1727c83a 	sub	r19,r2,fp
 40486e4:	02000044 	movi	r8,1
 40486e8:	003f9d06 	br	4048560 <__flash_rwdata_start+0xfffede30>
 40486ec:	80800517 	ldw	r2,20(r16)
 40486f0:	81400417 	ldw	r5,16(r16)
 40486f4:	81c00017 	ldw	r7,0(r16)
 40486f8:	10a7883a 	add	r19,r2,r2
 40486fc:	9885883a 	add	r2,r19,r2
 4048700:	1026d7fa 	srli	r19,r2,31
 4048704:	396dc83a 	sub	r22,r7,r5
 4048708:	b1000044 	addi	r4,r22,1
 404870c:	9885883a 	add	r2,r19,r2
 4048710:	1027d07a 	srai	r19,r2,1
 4048714:	2485883a 	add	r2,r4,r18
 4048718:	980d883a 	mov	r6,r19
 404871c:	9880022e 	bgeu	r19,r2,4048728 <__sfvwrite_r+0x3ec>
 4048720:	1027883a 	mov	r19,r2
 4048724:	100d883a 	mov	r6,r2
 4048728:	18c1000c 	andi	r3,r3,1024
 404872c:	18001c26 	beq	r3,zero,40487a0 <__sfvwrite_r+0x464>
 4048730:	300b883a 	mov	r5,r6
 4048734:	a809883a 	mov	r4,r21
 4048738:	40430940 	call	4043094 <_malloc_r>
 404873c:	102f883a 	mov	r23,r2
 4048740:	10002926 	beq	r2,zero,40487e8 <__sfvwrite_r+0x4ac>
 4048744:	81400417 	ldw	r5,16(r16)
 4048748:	b00d883a 	mov	r6,r22
 404874c:	1009883a 	mov	r4,r2
 4048750:	40438a00 	call	40438a0 <memcpy>
 4048754:	8080030b 	ldhu	r2,12(r16)
 4048758:	00fedfc4 	movi	r3,-1153
 404875c:	10c4703a 	and	r2,r2,r3
 4048760:	10802014 	ori	r2,r2,128
 4048764:	8080030d 	sth	r2,12(r16)
 4048768:	bd89883a 	add	r4,r23,r22
 404876c:	9d8fc83a 	sub	r7,r19,r22
 4048770:	85c00415 	stw	r23,16(r16)
 4048774:	84c00515 	stw	r19,20(r16)
 4048778:	81000015 	stw	r4,0(r16)
 404877c:	9027883a 	mov	r19,r18
 4048780:	81c00215 	stw	r7,8(r16)
 4048784:	902f883a 	mov	r23,r18
 4048788:	003f3b06 	br	4048478 <__flash_rwdata_start+0xfffedd48>
 404878c:	800b883a 	mov	r5,r16
 4048790:	a809883a 	mov	r4,r21
 4048794:	4047adc0 	call	4047adc <_fflush_r>
 4048798:	103fb926 	beq	r2,zero,4048680 <__flash_rwdata_start+0xfffedf50>
 404879c:	003f6506 	br	4048534 <__flash_rwdata_start+0xfffede04>
 40487a0:	a809883a 	mov	r4,r21
 40487a4:	4049f7c0 	call	4049f7c <_realloc_r>
 40487a8:	102f883a 	mov	r23,r2
 40487ac:	103fee1e 	bne	r2,zero,4048768 <__flash_rwdata_start+0xfffee038>
 40487b0:	81400417 	ldw	r5,16(r16)
 40487b4:	a809883a 	mov	r4,r21
 40487b8:	404802c0 	call	404802c <_free_r>
 40487bc:	8080030b 	ldhu	r2,12(r16)
 40487c0:	00ffdfc4 	movi	r3,-129
 40487c4:	1884703a 	and	r2,r3,r2
 40487c8:	00c00304 	movi	r3,12
 40487cc:	a8c00015 	stw	r3,0(r21)
 40487d0:	003f5906 	br	4048538 <__flash_rwdata_start+0xfffede08>
 40487d4:	94c00044 	addi	r19,r18,1
 40487d8:	02000044 	movi	r8,1
 40487dc:	003f6006 	br	4048560 <__flash_rwdata_start+0xfffede30>
 40487e0:	00bfffc4 	movi	r2,-1
 40487e4:	003f0306 	br	40483f4 <__flash_rwdata_start+0xfffedcc4>
 40487e8:	00800304 	movi	r2,12
 40487ec:	a8800015 	stw	r2,0(r21)
 40487f0:	8080030b 	ldhu	r2,12(r16)
 40487f4:	003f5006 	br	4048538 <__flash_rwdata_start+0xfffede08>

040487f8 <_fwalk>:
 40487f8:	defff704 	addi	sp,sp,-36
 40487fc:	dd000415 	stw	r20,16(sp)
 4048800:	dfc00815 	stw	ra,32(sp)
 4048804:	ddc00715 	stw	r23,28(sp)
 4048808:	dd800615 	stw	r22,24(sp)
 404880c:	dd400515 	stw	r21,20(sp)
 4048810:	dcc00315 	stw	r19,12(sp)
 4048814:	dc800215 	stw	r18,8(sp)
 4048818:	dc400115 	stw	r17,4(sp)
 404881c:	dc000015 	stw	r16,0(sp)
 4048820:	2500b804 	addi	r20,r4,736
 4048824:	a0002326 	beq	r20,zero,40488b4 <_fwalk+0xbc>
 4048828:	282b883a 	mov	r21,r5
 404882c:	002f883a 	mov	r23,zero
 4048830:	05800044 	movi	r22,1
 4048834:	04ffffc4 	movi	r19,-1
 4048838:	a4400117 	ldw	r17,4(r20)
 404883c:	a4800217 	ldw	r18,8(r20)
 4048840:	8c7fffc4 	addi	r17,r17,-1
 4048844:	88000d16 	blt	r17,zero,404887c <_fwalk+0x84>
 4048848:	94000304 	addi	r16,r18,12
 404884c:	94800384 	addi	r18,r18,14
 4048850:	8080000b 	ldhu	r2,0(r16)
 4048854:	8c7fffc4 	addi	r17,r17,-1
 4048858:	813ffd04 	addi	r4,r16,-12
 404885c:	b080042e 	bgeu	r22,r2,4048870 <_fwalk+0x78>
 4048860:	9080000f 	ldh	r2,0(r18)
 4048864:	14c00226 	beq	r2,r19,4048870 <_fwalk+0x78>
 4048868:	a83ee83a 	callr	r21
 404886c:	b8aeb03a 	or	r23,r23,r2
 4048870:	84001a04 	addi	r16,r16,104
 4048874:	94801a04 	addi	r18,r18,104
 4048878:	8cfff51e 	bne	r17,r19,4048850 <__flash_rwdata_start+0xfffee120>
 404887c:	a5000017 	ldw	r20,0(r20)
 4048880:	a03fed1e 	bne	r20,zero,4048838 <__flash_rwdata_start+0xfffee108>
 4048884:	b805883a 	mov	r2,r23
 4048888:	dfc00817 	ldw	ra,32(sp)
 404888c:	ddc00717 	ldw	r23,28(sp)
 4048890:	dd800617 	ldw	r22,24(sp)
 4048894:	dd400517 	ldw	r21,20(sp)
 4048898:	dd000417 	ldw	r20,16(sp)
 404889c:	dcc00317 	ldw	r19,12(sp)
 40488a0:	dc800217 	ldw	r18,8(sp)
 40488a4:	dc400117 	ldw	r17,4(sp)
 40488a8:	dc000017 	ldw	r16,0(sp)
 40488ac:	dec00904 	addi	sp,sp,36
 40488b0:	f800283a 	ret
 40488b4:	002f883a 	mov	r23,zero
 40488b8:	003ff206 	br	4048884 <__flash_rwdata_start+0xfffee154>

040488bc <_fwalk_reent>:
 40488bc:	defff704 	addi	sp,sp,-36
 40488c0:	dd000415 	stw	r20,16(sp)
 40488c4:	dfc00815 	stw	ra,32(sp)
 40488c8:	ddc00715 	stw	r23,28(sp)
 40488cc:	dd800615 	stw	r22,24(sp)
 40488d0:	dd400515 	stw	r21,20(sp)
 40488d4:	dcc00315 	stw	r19,12(sp)
 40488d8:	dc800215 	stw	r18,8(sp)
 40488dc:	dc400115 	stw	r17,4(sp)
 40488e0:	dc000015 	stw	r16,0(sp)
 40488e4:	2500b804 	addi	r20,r4,736
 40488e8:	a0002326 	beq	r20,zero,4048978 <_fwalk_reent+0xbc>
 40488ec:	282b883a 	mov	r21,r5
 40488f0:	2027883a 	mov	r19,r4
 40488f4:	002f883a 	mov	r23,zero
 40488f8:	05800044 	movi	r22,1
 40488fc:	04bfffc4 	movi	r18,-1
 4048900:	a4400117 	ldw	r17,4(r20)
 4048904:	a4000217 	ldw	r16,8(r20)
 4048908:	8c7fffc4 	addi	r17,r17,-1
 404890c:	88000c16 	blt	r17,zero,4048940 <_fwalk_reent+0x84>
 4048910:	84000304 	addi	r16,r16,12
 4048914:	8080000b 	ldhu	r2,0(r16)
 4048918:	8c7fffc4 	addi	r17,r17,-1
 404891c:	817ffd04 	addi	r5,r16,-12
 4048920:	b080052e 	bgeu	r22,r2,4048938 <_fwalk_reent+0x7c>
 4048924:	8080008f 	ldh	r2,2(r16)
 4048928:	9809883a 	mov	r4,r19
 404892c:	14800226 	beq	r2,r18,4048938 <_fwalk_reent+0x7c>
 4048930:	a83ee83a 	callr	r21
 4048934:	b8aeb03a 	or	r23,r23,r2
 4048938:	84001a04 	addi	r16,r16,104
 404893c:	8cbff51e 	bne	r17,r18,4048914 <__flash_rwdata_start+0xfffee1e4>
 4048940:	a5000017 	ldw	r20,0(r20)
 4048944:	a03fee1e 	bne	r20,zero,4048900 <__flash_rwdata_start+0xfffee1d0>
 4048948:	b805883a 	mov	r2,r23
 404894c:	dfc00817 	ldw	ra,32(sp)
 4048950:	ddc00717 	ldw	r23,28(sp)
 4048954:	dd800617 	ldw	r22,24(sp)
 4048958:	dd400517 	ldw	r21,20(sp)
 404895c:	dd000417 	ldw	r20,16(sp)
 4048960:	dcc00317 	ldw	r19,12(sp)
 4048964:	dc800217 	ldw	r18,8(sp)
 4048968:	dc400117 	ldw	r17,4(sp)
 404896c:	dc000017 	ldw	r16,0(sp)
 4048970:	dec00904 	addi	sp,sp,36
 4048974:	f800283a 	ret
 4048978:	002f883a 	mov	r23,zero
 404897c:	003ff206 	br	4048948 <__flash_rwdata_start+0xfffee218>

04048980 <_setlocale_r>:
 4048980:	30001b26 	beq	r6,zero,40489f0 <_setlocale_r+0x70>
 4048984:	01408034 	movhi	r5,512
 4048988:	defffe04 	addi	sp,sp,-8
 404898c:	2940b104 	addi	r5,r5,708
 4048990:	3009883a 	mov	r4,r6
 4048994:	dc000015 	stw	r16,0(sp)
 4048998:	dfc00115 	stw	ra,4(sp)
 404899c:	3021883a 	mov	r16,r6
 40489a0:	404a6900 	call	404a690 <strcmp>
 40489a4:	1000061e 	bne	r2,zero,40489c0 <_setlocale_r+0x40>
 40489a8:	00808034 	movhi	r2,512
 40489ac:	1080b004 	addi	r2,r2,704
 40489b0:	dfc00117 	ldw	ra,4(sp)
 40489b4:	dc000017 	ldw	r16,0(sp)
 40489b8:	dec00204 	addi	sp,sp,8
 40489bc:	f800283a 	ret
 40489c0:	01408034 	movhi	r5,512
 40489c4:	2940b004 	addi	r5,r5,704
 40489c8:	8009883a 	mov	r4,r16
 40489cc:	404a6900 	call	404a690 <strcmp>
 40489d0:	103ff526 	beq	r2,zero,40489a8 <__flash_rwdata_start+0xfffee278>
 40489d4:	01408034 	movhi	r5,512
 40489d8:	29409b04 	addi	r5,r5,620
 40489dc:	8009883a 	mov	r4,r16
 40489e0:	404a6900 	call	404a690 <strcmp>
 40489e4:	103ff026 	beq	r2,zero,40489a8 <__flash_rwdata_start+0xfffee278>
 40489e8:	0005883a 	mov	r2,zero
 40489ec:	003ff006 	br	40489b0 <__flash_rwdata_start+0xfffee280>
 40489f0:	00808034 	movhi	r2,512
 40489f4:	1080b004 	addi	r2,r2,704
 40489f8:	f800283a 	ret

040489fc <__locale_charset>:
 40489fc:	00808034 	movhi	r2,512
 4048a00:	1083cb04 	addi	r2,r2,3884
 4048a04:	f800283a 	ret

04048a08 <__locale_mb_cur_max>:
 4048a08:	00808034 	movhi	r2,512
 4048a0c:	10886a04 	addi	r2,r2,8616
 4048a10:	10800017 	ldw	r2,0(r2)
 4048a14:	f800283a 	ret

04048a18 <__locale_msgcharset>:
 4048a18:	00808034 	movhi	r2,512
 4048a1c:	1083c304 	addi	r2,r2,3852
 4048a20:	f800283a 	ret

04048a24 <__locale_cjk_lang>:
 4048a24:	0005883a 	mov	r2,zero
 4048a28:	f800283a 	ret

04048a2c <_localeconv_r>:
 4048a2c:	00808034 	movhi	r2,512
 4048a30:	1083d304 	addi	r2,r2,3916
 4048a34:	f800283a 	ret

04048a38 <setlocale>:
 4048a38:	00808034 	movhi	r2,512
 4048a3c:	10886904 	addi	r2,r2,8612
 4048a40:	280d883a 	mov	r6,r5
 4048a44:	200b883a 	mov	r5,r4
 4048a48:	11000017 	ldw	r4,0(r2)
 4048a4c:	40489801 	jmpi	4048980 <_setlocale_r>

04048a50 <localeconv>:
 4048a50:	00808034 	movhi	r2,512
 4048a54:	1083d304 	addi	r2,r2,3916
 4048a58:	f800283a 	ret

04048a5c <__smakebuf_r>:
 4048a5c:	2880030b 	ldhu	r2,12(r5)
 4048a60:	10c0008c 	andi	r3,r2,2
 4048a64:	1800411e 	bne	r3,zero,4048b6c <__smakebuf_r+0x110>
 4048a68:	deffec04 	addi	sp,sp,-80
 4048a6c:	dc000f15 	stw	r16,60(sp)
 4048a70:	2821883a 	mov	r16,r5
 4048a74:	2940038f 	ldh	r5,14(r5)
 4048a78:	dc401015 	stw	r17,64(sp)
 4048a7c:	dfc01315 	stw	ra,76(sp)
 4048a80:	dcc01215 	stw	r19,72(sp)
 4048a84:	dc801115 	stw	r18,68(sp)
 4048a88:	2023883a 	mov	r17,r4
 4048a8c:	28001c16 	blt	r5,zero,4048b00 <__smakebuf_r+0xa4>
 4048a90:	d80d883a 	mov	r6,sp
 4048a94:	404c2380 	call	404c238 <_fstat_r>
 4048a98:	10001816 	blt	r2,zero,4048afc <__smakebuf_r+0xa0>
 4048a9c:	d8800117 	ldw	r2,4(sp)
 4048aa0:	00e00014 	movui	r3,32768
 4048aa4:	10bc000c 	andi	r2,r2,61440
 4048aa8:	14c80020 	cmpeqi	r19,r2,8192
 4048aac:	10c03726 	beq	r2,r3,4048b8c <__smakebuf_r+0x130>
 4048ab0:	80c0030b 	ldhu	r3,12(r16)
 4048ab4:	18c20014 	ori	r3,r3,2048
 4048ab8:	80c0030d 	sth	r3,12(r16)
 4048abc:	00c80004 	movi	r3,8192
 4048ac0:	10c0521e 	bne	r2,r3,4048c0c <__smakebuf_r+0x1b0>
 4048ac4:	8140038f 	ldh	r5,14(r16)
 4048ac8:	8809883a 	mov	r4,r17
 4048acc:	404c2940 	call	404c294 <_isatty_r>
 4048ad0:	10004c26 	beq	r2,zero,4048c04 <__smakebuf_r+0x1a8>
 4048ad4:	8080030b 	ldhu	r2,12(r16)
 4048ad8:	80c010c4 	addi	r3,r16,67
 4048adc:	80c00015 	stw	r3,0(r16)
 4048ae0:	10800054 	ori	r2,r2,1
 4048ae4:	8080030d 	sth	r2,12(r16)
 4048ae8:	00800044 	movi	r2,1
 4048aec:	80c00415 	stw	r3,16(r16)
 4048af0:	80800515 	stw	r2,20(r16)
 4048af4:	04810004 	movi	r18,1024
 4048af8:	00000706 	br	4048b18 <__smakebuf_r+0xbc>
 4048afc:	8080030b 	ldhu	r2,12(r16)
 4048b00:	10c0200c 	andi	r3,r2,128
 4048b04:	18001f1e 	bne	r3,zero,4048b84 <__smakebuf_r+0x128>
 4048b08:	04810004 	movi	r18,1024
 4048b0c:	10820014 	ori	r2,r2,2048
 4048b10:	8080030d 	sth	r2,12(r16)
 4048b14:	0027883a 	mov	r19,zero
 4048b18:	900b883a 	mov	r5,r18
 4048b1c:	8809883a 	mov	r4,r17
 4048b20:	40430940 	call	4043094 <_malloc_r>
 4048b24:	10002c26 	beq	r2,zero,4048bd8 <__smakebuf_r+0x17c>
 4048b28:	80c0030b 	ldhu	r3,12(r16)
 4048b2c:	01010134 	movhi	r4,1028
 4048b30:	211edc04 	addi	r4,r4,31600
 4048b34:	89000f15 	stw	r4,60(r17)
 4048b38:	18c02014 	ori	r3,r3,128
 4048b3c:	80c0030d 	sth	r3,12(r16)
 4048b40:	80800015 	stw	r2,0(r16)
 4048b44:	80800415 	stw	r2,16(r16)
 4048b48:	84800515 	stw	r18,20(r16)
 4048b4c:	98001a1e 	bne	r19,zero,4048bb8 <__smakebuf_r+0x15c>
 4048b50:	dfc01317 	ldw	ra,76(sp)
 4048b54:	dcc01217 	ldw	r19,72(sp)
 4048b58:	dc801117 	ldw	r18,68(sp)
 4048b5c:	dc401017 	ldw	r17,64(sp)
 4048b60:	dc000f17 	ldw	r16,60(sp)
 4048b64:	dec01404 	addi	sp,sp,80
 4048b68:	f800283a 	ret
 4048b6c:	288010c4 	addi	r2,r5,67
 4048b70:	28800015 	stw	r2,0(r5)
 4048b74:	28800415 	stw	r2,16(r5)
 4048b78:	00800044 	movi	r2,1
 4048b7c:	28800515 	stw	r2,20(r5)
 4048b80:	f800283a 	ret
 4048b84:	04801004 	movi	r18,64
 4048b88:	003fe006 	br	4048b0c <__flash_rwdata_start+0xfffee3dc>
 4048b8c:	81000a17 	ldw	r4,40(r16)
 4048b90:	00c10174 	movhi	r3,1029
 4048b94:	18e98b04 	addi	r3,r3,-22996
 4048b98:	20ffc51e 	bne	r4,r3,4048ab0 <__flash_rwdata_start+0xfffee380>
 4048b9c:	8080030b 	ldhu	r2,12(r16)
 4048ba0:	04810004 	movi	r18,1024
 4048ba4:	84801315 	stw	r18,76(r16)
 4048ba8:	1484b03a 	or	r2,r2,r18
 4048bac:	8080030d 	sth	r2,12(r16)
 4048bb0:	0027883a 	mov	r19,zero
 4048bb4:	003fd806 	br	4048b18 <__flash_rwdata_start+0xfffee3e8>
 4048bb8:	8140038f 	ldh	r5,14(r16)
 4048bbc:	8809883a 	mov	r4,r17
 4048bc0:	404c2940 	call	404c294 <_isatty_r>
 4048bc4:	103fe226 	beq	r2,zero,4048b50 <__flash_rwdata_start+0xfffee420>
 4048bc8:	8080030b 	ldhu	r2,12(r16)
 4048bcc:	10800054 	ori	r2,r2,1
 4048bd0:	8080030d 	sth	r2,12(r16)
 4048bd4:	003fde06 	br	4048b50 <__flash_rwdata_start+0xfffee420>
 4048bd8:	8080030b 	ldhu	r2,12(r16)
 4048bdc:	10c0800c 	andi	r3,r2,512
 4048be0:	183fdb1e 	bne	r3,zero,4048b50 <__flash_rwdata_start+0xfffee420>
 4048be4:	10800094 	ori	r2,r2,2
 4048be8:	80c010c4 	addi	r3,r16,67
 4048bec:	8080030d 	sth	r2,12(r16)
 4048bf0:	00800044 	movi	r2,1
 4048bf4:	80c00015 	stw	r3,0(r16)
 4048bf8:	80c00415 	stw	r3,16(r16)
 4048bfc:	80800515 	stw	r2,20(r16)
 4048c00:	003fd306 	br	4048b50 <__flash_rwdata_start+0xfffee420>
 4048c04:	04810004 	movi	r18,1024
 4048c08:	003fc306 	br	4048b18 <__flash_rwdata_start+0xfffee3e8>
 4048c0c:	0027883a 	mov	r19,zero
 4048c10:	04810004 	movi	r18,1024
 4048c14:	003fc006 	br	4048b18 <__flash_rwdata_start+0xfffee3e8>

04048c18 <memchr>:
 4048c18:	208000cc 	andi	r2,r4,3
 4048c1c:	280f883a 	mov	r7,r5
 4048c20:	10003426 	beq	r2,zero,4048cf4 <memchr+0xdc>
 4048c24:	30bfffc4 	addi	r2,r6,-1
 4048c28:	30001a26 	beq	r6,zero,4048c94 <memchr+0x7c>
 4048c2c:	20c00003 	ldbu	r3,0(r4)
 4048c30:	29803fcc 	andi	r6,r5,255
 4048c34:	30c0051e 	bne	r6,r3,4048c4c <memchr+0x34>
 4048c38:	00001806 	br	4048c9c <memchr+0x84>
 4048c3c:	10001526 	beq	r2,zero,4048c94 <memchr+0x7c>
 4048c40:	20c00003 	ldbu	r3,0(r4)
 4048c44:	10bfffc4 	addi	r2,r2,-1
 4048c48:	30c01426 	beq	r6,r3,4048c9c <memchr+0x84>
 4048c4c:	21000044 	addi	r4,r4,1
 4048c50:	20c000cc 	andi	r3,r4,3
 4048c54:	183ff91e 	bne	r3,zero,4048c3c <__flash_rwdata_start+0xfffee50c>
 4048c58:	020000c4 	movi	r8,3
 4048c5c:	40801136 	bltu	r8,r2,4048ca4 <memchr+0x8c>
 4048c60:	10000c26 	beq	r2,zero,4048c94 <memchr+0x7c>
 4048c64:	20c00003 	ldbu	r3,0(r4)
 4048c68:	29403fcc 	andi	r5,r5,255
 4048c6c:	28c00b26 	beq	r5,r3,4048c9c <memchr+0x84>
 4048c70:	20c00044 	addi	r3,r4,1
 4048c74:	39803fcc 	andi	r6,r7,255
 4048c78:	2089883a 	add	r4,r4,r2
 4048c7c:	00000306 	br	4048c8c <memchr+0x74>
 4048c80:	18c00044 	addi	r3,r3,1
 4048c84:	197fffc3 	ldbu	r5,-1(r3)
 4048c88:	31400526 	beq	r6,r5,4048ca0 <memchr+0x88>
 4048c8c:	1805883a 	mov	r2,r3
 4048c90:	20fffb1e 	bne	r4,r3,4048c80 <__flash_rwdata_start+0xfffee550>
 4048c94:	0005883a 	mov	r2,zero
 4048c98:	f800283a 	ret
 4048c9c:	2005883a 	mov	r2,r4
 4048ca0:	f800283a 	ret
 4048ca4:	28c03fcc 	andi	r3,r5,255
 4048ca8:	1812923a 	slli	r9,r3,8
 4048cac:	02ffbff4 	movhi	r11,65279
 4048cb0:	02a02074 	movhi	r10,32897
 4048cb4:	48d2b03a 	or	r9,r9,r3
 4048cb8:	4806943a 	slli	r3,r9,16
 4048cbc:	5affbfc4 	addi	r11,r11,-257
 4048cc0:	52a02004 	addi	r10,r10,-32640
 4048cc4:	48d2b03a 	or	r9,r9,r3
 4048cc8:	20c00017 	ldw	r3,0(r4)
 4048ccc:	48c6f03a 	xor	r3,r9,r3
 4048cd0:	1acd883a 	add	r6,r3,r11
 4048cd4:	00c6303a 	nor	r3,zero,r3
 4048cd8:	30c6703a 	and	r3,r6,r3
 4048cdc:	1a86703a 	and	r3,r3,r10
 4048ce0:	183fe01e 	bne	r3,zero,4048c64 <__flash_rwdata_start+0xfffee534>
 4048ce4:	10bfff04 	addi	r2,r2,-4
 4048ce8:	21000104 	addi	r4,r4,4
 4048cec:	40bff636 	bltu	r8,r2,4048cc8 <__flash_rwdata_start+0xfffee598>
 4048cf0:	003fdb06 	br	4048c60 <__flash_rwdata_start+0xfffee530>
 4048cf4:	3005883a 	mov	r2,r6
 4048cf8:	003fd706 	br	4048c58 <__flash_rwdata_start+0xfffee528>

04048cfc <memmove>:
 4048cfc:	2005883a 	mov	r2,r4
 4048d00:	29000b2e 	bgeu	r5,r4,4048d30 <memmove+0x34>
 4048d04:	298f883a 	add	r7,r5,r6
 4048d08:	21c0092e 	bgeu	r4,r7,4048d30 <memmove+0x34>
 4048d0c:	2187883a 	add	r3,r4,r6
 4048d10:	198bc83a 	sub	r5,r3,r6
 4048d14:	30004826 	beq	r6,zero,4048e38 <memmove+0x13c>
 4048d18:	39ffffc4 	addi	r7,r7,-1
 4048d1c:	39000003 	ldbu	r4,0(r7)
 4048d20:	18ffffc4 	addi	r3,r3,-1
 4048d24:	19000005 	stb	r4,0(r3)
 4048d28:	28fffb1e 	bne	r5,r3,4048d18 <__flash_rwdata_start+0xfffee5e8>
 4048d2c:	f800283a 	ret
 4048d30:	00c003c4 	movi	r3,15
 4048d34:	1980412e 	bgeu	r3,r6,4048e3c <memmove+0x140>
 4048d38:	2886b03a 	or	r3,r5,r2
 4048d3c:	18c000cc 	andi	r3,r3,3
 4048d40:	1800401e 	bne	r3,zero,4048e44 <memmove+0x148>
 4048d44:	33fffc04 	addi	r15,r6,-16
 4048d48:	781ed13a 	srli	r15,r15,4
 4048d4c:	28c00104 	addi	r3,r5,4
 4048d50:	13400104 	addi	r13,r2,4
 4048d54:	781c913a 	slli	r14,r15,4
 4048d58:	2b000204 	addi	r12,r5,8
 4048d5c:	12c00204 	addi	r11,r2,8
 4048d60:	73800504 	addi	r14,r14,20
 4048d64:	2a800304 	addi	r10,r5,12
 4048d68:	12400304 	addi	r9,r2,12
 4048d6c:	2b9d883a 	add	r14,r5,r14
 4048d70:	2811883a 	mov	r8,r5
 4048d74:	100f883a 	mov	r7,r2
 4048d78:	41000017 	ldw	r4,0(r8)
 4048d7c:	39c00404 	addi	r7,r7,16
 4048d80:	18c00404 	addi	r3,r3,16
 4048d84:	393ffc15 	stw	r4,-16(r7)
 4048d88:	193ffc17 	ldw	r4,-16(r3)
 4048d8c:	6b400404 	addi	r13,r13,16
 4048d90:	5ac00404 	addi	r11,r11,16
 4048d94:	693ffc15 	stw	r4,-16(r13)
 4048d98:	61000017 	ldw	r4,0(r12)
 4048d9c:	4a400404 	addi	r9,r9,16
 4048da0:	42000404 	addi	r8,r8,16
 4048da4:	593ffc15 	stw	r4,-16(r11)
 4048da8:	51000017 	ldw	r4,0(r10)
 4048dac:	63000404 	addi	r12,r12,16
 4048db0:	52800404 	addi	r10,r10,16
 4048db4:	493ffc15 	stw	r4,-16(r9)
 4048db8:	1bbfef1e 	bne	r3,r14,4048d78 <__flash_rwdata_start+0xfffee648>
 4048dbc:	79000044 	addi	r4,r15,1
 4048dc0:	2008913a 	slli	r4,r4,4
 4048dc4:	328003cc 	andi	r10,r6,15
 4048dc8:	02c000c4 	movi	r11,3
 4048dcc:	1107883a 	add	r3,r2,r4
 4048dd0:	290b883a 	add	r5,r5,r4
 4048dd4:	5a801e2e 	bgeu	r11,r10,4048e50 <memmove+0x154>
 4048dd8:	1813883a 	mov	r9,r3
 4048ddc:	2811883a 	mov	r8,r5
 4048de0:	500f883a 	mov	r7,r10
 4048de4:	41000017 	ldw	r4,0(r8)
 4048de8:	4a400104 	addi	r9,r9,4
 4048dec:	39ffff04 	addi	r7,r7,-4
 4048df0:	493fff15 	stw	r4,-4(r9)
 4048df4:	42000104 	addi	r8,r8,4
 4048df8:	59fffa36 	bltu	r11,r7,4048de4 <__flash_rwdata_start+0xfffee6b4>
 4048dfc:	513fff04 	addi	r4,r10,-4
 4048e00:	2008d0ba 	srli	r4,r4,2
 4048e04:	318000cc 	andi	r6,r6,3
 4048e08:	21000044 	addi	r4,r4,1
 4048e0c:	2109883a 	add	r4,r4,r4
 4048e10:	2109883a 	add	r4,r4,r4
 4048e14:	1907883a 	add	r3,r3,r4
 4048e18:	290b883a 	add	r5,r5,r4
 4048e1c:	30000b26 	beq	r6,zero,4048e4c <memmove+0x150>
 4048e20:	198d883a 	add	r6,r3,r6
 4048e24:	29c00003 	ldbu	r7,0(r5)
 4048e28:	18c00044 	addi	r3,r3,1
 4048e2c:	29400044 	addi	r5,r5,1
 4048e30:	19ffffc5 	stb	r7,-1(r3)
 4048e34:	19bffb1e 	bne	r3,r6,4048e24 <__flash_rwdata_start+0xfffee6f4>
 4048e38:	f800283a 	ret
 4048e3c:	1007883a 	mov	r3,r2
 4048e40:	003ff606 	br	4048e1c <__flash_rwdata_start+0xfffee6ec>
 4048e44:	1007883a 	mov	r3,r2
 4048e48:	003ff506 	br	4048e20 <__flash_rwdata_start+0xfffee6f0>
 4048e4c:	f800283a 	ret
 4048e50:	500d883a 	mov	r6,r10
 4048e54:	003ff106 	br	4048e1c <__flash_rwdata_start+0xfffee6ec>

04048e58 <memset>:
 4048e58:	20c000cc 	andi	r3,r4,3
 4048e5c:	2005883a 	mov	r2,r4
 4048e60:	18004426 	beq	r3,zero,4048f74 <memset+0x11c>
 4048e64:	31ffffc4 	addi	r7,r6,-1
 4048e68:	30004026 	beq	r6,zero,4048f6c <memset+0x114>
 4048e6c:	2813883a 	mov	r9,r5
 4048e70:	200d883a 	mov	r6,r4
 4048e74:	2007883a 	mov	r3,r4
 4048e78:	00000406 	br	4048e8c <memset+0x34>
 4048e7c:	3a3fffc4 	addi	r8,r7,-1
 4048e80:	31800044 	addi	r6,r6,1
 4048e84:	38003926 	beq	r7,zero,4048f6c <memset+0x114>
 4048e88:	400f883a 	mov	r7,r8
 4048e8c:	18c00044 	addi	r3,r3,1
 4048e90:	32400005 	stb	r9,0(r6)
 4048e94:	1a0000cc 	andi	r8,r3,3
 4048e98:	403ff81e 	bne	r8,zero,4048e7c <__flash_rwdata_start+0xfffee74c>
 4048e9c:	010000c4 	movi	r4,3
 4048ea0:	21c02d2e 	bgeu	r4,r7,4048f58 <memset+0x100>
 4048ea4:	29003fcc 	andi	r4,r5,255
 4048ea8:	200c923a 	slli	r6,r4,8
 4048eac:	3108b03a 	or	r4,r6,r4
 4048eb0:	200c943a 	slli	r6,r4,16
 4048eb4:	218cb03a 	or	r6,r4,r6
 4048eb8:	010003c4 	movi	r4,15
 4048ebc:	21c0182e 	bgeu	r4,r7,4048f20 <memset+0xc8>
 4048ec0:	3b3ffc04 	addi	r12,r7,-16
 4048ec4:	6018d13a 	srli	r12,r12,4
 4048ec8:	1a000104 	addi	r8,r3,4
 4048ecc:	1ac00204 	addi	r11,r3,8
 4048ed0:	6008913a 	slli	r4,r12,4
 4048ed4:	1a800304 	addi	r10,r3,12
 4048ed8:	1813883a 	mov	r9,r3
 4048edc:	21000504 	addi	r4,r4,20
 4048ee0:	1909883a 	add	r4,r3,r4
 4048ee4:	49800015 	stw	r6,0(r9)
 4048ee8:	41800015 	stw	r6,0(r8)
 4048eec:	59800015 	stw	r6,0(r11)
 4048ef0:	51800015 	stw	r6,0(r10)
 4048ef4:	42000404 	addi	r8,r8,16
 4048ef8:	4a400404 	addi	r9,r9,16
 4048efc:	5ac00404 	addi	r11,r11,16
 4048f00:	52800404 	addi	r10,r10,16
 4048f04:	413ff71e 	bne	r8,r4,4048ee4 <__flash_rwdata_start+0xfffee7b4>
 4048f08:	63000044 	addi	r12,r12,1
 4048f0c:	6018913a 	slli	r12,r12,4
 4048f10:	39c003cc 	andi	r7,r7,15
 4048f14:	010000c4 	movi	r4,3
 4048f18:	1b07883a 	add	r3,r3,r12
 4048f1c:	21c00e2e 	bgeu	r4,r7,4048f58 <memset+0x100>
 4048f20:	1813883a 	mov	r9,r3
 4048f24:	3811883a 	mov	r8,r7
 4048f28:	010000c4 	movi	r4,3
 4048f2c:	49800015 	stw	r6,0(r9)
 4048f30:	423fff04 	addi	r8,r8,-4
 4048f34:	4a400104 	addi	r9,r9,4
 4048f38:	223ffc36 	bltu	r4,r8,4048f2c <__flash_rwdata_start+0xfffee7fc>
 4048f3c:	393fff04 	addi	r4,r7,-4
 4048f40:	2008d0ba 	srli	r4,r4,2
 4048f44:	39c000cc 	andi	r7,r7,3
 4048f48:	21000044 	addi	r4,r4,1
 4048f4c:	2109883a 	add	r4,r4,r4
 4048f50:	2109883a 	add	r4,r4,r4
 4048f54:	1907883a 	add	r3,r3,r4
 4048f58:	38000526 	beq	r7,zero,4048f70 <memset+0x118>
 4048f5c:	19cf883a 	add	r7,r3,r7
 4048f60:	19400005 	stb	r5,0(r3)
 4048f64:	18c00044 	addi	r3,r3,1
 4048f68:	38fffd1e 	bne	r7,r3,4048f60 <__flash_rwdata_start+0xfffee830>
 4048f6c:	f800283a 	ret
 4048f70:	f800283a 	ret
 4048f74:	2007883a 	mov	r3,r4
 4048f78:	300f883a 	mov	r7,r6
 4048f7c:	003fc706 	br	4048e9c <__flash_rwdata_start+0xfffee76c>

04048f80 <_Balloc>:
 4048f80:	20801317 	ldw	r2,76(r4)
 4048f84:	defffc04 	addi	sp,sp,-16
 4048f88:	dc400115 	stw	r17,4(sp)
 4048f8c:	dc000015 	stw	r16,0(sp)
 4048f90:	dfc00315 	stw	ra,12(sp)
 4048f94:	dc800215 	stw	r18,8(sp)
 4048f98:	2023883a 	mov	r17,r4
 4048f9c:	2821883a 	mov	r16,r5
 4048fa0:	10000f26 	beq	r2,zero,4048fe0 <_Balloc+0x60>
 4048fa4:	8407883a 	add	r3,r16,r16
 4048fa8:	18c7883a 	add	r3,r3,r3
 4048fac:	10c7883a 	add	r3,r2,r3
 4048fb0:	18800017 	ldw	r2,0(r3)
 4048fb4:	10001126 	beq	r2,zero,4048ffc <_Balloc+0x7c>
 4048fb8:	11000017 	ldw	r4,0(r2)
 4048fbc:	19000015 	stw	r4,0(r3)
 4048fc0:	10000415 	stw	zero,16(r2)
 4048fc4:	10000315 	stw	zero,12(r2)
 4048fc8:	dfc00317 	ldw	ra,12(sp)
 4048fcc:	dc800217 	ldw	r18,8(sp)
 4048fd0:	dc400117 	ldw	r17,4(sp)
 4048fd4:	dc000017 	ldw	r16,0(sp)
 4048fd8:	dec00404 	addi	sp,sp,16
 4048fdc:	f800283a 	ret
 4048fe0:	01800844 	movi	r6,33
 4048fe4:	01400104 	movi	r5,4
 4048fe8:	404be680 	call	404be68 <_calloc_r>
 4048fec:	88801315 	stw	r2,76(r17)
 4048ff0:	103fec1e 	bne	r2,zero,4048fa4 <__flash_rwdata_start+0xfffee874>
 4048ff4:	0005883a 	mov	r2,zero
 4048ff8:	003ff306 	br	4048fc8 <__flash_rwdata_start+0xfffee898>
 4048ffc:	01400044 	movi	r5,1
 4049000:	2c24983a 	sll	r18,r5,r16
 4049004:	8809883a 	mov	r4,r17
 4049008:	91800144 	addi	r6,r18,5
 404900c:	318d883a 	add	r6,r6,r6
 4049010:	318d883a 	add	r6,r6,r6
 4049014:	404be680 	call	404be68 <_calloc_r>
 4049018:	103ff626 	beq	r2,zero,4048ff4 <__flash_rwdata_start+0xfffee8c4>
 404901c:	14000115 	stw	r16,4(r2)
 4049020:	14800215 	stw	r18,8(r2)
 4049024:	003fe606 	br	4048fc0 <__flash_rwdata_start+0xfffee890>

04049028 <_Bfree>:
 4049028:	28000826 	beq	r5,zero,404904c <_Bfree+0x24>
 404902c:	28c00117 	ldw	r3,4(r5)
 4049030:	20801317 	ldw	r2,76(r4)
 4049034:	18c7883a 	add	r3,r3,r3
 4049038:	18c7883a 	add	r3,r3,r3
 404903c:	10c5883a 	add	r2,r2,r3
 4049040:	10c00017 	ldw	r3,0(r2)
 4049044:	28c00015 	stw	r3,0(r5)
 4049048:	11400015 	stw	r5,0(r2)
 404904c:	f800283a 	ret

04049050 <__multadd>:
 4049050:	defffa04 	addi	sp,sp,-24
 4049054:	dc800315 	stw	r18,12(sp)
 4049058:	dc400215 	stw	r17,8(sp)
 404905c:	dc000115 	stw	r16,4(sp)
 4049060:	2823883a 	mov	r17,r5
 4049064:	2c000417 	ldw	r16,16(r5)
 4049068:	dfc00515 	stw	ra,20(sp)
 404906c:	dcc00415 	stw	r19,16(sp)
 4049070:	2025883a 	mov	r18,r4
 4049074:	29400504 	addi	r5,r5,20
 4049078:	0011883a 	mov	r8,zero
 404907c:	28c00017 	ldw	r3,0(r5)
 4049080:	29400104 	addi	r5,r5,4
 4049084:	42000044 	addi	r8,r8,1
 4049088:	18bfffcc 	andi	r2,r3,65535
 404908c:	1185383a 	mul	r2,r2,r6
 4049090:	1806d43a 	srli	r3,r3,16
 4049094:	11cf883a 	add	r7,r2,r7
 4049098:	3808d43a 	srli	r4,r7,16
 404909c:	1987383a 	mul	r3,r3,r6
 40490a0:	38bfffcc 	andi	r2,r7,65535
 40490a4:	1907883a 	add	r3,r3,r4
 40490a8:	1808943a 	slli	r4,r3,16
 40490ac:	180ed43a 	srli	r7,r3,16
 40490b0:	2085883a 	add	r2,r4,r2
 40490b4:	28bfff15 	stw	r2,-4(r5)
 40490b8:	443ff016 	blt	r8,r16,404907c <__flash_rwdata_start+0xfffee94c>
 40490bc:	38000926 	beq	r7,zero,40490e4 <__multadd+0x94>
 40490c0:	88800217 	ldw	r2,8(r17)
 40490c4:	80800f0e 	bge	r16,r2,4049104 <__multadd+0xb4>
 40490c8:	80800144 	addi	r2,r16,5
 40490cc:	1085883a 	add	r2,r2,r2
 40490d0:	1085883a 	add	r2,r2,r2
 40490d4:	8885883a 	add	r2,r17,r2
 40490d8:	11c00015 	stw	r7,0(r2)
 40490dc:	84000044 	addi	r16,r16,1
 40490e0:	8c000415 	stw	r16,16(r17)
 40490e4:	8805883a 	mov	r2,r17
 40490e8:	dfc00517 	ldw	ra,20(sp)
 40490ec:	dcc00417 	ldw	r19,16(sp)
 40490f0:	dc800317 	ldw	r18,12(sp)
 40490f4:	dc400217 	ldw	r17,8(sp)
 40490f8:	dc000117 	ldw	r16,4(sp)
 40490fc:	dec00604 	addi	sp,sp,24
 4049100:	f800283a 	ret
 4049104:	89400117 	ldw	r5,4(r17)
 4049108:	9009883a 	mov	r4,r18
 404910c:	d9c00015 	stw	r7,0(sp)
 4049110:	29400044 	addi	r5,r5,1
 4049114:	4048f800 	call	4048f80 <_Balloc>
 4049118:	89800417 	ldw	r6,16(r17)
 404911c:	89400304 	addi	r5,r17,12
 4049120:	11000304 	addi	r4,r2,12
 4049124:	31800084 	addi	r6,r6,2
 4049128:	318d883a 	add	r6,r6,r6
 404912c:	318d883a 	add	r6,r6,r6
 4049130:	1027883a 	mov	r19,r2
 4049134:	40438a00 	call	40438a0 <memcpy>
 4049138:	d9c00017 	ldw	r7,0(sp)
 404913c:	88000a26 	beq	r17,zero,4049168 <__multadd+0x118>
 4049140:	88c00117 	ldw	r3,4(r17)
 4049144:	90801317 	ldw	r2,76(r18)
 4049148:	18c7883a 	add	r3,r3,r3
 404914c:	18c7883a 	add	r3,r3,r3
 4049150:	10c5883a 	add	r2,r2,r3
 4049154:	10c00017 	ldw	r3,0(r2)
 4049158:	88c00015 	stw	r3,0(r17)
 404915c:	14400015 	stw	r17,0(r2)
 4049160:	9823883a 	mov	r17,r19
 4049164:	003fd806 	br	40490c8 <__flash_rwdata_start+0xfffee998>
 4049168:	9823883a 	mov	r17,r19
 404916c:	003fd606 	br	40490c8 <__flash_rwdata_start+0xfffee998>

04049170 <__s2b>:
 4049170:	defff904 	addi	sp,sp,-28
 4049174:	dc400115 	stw	r17,4(sp)
 4049178:	dc000015 	stw	r16,0(sp)
 404917c:	2023883a 	mov	r17,r4
 4049180:	2821883a 	mov	r16,r5
 4049184:	39000204 	addi	r4,r7,8
 4049188:	01400244 	movi	r5,9
 404918c:	dcc00315 	stw	r19,12(sp)
 4049190:	dc800215 	stw	r18,8(sp)
 4049194:	dfc00615 	stw	ra,24(sp)
 4049198:	dd400515 	stw	r21,20(sp)
 404919c:	dd000415 	stw	r20,16(sp)
 40491a0:	3825883a 	mov	r18,r7
 40491a4:	3027883a 	mov	r19,r6
 40491a8:	4042eb80 	call	4042eb8 <__divsi3>
 40491ac:	00c00044 	movi	r3,1
 40491b0:	000b883a 	mov	r5,zero
 40491b4:	1880030e 	bge	r3,r2,40491c4 <__s2b+0x54>
 40491b8:	18c7883a 	add	r3,r3,r3
 40491bc:	29400044 	addi	r5,r5,1
 40491c0:	18bffd16 	blt	r3,r2,40491b8 <__flash_rwdata_start+0xfffeea88>
 40491c4:	8809883a 	mov	r4,r17
 40491c8:	4048f800 	call	4048f80 <_Balloc>
 40491cc:	d8c00717 	ldw	r3,28(sp)
 40491d0:	10c00515 	stw	r3,20(r2)
 40491d4:	00c00044 	movi	r3,1
 40491d8:	10c00415 	stw	r3,16(r2)
 40491dc:	00c00244 	movi	r3,9
 40491e0:	1cc0210e 	bge	r3,r19,4049268 <__s2b+0xf8>
 40491e4:	80eb883a 	add	r21,r16,r3
 40491e8:	a829883a 	mov	r20,r21
 40491ec:	84e1883a 	add	r16,r16,r19
 40491f0:	a1c00007 	ldb	r7,0(r20)
 40491f4:	01800284 	movi	r6,10
 40491f8:	a5000044 	addi	r20,r20,1
 40491fc:	100b883a 	mov	r5,r2
 4049200:	39fff404 	addi	r7,r7,-48
 4049204:	8809883a 	mov	r4,r17
 4049208:	40490500 	call	4049050 <__multadd>
 404920c:	a43ff81e 	bne	r20,r16,40491f0 <__flash_rwdata_start+0xfffeeac0>
 4049210:	ace1883a 	add	r16,r21,r19
 4049214:	843ffe04 	addi	r16,r16,-8
 4049218:	9c800a0e 	bge	r19,r18,4049244 <__s2b+0xd4>
 404921c:	94e5c83a 	sub	r18,r18,r19
 4049220:	84a5883a 	add	r18,r16,r18
 4049224:	81c00007 	ldb	r7,0(r16)
 4049228:	01800284 	movi	r6,10
 404922c:	84000044 	addi	r16,r16,1
 4049230:	100b883a 	mov	r5,r2
 4049234:	39fff404 	addi	r7,r7,-48
 4049238:	8809883a 	mov	r4,r17
 404923c:	40490500 	call	4049050 <__multadd>
 4049240:	84bff81e 	bne	r16,r18,4049224 <__flash_rwdata_start+0xfffeeaf4>
 4049244:	dfc00617 	ldw	ra,24(sp)
 4049248:	dd400517 	ldw	r21,20(sp)
 404924c:	dd000417 	ldw	r20,16(sp)
 4049250:	dcc00317 	ldw	r19,12(sp)
 4049254:	dc800217 	ldw	r18,8(sp)
 4049258:	dc400117 	ldw	r17,4(sp)
 404925c:	dc000017 	ldw	r16,0(sp)
 4049260:	dec00704 	addi	sp,sp,28
 4049264:	f800283a 	ret
 4049268:	84000284 	addi	r16,r16,10
 404926c:	1827883a 	mov	r19,r3
 4049270:	003fe906 	br	4049218 <__flash_rwdata_start+0xfffeeae8>

04049274 <__hi0bits>:
 4049274:	20bfffec 	andhi	r2,r4,65535
 4049278:	1000141e 	bne	r2,zero,40492cc <__hi0bits+0x58>
 404927c:	2008943a 	slli	r4,r4,16
 4049280:	00800404 	movi	r2,16
 4049284:	20ffc02c 	andhi	r3,r4,65280
 4049288:	1800021e 	bne	r3,zero,4049294 <__hi0bits+0x20>
 404928c:	2008923a 	slli	r4,r4,8
 4049290:	10800204 	addi	r2,r2,8
 4049294:	20fc002c 	andhi	r3,r4,61440
 4049298:	1800021e 	bne	r3,zero,40492a4 <__hi0bits+0x30>
 404929c:	2008913a 	slli	r4,r4,4
 40492a0:	10800104 	addi	r2,r2,4
 40492a4:	20f0002c 	andhi	r3,r4,49152
 40492a8:	1800031e 	bne	r3,zero,40492b8 <__hi0bits+0x44>
 40492ac:	2109883a 	add	r4,r4,r4
 40492b0:	10800084 	addi	r2,r2,2
 40492b4:	2109883a 	add	r4,r4,r4
 40492b8:	20000316 	blt	r4,zero,40492c8 <__hi0bits+0x54>
 40492bc:	2110002c 	andhi	r4,r4,16384
 40492c0:	2000041e 	bne	r4,zero,40492d4 <__hi0bits+0x60>
 40492c4:	00800804 	movi	r2,32
 40492c8:	f800283a 	ret
 40492cc:	0005883a 	mov	r2,zero
 40492d0:	003fec06 	br	4049284 <__flash_rwdata_start+0xfffeeb54>
 40492d4:	10800044 	addi	r2,r2,1
 40492d8:	f800283a 	ret

040492dc <__lo0bits>:
 40492dc:	20c00017 	ldw	r3,0(r4)
 40492e0:	188001cc 	andi	r2,r3,7
 40492e4:	10000826 	beq	r2,zero,4049308 <__lo0bits+0x2c>
 40492e8:	1880004c 	andi	r2,r3,1
 40492ec:	1000211e 	bne	r2,zero,4049374 <__lo0bits+0x98>
 40492f0:	1880008c 	andi	r2,r3,2
 40492f4:	1000211e 	bne	r2,zero,404937c <__lo0bits+0xa0>
 40492f8:	1806d0ba 	srli	r3,r3,2
 40492fc:	00800084 	movi	r2,2
 4049300:	20c00015 	stw	r3,0(r4)
 4049304:	f800283a 	ret
 4049308:	18bfffcc 	andi	r2,r3,65535
 404930c:	10001326 	beq	r2,zero,404935c <__lo0bits+0x80>
 4049310:	0005883a 	mov	r2,zero
 4049314:	19403fcc 	andi	r5,r3,255
 4049318:	2800021e 	bne	r5,zero,4049324 <__lo0bits+0x48>
 404931c:	1806d23a 	srli	r3,r3,8
 4049320:	10800204 	addi	r2,r2,8
 4049324:	194003cc 	andi	r5,r3,15
 4049328:	2800021e 	bne	r5,zero,4049334 <__lo0bits+0x58>
 404932c:	1806d13a 	srli	r3,r3,4
 4049330:	10800104 	addi	r2,r2,4
 4049334:	194000cc 	andi	r5,r3,3
 4049338:	2800021e 	bne	r5,zero,4049344 <__lo0bits+0x68>
 404933c:	1806d0ba 	srli	r3,r3,2
 4049340:	10800084 	addi	r2,r2,2
 4049344:	1940004c 	andi	r5,r3,1
 4049348:	2800081e 	bne	r5,zero,404936c <__lo0bits+0x90>
 404934c:	1806d07a 	srli	r3,r3,1
 4049350:	1800051e 	bne	r3,zero,4049368 <__lo0bits+0x8c>
 4049354:	00800804 	movi	r2,32
 4049358:	f800283a 	ret
 404935c:	1806d43a 	srli	r3,r3,16
 4049360:	00800404 	movi	r2,16
 4049364:	003feb06 	br	4049314 <__flash_rwdata_start+0xfffeebe4>
 4049368:	10800044 	addi	r2,r2,1
 404936c:	20c00015 	stw	r3,0(r4)
 4049370:	f800283a 	ret
 4049374:	0005883a 	mov	r2,zero
 4049378:	f800283a 	ret
 404937c:	1806d07a 	srli	r3,r3,1
 4049380:	00800044 	movi	r2,1
 4049384:	20c00015 	stw	r3,0(r4)
 4049388:	f800283a 	ret

0404938c <__i2b>:
 404938c:	defffd04 	addi	sp,sp,-12
 4049390:	dc000015 	stw	r16,0(sp)
 4049394:	04000044 	movi	r16,1
 4049398:	dc400115 	stw	r17,4(sp)
 404939c:	2823883a 	mov	r17,r5
 40493a0:	800b883a 	mov	r5,r16
 40493a4:	dfc00215 	stw	ra,8(sp)
 40493a8:	4048f800 	call	4048f80 <_Balloc>
 40493ac:	14400515 	stw	r17,20(r2)
 40493b0:	14000415 	stw	r16,16(r2)
 40493b4:	dfc00217 	ldw	ra,8(sp)
 40493b8:	dc400117 	ldw	r17,4(sp)
 40493bc:	dc000017 	ldw	r16,0(sp)
 40493c0:	dec00304 	addi	sp,sp,12
 40493c4:	f800283a 	ret

040493c8 <__multiply>:
 40493c8:	defffa04 	addi	sp,sp,-24
 40493cc:	dcc00315 	stw	r19,12(sp)
 40493d0:	dc800215 	stw	r18,8(sp)
 40493d4:	34c00417 	ldw	r19,16(r6)
 40493d8:	2c800417 	ldw	r18,16(r5)
 40493dc:	dd000415 	stw	r20,16(sp)
 40493e0:	dc400115 	stw	r17,4(sp)
 40493e4:	dfc00515 	stw	ra,20(sp)
 40493e8:	dc000015 	stw	r16,0(sp)
 40493ec:	2829883a 	mov	r20,r5
 40493f0:	3023883a 	mov	r17,r6
 40493f4:	94c0050e 	bge	r18,r19,404940c <__multiply+0x44>
 40493f8:	9007883a 	mov	r3,r18
 40493fc:	3029883a 	mov	r20,r6
 4049400:	9825883a 	mov	r18,r19
 4049404:	2823883a 	mov	r17,r5
 4049408:	1827883a 	mov	r19,r3
 404940c:	a0800217 	ldw	r2,8(r20)
 4049410:	94e1883a 	add	r16,r18,r19
 4049414:	a1400117 	ldw	r5,4(r20)
 4049418:	1400010e 	bge	r2,r16,4049420 <__multiply+0x58>
 404941c:	29400044 	addi	r5,r5,1
 4049420:	4048f800 	call	4048f80 <_Balloc>
 4049424:	8415883a 	add	r10,r16,r16
 4049428:	12c00504 	addi	r11,r2,20
 404942c:	5295883a 	add	r10,r10,r10
 4049430:	5a95883a 	add	r10,r11,r10
 4049434:	5807883a 	mov	r3,r11
 4049438:	5a80032e 	bgeu	r11,r10,4049448 <__multiply+0x80>
 404943c:	18000015 	stw	zero,0(r3)
 4049440:	18c00104 	addi	r3,r3,4
 4049444:	1abffd36 	bltu	r3,r10,404943c <__flash_rwdata_start+0xfffeed0c>
 4049448:	9ce7883a 	add	r19,r19,r19
 404944c:	94a5883a 	add	r18,r18,r18
 4049450:	89800504 	addi	r6,r17,20
 4049454:	9ce7883a 	add	r19,r19,r19
 4049458:	a3400504 	addi	r13,r20,20
 404945c:	94a5883a 	add	r18,r18,r18
 4049460:	34d9883a 	add	r12,r6,r19
 4049464:	6c93883a 	add	r9,r13,r18
 4049468:	3300422e 	bgeu	r6,r12,4049574 <__multiply+0x1ac>
 404946c:	37c00017 	ldw	ra,0(r6)
 4049470:	fbffffcc 	andi	r15,ra,65535
 4049474:	78001b26 	beq	r15,zero,40494e4 <__multiply+0x11c>
 4049478:	5811883a 	mov	r8,r11
 404947c:	681d883a 	mov	r14,r13
 4049480:	000f883a 	mov	r7,zero
 4049484:	71000017 	ldw	r4,0(r14)
 4049488:	40c00017 	ldw	r3,0(r8)
 404948c:	73800104 	addi	r14,r14,4
 4049490:	217fffcc 	andi	r5,r4,65535
 4049494:	2bcb383a 	mul	r5,r5,r15
 4049498:	2008d43a 	srli	r4,r4,16
 404949c:	1c7fffcc 	andi	r17,r3,65535
 40494a0:	2c4b883a 	add	r5,r5,r17
 40494a4:	29cb883a 	add	r5,r5,r7
 40494a8:	23c9383a 	mul	r4,r4,r15
 40494ac:	1806d43a 	srli	r3,r3,16
 40494b0:	280ed43a 	srli	r7,r5,16
 40494b4:	297fffcc 	andi	r5,r5,65535
 40494b8:	20c7883a 	add	r3,r4,r3
 40494bc:	19c7883a 	add	r3,r3,r7
 40494c0:	1808943a 	slli	r4,r3,16
 40494c4:	4023883a 	mov	r17,r8
 40494c8:	180ed43a 	srli	r7,r3,16
 40494cc:	214ab03a 	or	r5,r4,r5
 40494d0:	41400015 	stw	r5,0(r8)
 40494d4:	42000104 	addi	r8,r8,4
 40494d8:	727fea36 	bltu	r14,r9,4049484 <__flash_rwdata_start+0xfffeed54>
 40494dc:	89c00115 	stw	r7,4(r17)
 40494e0:	37c00017 	ldw	ra,0(r6)
 40494e4:	f83ed43a 	srli	ra,ra,16
 40494e8:	f8001f26 	beq	ra,zero,4049568 <__multiply+0x1a0>
 40494ec:	58c00017 	ldw	r3,0(r11)
 40494f0:	681d883a 	mov	r14,r13
 40494f4:	581f883a 	mov	r15,r11
 40494f8:	1811883a 	mov	r8,r3
 40494fc:	5825883a 	mov	r18,r11
 4049500:	000f883a 	mov	r7,zero
 4049504:	00000106 	br	404950c <__multiply+0x144>
 4049508:	8825883a 	mov	r18,r17
 404950c:	7140000b 	ldhu	r5,0(r14)
 4049510:	4010d43a 	srli	r8,r8,16
 4049514:	193fffcc 	andi	r4,r3,65535
 4049518:	2fcb383a 	mul	r5,r5,ra
 404951c:	7bc00104 	addi	r15,r15,4
 4049520:	73800104 	addi	r14,r14,4
 4049524:	2a0b883a 	add	r5,r5,r8
 4049528:	29cb883a 	add	r5,r5,r7
 404952c:	2806943a 	slli	r3,r5,16
 4049530:	94400104 	addi	r17,r18,4
 4049534:	280ad43a 	srli	r5,r5,16
 4049538:	1908b03a 	or	r4,r3,r4
 404953c:	793fff15 	stw	r4,-4(r15)
 4049540:	70ffff17 	ldw	r3,-4(r14)
 4049544:	8a000017 	ldw	r8,0(r17)
 4049548:	1806d43a 	srli	r3,r3,16
 404954c:	413fffcc 	andi	r4,r8,65535
 4049550:	1fc7383a 	mul	r3,r3,ra
 4049554:	1907883a 	add	r3,r3,r4
 4049558:	1947883a 	add	r3,r3,r5
 404955c:	180ed43a 	srli	r7,r3,16
 4049560:	727fe936 	bltu	r14,r9,4049508 <__flash_rwdata_start+0xfffeedd8>
 4049564:	90c00115 	stw	r3,4(r18)
 4049568:	31800104 	addi	r6,r6,4
 404956c:	5ac00104 	addi	r11,r11,4
 4049570:	333fbe36 	bltu	r6,r12,404946c <__flash_rwdata_start+0xfffeed3c>
 4049574:	0400090e 	bge	zero,r16,404959c <__multiply+0x1d4>
 4049578:	50ffff17 	ldw	r3,-4(r10)
 404957c:	52bfff04 	addi	r10,r10,-4
 4049580:	18000326 	beq	r3,zero,4049590 <__multiply+0x1c8>
 4049584:	00000506 	br	404959c <__multiply+0x1d4>
 4049588:	50c00017 	ldw	r3,0(r10)
 404958c:	1800031e 	bne	r3,zero,404959c <__multiply+0x1d4>
 4049590:	843fffc4 	addi	r16,r16,-1
 4049594:	52bfff04 	addi	r10,r10,-4
 4049598:	803ffb1e 	bne	r16,zero,4049588 <__flash_rwdata_start+0xfffeee58>
 404959c:	14000415 	stw	r16,16(r2)
 40495a0:	dfc00517 	ldw	ra,20(sp)
 40495a4:	dd000417 	ldw	r20,16(sp)
 40495a8:	dcc00317 	ldw	r19,12(sp)
 40495ac:	dc800217 	ldw	r18,8(sp)
 40495b0:	dc400117 	ldw	r17,4(sp)
 40495b4:	dc000017 	ldw	r16,0(sp)
 40495b8:	dec00604 	addi	sp,sp,24
 40495bc:	f800283a 	ret

040495c0 <__pow5mult>:
 40495c0:	defffa04 	addi	sp,sp,-24
 40495c4:	dcc00315 	stw	r19,12(sp)
 40495c8:	dc000015 	stw	r16,0(sp)
 40495cc:	dfc00515 	stw	ra,20(sp)
 40495d0:	dd000415 	stw	r20,16(sp)
 40495d4:	dc800215 	stw	r18,8(sp)
 40495d8:	dc400115 	stw	r17,4(sp)
 40495dc:	308000cc 	andi	r2,r6,3
 40495e0:	3021883a 	mov	r16,r6
 40495e4:	2027883a 	mov	r19,r4
 40495e8:	10002f1e 	bne	r2,zero,40496a8 <__pow5mult+0xe8>
 40495ec:	2825883a 	mov	r18,r5
 40495f0:	8021d0ba 	srai	r16,r16,2
 40495f4:	80001a26 	beq	r16,zero,4049660 <__pow5mult+0xa0>
 40495f8:	9c401217 	ldw	r17,72(r19)
 40495fc:	8800061e 	bne	r17,zero,4049618 <__pow5mult+0x58>
 4049600:	00003406 	br	40496d4 <__pow5mult+0x114>
 4049604:	8021d07a 	srai	r16,r16,1
 4049608:	80001526 	beq	r16,zero,4049660 <__pow5mult+0xa0>
 404960c:	88800017 	ldw	r2,0(r17)
 4049610:	10001c26 	beq	r2,zero,4049684 <__pow5mult+0xc4>
 4049614:	1023883a 	mov	r17,r2
 4049618:	8080004c 	andi	r2,r16,1
 404961c:	103ff926 	beq	r2,zero,4049604 <__flash_rwdata_start+0xfffeeed4>
 4049620:	880d883a 	mov	r6,r17
 4049624:	900b883a 	mov	r5,r18
 4049628:	9809883a 	mov	r4,r19
 404962c:	40493c80 	call	40493c8 <__multiply>
 4049630:	90001b26 	beq	r18,zero,40496a0 <__pow5mult+0xe0>
 4049634:	91000117 	ldw	r4,4(r18)
 4049638:	98c01317 	ldw	r3,76(r19)
 404963c:	8021d07a 	srai	r16,r16,1
 4049640:	2109883a 	add	r4,r4,r4
 4049644:	2109883a 	add	r4,r4,r4
 4049648:	1907883a 	add	r3,r3,r4
 404964c:	19000017 	ldw	r4,0(r3)
 4049650:	91000015 	stw	r4,0(r18)
 4049654:	1c800015 	stw	r18,0(r3)
 4049658:	1025883a 	mov	r18,r2
 404965c:	803feb1e 	bne	r16,zero,404960c <__flash_rwdata_start+0xfffeeedc>
 4049660:	9005883a 	mov	r2,r18
 4049664:	dfc00517 	ldw	ra,20(sp)
 4049668:	dd000417 	ldw	r20,16(sp)
 404966c:	dcc00317 	ldw	r19,12(sp)
 4049670:	dc800217 	ldw	r18,8(sp)
 4049674:	dc400117 	ldw	r17,4(sp)
 4049678:	dc000017 	ldw	r16,0(sp)
 404967c:	dec00604 	addi	sp,sp,24
 4049680:	f800283a 	ret
 4049684:	880d883a 	mov	r6,r17
 4049688:	880b883a 	mov	r5,r17
 404968c:	9809883a 	mov	r4,r19
 4049690:	40493c80 	call	40493c8 <__multiply>
 4049694:	88800015 	stw	r2,0(r17)
 4049698:	10000015 	stw	zero,0(r2)
 404969c:	003fdd06 	br	4049614 <__flash_rwdata_start+0xfffeeee4>
 40496a0:	1025883a 	mov	r18,r2
 40496a4:	003fd706 	br	4049604 <__flash_rwdata_start+0xfffeeed4>
 40496a8:	10bfffc4 	addi	r2,r2,-1
 40496ac:	1085883a 	add	r2,r2,r2
 40496b0:	00c08034 	movhi	r3,512
 40496b4:	18c0b404 	addi	r3,r3,720
 40496b8:	1085883a 	add	r2,r2,r2
 40496bc:	1885883a 	add	r2,r3,r2
 40496c0:	11800017 	ldw	r6,0(r2)
 40496c4:	000f883a 	mov	r7,zero
 40496c8:	40490500 	call	4049050 <__multadd>
 40496cc:	1025883a 	mov	r18,r2
 40496d0:	003fc706 	br	40495f0 <__flash_rwdata_start+0xfffeeec0>
 40496d4:	05000044 	movi	r20,1
 40496d8:	a00b883a 	mov	r5,r20
 40496dc:	9809883a 	mov	r4,r19
 40496e0:	4048f800 	call	4048f80 <_Balloc>
 40496e4:	1023883a 	mov	r17,r2
 40496e8:	00809c44 	movi	r2,625
 40496ec:	88800515 	stw	r2,20(r17)
 40496f0:	8d000415 	stw	r20,16(r17)
 40496f4:	9c401215 	stw	r17,72(r19)
 40496f8:	88000015 	stw	zero,0(r17)
 40496fc:	003fc606 	br	4049618 <__flash_rwdata_start+0xfffeeee8>

04049700 <__lshift>:
 4049700:	defff904 	addi	sp,sp,-28
 4049704:	dd400515 	stw	r21,20(sp)
 4049708:	dcc00315 	stw	r19,12(sp)
 404970c:	302bd17a 	srai	r21,r6,5
 4049710:	2cc00417 	ldw	r19,16(r5)
 4049714:	28800217 	ldw	r2,8(r5)
 4049718:	dd000415 	stw	r20,16(sp)
 404971c:	ace7883a 	add	r19,r21,r19
 4049720:	dc800215 	stw	r18,8(sp)
 4049724:	dc400115 	stw	r17,4(sp)
 4049728:	dc000015 	stw	r16,0(sp)
 404972c:	dfc00615 	stw	ra,24(sp)
 4049730:	9c000044 	addi	r16,r19,1
 4049734:	2823883a 	mov	r17,r5
 4049738:	3029883a 	mov	r20,r6
 404973c:	2025883a 	mov	r18,r4
 4049740:	29400117 	ldw	r5,4(r5)
 4049744:	1400030e 	bge	r2,r16,4049754 <__lshift+0x54>
 4049748:	1085883a 	add	r2,r2,r2
 404974c:	29400044 	addi	r5,r5,1
 4049750:	143ffd16 	blt	r2,r16,4049748 <__flash_rwdata_start+0xfffef018>
 4049754:	9009883a 	mov	r4,r18
 4049758:	4048f800 	call	4048f80 <_Balloc>
 404975c:	10c00504 	addi	r3,r2,20
 4049760:	0540070e 	bge	zero,r21,4049780 <__lshift+0x80>
 4049764:	ad6b883a 	add	r21,r21,r21
 4049768:	ad6b883a 	add	r21,r21,r21
 404976c:	1809883a 	mov	r4,r3
 4049770:	1d47883a 	add	r3,r3,r21
 4049774:	20000015 	stw	zero,0(r4)
 4049778:	21000104 	addi	r4,r4,4
 404977c:	193ffd1e 	bne	r3,r4,4049774 <__flash_rwdata_start+0xfffef044>
 4049780:	8a000417 	ldw	r8,16(r17)
 4049784:	89000504 	addi	r4,r17,20
 4049788:	a18007cc 	andi	r6,r20,31
 404978c:	4211883a 	add	r8,r8,r8
 4049790:	4211883a 	add	r8,r8,r8
 4049794:	2211883a 	add	r8,r4,r8
 4049798:	30002326 	beq	r6,zero,4049828 <__lshift+0x128>
 404979c:	02400804 	movi	r9,32
 40497a0:	4993c83a 	sub	r9,r9,r6
 40497a4:	000b883a 	mov	r5,zero
 40497a8:	21c00017 	ldw	r7,0(r4)
 40497ac:	1815883a 	mov	r10,r3
 40497b0:	18c00104 	addi	r3,r3,4
 40497b4:	398e983a 	sll	r7,r7,r6
 40497b8:	21000104 	addi	r4,r4,4
 40497bc:	394ab03a 	or	r5,r7,r5
 40497c0:	197fff15 	stw	r5,-4(r3)
 40497c4:	217fff17 	ldw	r5,-4(r4)
 40497c8:	2a4ad83a 	srl	r5,r5,r9
 40497cc:	223ff636 	bltu	r4,r8,40497a8 <__flash_rwdata_start+0xfffef078>
 40497d0:	51400115 	stw	r5,4(r10)
 40497d4:	28001a1e 	bne	r5,zero,4049840 <__lshift+0x140>
 40497d8:	843fffc4 	addi	r16,r16,-1
 40497dc:	14000415 	stw	r16,16(r2)
 40497e0:	88000826 	beq	r17,zero,4049804 <__lshift+0x104>
 40497e4:	89000117 	ldw	r4,4(r17)
 40497e8:	90c01317 	ldw	r3,76(r18)
 40497ec:	2109883a 	add	r4,r4,r4
 40497f0:	2109883a 	add	r4,r4,r4
 40497f4:	1907883a 	add	r3,r3,r4
 40497f8:	19000017 	ldw	r4,0(r3)
 40497fc:	89000015 	stw	r4,0(r17)
 4049800:	1c400015 	stw	r17,0(r3)
 4049804:	dfc00617 	ldw	ra,24(sp)
 4049808:	dd400517 	ldw	r21,20(sp)
 404980c:	dd000417 	ldw	r20,16(sp)
 4049810:	dcc00317 	ldw	r19,12(sp)
 4049814:	dc800217 	ldw	r18,8(sp)
 4049818:	dc400117 	ldw	r17,4(sp)
 404981c:	dc000017 	ldw	r16,0(sp)
 4049820:	dec00704 	addi	sp,sp,28
 4049824:	f800283a 	ret
 4049828:	21400017 	ldw	r5,0(r4)
 404982c:	18c00104 	addi	r3,r3,4
 4049830:	21000104 	addi	r4,r4,4
 4049834:	197fff15 	stw	r5,-4(r3)
 4049838:	223ffb36 	bltu	r4,r8,4049828 <__flash_rwdata_start+0xfffef0f8>
 404983c:	003fe606 	br	40497d8 <__flash_rwdata_start+0xfffef0a8>
 4049840:	9c000084 	addi	r16,r19,2
 4049844:	003fe406 	br	40497d8 <__flash_rwdata_start+0xfffef0a8>

04049848 <__mcmp>:
 4049848:	20800417 	ldw	r2,16(r4)
 404984c:	28c00417 	ldw	r3,16(r5)
 4049850:	10c5c83a 	sub	r2,r2,r3
 4049854:	1000111e 	bne	r2,zero,404989c <__mcmp+0x54>
 4049858:	18c7883a 	add	r3,r3,r3
 404985c:	18c7883a 	add	r3,r3,r3
 4049860:	21000504 	addi	r4,r4,20
 4049864:	29400504 	addi	r5,r5,20
 4049868:	20c5883a 	add	r2,r4,r3
 404986c:	28cb883a 	add	r5,r5,r3
 4049870:	00000106 	br	4049878 <__mcmp+0x30>
 4049874:	20800a2e 	bgeu	r4,r2,40498a0 <__mcmp+0x58>
 4049878:	10bfff04 	addi	r2,r2,-4
 404987c:	297fff04 	addi	r5,r5,-4
 4049880:	11800017 	ldw	r6,0(r2)
 4049884:	28c00017 	ldw	r3,0(r5)
 4049888:	30fffa26 	beq	r6,r3,4049874 <__flash_rwdata_start+0xfffef144>
 404988c:	30c00236 	bltu	r6,r3,4049898 <__mcmp+0x50>
 4049890:	00800044 	movi	r2,1
 4049894:	f800283a 	ret
 4049898:	00bfffc4 	movi	r2,-1
 404989c:	f800283a 	ret
 40498a0:	0005883a 	mov	r2,zero
 40498a4:	f800283a 	ret

040498a8 <__mdiff>:
 40498a8:	28c00417 	ldw	r3,16(r5)
 40498ac:	30800417 	ldw	r2,16(r6)
 40498b0:	defffa04 	addi	sp,sp,-24
 40498b4:	dcc00315 	stw	r19,12(sp)
 40498b8:	dc800215 	stw	r18,8(sp)
 40498bc:	dfc00515 	stw	ra,20(sp)
 40498c0:	dd000415 	stw	r20,16(sp)
 40498c4:	dc400115 	stw	r17,4(sp)
 40498c8:	dc000015 	stw	r16,0(sp)
 40498cc:	1887c83a 	sub	r3,r3,r2
 40498d0:	2825883a 	mov	r18,r5
 40498d4:	3027883a 	mov	r19,r6
 40498d8:	1800141e 	bne	r3,zero,404992c <__mdiff+0x84>
 40498dc:	1085883a 	add	r2,r2,r2
 40498e0:	1085883a 	add	r2,r2,r2
 40498e4:	2a000504 	addi	r8,r5,20
 40498e8:	34000504 	addi	r16,r6,20
 40498ec:	4087883a 	add	r3,r8,r2
 40498f0:	8085883a 	add	r2,r16,r2
 40498f4:	00000106 	br	40498fc <__mdiff+0x54>
 40498f8:	40c0592e 	bgeu	r8,r3,4049a60 <__mdiff+0x1b8>
 40498fc:	18ffff04 	addi	r3,r3,-4
 4049900:	10bfff04 	addi	r2,r2,-4
 4049904:	19c00017 	ldw	r7,0(r3)
 4049908:	11400017 	ldw	r5,0(r2)
 404990c:	397ffa26 	beq	r7,r5,40498f8 <__flash_rwdata_start+0xfffef1c8>
 4049910:	3940592e 	bgeu	r7,r5,4049a78 <__mdiff+0x1d0>
 4049914:	9005883a 	mov	r2,r18
 4049918:	4023883a 	mov	r17,r8
 404991c:	9825883a 	mov	r18,r19
 4049920:	05000044 	movi	r20,1
 4049924:	1027883a 	mov	r19,r2
 4049928:	00000406 	br	404993c <__mdiff+0x94>
 404992c:	18005616 	blt	r3,zero,4049a88 <__mdiff+0x1e0>
 4049930:	34400504 	addi	r17,r6,20
 4049934:	2c000504 	addi	r16,r5,20
 4049938:	0029883a 	mov	r20,zero
 404993c:	91400117 	ldw	r5,4(r18)
 4049940:	4048f800 	call	4048f80 <_Balloc>
 4049944:	92400417 	ldw	r9,16(r18)
 4049948:	9b000417 	ldw	r12,16(r19)
 404994c:	12c00504 	addi	r11,r2,20
 4049950:	4a51883a 	add	r8,r9,r9
 4049954:	6319883a 	add	r12,r12,r12
 4049958:	4211883a 	add	r8,r8,r8
 404995c:	6319883a 	add	r12,r12,r12
 4049960:	15000315 	stw	r20,12(r2)
 4049964:	8211883a 	add	r8,r16,r8
 4049968:	8b19883a 	add	r12,r17,r12
 404996c:	0007883a 	mov	r3,zero
 4049970:	81400017 	ldw	r5,0(r16)
 4049974:	89c00017 	ldw	r7,0(r17)
 4049978:	59800104 	addi	r6,r11,4
 404997c:	293fffcc 	andi	r4,r5,65535
 4049980:	20c7883a 	add	r3,r4,r3
 4049984:	393fffcc 	andi	r4,r7,65535
 4049988:	1909c83a 	sub	r4,r3,r4
 404998c:	280ad43a 	srli	r5,r5,16
 4049990:	380ed43a 	srli	r7,r7,16
 4049994:	2007d43a 	srai	r3,r4,16
 4049998:	213fffcc 	andi	r4,r4,65535
 404999c:	29cbc83a 	sub	r5,r5,r7
 40499a0:	28c7883a 	add	r3,r5,r3
 40499a4:	180a943a 	slli	r5,r3,16
 40499a8:	8c400104 	addi	r17,r17,4
 40499ac:	84000104 	addi	r16,r16,4
 40499b0:	2908b03a 	or	r4,r5,r4
 40499b4:	59000015 	stw	r4,0(r11)
 40499b8:	1807d43a 	srai	r3,r3,16
 40499bc:	3015883a 	mov	r10,r6
 40499c0:	3017883a 	mov	r11,r6
 40499c4:	8b3fea36 	bltu	r17,r12,4049970 <__flash_rwdata_start+0xfffef240>
 40499c8:	8200162e 	bgeu	r16,r8,4049a24 <__mdiff+0x17c>
 40499cc:	8017883a 	mov	r11,r16
 40499d0:	59400017 	ldw	r5,0(r11)
 40499d4:	31800104 	addi	r6,r6,4
 40499d8:	5ac00104 	addi	r11,r11,4
 40499dc:	293fffcc 	andi	r4,r5,65535
 40499e0:	20c7883a 	add	r3,r4,r3
 40499e4:	280ed43a 	srli	r7,r5,16
 40499e8:	180bd43a 	srai	r5,r3,16
 40499ec:	193fffcc 	andi	r4,r3,65535
 40499f0:	3947883a 	add	r3,r7,r5
 40499f4:	180a943a 	slli	r5,r3,16
 40499f8:	1807d43a 	srai	r3,r3,16
 40499fc:	2908b03a 	or	r4,r5,r4
 4049a00:	313fff15 	stw	r4,-4(r6)
 4049a04:	5a3ff236 	bltu	r11,r8,40499d0 <__flash_rwdata_start+0xfffef2a0>
 4049a08:	0406303a 	nor	r3,zero,r16
 4049a0c:	1a07883a 	add	r3,r3,r8
 4049a10:	1806d0ba 	srli	r3,r3,2
 4049a14:	18c00044 	addi	r3,r3,1
 4049a18:	18c7883a 	add	r3,r3,r3
 4049a1c:	18c7883a 	add	r3,r3,r3
 4049a20:	50d5883a 	add	r10,r10,r3
 4049a24:	50ffff04 	addi	r3,r10,-4
 4049a28:	2000041e 	bne	r4,zero,4049a3c <__mdiff+0x194>
 4049a2c:	18ffff04 	addi	r3,r3,-4
 4049a30:	19000017 	ldw	r4,0(r3)
 4049a34:	4a7fffc4 	addi	r9,r9,-1
 4049a38:	203ffc26 	beq	r4,zero,4049a2c <__flash_rwdata_start+0xfffef2fc>
 4049a3c:	12400415 	stw	r9,16(r2)
 4049a40:	dfc00517 	ldw	ra,20(sp)
 4049a44:	dd000417 	ldw	r20,16(sp)
 4049a48:	dcc00317 	ldw	r19,12(sp)
 4049a4c:	dc800217 	ldw	r18,8(sp)
 4049a50:	dc400117 	ldw	r17,4(sp)
 4049a54:	dc000017 	ldw	r16,0(sp)
 4049a58:	dec00604 	addi	sp,sp,24
 4049a5c:	f800283a 	ret
 4049a60:	000b883a 	mov	r5,zero
 4049a64:	4048f800 	call	4048f80 <_Balloc>
 4049a68:	00c00044 	movi	r3,1
 4049a6c:	10c00415 	stw	r3,16(r2)
 4049a70:	10000515 	stw	zero,20(r2)
 4049a74:	003ff206 	br	4049a40 <__flash_rwdata_start+0xfffef310>
 4049a78:	8023883a 	mov	r17,r16
 4049a7c:	0029883a 	mov	r20,zero
 4049a80:	4021883a 	mov	r16,r8
 4049a84:	003fad06 	br	404993c <__flash_rwdata_start+0xfffef20c>
 4049a88:	9005883a 	mov	r2,r18
 4049a8c:	94400504 	addi	r17,r18,20
 4049a90:	9c000504 	addi	r16,r19,20
 4049a94:	9825883a 	mov	r18,r19
 4049a98:	05000044 	movi	r20,1
 4049a9c:	1027883a 	mov	r19,r2
 4049aa0:	003fa606 	br	404993c <__flash_rwdata_start+0xfffef20c>

04049aa4 <__ulp>:
 4049aa4:	295ffc2c 	andhi	r5,r5,32752
 4049aa8:	00bf3034 	movhi	r2,64704
 4049aac:	2887883a 	add	r3,r5,r2
 4049ab0:	00c0020e 	bge	zero,r3,4049abc <__ulp+0x18>
 4049ab4:	0005883a 	mov	r2,zero
 4049ab8:	f800283a 	ret
 4049abc:	00c7c83a 	sub	r3,zero,r3
 4049ac0:	1807d53a 	srai	r3,r3,20
 4049ac4:	008004c4 	movi	r2,19
 4049ac8:	10c00b0e 	bge	r2,r3,4049af8 <__ulp+0x54>
 4049acc:	18bffb04 	addi	r2,r3,-20
 4049ad0:	01000784 	movi	r4,30
 4049ad4:	0007883a 	mov	r3,zero
 4049ad8:	20800516 	blt	r4,r2,4049af0 <__ulp+0x4c>
 4049adc:	010007c4 	movi	r4,31
 4049ae0:	2089c83a 	sub	r4,r4,r2
 4049ae4:	00800044 	movi	r2,1
 4049ae8:	1104983a 	sll	r2,r2,r4
 4049aec:	f800283a 	ret
 4049af0:	00800044 	movi	r2,1
 4049af4:	f800283a 	ret
 4049af8:	01400234 	movhi	r5,8
 4049afc:	28c7d83a 	sra	r3,r5,r3
 4049b00:	0005883a 	mov	r2,zero
 4049b04:	f800283a 	ret

04049b08 <__b2d>:
 4049b08:	defffa04 	addi	sp,sp,-24
 4049b0c:	dc000015 	stw	r16,0(sp)
 4049b10:	24000417 	ldw	r16,16(r4)
 4049b14:	dc400115 	stw	r17,4(sp)
 4049b18:	24400504 	addi	r17,r4,20
 4049b1c:	8421883a 	add	r16,r16,r16
 4049b20:	8421883a 	add	r16,r16,r16
 4049b24:	8c21883a 	add	r16,r17,r16
 4049b28:	dc800215 	stw	r18,8(sp)
 4049b2c:	84bfff17 	ldw	r18,-4(r16)
 4049b30:	dd000415 	stw	r20,16(sp)
 4049b34:	dcc00315 	stw	r19,12(sp)
 4049b38:	9009883a 	mov	r4,r18
 4049b3c:	2829883a 	mov	r20,r5
 4049b40:	dfc00515 	stw	ra,20(sp)
 4049b44:	40492740 	call	4049274 <__hi0bits>
 4049b48:	00c00804 	movi	r3,32
 4049b4c:	1889c83a 	sub	r4,r3,r2
 4049b50:	a1000015 	stw	r4,0(r20)
 4049b54:	01000284 	movi	r4,10
 4049b58:	84ffff04 	addi	r19,r16,-4
 4049b5c:	20801216 	blt	r4,r2,4049ba8 <__b2d+0xa0>
 4049b60:	018002c4 	movi	r6,11
 4049b64:	308dc83a 	sub	r6,r6,r2
 4049b68:	9186d83a 	srl	r3,r18,r6
 4049b6c:	18cffc34 	orhi	r3,r3,16368
 4049b70:	8cc0212e 	bgeu	r17,r19,4049bf8 <__b2d+0xf0>
 4049b74:	813ffe17 	ldw	r4,-8(r16)
 4049b78:	218cd83a 	srl	r6,r4,r6
 4049b7c:	10800544 	addi	r2,r2,21
 4049b80:	9084983a 	sll	r2,r18,r2
 4049b84:	1184b03a 	or	r2,r2,r6
 4049b88:	dfc00517 	ldw	ra,20(sp)
 4049b8c:	dd000417 	ldw	r20,16(sp)
 4049b90:	dcc00317 	ldw	r19,12(sp)
 4049b94:	dc800217 	ldw	r18,8(sp)
 4049b98:	dc400117 	ldw	r17,4(sp)
 4049b9c:	dc000017 	ldw	r16,0(sp)
 4049ba0:	dec00604 	addi	sp,sp,24
 4049ba4:	f800283a 	ret
 4049ba8:	8cc00f2e 	bgeu	r17,r19,4049be8 <__b2d+0xe0>
 4049bac:	117ffd44 	addi	r5,r2,-11
 4049bb0:	80bffe17 	ldw	r2,-8(r16)
 4049bb4:	28000e26 	beq	r5,zero,4049bf0 <__b2d+0xe8>
 4049bb8:	1949c83a 	sub	r4,r3,r5
 4049bbc:	9164983a 	sll	r18,r18,r5
 4049bc0:	1106d83a 	srl	r3,r2,r4
 4049bc4:	81bffe04 	addi	r6,r16,-8
 4049bc8:	948ffc34 	orhi	r18,r18,16368
 4049bcc:	90c6b03a 	or	r3,r18,r3
 4049bd0:	89800e2e 	bgeu	r17,r6,4049c0c <__b2d+0x104>
 4049bd4:	81bffd17 	ldw	r6,-12(r16)
 4049bd8:	1144983a 	sll	r2,r2,r5
 4049bdc:	310ad83a 	srl	r5,r6,r4
 4049be0:	2884b03a 	or	r2,r5,r2
 4049be4:	003fe806 	br	4049b88 <__flash_rwdata_start+0xfffef458>
 4049be8:	10bffd44 	addi	r2,r2,-11
 4049bec:	1000041e 	bne	r2,zero,4049c00 <__b2d+0xf8>
 4049bf0:	90cffc34 	orhi	r3,r18,16368
 4049bf4:	003fe406 	br	4049b88 <__flash_rwdata_start+0xfffef458>
 4049bf8:	000d883a 	mov	r6,zero
 4049bfc:	003fdf06 	br	4049b7c <__flash_rwdata_start+0xfffef44c>
 4049c00:	90a4983a 	sll	r18,r18,r2
 4049c04:	0005883a 	mov	r2,zero
 4049c08:	003ff906 	br	4049bf0 <__flash_rwdata_start+0xfffef4c0>
 4049c0c:	1144983a 	sll	r2,r2,r5
 4049c10:	003fdd06 	br	4049b88 <__flash_rwdata_start+0xfffef458>

04049c14 <__d2b>:
 4049c14:	defff804 	addi	sp,sp,-32
 4049c18:	dc000215 	stw	r16,8(sp)
 4049c1c:	3021883a 	mov	r16,r6
 4049c20:	dc400315 	stw	r17,12(sp)
 4049c24:	8022907a 	slli	r17,r16,1
 4049c28:	dd000615 	stw	r20,24(sp)
 4049c2c:	2829883a 	mov	r20,r5
 4049c30:	01400044 	movi	r5,1
 4049c34:	dcc00515 	stw	r19,20(sp)
 4049c38:	dc800415 	stw	r18,16(sp)
 4049c3c:	dfc00715 	stw	ra,28(sp)
 4049c40:	3825883a 	mov	r18,r7
 4049c44:	8822d57a 	srli	r17,r17,21
 4049c48:	4048f800 	call	4048f80 <_Balloc>
 4049c4c:	1027883a 	mov	r19,r2
 4049c50:	00800434 	movhi	r2,16
 4049c54:	10bfffc4 	addi	r2,r2,-1
 4049c58:	808c703a 	and	r6,r16,r2
 4049c5c:	88000126 	beq	r17,zero,4049c64 <__d2b+0x50>
 4049c60:	31800434 	orhi	r6,r6,16
 4049c64:	d9800015 	stw	r6,0(sp)
 4049c68:	a0002426 	beq	r20,zero,4049cfc <__d2b+0xe8>
 4049c6c:	d9000104 	addi	r4,sp,4
 4049c70:	dd000115 	stw	r20,4(sp)
 4049c74:	40492dc0 	call	40492dc <__lo0bits>
 4049c78:	d8c00017 	ldw	r3,0(sp)
 4049c7c:	10002f1e 	bne	r2,zero,4049d3c <__d2b+0x128>
 4049c80:	d9000117 	ldw	r4,4(sp)
 4049c84:	99000515 	stw	r4,20(r19)
 4049c88:	1821003a 	cmpeq	r16,r3,zero
 4049c8c:	01000084 	movi	r4,2
 4049c90:	2421c83a 	sub	r16,r4,r16
 4049c94:	98c00615 	stw	r3,24(r19)
 4049c98:	9c000415 	stw	r16,16(r19)
 4049c9c:	88001f1e 	bne	r17,zero,4049d1c <__d2b+0x108>
 4049ca0:	10bef384 	addi	r2,r2,-1074
 4049ca4:	90800015 	stw	r2,0(r18)
 4049ca8:	00900034 	movhi	r2,16384
 4049cac:	10bfffc4 	addi	r2,r2,-1
 4049cb0:	8085883a 	add	r2,r16,r2
 4049cb4:	1085883a 	add	r2,r2,r2
 4049cb8:	1085883a 	add	r2,r2,r2
 4049cbc:	9885883a 	add	r2,r19,r2
 4049cc0:	11000517 	ldw	r4,20(r2)
 4049cc4:	8020917a 	slli	r16,r16,5
 4049cc8:	40492740 	call	4049274 <__hi0bits>
 4049ccc:	d8c00817 	ldw	r3,32(sp)
 4049cd0:	8085c83a 	sub	r2,r16,r2
 4049cd4:	18800015 	stw	r2,0(r3)
 4049cd8:	9805883a 	mov	r2,r19
 4049cdc:	dfc00717 	ldw	ra,28(sp)
 4049ce0:	dd000617 	ldw	r20,24(sp)
 4049ce4:	dcc00517 	ldw	r19,20(sp)
 4049ce8:	dc800417 	ldw	r18,16(sp)
 4049cec:	dc400317 	ldw	r17,12(sp)
 4049cf0:	dc000217 	ldw	r16,8(sp)
 4049cf4:	dec00804 	addi	sp,sp,32
 4049cf8:	f800283a 	ret
 4049cfc:	d809883a 	mov	r4,sp
 4049d00:	40492dc0 	call	40492dc <__lo0bits>
 4049d04:	d8c00017 	ldw	r3,0(sp)
 4049d08:	04000044 	movi	r16,1
 4049d0c:	9c000415 	stw	r16,16(r19)
 4049d10:	98c00515 	stw	r3,20(r19)
 4049d14:	10800804 	addi	r2,r2,32
 4049d18:	883fe126 	beq	r17,zero,4049ca0 <__flash_rwdata_start+0xfffef570>
 4049d1c:	00c00d44 	movi	r3,53
 4049d20:	8c7ef344 	addi	r17,r17,-1075
 4049d24:	88a3883a 	add	r17,r17,r2
 4049d28:	1885c83a 	sub	r2,r3,r2
 4049d2c:	d8c00817 	ldw	r3,32(sp)
 4049d30:	94400015 	stw	r17,0(r18)
 4049d34:	18800015 	stw	r2,0(r3)
 4049d38:	003fe706 	br	4049cd8 <__flash_rwdata_start+0xfffef5a8>
 4049d3c:	01000804 	movi	r4,32
 4049d40:	2089c83a 	sub	r4,r4,r2
 4049d44:	1908983a 	sll	r4,r3,r4
 4049d48:	d9400117 	ldw	r5,4(sp)
 4049d4c:	1886d83a 	srl	r3,r3,r2
 4049d50:	2148b03a 	or	r4,r4,r5
 4049d54:	99000515 	stw	r4,20(r19)
 4049d58:	d8c00015 	stw	r3,0(sp)
 4049d5c:	003fca06 	br	4049c88 <__flash_rwdata_start+0xfffef558>

04049d60 <__ratio>:
 4049d60:	defff904 	addi	sp,sp,-28
 4049d64:	dc400315 	stw	r17,12(sp)
 4049d68:	2823883a 	mov	r17,r5
 4049d6c:	d9400104 	addi	r5,sp,4
 4049d70:	dfc00615 	stw	ra,24(sp)
 4049d74:	dcc00515 	stw	r19,20(sp)
 4049d78:	dc800415 	stw	r18,16(sp)
 4049d7c:	2027883a 	mov	r19,r4
 4049d80:	dc000215 	stw	r16,8(sp)
 4049d84:	4049b080 	call	4049b08 <__b2d>
 4049d88:	d80b883a 	mov	r5,sp
 4049d8c:	8809883a 	mov	r4,r17
 4049d90:	1025883a 	mov	r18,r2
 4049d94:	1821883a 	mov	r16,r3
 4049d98:	4049b080 	call	4049b08 <__b2d>
 4049d9c:	8a000417 	ldw	r8,16(r17)
 4049da0:	99000417 	ldw	r4,16(r19)
 4049da4:	d9400117 	ldw	r5,4(sp)
 4049da8:	2209c83a 	sub	r4,r4,r8
 4049dac:	2010917a 	slli	r8,r4,5
 4049db0:	d9000017 	ldw	r4,0(sp)
 4049db4:	2909c83a 	sub	r4,r5,r4
 4049db8:	4109883a 	add	r4,r8,r4
 4049dbc:	01000e0e 	bge	zero,r4,4049df8 <__ratio+0x98>
 4049dc0:	2008953a 	slli	r4,r4,20
 4049dc4:	2421883a 	add	r16,r4,r16
 4049dc8:	100d883a 	mov	r6,r2
 4049dcc:	180f883a 	mov	r7,r3
 4049dd0:	9009883a 	mov	r4,r18
 4049dd4:	800b883a 	mov	r5,r16
 4049dd8:	404da440 	call	404da44 <__divdf3>
 4049ddc:	dfc00617 	ldw	ra,24(sp)
 4049de0:	dcc00517 	ldw	r19,20(sp)
 4049de4:	dc800417 	ldw	r18,16(sp)
 4049de8:	dc400317 	ldw	r17,12(sp)
 4049dec:	dc000217 	ldw	r16,8(sp)
 4049df0:	dec00704 	addi	sp,sp,28
 4049df4:	f800283a 	ret
 4049df8:	2008953a 	slli	r4,r4,20
 4049dfc:	1907c83a 	sub	r3,r3,r4
 4049e00:	003ff106 	br	4049dc8 <__flash_rwdata_start+0xfffef698>

04049e04 <_mprec_log10>:
 4049e04:	defffe04 	addi	sp,sp,-8
 4049e08:	dc000015 	stw	r16,0(sp)
 4049e0c:	dfc00115 	stw	ra,4(sp)
 4049e10:	008005c4 	movi	r2,23
 4049e14:	2021883a 	mov	r16,r4
 4049e18:	11000d0e 	bge	r2,r4,4049e50 <_mprec_log10+0x4c>
 4049e1c:	0005883a 	mov	r2,zero
 4049e20:	00cffc34 	movhi	r3,16368
 4049e24:	843fffc4 	addi	r16,r16,-1
 4049e28:	000d883a 	mov	r6,zero
 4049e2c:	01d00934 	movhi	r7,16420
 4049e30:	1009883a 	mov	r4,r2
 4049e34:	180b883a 	mov	r5,r3
 4049e38:	404e5840 	call	404e584 <__muldf3>
 4049e3c:	803ff91e 	bne	r16,zero,4049e24 <__flash_rwdata_start+0xfffef6f4>
 4049e40:	dfc00117 	ldw	ra,4(sp)
 4049e44:	dc000017 	ldw	r16,0(sp)
 4049e48:	dec00204 	addi	sp,sp,8
 4049e4c:	f800283a 	ret
 4049e50:	202090fa 	slli	r16,r4,3
 4049e54:	00808034 	movhi	r2,512
 4049e58:	1080cb04 	addi	r2,r2,812
 4049e5c:	1421883a 	add	r16,r2,r16
 4049e60:	80800017 	ldw	r2,0(r16)
 4049e64:	80c00117 	ldw	r3,4(r16)
 4049e68:	dfc00117 	ldw	ra,4(sp)
 4049e6c:	dc000017 	ldw	r16,0(sp)
 4049e70:	dec00204 	addi	sp,sp,8
 4049e74:	f800283a 	ret

04049e78 <__copybits>:
 4049e78:	297fffc4 	addi	r5,r5,-1
 4049e7c:	280fd17a 	srai	r7,r5,5
 4049e80:	30c00417 	ldw	r3,16(r6)
 4049e84:	30800504 	addi	r2,r6,20
 4049e88:	39c00044 	addi	r7,r7,1
 4049e8c:	18c7883a 	add	r3,r3,r3
 4049e90:	39cf883a 	add	r7,r7,r7
 4049e94:	18c7883a 	add	r3,r3,r3
 4049e98:	39cf883a 	add	r7,r7,r7
 4049e9c:	10c7883a 	add	r3,r2,r3
 4049ea0:	21cf883a 	add	r7,r4,r7
 4049ea4:	10c00d2e 	bgeu	r2,r3,4049edc <__copybits+0x64>
 4049ea8:	200b883a 	mov	r5,r4
 4049eac:	12000017 	ldw	r8,0(r2)
 4049eb0:	29400104 	addi	r5,r5,4
 4049eb4:	10800104 	addi	r2,r2,4
 4049eb8:	2a3fff15 	stw	r8,-4(r5)
 4049ebc:	10fffb36 	bltu	r2,r3,4049eac <__flash_rwdata_start+0xfffef77c>
 4049ec0:	1985c83a 	sub	r2,r3,r6
 4049ec4:	10bffac4 	addi	r2,r2,-21
 4049ec8:	1004d0ba 	srli	r2,r2,2
 4049ecc:	10800044 	addi	r2,r2,1
 4049ed0:	1085883a 	add	r2,r2,r2
 4049ed4:	1085883a 	add	r2,r2,r2
 4049ed8:	2089883a 	add	r4,r4,r2
 4049edc:	21c0032e 	bgeu	r4,r7,4049eec <__copybits+0x74>
 4049ee0:	20000015 	stw	zero,0(r4)
 4049ee4:	21000104 	addi	r4,r4,4
 4049ee8:	21fffd36 	bltu	r4,r7,4049ee0 <__flash_rwdata_start+0xfffef7b0>
 4049eec:	f800283a 	ret

04049ef0 <__any_on>:
 4049ef0:	20c00417 	ldw	r3,16(r4)
 4049ef4:	2805d17a 	srai	r2,r5,5
 4049ef8:	21000504 	addi	r4,r4,20
 4049efc:	18800d0e 	bge	r3,r2,4049f34 <__any_on+0x44>
 4049f00:	18c7883a 	add	r3,r3,r3
 4049f04:	18c7883a 	add	r3,r3,r3
 4049f08:	20c7883a 	add	r3,r4,r3
 4049f0c:	20c0192e 	bgeu	r4,r3,4049f74 <__any_on+0x84>
 4049f10:	18bfff17 	ldw	r2,-4(r3)
 4049f14:	18ffff04 	addi	r3,r3,-4
 4049f18:	1000041e 	bne	r2,zero,4049f2c <__any_on+0x3c>
 4049f1c:	20c0142e 	bgeu	r4,r3,4049f70 <__any_on+0x80>
 4049f20:	18ffff04 	addi	r3,r3,-4
 4049f24:	19400017 	ldw	r5,0(r3)
 4049f28:	283ffc26 	beq	r5,zero,4049f1c <__flash_rwdata_start+0xfffef7ec>
 4049f2c:	00800044 	movi	r2,1
 4049f30:	f800283a 	ret
 4049f34:	10c00a0e 	bge	r2,r3,4049f60 <__any_on+0x70>
 4049f38:	1085883a 	add	r2,r2,r2
 4049f3c:	1085883a 	add	r2,r2,r2
 4049f40:	294007cc 	andi	r5,r5,31
 4049f44:	2087883a 	add	r3,r4,r2
 4049f48:	283ff026 	beq	r5,zero,4049f0c <__flash_rwdata_start+0xfffef7dc>
 4049f4c:	19800017 	ldw	r6,0(r3)
 4049f50:	3144d83a 	srl	r2,r6,r5
 4049f54:	114a983a 	sll	r5,r2,r5
 4049f58:	317ff41e 	bne	r6,r5,4049f2c <__flash_rwdata_start+0xfffef7fc>
 4049f5c:	003feb06 	br	4049f0c <__flash_rwdata_start+0xfffef7dc>
 4049f60:	1085883a 	add	r2,r2,r2
 4049f64:	1085883a 	add	r2,r2,r2
 4049f68:	2087883a 	add	r3,r4,r2
 4049f6c:	003fe706 	br	4049f0c <__flash_rwdata_start+0xfffef7dc>
 4049f70:	f800283a 	ret
 4049f74:	0005883a 	mov	r2,zero
 4049f78:	f800283a 	ret

04049f7c <_realloc_r>:
 4049f7c:	defff604 	addi	sp,sp,-40
 4049f80:	dc800215 	stw	r18,8(sp)
 4049f84:	dfc00915 	stw	ra,36(sp)
 4049f88:	df000815 	stw	fp,32(sp)
 4049f8c:	ddc00715 	stw	r23,28(sp)
 4049f90:	dd800615 	stw	r22,24(sp)
 4049f94:	dd400515 	stw	r21,20(sp)
 4049f98:	dd000415 	stw	r20,16(sp)
 4049f9c:	dcc00315 	stw	r19,12(sp)
 4049fa0:	dc400115 	stw	r17,4(sp)
 4049fa4:	dc000015 	stw	r16,0(sp)
 4049fa8:	3025883a 	mov	r18,r6
 4049fac:	2800b726 	beq	r5,zero,404a28c <_realloc_r+0x310>
 4049fb0:	282b883a 	mov	r21,r5
 4049fb4:	2029883a 	mov	r20,r4
 4049fb8:	40505000 	call	4050500 <__malloc_lock>
 4049fbc:	a8bfff17 	ldw	r2,-4(r21)
 4049fc0:	043fff04 	movi	r16,-4
 4049fc4:	90c002c4 	addi	r3,r18,11
 4049fc8:	01000584 	movi	r4,22
 4049fcc:	acfffe04 	addi	r19,r21,-8
 4049fd0:	1420703a 	and	r16,r2,r16
 4049fd4:	20c0332e 	bgeu	r4,r3,404a0a4 <_realloc_r+0x128>
 4049fd8:	047ffe04 	movi	r17,-8
 4049fdc:	1c62703a 	and	r17,r3,r17
 4049fe0:	8807883a 	mov	r3,r17
 4049fe4:	88005816 	blt	r17,zero,404a148 <_realloc_r+0x1cc>
 4049fe8:	8c805736 	bltu	r17,r18,404a148 <_realloc_r+0x1cc>
 4049fec:	80c0300e 	bge	r16,r3,404a0b0 <_realloc_r+0x134>
 4049ff0:	07008034 	movhi	fp,512
 4049ff4:	e701b804 	addi	fp,fp,1760
 4049ff8:	e1c00217 	ldw	r7,8(fp)
 4049ffc:	9c09883a 	add	r4,r19,r16
 404a000:	22000117 	ldw	r8,4(r4)
 404a004:	21c06326 	beq	r4,r7,404a194 <_realloc_r+0x218>
 404a008:	017fff84 	movi	r5,-2
 404a00c:	414a703a 	and	r5,r8,r5
 404a010:	214b883a 	add	r5,r4,r5
 404a014:	29800117 	ldw	r6,4(r5)
 404a018:	3180004c 	andi	r6,r6,1
 404a01c:	30003f26 	beq	r6,zero,404a11c <_realloc_r+0x1a0>
 404a020:	1080004c 	andi	r2,r2,1
 404a024:	10008326 	beq	r2,zero,404a234 <_realloc_r+0x2b8>
 404a028:	900b883a 	mov	r5,r18
 404a02c:	a009883a 	mov	r4,r20
 404a030:	40430940 	call	4043094 <_malloc_r>
 404a034:	1025883a 	mov	r18,r2
 404a038:	10011e26 	beq	r2,zero,404a4b4 <_realloc_r+0x538>
 404a03c:	a93fff17 	ldw	r4,-4(r21)
 404a040:	10fffe04 	addi	r3,r2,-8
 404a044:	00bfff84 	movi	r2,-2
 404a048:	2084703a 	and	r2,r4,r2
 404a04c:	9885883a 	add	r2,r19,r2
 404a050:	1880ee26 	beq	r3,r2,404a40c <_realloc_r+0x490>
 404a054:	81bfff04 	addi	r6,r16,-4
 404a058:	00800904 	movi	r2,36
 404a05c:	1180b836 	bltu	r2,r6,404a340 <_realloc_r+0x3c4>
 404a060:	00c004c4 	movi	r3,19
 404a064:	19809636 	bltu	r3,r6,404a2c0 <_realloc_r+0x344>
 404a068:	9005883a 	mov	r2,r18
 404a06c:	a807883a 	mov	r3,r21
 404a070:	19000017 	ldw	r4,0(r3)
 404a074:	11000015 	stw	r4,0(r2)
 404a078:	19000117 	ldw	r4,4(r3)
 404a07c:	11000115 	stw	r4,4(r2)
 404a080:	18c00217 	ldw	r3,8(r3)
 404a084:	10c00215 	stw	r3,8(r2)
 404a088:	a80b883a 	mov	r5,r21
 404a08c:	a009883a 	mov	r4,r20
 404a090:	404802c0 	call	404802c <_free_r>
 404a094:	a009883a 	mov	r4,r20
 404a098:	40506200 	call	4050620 <__malloc_unlock>
 404a09c:	9005883a 	mov	r2,r18
 404a0a0:	00001206 	br	404a0ec <_realloc_r+0x170>
 404a0a4:	00c00404 	movi	r3,16
 404a0a8:	1823883a 	mov	r17,r3
 404a0ac:	003fce06 	br	4049fe8 <__flash_rwdata_start+0xfffef8b8>
 404a0b0:	a825883a 	mov	r18,r21
 404a0b4:	8445c83a 	sub	r2,r16,r17
 404a0b8:	00c003c4 	movi	r3,15
 404a0bc:	18802636 	bltu	r3,r2,404a158 <_realloc_r+0x1dc>
 404a0c0:	99800117 	ldw	r6,4(r19)
 404a0c4:	9c07883a 	add	r3,r19,r16
 404a0c8:	3180004c 	andi	r6,r6,1
 404a0cc:	3420b03a 	or	r16,r6,r16
 404a0d0:	9c000115 	stw	r16,4(r19)
 404a0d4:	18800117 	ldw	r2,4(r3)
 404a0d8:	10800054 	ori	r2,r2,1
 404a0dc:	18800115 	stw	r2,4(r3)
 404a0e0:	a009883a 	mov	r4,r20
 404a0e4:	40506200 	call	4050620 <__malloc_unlock>
 404a0e8:	9005883a 	mov	r2,r18
 404a0ec:	dfc00917 	ldw	ra,36(sp)
 404a0f0:	df000817 	ldw	fp,32(sp)
 404a0f4:	ddc00717 	ldw	r23,28(sp)
 404a0f8:	dd800617 	ldw	r22,24(sp)
 404a0fc:	dd400517 	ldw	r21,20(sp)
 404a100:	dd000417 	ldw	r20,16(sp)
 404a104:	dcc00317 	ldw	r19,12(sp)
 404a108:	dc800217 	ldw	r18,8(sp)
 404a10c:	dc400117 	ldw	r17,4(sp)
 404a110:	dc000017 	ldw	r16,0(sp)
 404a114:	dec00a04 	addi	sp,sp,40
 404a118:	f800283a 	ret
 404a11c:	017fff04 	movi	r5,-4
 404a120:	414a703a 	and	r5,r8,r5
 404a124:	814d883a 	add	r6,r16,r5
 404a128:	30c01f16 	blt	r6,r3,404a1a8 <_realloc_r+0x22c>
 404a12c:	20800317 	ldw	r2,12(r4)
 404a130:	20c00217 	ldw	r3,8(r4)
 404a134:	a825883a 	mov	r18,r21
 404a138:	3021883a 	mov	r16,r6
 404a13c:	18800315 	stw	r2,12(r3)
 404a140:	10c00215 	stw	r3,8(r2)
 404a144:	003fdb06 	br	404a0b4 <__flash_rwdata_start+0xfffef984>
 404a148:	00800304 	movi	r2,12
 404a14c:	a0800015 	stw	r2,0(r20)
 404a150:	0005883a 	mov	r2,zero
 404a154:	003fe506 	br	404a0ec <__flash_rwdata_start+0xfffef9bc>
 404a158:	98c00117 	ldw	r3,4(r19)
 404a15c:	9c4b883a 	add	r5,r19,r17
 404a160:	11000054 	ori	r4,r2,1
 404a164:	18c0004c 	andi	r3,r3,1
 404a168:	1c62b03a 	or	r17,r3,r17
 404a16c:	9c400115 	stw	r17,4(r19)
 404a170:	29000115 	stw	r4,4(r5)
 404a174:	2885883a 	add	r2,r5,r2
 404a178:	10c00117 	ldw	r3,4(r2)
 404a17c:	29400204 	addi	r5,r5,8
 404a180:	a009883a 	mov	r4,r20
 404a184:	18c00054 	ori	r3,r3,1
 404a188:	10c00115 	stw	r3,4(r2)
 404a18c:	404802c0 	call	404802c <_free_r>
 404a190:	003fd306 	br	404a0e0 <__flash_rwdata_start+0xfffef9b0>
 404a194:	017fff04 	movi	r5,-4
 404a198:	414a703a 	and	r5,r8,r5
 404a19c:	89800404 	addi	r6,r17,16
 404a1a0:	8151883a 	add	r8,r16,r5
 404a1a4:	4180590e 	bge	r8,r6,404a30c <_realloc_r+0x390>
 404a1a8:	1080004c 	andi	r2,r2,1
 404a1ac:	103f9e1e 	bne	r2,zero,404a028 <__flash_rwdata_start+0xfffef8f8>
 404a1b0:	adbffe17 	ldw	r22,-8(r21)
 404a1b4:	00bfff04 	movi	r2,-4
 404a1b8:	9dadc83a 	sub	r22,r19,r22
 404a1bc:	b1800117 	ldw	r6,4(r22)
 404a1c0:	3084703a 	and	r2,r6,r2
 404a1c4:	20002026 	beq	r4,zero,404a248 <_realloc_r+0x2cc>
 404a1c8:	80af883a 	add	r23,r16,r2
 404a1cc:	b96f883a 	add	r23,r23,r5
 404a1d0:	21c05f26 	beq	r4,r7,404a350 <_realloc_r+0x3d4>
 404a1d4:	b8c01c16 	blt	r23,r3,404a248 <_realloc_r+0x2cc>
 404a1d8:	20800317 	ldw	r2,12(r4)
 404a1dc:	20c00217 	ldw	r3,8(r4)
 404a1e0:	81bfff04 	addi	r6,r16,-4
 404a1e4:	01000904 	movi	r4,36
 404a1e8:	18800315 	stw	r2,12(r3)
 404a1ec:	10c00215 	stw	r3,8(r2)
 404a1f0:	b0c00217 	ldw	r3,8(r22)
 404a1f4:	b0800317 	ldw	r2,12(r22)
 404a1f8:	b4800204 	addi	r18,r22,8
 404a1fc:	18800315 	stw	r2,12(r3)
 404a200:	10c00215 	stw	r3,8(r2)
 404a204:	21801b36 	bltu	r4,r6,404a274 <_realloc_r+0x2f8>
 404a208:	008004c4 	movi	r2,19
 404a20c:	1180352e 	bgeu	r2,r6,404a2e4 <_realloc_r+0x368>
 404a210:	a8800017 	ldw	r2,0(r21)
 404a214:	b0800215 	stw	r2,8(r22)
 404a218:	a8800117 	ldw	r2,4(r21)
 404a21c:	b0800315 	stw	r2,12(r22)
 404a220:	008006c4 	movi	r2,27
 404a224:	11807f36 	bltu	r2,r6,404a424 <_realloc_r+0x4a8>
 404a228:	b0800404 	addi	r2,r22,16
 404a22c:	ad400204 	addi	r21,r21,8
 404a230:	00002d06 	br	404a2e8 <_realloc_r+0x36c>
 404a234:	adbffe17 	ldw	r22,-8(r21)
 404a238:	00bfff04 	movi	r2,-4
 404a23c:	9dadc83a 	sub	r22,r19,r22
 404a240:	b1000117 	ldw	r4,4(r22)
 404a244:	2084703a 	and	r2,r4,r2
 404a248:	b03f7726 	beq	r22,zero,404a028 <__flash_rwdata_start+0xfffef8f8>
 404a24c:	80af883a 	add	r23,r16,r2
 404a250:	b8ff7516 	blt	r23,r3,404a028 <__flash_rwdata_start+0xfffef8f8>
 404a254:	b0800317 	ldw	r2,12(r22)
 404a258:	b0c00217 	ldw	r3,8(r22)
 404a25c:	81bfff04 	addi	r6,r16,-4
 404a260:	01000904 	movi	r4,36
 404a264:	18800315 	stw	r2,12(r3)
 404a268:	10c00215 	stw	r3,8(r2)
 404a26c:	b4800204 	addi	r18,r22,8
 404a270:	21bfe52e 	bgeu	r4,r6,404a208 <__flash_rwdata_start+0xfffefad8>
 404a274:	a80b883a 	mov	r5,r21
 404a278:	9009883a 	mov	r4,r18
 404a27c:	4048cfc0 	call	4048cfc <memmove>
 404a280:	b821883a 	mov	r16,r23
 404a284:	b027883a 	mov	r19,r22
 404a288:	003f8a06 	br	404a0b4 <__flash_rwdata_start+0xfffef984>
 404a28c:	300b883a 	mov	r5,r6
 404a290:	dfc00917 	ldw	ra,36(sp)
 404a294:	df000817 	ldw	fp,32(sp)
 404a298:	ddc00717 	ldw	r23,28(sp)
 404a29c:	dd800617 	ldw	r22,24(sp)
 404a2a0:	dd400517 	ldw	r21,20(sp)
 404a2a4:	dd000417 	ldw	r20,16(sp)
 404a2a8:	dcc00317 	ldw	r19,12(sp)
 404a2ac:	dc800217 	ldw	r18,8(sp)
 404a2b0:	dc400117 	ldw	r17,4(sp)
 404a2b4:	dc000017 	ldw	r16,0(sp)
 404a2b8:	dec00a04 	addi	sp,sp,40
 404a2bc:	40430941 	jmpi	4043094 <_malloc_r>
 404a2c0:	a8c00017 	ldw	r3,0(r21)
 404a2c4:	90c00015 	stw	r3,0(r18)
 404a2c8:	a8c00117 	ldw	r3,4(r21)
 404a2cc:	90c00115 	stw	r3,4(r18)
 404a2d0:	00c006c4 	movi	r3,27
 404a2d4:	19804536 	bltu	r3,r6,404a3ec <_realloc_r+0x470>
 404a2d8:	90800204 	addi	r2,r18,8
 404a2dc:	a8c00204 	addi	r3,r21,8
 404a2e0:	003f6306 	br	404a070 <__flash_rwdata_start+0xfffef940>
 404a2e4:	9005883a 	mov	r2,r18
 404a2e8:	a8c00017 	ldw	r3,0(r21)
 404a2ec:	b821883a 	mov	r16,r23
 404a2f0:	b027883a 	mov	r19,r22
 404a2f4:	10c00015 	stw	r3,0(r2)
 404a2f8:	a8c00117 	ldw	r3,4(r21)
 404a2fc:	10c00115 	stw	r3,4(r2)
 404a300:	a8c00217 	ldw	r3,8(r21)
 404a304:	10c00215 	stw	r3,8(r2)
 404a308:	003f6a06 	br	404a0b4 <__flash_rwdata_start+0xfffef984>
 404a30c:	9c67883a 	add	r19,r19,r17
 404a310:	4445c83a 	sub	r2,r8,r17
 404a314:	e4c00215 	stw	r19,8(fp)
 404a318:	10800054 	ori	r2,r2,1
 404a31c:	98800115 	stw	r2,4(r19)
 404a320:	a8bfff17 	ldw	r2,-4(r21)
 404a324:	a009883a 	mov	r4,r20
 404a328:	1080004c 	andi	r2,r2,1
 404a32c:	1462b03a 	or	r17,r2,r17
 404a330:	ac7fff15 	stw	r17,-4(r21)
 404a334:	40506200 	call	4050620 <__malloc_unlock>
 404a338:	a805883a 	mov	r2,r21
 404a33c:	003f6b06 	br	404a0ec <__flash_rwdata_start+0xfffef9bc>
 404a340:	a80b883a 	mov	r5,r21
 404a344:	9009883a 	mov	r4,r18
 404a348:	4048cfc0 	call	4048cfc <memmove>
 404a34c:	003f4e06 	br	404a088 <__flash_rwdata_start+0xfffef958>
 404a350:	89000404 	addi	r4,r17,16
 404a354:	b93fbc16 	blt	r23,r4,404a248 <__flash_rwdata_start+0xfffefb18>
 404a358:	b0800317 	ldw	r2,12(r22)
 404a35c:	b0c00217 	ldw	r3,8(r22)
 404a360:	81bfff04 	addi	r6,r16,-4
 404a364:	01000904 	movi	r4,36
 404a368:	18800315 	stw	r2,12(r3)
 404a36c:	10c00215 	stw	r3,8(r2)
 404a370:	b4800204 	addi	r18,r22,8
 404a374:	21804336 	bltu	r4,r6,404a484 <_realloc_r+0x508>
 404a378:	008004c4 	movi	r2,19
 404a37c:	11803f2e 	bgeu	r2,r6,404a47c <_realloc_r+0x500>
 404a380:	a8800017 	ldw	r2,0(r21)
 404a384:	b0800215 	stw	r2,8(r22)
 404a388:	a8800117 	ldw	r2,4(r21)
 404a38c:	b0800315 	stw	r2,12(r22)
 404a390:	008006c4 	movi	r2,27
 404a394:	11803f36 	bltu	r2,r6,404a494 <_realloc_r+0x518>
 404a398:	b0800404 	addi	r2,r22,16
 404a39c:	ad400204 	addi	r21,r21,8
 404a3a0:	a8c00017 	ldw	r3,0(r21)
 404a3a4:	10c00015 	stw	r3,0(r2)
 404a3a8:	a8c00117 	ldw	r3,4(r21)
 404a3ac:	10c00115 	stw	r3,4(r2)
 404a3b0:	a8c00217 	ldw	r3,8(r21)
 404a3b4:	10c00215 	stw	r3,8(r2)
 404a3b8:	b447883a 	add	r3,r22,r17
 404a3bc:	bc45c83a 	sub	r2,r23,r17
 404a3c0:	e0c00215 	stw	r3,8(fp)
 404a3c4:	10800054 	ori	r2,r2,1
 404a3c8:	18800115 	stw	r2,4(r3)
 404a3cc:	b0800117 	ldw	r2,4(r22)
 404a3d0:	a009883a 	mov	r4,r20
 404a3d4:	1080004c 	andi	r2,r2,1
 404a3d8:	1462b03a 	or	r17,r2,r17
 404a3dc:	b4400115 	stw	r17,4(r22)
 404a3e0:	40506200 	call	4050620 <__malloc_unlock>
 404a3e4:	9005883a 	mov	r2,r18
 404a3e8:	003f4006 	br	404a0ec <__flash_rwdata_start+0xfffef9bc>
 404a3ec:	a8c00217 	ldw	r3,8(r21)
 404a3f0:	90c00215 	stw	r3,8(r18)
 404a3f4:	a8c00317 	ldw	r3,12(r21)
 404a3f8:	90c00315 	stw	r3,12(r18)
 404a3fc:	30801126 	beq	r6,r2,404a444 <_realloc_r+0x4c8>
 404a400:	90800404 	addi	r2,r18,16
 404a404:	a8c00404 	addi	r3,r21,16
 404a408:	003f1906 	br	404a070 <__flash_rwdata_start+0xfffef940>
 404a40c:	90ffff17 	ldw	r3,-4(r18)
 404a410:	00bfff04 	movi	r2,-4
 404a414:	a825883a 	mov	r18,r21
 404a418:	1884703a 	and	r2,r3,r2
 404a41c:	80a1883a 	add	r16,r16,r2
 404a420:	003f2406 	br	404a0b4 <__flash_rwdata_start+0xfffef984>
 404a424:	a8800217 	ldw	r2,8(r21)
 404a428:	b0800415 	stw	r2,16(r22)
 404a42c:	a8800317 	ldw	r2,12(r21)
 404a430:	b0800515 	stw	r2,20(r22)
 404a434:	31000a26 	beq	r6,r4,404a460 <_realloc_r+0x4e4>
 404a438:	b0800604 	addi	r2,r22,24
 404a43c:	ad400404 	addi	r21,r21,16
 404a440:	003fa906 	br	404a2e8 <__flash_rwdata_start+0xfffefbb8>
 404a444:	a9000417 	ldw	r4,16(r21)
 404a448:	90800604 	addi	r2,r18,24
 404a44c:	a8c00604 	addi	r3,r21,24
 404a450:	91000415 	stw	r4,16(r18)
 404a454:	a9000517 	ldw	r4,20(r21)
 404a458:	91000515 	stw	r4,20(r18)
 404a45c:	003f0406 	br	404a070 <__flash_rwdata_start+0xfffef940>
 404a460:	a8c00417 	ldw	r3,16(r21)
 404a464:	ad400604 	addi	r21,r21,24
 404a468:	b0800804 	addi	r2,r22,32
 404a46c:	b0c00615 	stw	r3,24(r22)
 404a470:	a8ffff17 	ldw	r3,-4(r21)
 404a474:	b0c00715 	stw	r3,28(r22)
 404a478:	003f9b06 	br	404a2e8 <__flash_rwdata_start+0xfffefbb8>
 404a47c:	9005883a 	mov	r2,r18
 404a480:	003fc706 	br	404a3a0 <__flash_rwdata_start+0xfffefc70>
 404a484:	a80b883a 	mov	r5,r21
 404a488:	9009883a 	mov	r4,r18
 404a48c:	4048cfc0 	call	4048cfc <memmove>
 404a490:	003fc906 	br	404a3b8 <__flash_rwdata_start+0xfffefc88>
 404a494:	a8800217 	ldw	r2,8(r21)
 404a498:	b0800415 	stw	r2,16(r22)
 404a49c:	a8800317 	ldw	r2,12(r21)
 404a4a0:	b0800515 	stw	r2,20(r22)
 404a4a4:	31000726 	beq	r6,r4,404a4c4 <_realloc_r+0x548>
 404a4a8:	b0800604 	addi	r2,r22,24
 404a4ac:	ad400404 	addi	r21,r21,16
 404a4b0:	003fbb06 	br	404a3a0 <__flash_rwdata_start+0xfffefc70>
 404a4b4:	a009883a 	mov	r4,r20
 404a4b8:	40506200 	call	4050620 <__malloc_unlock>
 404a4bc:	0005883a 	mov	r2,zero
 404a4c0:	003f0a06 	br	404a0ec <__flash_rwdata_start+0xfffef9bc>
 404a4c4:	a8c00417 	ldw	r3,16(r21)
 404a4c8:	ad400604 	addi	r21,r21,24
 404a4cc:	b0800804 	addi	r2,r22,32
 404a4d0:	b0c00615 	stw	r3,24(r22)
 404a4d4:	a8ffff17 	ldw	r3,-4(r21)
 404a4d8:	b0c00715 	stw	r3,28(r22)
 404a4dc:	003fb006 	br	404a3a0 <__flash_rwdata_start+0xfffefc70>

0404a4e0 <__fpclassifyd>:
 404a4e0:	00a00034 	movhi	r2,32768
 404a4e4:	10bfffc4 	addi	r2,r2,-1
 404a4e8:	2884703a 	and	r2,r5,r2
 404a4ec:	10000726 	beq	r2,zero,404a50c <__fpclassifyd+0x2c>
 404a4f0:	00fffc34 	movhi	r3,65520
 404a4f4:	019ff834 	movhi	r6,32736
 404a4f8:	28c7883a 	add	r3,r5,r3
 404a4fc:	31bfffc4 	addi	r6,r6,-1
 404a500:	30c00536 	bltu	r6,r3,404a518 <__fpclassifyd+0x38>
 404a504:	00800104 	movi	r2,4
 404a508:	f800283a 	ret
 404a50c:	2000021e 	bne	r4,zero,404a518 <__fpclassifyd+0x38>
 404a510:	00800084 	movi	r2,2
 404a514:	f800283a 	ret
 404a518:	00dffc34 	movhi	r3,32752
 404a51c:	019ff834 	movhi	r6,32736
 404a520:	28cb883a 	add	r5,r5,r3
 404a524:	31bfffc4 	addi	r6,r6,-1
 404a528:	317ff62e 	bgeu	r6,r5,404a504 <__flash_rwdata_start+0xfffefdd4>
 404a52c:	01400434 	movhi	r5,16
 404a530:	297fffc4 	addi	r5,r5,-1
 404a534:	28800236 	bltu	r5,r2,404a540 <__fpclassifyd+0x60>
 404a538:	008000c4 	movi	r2,3
 404a53c:	f800283a 	ret
 404a540:	10c00226 	beq	r2,r3,404a54c <__fpclassifyd+0x6c>
 404a544:	0005883a 	mov	r2,zero
 404a548:	f800283a 	ret
 404a54c:	2005003a 	cmpeq	r2,r4,zero
 404a550:	f800283a 	ret

0404a554 <__sread>:
 404a554:	defffe04 	addi	sp,sp,-8
 404a558:	dc000015 	stw	r16,0(sp)
 404a55c:	2821883a 	mov	r16,r5
 404a560:	2940038f 	ldh	r5,14(r5)
 404a564:	dfc00115 	stw	ra,4(sp)
 404a568:	404c3480 	call	404c348 <_read_r>
 404a56c:	10000716 	blt	r2,zero,404a58c <__sread+0x38>
 404a570:	80c01417 	ldw	r3,80(r16)
 404a574:	1887883a 	add	r3,r3,r2
 404a578:	80c01415 	stw	r3,80(r16)
 404a57c:	dfc00117 	ldw	ra,4(sp)
 404a580:	dc000017 	ldw	r16,0(sp)
 404a584:	dec00204 	addi	sp,sp,8
 404a588:	f800283a 	ret
 404a58c:	80c0030b 	ldhu	r3,12(r16)
 404a590:	18fbffcc 	andi	r3,r3,61439
 404a594:	80c0030d 	sth	r3,12(r16)
 404a598:	dfc00117 	ldw	ra,4(sp)
 404a59c:	dc000017 	ldw	r16,0(sp)
 404a5a0:	dec00204 	addi	sp,sp,8
 404a5a4:	f800283a 	ret

0404a5a8 <__seofread>:
 404a5a8:	0005883a 	mov	r2,zero
 404a5ac:	f800283a 	ret

0404a5b0 <__swrite>:
 404a5b0:	2880030b 	ldhu	r2,12(r5)
 404a5b4:	defffb04 	addi	sp,sp,-20
 404a5b8:	dcc00315 	stw	r19,12(sp)
 404a5bc:	dc800215 	stw	r18,8(sp)
 404a5c0:	dc400115 	stw	r17,4(sp)
 404a5c4:	dc000015 	stw	r16,0(sp)
 404a5c8:	dfc00415 	stw	ra,16(sp)
 404a5cc:	10c0400c 	andi	r3,r2,256
 404a5d0:	2821883a 	mov	r16,r5
 404a5d4:	2023883a 	mov	r17,r4
 404a5d8:	3025883a 	mov	r18,r6
 404a5dc:	3827883a 	mov	r19,r7
 404a5e0:	18000526 	beq	r3,zero,404a5f8 <__swrite+0x48>
 404a5e4:	2940038f 	ldh	r5,14(r5)
 404a5e8:	01c00084 	movi	r7,2
 404a5ec:	000d883a 	mov	r6,zero
 404a5f0:	404c2e80 	call	404c2e8 <_lseek_r>
 404a5f4:	8080030b 	ldhu	r2,12(r16)
 404a5f8:	8140038f 	ldh	r5,14(r16)
 404a5fc:	10bbffcc 	andi	r2,r2,61439
 404a600:	980f883a 	mov	r7,r19
 404a604:	900d883a 	mov	r6,r18
 404a608:	8809883a 	mov	r4,r17
 404a60c:	8080030d 	sth	r2,12(r16)
 404a610:	dfc00417 	ldw	ra,16(sp)
 404a614:	dcc00317 	ldw	r19,12(sp)
 404a618:	dc800217 	ldw	r18,8(sp)
 404a61c:	dc400117 	ldw	r17,4(sp)
 404a620:	dc000017 	ldw	r16,0(sp)
 404a624:	dec00504 	addi	sp,sp,20
 404a628:	404bdb41 	jmpi	404bdb4 <_write_r>

0404a62c <__sseek>:
 404a62c:	defffe04 	addi	sp,sp,-8
 404a630:	dc000015 	stw	r16,0(sp)
 404a634:	2821883a 	mov	r16,r5
 404a638:	2940038f 	ldh	r5,14(r5)
 404a63c:	dfc00115 	stw	ra,4(sp)
 404a640:	404c2e80 	call	404c2e8 <_lseek_r>
 404a644:	00ffffc4 	movi	r3,-1
 404a648:	10c00826 	beq	r2,r3,404a66c <__sseek+0x40>
 404a64c:	80c0030b 	ldhu	r3,12(r16)
 404a650:	80801415 	stw	r2,80(r16)
 404a654:	18c40014 	ori	r3,r3,4096
 404a658:	80c0030d 	sth	r3,12(r16)
 404a65c:	dfc00117 	ldw	ra,4(sp)
 404a660:	dc000017 	ldw	r16,0(sp)
 404a664:	dec00204 	addi	sp,sp,8
 404a668:	f800283a 	ret
 404a66c:	80c0030b 	ldhu	r3,12(r16)
 404a670:	18fbffcc 	andi	r3,r3,61439
 404a674:	80c0030d 	sth	r3,12(r16)
 404a678:	dfc00117 	ldw	ra,4(sp)
 404a67c:	dc000017 	ldw	r16,0(sp)
 404a680:	dec00204 	addi	sp,sp,8
 404a684:	f800283a 	ret

0404a688 <__sclose>:
 404a688:	2940038f 	ldh	r5,14(r5)
 404a68c:	404be141 	jmpi	404be14 <_close_r>

0404a690 <strcmp>:
 404a690:	2144b03a 	or	r2,r4,r5
 404a694:	108000cc 	andi	r2,r2,3
 404a698:	1000171e 	bne	r2,zero,404a6f8 <strcmp+0x68>
 404a69c:	20800017 	ldw	r2,0(r4)
 404a6a0:	28c00017 	ldw	r3,0(r5)
 404a6a4:	10c0141e 	bne	r2,r3,404a6f8 <strcmp+0x68>
 404a6a8:	027fbff4 	movhi	r9,65279
 404a6ac:	4a7fbfc4 	addi	r9,r9,-257
 404a6b0:	0086303a 	nor	r3,zero,r2
 404a6b4:	02202074 	movhi	r8,32897
 404a6b8:	1245883a 	add	r2,r2,r9
 404a6bc:	42202004 	addi	r8,r8,-32640
 404a6c0:	10c4703a 	and	r2,r2,r3
 404a6c4:	1204703a 	and	r2,r2,r8
 404a6c8:	10000226 	beq	r2,zero,404a6d4 <strcmp+0x44>
 404a6cc:	00002306 	br	404a75c <strcmp+0xcc>
 404a6d0:	1000221e 	bne	r2,zero,404a75c <strcmp+0xcc>
 404a6d4:	21000104 	addi	r4,r4,4
 404a6d8:	20c00017 	ldw	r3,0(r4)
 404a6dc:	29400104 	addi	r5,r5,4
 404a6e0:	29800017 	ldw	r6,0(r5)
 404a6e4:	1a4f883a 	add	r7,r3,r9
 404a6e8:	00c4303a 	nor	r2,zero,r3
 404a6ec:	3884703a 	and	r2,r7,r2
 404a6f0:	1204703a 	and	r2,r2,r8
 404a6f4:	19bff626 	beq	r3,r6,404a6d0 <__flash_rwdata_start+0xfffeffa0>
 404a6f8:	20800003 	ldbu	r2,0(r4)
 404a6fc:	10c03fcc 	andi	r3,r2,255
 404a700:	18c0201c 	xori	r3,r3,128
 404a704:	18ffe004 	addi	r3,r3,-128
 404a708:	18000c26 	beq	r3,zero,404a73c <strcmp+0xac>
 404a70c:	29800007 	ldb	r6,0(r5)
 404a710:	19800326 	beq	r3,r6,404a720 <strcmp+0x90>
 404a714:	00001306 	br	404a764 <strcmp+0xd4>
 404a718:	29800007 	ldb	r6,0(r5)
 404a71c:	11800b1e 	bne	r2,r6,404a74c <strcmp+0xbc>
 404a720:	21000044 	addi	r4,r4,1
 404a724:	20c00003 	ldbu	r3,0(r4)
 404a728:	29400044 	addi	r5,r5,1
 404a72c:	18803fcc 	andi	r2,r3,255
 404a730:	1080201c 	xori	r2,r2,128
 404a734:	10bfe004 	addi	r2,r2,-128
 404a738:	103ff71e 	bne	r2,zero,404a718 <__flash_rwdata_start+0xfffeffe8>
 404a73c:	0007883a 	mov	r3,zero
 404a740:	28800003 	ldbu	r2,0(r5)
 404a744:	1885c83a 	sub	r2,r3,r2
 404a748:	f800283a 	ret
 404a74c:	28800003 	ldbu	r2,0(r5)
 404a750:	18c03fcc 	andi	r3,r3,255
 404a754:	1885c83a 	sub	r2,r3,r2
 404a758:	f800283a 	ret
 404a75c:	0005883a 	mov	r2,zero
 404a760:	f800283a 	ret
 404a764:	10c03fcc 	andi	r3,r2,255
 404a768:	003ff506 	br	404a740 <__flash_rwdata_start+0xffff0010>

0404a76c <__sprint_r.part.0>:
 404a76c:	28801917 	ldw	r2,100(r5)
 404a770:	defff604 	addi	sp,sp,-40
 404a774:	dd400515 	stw	r21,20(sp)
 404a778:	dfc00915 	stw	ra,36(sp)
 404a77c:	df000815 	stw	fp,32(sp)
 404a780:	ddc00715 	stw	r23,28(sp)
 404a784:	dd800615 	stw	r22,24(sp)
 404a788:	dd000415 	stw	r20,16(sp)
 404a78c:	dcc00315 	stw	r19,12(sp)
 404a790:	dc800215 	stw	r18,8(sp)
 404a794:	dc400115 	stw	r17,4(sp)
 404a798:	dc000015 	stw	r16,0(sp)
 404a79c:	1088000c 	andi	r2,r2,8192
 404a7a0:	302b883a 	mov	r21,r6
 404a7a4:	10002e26 	beq	r2,zero,404a860 <__sprint_r.part.0+0xf4>
 404a7a8:	30800217 	ldw	r2,8(r6)
 404a7ac:	35800017 	ldw	r22,0(r6)
 404a7b0:	10002926 	beq	r2,zero,404a858 <__sprint_r.part.0+0xec>
 404a7b4:	2827883a 	mov	r19,r5
 404a7b8:	2029883a 	mov	r20,r4
 404a7bc:	b5c00104 	addi	r23,r22,4
 404a7c0:	04bfffc4 	movi	r18,-1
 404a7c4:	bc400017 	ldw	r17,0(r23)
 404a7c8:	b4000017 	ldw	r16,0(r22)
 404a7cc:	0039883a 	mov	fp,zero
 404a7d0:	8822d0ba 	srli	r17,r17,2
 404a7d4:	8800031e 	bne	r17,zero,404a7e4 <__sprint_r.part.0+0x78>
 404a7d8:	00001806 	br	404a83c <__sprint_r.part.0+0xd0>
 404a7dc:	84000104 	addi	r16,r16,4
 404a7e0:	8f001526 	beq	r17,fp,404a838 <__sprint_r.part.0+0xcc>
 404a7e4:	81400017 	ldw	r5,0(r16)
 404a7e8:	980d883a 	mov	r6,r19
 404a7ec:	a009883a 	mov	r4,r20
 404a7f0:	404c1940 	call	404c194 <_fputwc_r>
 404a7f4:	e7000044 	addi	fp,fp,1
 404a7f8:	14bff81e 	bne	r2,r18,404a7dc <__flash_rwdata_start+0xffff00ac>
 404a7fc:	9005883a 	mov	r2,r18
 404a800:	a8000215 	stw	zero,8(r21)
 404a804:	a8000115 	stw	zero,4(r21)
 404a808:	dfc00917 	ldw	ra,36(sp)
 404a80c:	df000817 	ldw	fp,32(sp)
 404a810:	ddc00717 	ldw	r23,28(sp)
 404a814:	dd800617 	ldw	r22,24(sp)
 404a818:	dd400517 	ldw	r21,20(sp)
 404a81c:	dd000417 	ldw	r20,16(sp)
 404a820:	dcc00317 	ldw	r19,12(sp)
 404a824:	dc800217 	ldw	r18,8(sp)
 404a828:	dc400117 	ldw	r17,4(sp)
 404a82c:	dc000017 	ldw	r16,0(sp)
 404a830:	dec00a04 	addi	sp,sp,40
 404a834:	f800283a 	ret
 404a838:	a8800217 	ldw	r2,8(r21)
 404a83c:	8c63883a 	add	r17,r17,r17
 404a840:	8c63883a 	add	r17,r17,r17
 404a844:	1445c83a 	sub	r2,r2,r17
 404a848:	a8800215 	stw	r2,8(r21)
 404a84c:	b5800204 	addi	r22,r22,8
 404a850:	bdc00204 	addi	r23,r23,8
 404a854:	103fdb1e 	bne	r2,zero,404a7c4 <__flash_rwdata_start+0xffff0094>
 404a858:	0005883a 	mov	r2,zero
 404a85c:	003fe806 	br	404a800 <__flash_rwdata_start+0xffff00d0>
 404a860:	404833c0 	call	404833c <__sfvwrite_r>
 404a864:	003fe606 	br	404a800 <__flash_rwdata_start+0xffff00d0>

0404a868 <__sprint_r>:
 404a868:	30c00217 	ldw	r3,8(r6)
 404a86c:	18000126 	beq	r3,zero,404a874 <__sprint_r+0xc>
 404a870:	404a76c1 	jmpi	404a76c <__sprint_r.part.0>
 404a874:	30000115 	stw	zero,4(r6)
 404a878:	0005883a 	mov	r2,zero
 404a87c:	f800283a 	ret

0404a880 <___vfiprintf_internal_r>:
 404a880:	deffc904 	addi	sp,sp,-220
 404a884:	df003515 	stw	fp,212(sp)
 404a888:	dd003115 	stw	r20,196(sp)
 404a88c:	dfc03615 	stw	ra,216(sp)
 404a890:	ddc03415 	stw	r23,208(sp)
 404a894:	dd803315 	stw	r22,204(sp)
 404a898:	dd403215 	stw	r21,200(sp)
 404a89c:	dcc03015 	stw	r19,192(sp)
 404a8a0:	dc802f15 	stw	r18,188(sp)
 404a8a4:	dc402e15 	stw	r17,184(sp)
 404a8a8:	dc002d15 	stw	r16,180(sp)
 404a8ac:	d9002015 	stw	r4,128(sp)
 404a8b0:	d9c02215 	stw	r7,136(sp)
 404a8b4:	2829883a 	mov	r20,r5
 404a8b8:	3039883a 	mov	fp,r6
 404a8bc:	20000226 	beq	r4,zero,404a8c8 <___vfiprintf_internal_r+0x48>
 404a8c0:	20800e17 	ldw	r2,56(r4)
 404a8c4:	1000cf26 	beq	r2,zero,404ac04 <___vfiprintf_internal_r+0x384>
 404a8c8:	a080030b 	ldhu	r2,12(r20)
 404a8cc:	10c8000c 	andi	r3,r2,8192
 404a8d0:	1800061e 	bne	r3,zero,404a8ec <___vfiprintf_internal_r+0x6c>
 404a8d4:	a1001917 	ldw	r4,100(r20)
 404a8d8:	00f7ffc4 	movi	r3,-8193
 404a8dc:	10880014 	ori	r2,r2,8192
 404a8e0:	20c6703a 	and	r3,r4,r3
 404a8e4:	a080030d 	sth	r2,12(r20)
 404a8e8:	a0c01915 	stw	r3,100(r20)
 404a8ec:	10c0020c 	andi	r3,r2,8
 404a8f0:	1800a926 	beq	r3,zero,404ab98 <___vfiprintf_internal_r+0x318>
 404a8f4:	a0c00417 	ldw	r3,16(r20)
 404a8f8:	1800a726 	beq	r3,zero,404ab98 <___vfiprintf_internal_r+0x318>
 404a8fc:	1080068c 	andi	r2,r2,26
 404a900:	00c00284 	movi	r3,10
 404a904:	10c0ac26 	beq	r2,r3,404abb8 <___vfiprintf_internal_r+0x338>
 404a908:	da801a04 	addi	r10,sp,104
 404a90c:	da801e15 	stw	r10,120(sp)
 404a910:	d8801e17 	ldw	r2,120(sp)
 404a914:	da8019c4 	addi	r10,sp,103
 404a918:	05808034 	movhi	r22,512
 404a91c:	05c08034 	movhi	r23,512
 404a920:	da801f15 	stw	r10,124(sp)
 404a924:	1295c83a 	sub	r10,r2,r10
 404a928:	b5810104 	addi	r22,r22,1028
 404a92c:	bdc0fd04 	addi	r23,r23,1012
 404a930:	dec01a15 	stw	sp,104(sp)
 404a934:	d8001c15 	stw	zero,112(sp)
 404a938:	d8001b15 	stw	zero,108(sp)
 404a93c:	d8002615 	stw	zero,152(sp)
 404a940:	d8002315 	stw	zero,140(sp)
 404a944:	da802715 	stw	r10,156(sp)
 404a948:	d811883a 	mov	r8,sp
 404a94c:	dd002115 	stw	r20,132(sp)
 404a950:	e021883a 	mov	r16,fp
 404a954:	80800007 	ldb	r2,0(r16)
 404a958:	1003ea26 	beq	r2,zero,404b904 <___vfiprintf_internal_r+0x1084>
 404a95c:	00c00944 	movi	r3,37
 404a960:	8025883a 	mov	r18,r16
 404a964:	10c0021e 	bne	r2,r3,404a970 <___vfiprintf_internal_r+0xf0>
 404a968:	00001606 	br	404a9c4 <___vfiprintf_internal_r+0x144>
 404a96c:	10c00326 	beq	r2,r3,404a97c <___vfiprintf_internal_r+0xfc>
 404a970:	94800044 	addi	r18,r18,1
 404a974:	90800007 	ldb	r2,0(r18)
 404a978:	103ffc1e 	bne	r2,zero,404a96c <__flash_rwdata_start+0xffff023c>
 404a97c:	9423c83a 	sub	r17,r18,r16
 404a980:	88001026 	beq	r17,zero,404a9c4 <___vfiprintf_internal_r+0x144>
 404a984:	d8c01c17 	ldw	r3,112(sp)
 404a988:	d8801b17 	ldw	r2,108(sp)
 404a98c:	44000015 	stw	r16,0(r8)
 404a990:	88c7883a 	add	r3,r17,r3
 404a994:	10800044 	addi	r2,r2,1
 404a998:	44400115 	stw	r17,4(r8)
 404a99c:	d8c01c15 	stw	r3,112(sp)
 404a9a0:	d8801b15 	stw	r2,108(sp)
 404a9a4:	010001c4 	movi	r4,7
 404a9a8:	2080760e 	bge	r4,r2,404ab84 <___vfiprintf_internal_r+0x304>
 404a9ac:	1803821e 	bne	r3,zero,404b7b8 <___vfiprintf_internal_r+0xf38>
 404a9b0:	da802317 	ldw	r10,140(sp)
 404a9b4:	d8001b15 	stw	zero,108(sp)
 404a9b8:	d811883a 	mov	r8,sp
 404a9bc:	5455883a 	add	r10,r10,r17
 404a9c0:	da802315 	stw	r10,140(sp)
 404a9c4:	90800007 	ldb	r2,0(r18)
 404a9c8:	10044626 	beq	r2,zero,404bae4 <___vfiprintf_internal_r+0x1264>
 404a9cc:	90c00047 	ldb	r3,1(r18)
 404a9d0:	94000044 	addi	r16,r18,1
 404a9d4:	d8001d85 	stb	zero,118(sp)
 404a9d8:	0009883a 	mov	r4,zero
 404a9dc:	000f883a 	mov	r7,zero
 404a9e0:	027fffc4 	movi	r9,-1
 404a9e4:	0023883a 	mov	r17,zero
 404a9e8:	0029883a 	mov	r20,zero
 404a9ec:	01401604 	movi	r5,88
 404a9f0:	01800244 	movi	r6,9
 404a9f4:	03400a84 	movi	r13,42
 404a9f8:	03001b04 	movi	r12,108
 404a9fc:	84000044 	addi	r16,r16,1
 404aa00:	18bff804 	addi	r2,r3,-32
 404aa04:	28827336 	bltu	r5,r2,404b3d4 <___vfiprintf_internal_r+0xb54>
 404aa08:	100490ba 	slli	r2,r2,2
 404aa0c:	02810174 	movhi	r10,1029
 404aa10:	52aa8804 	addi	r10,r10,-21984
 404aa14:	1285883a 	add	r2,r2,r10
 404aa18:	10800017 	ldw	r2,0(r2)
 404aa1c:	1000683a 	jmp	r2
 404aa20:	0404b108 	cmpgei	r16,zero,4804
 404aa24:	0404b3d4 	movui	r16,4815
 404aa28:	0404b3d4 	movui	r16,4815
 404aa2c:	0404b128 	cmpgeui	r16,zero,4804
 404aa30:	0404b3d4 	movui	r16,4815
 404aa34:	0404b3d4 	movui	r16,4815
 404aa38:	0404b3d4 	movui	r16,4815
 404aa3c:	0404b3d4 	movui	r16,4815
 404aa40:	0404b3d4 	movui	r16,4815
 404aa44:	0404b3d4 	movui	r16,4815
 404aa48:	0404b310 	cmplti	r16,zero,4812
 404aa4c:	0404b32c 	andhi	r16,zero,4812
 404aa50:	0404b3d4 	movui	r16,4815
 404aa54:	0404ac14 	movui	r16,4784
 404aa58:	0404b33c 	xorhi	r16,zero,4812
 404aa5c:	0404b3d4 	movui	r16,4815
 404aa60:	0404b134 	movhi	r16,4804
 404aa64:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa68:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa6c:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa70:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa74:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa78:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa7c:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa80:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa84:	0404b140 	call	404b14 <OSCtxSw_SWITCH_PC+0x404ad4>
 404aa88:	0404b3d4 	movui	r16,4815
 404aa8c:	0404b3d4 	movui	r16,4815
 404aa90:	0404b3d4 	movui	r16,4815
 404aa94:	0404b3d4 	movui	r16,4815
 404aa98:	0404b3d4 	movui	r16,4815
 404aa9c:	0404b3d4 	movui	r16,4815
 404aaa0:	0404b3d4 	movui	r16,4815
 404aaa4:	0404b3d4 	movui	r16,4815
 404aaa8:	0404b3d4 	movui	r16,4815
 404aaac:	0404b3d4 	movui	r16,4815
 404aab0:	0404b16c 	andhi	r16,zero,4805
 404aab4:	0404b3d4 	movui	r16,4815
 404aab8:	0404b3d4 	movui	r16,4815
 404aabc:	0404b3d4 	movui	r16,4815
 404aac0:	0404b3d4 	movui	r16,4815
 404aac4:	0404b3d4 	movui	r16,4815
 404aac8:	0404b3d4 	movui	r16,4815
 404aacc:	0404b3d4 	movui	r16,4815
 404aad0:	0404b3d4 	movui	r16,4815
 404aad4:	0404b3d4 	movui	r16,4815
 404aad8:	0404b3d4 	movui	r16,4815
 404aadc:	0404b1a4 	muli	r16,zero,4806
 404aae0:	0404b3d4 	movui	r16,4815
 404aae4:	0404b3d4 	movui	r16,4815
 404aae8:	0404b3d4 	movui	r16,4815
 404aaec:	0404b3d4 	movui	r16,4815
 404aaf0:	0404b3d4 	movui	r16,4815
 404aaf4:	0404b1fc 	xorhi	r16,zero,4807
 404aaf8:	0404b3d4 	movui	r16,4815
 404aafc:	0404b3d4 	movui	r16,4815
 404ab00:	0404b26c 	andhi	r16,zero,4809
 404ab04:	0404b3d4 	movui	r16,4815
 404ab08:	0404b3d4 	movui	r16,4815
 404ab0c:	0404b3d4 	movui	r16,4815
 404ab10:	0404b3d4 	movui	r16,4815
 404ab14:	0404b3d4 	movui	r16,4815
 404ab18:	0404b3d4 	movui	r16,4815
 404ab1c:	0404b3d4 	movui	r16,4815
 404ab20:	0404b3d4 	movui	r16,4815
 404ab24:	0404b3d4 	movui	r16,4815
 404ab28:	0404b3d4 	movui	r16,4815
 404ab2c:	0404b018 	cmpnei	r16,zero,4800
 404ab30:	0404b044 	movi	r16,4801
 404ab34:	0404b3d4 	movui	r16,4815
 404ab38:	0404b3d4 	movui	r16,4815
 404ab3c:	0404b3d4 	movui	r16,4815
 404ab40:	0404b37c 	xorhi	r16,zero,4813
 404ab44:	0404b044 	movi	r16,4801
 404ab48:	0404b3d4 	movui	r16,4815
 404ab4c:	0404b3d4 	movui	r16,4815
 404ab50:	0404aed8 	cmpnei	r16,zero,4795
 404ab54:	0404b3d4 	movui	r16,4815
 404ab58:	0404aee8 	cmpgeui	r16,zero,4795
 404ab5c:	0404af24 	muli	r16,zero,4796
 404ab60:	0404ac20 	cmpeqi	r16,zero,4784
 404ab64:	0404aecc 	andi	r16,zero,4795
 404ab68:	0404b3d4 	movui	r16,4815
 404ab6c:	0404b2a8 	cmpgeui	r16,zero,4810
 404ab70:	0404b3d4 	movui	r16,4815
 404ab74:	0404b300 	call	404b30 <OSCtxSw_SWITCH_PC+0x404af0>
 404ab78:	0404b3d4 	movui	r16,4815
 404ab7c:	0404b3d4 	movui	r16,4815
 404ab80:	0404afc4 	movi	r16,4799
 404ab84:	42000204 	addi	r8,r8,8
 404ab88:	da802317 	ldw	r10,140(sp)
 404ab8c:	5455883a 	add	r10,r10,r17
 404ab90:	da802315 	stw	r10,140(sp)
 404ab94:	003f8b06 	br	404a9c4 <__flash_rwdata_start+0xffff0294>
 404ab98:	d9002017 	ldw	r4,128(sp)
 404ab9c:	a00b883a 	mov	r5,r20
 404aba0:	4045ee40 	call	4045ee4 <__swsetup_r>
 404aba4:	1003b11e 	bne	r2,zero,404ba6c <___vfiprintf_internal_r+0x11ec>
 404aba8:	a080030b 	ldhu	r2,12(r20)
 404abac:	00c00284 	movi	r3,10
 404abb0:	1080068c 	andi	r2,r2,26
 404abb4:	10ff541e 	bne	r2,r3,404a908 <__flash_rwdata_start+0xffff01d8>
 404abb8:	a080038f 	ldh	r2,14(r20)
 404abbc:	103f5216 	blt	r2,zero,404a908 <__flash_rwdata_start+0xffff01d8>
 404abc0:	d9c02217 	ldw	r7,136(sp)
 404abc4:	d9002017 	ldw	r4,128(sp)
 404abc8:	e00d883a 	mov	r6,fp
 404abcc:	a00b883a 	mov	r5,r20
 404abd0:	404bcf80 	call	404bcf8 <__sbprintf>
 404abd4:	dfc03617 	ldw	ra,216(sp)
 404abd8:	df003517 	ldw	fp,212(sp)
 404abdc:	ddc03417 	ldw	r23,208(sp)
 404abe0:	dd803317 	ldw	r22,204(sp)
 404abe4:	dd403217 	ldw	r21,200(sp)
 404abe8:	dd003117 	ldw	r20,196(sp)
 404abec:	dcc03017 	ldw	r19,192(sp)
 404abf0:	dc802f17 	ldw	r18,188(sp)
 404abf4:	dc402e17 	ldw	r17,184(sp)
 404abf8:	dc002d17 	ldw	r16,180(sp)
 404abfc:	dec03704 	addi	sp,sp,220
 404ac00:	f800283a 	ret
 404ac04:	4047eb80 	call	4047eb8 <__sinit>
 404ac08:	003f2f06 	br	404a8c8 <__flash_rwdata_start+0xffff0198>
 404ac0c:	0463c83a 	sub	r17,zero,r17
 404ac10:	d8802215 	stw	r2,136(sp)
 404ac14:	a5000114 	ori	r20,r20,4
 404ac18:	80c00007 	ldb	r3,0(r16)
 404ac1c:	003f7706 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404ac20:	00800c04 	movi	r2,48
 404ac24:	da802217 	ldw	r10,136(sp)
 404ac28:	d8801d05 	stb	r2,116(sp)
 404ac2c:	00801e04 	movi	r2,120
 404ac30:	d8801d45 	stb	r2,117(sp)
 404ac34:	d8001d85 	stb	zero,118(sp)
 404ac38:	50c00104 	addi	r3,r10,4
 404ac3c:	54800017 	ldw	r18,0(r10)
 404ac40:	0027883a 	mov	r19,zero
 404ac44:	a0800094 	ori	r2,r20,2
 404ac48:	48030b16 	blt	r9,zero,404b878 <___vfiprintf_internal_r+0xff8>
 404ac4c:	00bfdfc4 	movi	r2,-129
 404ac50:	a096703a 	and	r11,r20,r2
 404ac54:	d8c02215 	stw	r3,136(sp)
 404ac58:	5d000094 	ori	r20,r11,2
 404ac5c:	90032b1e 	bne	r18,zero,404b90c <___vfiprintf_internal_r+0x108c>
 404ac60:	00808034 	movhi	r2,512
 404ac64:	10809c04 	addi	r2,r2,624
 404ac68:	d8802615 	stw	r2,152(sp)
 404ac6c:	0039883a 	mov	fp,zero
 404ac70:	48017b1e 	bne	r9,zero,404b260 <___vfiprintf_internal_r+0x9e0>
 404ac74:	0013883a 	mov	r9,zero
 404ac78:	0027883a 	mov	r19,zero
 404ac7c:	dd401a04 	addi	r21,sp,104
 404ac80:	4825883a 	mov	r18,r9
 404ac84:	4cc0010e 	bge	r9,r19,404ac8c <___vfiprintf_internal_r+0x40c>
 404ac88:	9825883a 	mov	r18,r19
 404ac8c:	e7003fcc 	andi	fp,fp,255
 404ac90:	e700201c 	xori	fp,fp,128
 404ac94:	e73fe004 	addi	fp,fp,-128
 404ac98:	e0000126 	beq	fp,zero,404aca0 <___vfiprintf_internal_r+0x420>
 404ac9c:	94800044 	addi	r18,r18,1
 404aca0:	a380008c 	andi	r14,r20,2
 404aca4:	70000126 	beq	r14,zero,404acac <___vfiprintf_internal_r+0x42c>
 404aca8:	94800084 	addi	r18,r18,2
 404acac:	a700210c 	andi	fp,r20,132
 404acb0:	e001df1e 	bne	fp,zero,404b430 <___vfiprintf_internal_r+0xbb0>
 404acb4:	8c87c83a 	sub	r3,r17,r18
 404acb8:	00c1dd0e 	bge	zero,r3,404b430 <___vfiprintf_internal_r+0xbb0>
 404acbc:	01c00404 	movi	r7,16
 404acc0:	d8801c17 	ldw	r2,112(sp)
 404acc4:	38c3ad0e 	bge	r7,r3,404bb7c <___vfiprintf_internal_r+0x12fc>
 404acc8:	02808034 	movhi	r10,512
 404accc:	52810104 	addi	r10,r10,1028
 404acd0:	dc002915 	stw	r16,164(sp)
 404acd4:	d9801b17 	ldw	r6,108(sp)
 404acd8:	da802415 	stw	r10,144(sp)
 404acdc:	03c001c4 	movi	r15,7
 404ace0:	da402515 	stw	r9,148(sp)
 404ace4:	db802815 	stw	r14,160(sp)
 404ace8:	1821883a 	mov	r16,r3
 404acec:	00000506 	br	404ad04 <___vfiprintf_internal_r+0x484>
 404acf0:	31400084 	addi	r5,r6,2
 404acf4:	42000204 	addi	r8,r8,8
 404acf8:	200d883a 	mov	r6,r4
 404acfc:	843ffc04 	addi	r16,r16,-16
 404ad00:	3c000d0e 	bge	r7,r16,404ad38 <___vfiprintf_internal_r+0x4b8>
 404ad04:	10800404 	addi	r2,r2,16
 404ad08:	31000044 	addi	r4,r6,1
 404ad0c:	45800015 	stw	r22,0(r8)
 404ad10:	41c00115 	stw	r7,4(r8)
 404ad14:	d8801c15 	stw	r2,112(sp)
 404ad18:	d9001b15 	stw	r4,108(sp)
 404ad1c:	793ff40e 	bge	r15,r4,404acf0 <__flash_rwdata_start+0xffff05c0>
 404ad20:	1001b51e 	bne	r2,zero,404b3f8 <___vfiprintf_internal_r+0xb78>
 404ad24:	843ffc04 	addi	r16,r16,-16
 404ad28:	000d883a 	mov	r6,zero
 404ad2c:	01400044 	movi	r5,1
 404ad30:	d811883a 	mov	r8,sp
 404ad34:	3c3ff316 	blt	r7,r16,404ad04 <__flash_rwdata_start+0xffff05d4>
 404ad38:	8007883a 	mov	r3,r16
 404ad3c:	da402517 	ldw	r9,148(sp)
 404ad40:	db802817 	ldw	r14,160(sp)
 404ad44:	dc002917 	ldw	r16,164(sp)
 404ad48:	da802417 	ldw	r10,144(sp)
 404ad4c:	1885883a 	add	r2,r3,r2
 404ad50:	40c00115 	stw	r3,4(r8)
 404ad54:	42800015 	stw	r10,0(r8)
 404ad58:	d8801c15 	stw	r2,112(sp)
 404ad5c:	d9401b15 	stw	r5,108(sp)
 404ad60:	00c001c4 	movi	r3,7
 404ad64:	19426016 	blt	r3,r5,404b6e8 <___vfiprintf_internal_r+0xe68>
 404ad68:	d8c01d87 	ldb	r3,118(sp)
 404ad6c:	42000204 	addi	r8,r8,8
 404ad70:	29000044 	addi	r4,r5,1
 404ad74:	1801b31e 	bne	r3,zero,404b444 <___vfiprintf_internal_r+0xbc4>
 404ad78:	7001c026 	beq	r14,zero,404b47c <___vfiprintf_internal_r+0xbfc>
 404ad7c:	d8c01d04 	addi	r3,sp,116
 404ad80:	10800084 	addi	r2,r2,2
 404ad84:	40c00015 	stw	r3,0(r8)
 404ad88:	00c00084 	movi	r3,2
 404ad8c:	40c00115 	stw	r3,4(r8)
 404ad90:	d8801c15 	stw	r2,112(sp)
 404ad94:	d9001b15 	stw	r4,108(sp)
 404ad98:	00c001c4 	movi	r3,7
 404ad9c:	1902650e 	bge	r3,r4,404b734 <___vfiprintf_internal_r+0xeb4>
 404ada0:	10029a1e 	bne	r2,zero,404b80c <___vfiprintf_internal_r+0xf8c>
 404ada4:	00c02004 	movi	r3,128
 404ada8:	01000044 	movi	r4,1
 404adac:	000b883a 	mov	r5,zero
 404adb0:	d811883a 	mov	r8,sp
 404adb4:	e0c1b31e 	bne	fp,r3,404b484 <___vfiprintf_internal_r+0xc04>
 404adb8:	8cb9c83a 	sub	fp,r17,r18
 404adbc:	0701b10e 	bge	zero,fp,404b484 <___vfiprintf_internal_r+0xc04>
 404adc0:	01c00404 	movi	r7,16
 404adc4:	3f03890e 	bge	r7,fp,404bbec <___vfiprintf_internal_r+0x136c>
 404adc8:	00c08034 	movhi	r3,512
 404adcc:	18c0fd04 	addi	r3,r3,1012
 404add0:	d8c02415 	stw	r3,144(sp)
 404add4:	8007883a 	mov	r3,r16
 404add8:	034001c4 	movi	r13,7
 404addc:	e021883a 	mov	r16,fp
 404ade0:	da402515 	stw	r9,148(sp)
 404ade4:	1839883a 	mov	fp,r3
 404ade8:	00000506 	br	404ae00 <___vfiprintf_internal_r+0x580>
 404adec:	29800084 	addi	r6,r5,2
 404adf0:	42000204 	addi	r8,r8,8
 404adf4:	180b883a 	mov	r5,r3
 404adf8:	843ffc04 	addi	r16,r16,-16
 404adfc:	3c000d0e 	bge	r7,r16,404ae34 <___vfiprintf_internal_r+0x5b4>
 404ae00:	10800404 	addi	r2,r2,16
 404ae04:	28c00044 	addi	r3,r5,1
 404ae08:	45c00015 	stw	r23,0(r8)
 404ae0c:	41c00115 	stw	r7,4(r8)
 404ae10:	d8801c15 	stw	r2,112(sp)
 404ae14:	d8c01b15 	stw	r3,108(sp)
 404ae18:	68fff40e 	bge	r13,r3,404adec <__flash_rwdata_start+0xffff06bc>
 404ae1c:	1002241e 	bne	r2,zero,404b6b0 <___vfiprintf_internal_r+0xe30>
 404ae20:	843ffc04 	addi	r16,r16,-16
 404ae24:	01800044 	movi	r6,1
 404ae28:	000b883a 	mov	r5,zero
 404ae2c:	d811883a 	mov	r8,sp
 404ae30:	3c3ff316 	blt	r7,r16,404ae00 <__flash_rwdata_start+0xffff06d0>
 404ae34:	da402517 	ldw	r9,148(sp)
 404ae38:	e007883a 	mov	r3,fp
 404ae3c:	8039883a 	mov	fp,r16
 404ae40:	1821883a 	mov	r16,r3
 404ae44:	d8c02417 	ldw	r3,144(sp)
 404ae48:	1705883a 	add	r2,r2,fp
 404ae4c:	47000115 	stw	fp,4(r8)
 404ae50:	40c00015 	stw	r3,0(r8)
 404ae54:	d8801c15 	stw	r2,112(sp)
 404ae58:	d9801b15 	stw	r6,108(sp)
 404ae5c:	00c001c4 	movi	r3,7
 404ae60:	19827616 	blt	r3,r6,404b83c <___vfiprintf_internal_r+0xfbc>
 404ae64:	4cf9c83a 	sub	fp,r9,r19
 404ae68:	42000204 	addi	r8,r8,8
 404ae6c:	31000044 	addi	r4,r6,1
 404ae70:	300b883a 	mov	r5,r6
 404ae74:	07018516 	blt	zero,fp,404b48c <___vfiprintf_internal_r+0xc0c>
 404ae78:	9885883a 	add	r2,r19,r2
 404ae7c:	45400015 	stw	r21,0(r8)
 404ae80:	44c00115 	stw	r19,4(r8)
 404ae84:	d8801c15 	stw	r2,112(sp)
 404ae88:	d9001b15 	stw	r4,108(sp)
 404ae8c:	00c001c4 	movi	r3,7
 404ae90:	1901dd0e 	bge	r3,r4,404b608 <___vfiprintf_internal_r+0xd88>
 404ae94:	1002401e 	bne	r2,zero,404b798 <___vfiprintf_internal_r+0xf18>
 404ae98:	d8001b15 	stw	zero,108(sp)
 404ae9c:	a2c0010c 	andi	r11,r20,4
 404aea0:	58000226 	beq	r11,zero,404aeac <___vfiprintf_internal_r+0x62c>
 404aea4:	8ca7c83a 	sub	r19,r17,r18
 404aea8:	04c2f216 	blt	zero,r19,404ba74 <___vfiprintf_internal_r+0x11f4>
 404aeac:	8c80010e 	bge	r17,r18,404aeb4 <___vfiprintf_internal_r+0x634>
 404aeb0:	9023883a 	mov	r17,r18
 404aeb4:	da802317 	ldw	r10,140(sp)
 404aeb8:	5455883a 	add	r10,r10,r17
 404aebc:	da802315 	stw	r10,140(sp)
 404aec0:	d8001b15 	stw	zero,108(sp)
 404aec4:	d811883a 	mov	r8,sp
 404aec8:	003ea206 	br	404a954 <__flash_rwdata_start+0xffff0224>
 404aecc:	a5000814 	ori	r20,r20,32
 404aed0:	80c00007 	ldb	r3,0(r16)
 404aed4:	003ec906 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404aed8:	80c00007 	ldb	r3,0(r16)
 404aedc:	1b030926 	beq	r3,r12,404bb04 <___vfiprintf_internal_r+0x1284>
 404aee0:	a5000414 	ori	r20,r20,16
 404aee4:	003ec506 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404aee8:	21003fcc 	andi	r4,r4,255
 404aeec:	20035e1e 	bne	r4,zero,404bc68 <___vfiprintf_internal_r+0x13e8>
 404aef0:	a080080c 	andi	r2,r20,32
 404aef4:	1002a526 	beq	r2,zero,404b98c <___vfiprintf_internal_r+0x110c>
 404aef8:	da802217 	ldw	r10,136(sp)
 404aefc:	50800017 	ldw	r2,0(r10)
 404af00:	da802317 	ldw	r10,140(sp)
 404af04:	5007d7fa 	srai	r3,r10,31
 404af08:	da802217 	ldw	r10,136(sp)
 404af0c:	10c00115 	stw	r3,4(r2)
 404af10:	52800104 	addi	r10,r10,4
 404af14:	da802215 	stw	r10,136(sp)
 404af18:	da802317 	ldw	r10,140(sp)
 404af1c:	12800015 	stw	r10,0(r2)
 404af20:	003e8c06 	br	404a954 <__flash_rwdata_start+0xffff0224>
 404af24:	21003fcc 	andi	r4,r4,255
 404af28:	2003511e 	bne	r4,zero,404bc70 <___vfiprintf_internal_r+0x13f0>
 404af2c:	a080080c 	andi	r2,r20,32
 404af30:	1000a126 	beq	r2,zero,404b1b8 <___vfiprintf_internal_r+0x938>
 404af34:	da802217 	ldw	r10,136(sp)
 404af38:	d8001d85 	stb	zero,118(sp)
 404af3c:	50800204 	addi	r2,r10,8
 404af40:	54800017 	ldw	r18,0(r10)
 404af44:	54c00117 	ldw	r19,4(r10)
 404af48:	4802b416 	blt	r9,zero,404ba1c <___vfiprintf_internal_r+0x119c>
 404af4c:	013fdfc4 	movi	r4,-129
 404af50:	94c6b03a 	or	r3,r18,r19
 404af54:	d8802215 	stw	r2,136(sp)
 404af58:	a128703a 	and	r20,r20,r4
 404af5c:	1800a226 	beq	r3,zero,404b1e8 <___vfiprintf_internal_r+0x968>
 404af60:	0039883a 	mov	fp,zero
 404af64:	dd401a04 	addi	r21,sp,104
 404af68:	9006d0fa 	srli	r3,r18,3
 404af6c:	9808977a 	slli	r4,r19,29
 404af70:	9826d0fa 	srli	r19,r19,3
 404af74:	948001cc 	andi	r18,r18,7
 404af78:	90800c04 	addi	r2,r18,48
 404af7c:	ad7fffc4 	addi	r21,r21,-1
 404af80:	20e4b03a 	or	r18,r4,r3
 404af84:	a8800005 	stb	r2,0(r21)
 404af88:	94c6b03a 	or	r3,r18,r19
 404af8c:	183ff61e 	bne	r3,zero,404af68 <__flash_rwdata_start+0xffff0838>
 404af90:	a0c0004c 	andi	r3,r20,1
 404af94:	18005926 	beq	r3,zero,404b0fc <___vfiprintf_internal_r+0x87c>
 404af98:	10803fcc 	andi	r2,r2,255
 404af9c:	1080201c 	xori	r2,r2,128
 404afa0:	10bfe004 	addi	r2,r2,-128
 404afa4:	00c00c04 	movi	r3,48
 404afa8:	10c05426 	beq	r2,r3,404b0fc <___vfiprintf_internal_r+0x87c>
 404afac:	da801e17 	ldw	r10,120(sp)
 404afb0:	a8bfffc4 	addi	r2,r21,-1
 404afb4:	a8ffffc5 	stb	r3,-1(r21)
 404afb8:	50a7c83a 	sub	r19,r10,r2
 404afbc:	102b883a 	mov	r21,r2
 404afc0:	003f2f06 	br	404ac80 <__flash_rwdata_start+0xffff0550>
 404afc4:	21003fcc 	andi	r4,r4,255
 404afc8:	2003421e 	bne	r4,zero,404bcd4 <___vfiprintf_internal_r+0x1454>
 404afcc:	00808034 	movhi	r2,512
 404afd0:	10809c04 	addi	r2,r2,624
 404afd4:	d8802615 	stw	r2,152(sp)
 404afd8:	a080080c 	andi	r2,r20,32
 404afdc:	1000aa26 	beq	r2,zero,404b288 <___vfiprintf_internal_r+0xa08>
 404afe0:	da802217 	ldw	r10,136(sp)
 404afe4:	54800017 	ldw	r18,0(r10)
 404afe8:	54c00117 	ldw	r19,4(r10)
 404afec:	52800204 	addi	r10,r10,8
 404aff0:	da802215 	stw	r10,136(sp)
 404aff4:	a080004c 	andi	r2,r20,1
 404aff8:	1001d226 	beq	r2,zero,404b744 <___vfiprintf_internal_r+0xec4>
 404affc:	94c4b03a 	or	r2,r18,r19
 404b000:	1002351e 	bne	r2,zero,404b8d8 <___vfiprintf_internal_r+0x1058>
 404b004:	d8001d85 	stb	zero,118(sp)
 404b008:	48022216 	blt	r9,zero,404b894 <___vfiprintf_internal_r+0x1014>
 404b00c:	00bfdfc4 	movi	r2,-129
 404b010:	a0a8703a 	and	r20,r20,r2
 404b014:	003f1506 	br	404ac6c <__flash_rwdata_start+0xffff053c>
 404b018:	da802217 	ldw	r10,136(sp)
 404b01c:	04800044 	movi	r18,1
 404b020:	d8001d85 	stb	zero,118(sp)
 404b024:	50800017 	ldw	r2,0(r10)
 404b028:	52800104 	addi	r10,r10,4
 404b02c:	da802215 	stw	r10,136(sp)
 404b030:	d8801005 	stb	r2,64(sp)
 404b034:	9027883a 	mov	r19,r18
 404b038:	dd401004 	addi	r21,sp,64
 404b03c:	0013883a 	mov	r9,zero
 404b040:	003f1706 	br	404aca0 <__flash_rwdata_start+0xffff0570>
 404b044:	21003fcc 	andi	r4,r4,255
 404b048:	2003201e 	bne	r4,zero,404bccc <___vfiprintf_internal_r+0x144c>
 404b04c:	a080080c 	andi	r2,r20,32
 404b050:	10004b26 	beq	r2,zero,404b180 <___vfiprintf_internal_r+0x900>
 404b054:	da802217 	ldw	r10,136(sp)
 404b058:	50800117 	ldw	r2,4(r10)
 404b05c:	54800017 	ldw	r18,0(r10)
 404b060:	52800204 	addi	r10,r10,8
 404b064:	da802215 	stw	r10,136(sp)
 404b068:	1027883a 	mov	r19,r2
 404b06c:	10022c16 	blt	r2,zero,404b920 <___vfiprintf_internal_r+0x10a0>
 404b070:	df001d83 	ldbu	fp,118(sp)
 404b074:	48007216 	blt	r9,zero,404b240 <___vfiprintf_internal_r+0x9c0>
 404b078:	00ffdfc4 	movi	r3,-129
 404b07c:	94c4b03a 	or	r2,r18,r19
 404b080:	a0e8703a 	and	r20,r20,r3
 404b084:	1000cc26 	beq	r2,zero,404b3b8 <___vfiprintf_internal_r+0xb38>
 404b088:	98021026 	beq	r19,zero,404b8cc <___vfiprintf_internal_r+0x104c>
 404b08c:	dc402415 	stw	r17,144(sp)
 404b090:	dc002515 	stw	r16,148(sp)
 404b094:	9823883a 	mov	r17,r19
 404b098:	9021883a 	mov	r16,r18
 404b09c:	dd401a04 	addi	r21,sp,104
 404b0a0:	4825883a 	mov	r18,r9
 404b0a4:	4027883a 	mov	r19,r8
 404b0a8:	8009883a 	mov	r4,r16
 404b0ac:	880b883a 	mov	r5,r17
 404b0b0:	01800284 	movi	r6,10
 404b0b4:	000f883a 	mov	r7,zero
 404b0b8:	404cc600 	call	404cc60 <__umoddi3>
 404b0bc:	10800c04 	addi	r2,r2,48
 404b0c0:	ad7fffc4 	addi	r21,r21,-1
 404b0c4:	8009883a 	mov	r4,r16
 404b0c8:	880b883a 	mov	r5,r17
 404b0cc:	a8800005 	stb	r2,0(r21)
 404b0d0:	01800284 	movi	r6,10
 404b0d4:	000f883a 	mov	r7,zero
 404b0d8:	404c6e80 	call	404c6e8 <__udivdi3>
 404b0dc:	1021883a 	mov	r16,r2
 404b0e0:	10c4b03a 	or	r2,r2,r3
 404b0e4:	1823883a 	mov	r17,r3
 404b0e8:	103fef1e 	bne	r2,zero,404b0a8 <__flash_rwdata_start+0xffff0978>
 404b0ec:	dc402417 	ldw	r17,144(sp)
 404b0f0:	dc002517 	ldw	r16,148(sp)
 404b0f4:	9013883a 	mov	r9,r18
 404b0f8:	9811883a 	mov	r8,r19
 404b0fc:	da801e17 	ldw	r10,120(sp)
 404b100:	5567c83a 	sub	r19,r10,r21
 404b104:	003ede06 	br	404ac80 <__flash_rwdata_start+0xffff0550>
 404b108:	38803fcc 	andi	r2,r7,255
 404b10c:	1080201c 	xori	r2,r2,128
 404b110:	10bfe004 	addi	r2,r2,-128
 404b114:	1002371e 	bne	r2,zero,404b9f4 <___vfiprintf_internal_r+0x1174>
 404b118:	01000044 	movi	r4,1
 404b11c:	01c00804 	movi	r7,32
 404b120:	80c00007 	ldb	r3,0(r16)
 404b124:	003e3506 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404b128:	a5000054 	ori	r20,r20,1
 404b12c:	80c00007 	ldb	r3,0(r16)
 404b130:	003e3206 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404b134:	a5002014 	ori	r20,r20,128
 404b138:	80c00007 	ldb	r3,0(r16)
 404b13c:	003e2f06 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404b140:	8015883a 	mov	r10,r16
 404b144:	0023883a 	mov	r17,zero
 404b148:	18bff404 	addi	r2,r3,-48
 404b14c:	50c00007 	ldb	r3,0(r10)
 404b150:	8c4002a4 	muli	r17,r17,10
 404b154:	84000044 	addi	r16,r16,1
 404b158:	8015883a 	mov	r10,r16
 404b15c:	1463883a 	add	r17,r2,r17
 404b160:	18bff404 	addi	r2,r3,-48
 404b164:	30bff92e 	bgeu	r6,r2,404b14c <__flash_rwdata_start+0xffff0a1c>
 404b168:	003e2506 	br	404aa00 <__flash_rwdata_start+0xffff02d0>
 404b16c:	21003fcc 	andi	r4,r4,255
 404b170:	2002d41e 	bne	r4,zero,404bcc4 <___vfiprintf_internal_r+0x1444>
 404b174:	a5000414 	ori	r20,r20,16
 404b178:	a080080c 	andi	r2,r20,32
 404b17c:	103fb51e 	bne	r2,zero,404b054 <__flash_rwdata_start+0xffff0924>
 404b180:	a080040c 	andi	r2,r20,16
 404b184:	1001f826 	beq	r2,zero,404b968 <___vfiprintf_internal_r+0x10e8>
 404b188:	da802217 	ldw	r10,136(sp)
 404b18c:	54800017 	ldw	r18,0(r10)
 404b190:	52800104 	addi	r10,r10,4
 404b194:	da802215 	stw	r10,136(sp)
 404b198:	9027d7fa 	srai	r19,r18,31
 404b19c:	9805883a 	mov	r2,r19
 404b1a0:	003fb206 	br	404b06c <__flash_rwdata_start+0xffff093c>
 404b1a4:	21003fcc 	andi	r4,r4,255
 404b1a8:	2002c41e 	bne	r4,zero,404bcbc <___vfiprintf_internal_r+0x143c>
 404b1ac:	a5000414 	ori	r20,r20,16
 404b1b0:	a080080c 	andi	r2,r20,32
 404b1b4:	103f5f1e 	bne	r2,zero,404af34 <__flash_rwdata_start+0xffff0804>
 404b1b8:	a080040c 	andi	r2,r20,16
 404b1bc:	10020f26 	beq	r2,zero,404b9fc <___vfiprintf_internal_r+0x117c>
 404b1c0:	da802217 	ldw	r10,136(sp)
 404b1c4:	d8001d85 	stb	zero,118(sp)
 404b1c8:	0027883a 	mov	r19,zero
 404b1cc:	50800104 	addi	r2,r10,4
 404b1d0:	54800017 	ldw	r18,0(r10)
 404b1d4:	48021116 	blt	r9,zero,404ba1c <___vfiprintf_internal_r+0x119c>
 404b1d8:	00ffdfc4 	movi	r3,-129
 404b1dc:	d8802215 	stw	r2,136(sp)
 404b1e0:	a0e8703a 	and	r20,r20,r3
 404b1e4:	903f5e1e 	bne	r18,zero,404af60 <__flash_rwdata_start+0xffff0830>
 404b1e8:	0039883a 	mov	fp,zero
 404b1ec:	4802a626 	beq	r9,zero,404bc88 <___vfiprintf_internal_r+0x1408>
 404b1f0:	0025883a 	mov	r18,zero
 404b1f4:	0027883a 	mov	r19,zero
 404b1f8:	003f5a06 	br	404af64 <__flash_rwdata_start+0xffff0834>
 404b1fc:	21003fcc 	andi	r4,r4,255
 404b200:	20029f1e 	bne	r4,zero,404bc80 <___vfiprintf_internal_r+0x1400>
 404b204:	a5000414 	ori	r20,r20,16
 404b208:	a080080c 	andi	r2,r20,32
 404b20c:	10005e1e 	bne	r2,zero,404b388 <___vfiprintf_internal_r+0xb08>
 404b210:	a080040c 	andi	r2,r20,16
 404b214:	1001a21e 	bne	r2,zero,404b8a0 <___vfiprintf_internal_r+0x1020>
 404b218:	a080100c 	andi	r2,r20,64
 404b21c:	d8001d85 	stb	zero,118(sp)
 404b220:	da802217 	ldw	r10,136(sp)
 404b224:	1002231e 	bne	r2,zero,404bab4 <___vfiprintf_internal_r+0x1234>
 404b228:	50800104 	addi	r2,r10,4
 404b22c:	54800017 	ldw	r18,0(r10)
 404b230:	0027883a 	mov	r19,zero
 404b234:	4801a00e 	bge	r9,zero,404b8b8 <___vfiprintf_internal_r+0x1038>
 404b238:	d8802215 	stw	r2,136(sp)
 404b23c:	0039883a 	mov	fp,zero
 404b240:	94c4b03a 	or	r2,r18,r19
 404b244:	103f901e 	bne	r2,zero,404b088 <__flash_rwdata_start+0xffff0958>
 404b248:	00800044 	movi	r2,1
 404b24c:	10803fcc 	andi	r2,r2,255
 404b250:	00c00044 	movi	r3,1
 404b254:	10c05926 	beq	r2,r3,404b3bc <___vfiprintf_internal_r+0xb3c>
 404b258:	00c00084 	movi	r3,2
 404b25c:	10ffe41e 	bne	r2,r3,404b1f0 <__flash_rwdata_start+0xffff0ac0>
 404b260:	0025883a 	mov	r18,zero
 404b264:	0027883a 	mov	r19,zero
 404b268:	00013d06 	br	404b760 <___vfiprintf_internal_r+0xee0>
 404b26c:	21003fcc 	andi	r4,r4,255
 404b270:	2002811e 	bne	r4,zero,404bc78 <___vfiprintf_internal_r+0x13f8>
 404b274:	00808034 	movhi	r2,512
 404b278:	10809704 	addi	r2,r2,604
 404b27c:	d8802615 	stw	r2,152(sp)
 404b280:	a080080c 	andi	r2,r20,32
 404b284:	103f561e 	bne	r2,zero,404afe0 <__flash_rwdata_start+0xffff08b0>
 404b288:	a080040c 	andi	r2,r20,16
 404b28c:	1001d126 	beq	r2,zero,404b9d4 <___vfiprintf_internal_r+0x1154>
 404b290:	da802217 	ldw	r10,136(sp)
 404b294:	0027883a 	mov	r19,zero
 404b298:	54800017 	ldw	r18,0(r10)
 404b29c:	52800104 	addi	r10,r10,4
 404b2a0:	da802215 	stw	r10,136(sp)
 404b2a4:	003f5306 	br	404aff4 <__flash_rwdata_start+0xffff08c4>
 404b2a8:	da802217 	ldw	r10,136(sp)
 404b2ac:	d8001d85 	stb	zero,118(sp)
 404b2b0:	55400017 	ldw	r21,0(r10)
 404b2b4:	50c00104 	addi	r3,r10,4
 404b2b8:	a8024226 	beq	r21,zero,404bbc4 <___vfiprintf_internal_r+0x1344>
 404b2bc:	48021816 	blt	r9,zero,404bb20 <___vfiprintf_internal_r+0x12a0>
 404b2c0:	480d883a 	mov	r6,r9
 404b2c4:	000b883a 	mov	r5,zero
 404b2c8:	a809883a 	mov	r4,r21
 404b2cc:	d8c02a15 	stw	r3,168(sp)
 404b2d0:	da002b15 	stw	r8,172(sp)
 404b2d4:	da402c15 	stw	r9,176(sp)
 404b2d8:	4048c180 	call	4048c18 <memchr>
 404b2dc:	d8c02a17 	ldw	r3,168(sp)
 404b2e0:	da002b17 	ldw	r8,172(sp)
 404b2e4:	da402c17 	ldw	r9,176(sp)
 404b2e8:	10024826 	beq	r2,zero,404bc0c <___vfiprintf_internal_r+0x138c>
 404b2ec:	1567c83a 	sub	r19,r2,r21
 404b2f0:	df001d83 	ldbu	fp,118(sp)
 404b2f4:	d8c02215 	stw	r3,136(sp)
 404b2f8:	0013883a 	mov	r9,zero
 404b2fc:	003e6006 	br	404ac80 <__flash_rwdata_start+0xffff0550>
 404b300:	21003fcc 	andi	r4,r4,255
 404b304:	203fc026 	beq	r4,zero,404b208 <__flash_rwdata_start+0xffff0ad8>
 404b308:	d9c01d85 	stb	r7,118(sp)
 404b30c:	003fbe06 	br	404b208 <__flash_rwdata_start+0xffff0ad8>
 404b310:	da802217 	ldw	r10,136(sp)
 404b314:	54400017 	ldw	r17,0(r10)
 404b318:	50800104 	addi	r2,r10,4
 404b31c:	883e3b16 	blt	r17,zero,404ac0c <__flash_rwdata_start+0xffff04dc>
 404b320:	d8802215 	stw	r2,136(sp)
 404b324:	80c00007 	ldb	r3,0(r16)
 404b328:	003db406 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404b32c:	01000044 	movi	r4,1
 404b330:	01c00ac4 	movi	r7,43
 404b334:	80c00007 	ldb	r3,0(r16)
 404b338:	003db006 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404b33c:	80c00007 	ldb	r3,0(r16)
 404b340:	82800044 	addi	r10,r16,1
 404b344:	1b423c26 	beq	r3,r13,404bc38 <___vfiprintf_internal_r+0x13b8>
 404b348:	18bff404 	addi	r2,r3,-48
 404b34c:	0013883a 	mov	r9,zero
 404b350:	30822b36 	bltu	r6,r2,404bc00 <___vfiprintf_internal_r+0x1380>
 404b354:	50c00007 	ldb	r3,0(r10)
 404b358:	4a4002a4 	muli	r9,r9,10
 404b35c:	54000044 	addi	r16,r10,1
 404b360:	8015883a 	mov	r10,r16
 404b364:	4893883a 	add	r9,r9,r2
 404b368:	18bff404 	addi	r2,r3,-48
 404b36c:	30bff92e 	bgeu	r6,r2,404b354 <__flash_rwdata_start+0xffff0c24>
 404b370:	483da30e 	bge	r9,zero,404aa00 <__flash_rwdata_start+0xffff02d0>
 404b374:	027fffc4 	movi	r9,-1
 404b378:	003da106 	br	404aa00 <__flash_rwdata_start+0xffff02d0>
 404b37c:	a5001014 	ori	r20,r20,64
 404b380:	80c00007 	ldb	r3,0(r16)
 404b384:	003d9d06 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404b388:	da802217 	ldw	r10,136(sp)
 404b38c:	d8001d85 	stb	zero,118(sp)
 404b390:	50c00204 	addi	r3,r10,8
 404b394:	54800017 	ldw	r18,0(r10)
 404b398:	54c00117 	ldw	r19,4(r10)
 404b39c:	4801ca16 	blt	r9,zero,404bac8 <___vfiprintf_internal_r+0x1248>
 404b3a0:	013fdfc4 	movi	r4,-129
 404b3a4:	94c4b03a 	or	r2,r18,r19
 404b3a8:	d8c02215 	stw	r3,136(sp)
 404b3ac:	a128703a 	and	r20,r20,r4
 404b3b0:	0039883a 	mov	fp,zero
 404b3b4:	103f341e 	bne	r2,zero,404b088 <__flash_rwdata_start+0xffff0958>
 404b3b8:	483e2e26 	beq	r9,zero,404ac74 <__flash_rwdata_start+0xffff0544>
 404b3bc:	0025883a 	mov	r18,zero
 404b3c0:	94800c04 	addi	r18,r18,48
 404b3c4:	dc8019c5 	stb	r18,103(sp)
 404b3c8:	dcc02717 	ldw	r19,156(sp)
 404b3cc:	dd4019c4 	addi	r21,sp,103
 404b3d0:	003e2b06 	br	404ac80 <__flash_rwdata_start+0xffff0550>
 404b3d4:	21003fcc 	andi	r4,r4,255
 404b3d8:	2002361e 	bne	r4,zero,404bcb4 <___vfiprintf_internal_r+0x1434>
 404b3dc:	1801c126 	beq	r3,zero,404bae4 <___vfiprintf_internal_r+0x1264>
 404b3e0:	04800044 	movi	r18,1
 404b3e4:	d8c01005 	stb	r3,64(sp)
 404b3e8:	d8001d85 	stb	zero,118(sp)
 404b3ec:	9027883a 	mov	r19,r18
 404b3f0:	dd401004 	addi	r21,sp,64
 404b3f4:	003f1106 	br	404b03c <__flash_rwdata_start+0xffff090c>
 404b3f8:	d9402117 	ldw	r5,132(sp)
 404b3fc:	d9002017 	ldw	r4,128(sp)
 404b400:	d9801a04 	addi	r6,sp,104
 404b404:	d9c02b15 	stw	r7,172(sp)
 404b408:	dbc02a15 	stw	r15,168(sp)
 404b40c:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b410:	d9c02b17 	ldw	r7,172(sp)
 404b414:	dbc02a17 	ldw	r15,168(sp)
 404b418:	10006d1e 	bne	r2,zero,404b5d0 <___vfiprintf_internal_r+0xd50>
 404b41c:	d9801b17 	ldw	r6,108(sp)
 404b420:	d8801c17 	ldw	r2,112(sp)
 404b424:	d811883a 	mov	r8,sp
 404b428:	31400044 	addi	r5,r6,1
 404b42c:	003e3306 	br	404acfc <__flash_rwdata_start+0xffff05cc>
 404b430:	d9401b17 	ldw	r5,108(sp)
 404b434:	d8801c17 	ldw	r2,112(sp)
 404b438:	29000044 	addi	r4,r5,1
 404b43c:	d8c01d87 	ldb	r3,118(sp)
 404b440:	183e4d26 	beq	r3,zero,404ad78 <__flash_rwdata_start+0xffff0648>
 404b444:	00c00044 	movi	r3,1
 404b448:	d9401d84 	addi	r5,sp,118
 404b44c:	10c5883a 	add	r2,r2,r3
 404b450:	41400015 	stw	r5,0(r8)
 404b454:	40c00115 	stw	r3,4(r8)
 404b458:	d8801c15 	stw	r2,112(sp)
 404b45c:	d9001b15 	stw	r4,108(sp)
 404b460:	014001c4 	movi	r5,7
 404b464:	2900a90e 	bge	r5,r4,404b70c <___vfiprintf_internal_r+0xe8c>
 404b468:	1000da1e 	bne	r2,zero,404b7d4 <___vfiprintf_internal_r+0xf54>
 404b46c:	7000ab1e 	bne	r14,zero,404b71c <___vfiprintf_internal_r+0xe9c>
 404b470:	000b883a 	mov	r5,zero
 404b474:	1809883a 	mov	r4,r3
 404b478:	d811883a 	mov	r8,sp
 404b47c:	00c02004 	movi	r3,128
 404b480:	e0fe4d26 	beq	fp,r3,404adb8 <__flash_rwdata_start+0xffff0688>
 404b484:	4cf9c83a 	sub	fp,r9,r19
 404b488:	073e7b0e 	bge	zero,fp,404ae78 <__flash_rwdata_start+0xffff0748>
 404b48c:	01c00404 	movi	r7,16
 404b490:	3f01900e 	bge	r7,fp,404bad4 <___vfiprintf_internal_r+0x1254>
 404b494:	00c08034 	movhi	r3,512
 404b498:	18c0fd04 	addi	r3,r3,1012
 404b49c:	d8c02415 	stw	r3,144(sp)
 404b4a0:	034001c4 	movi	r13,7
 404b4a4:	00000506 	br	404b4bc <___vfiprintf_internal_r+0xc3c>
 404b4a8:	29000084 	addi	r4,r5,2
 404b4ac:	42000204 	addi	r8,r8,8
 404b4b0:	180b883a 	mov	r5,r3
 404b4b4:	e73ffc04 	addi	fp,fp,-16
 404b4b8:	3f000d0e 	bge	r7,fp,404b4f0 <___vfiprintf_internal_r+0xc70>
 404b4bc:	10800404 	addi	r2,r2,16
 404b4c0:	28c00044 	addi	r3,r5,1
 404b4c4:	45c00015 	stw	r23,0(r8)
 404b4c8:	41c00115 	stw	r7,4(r8)
 404b4cc:	d8801c15 	stw	r2,112(sp)
 404b4d0:	d8c01b15 	stw	r3,108(sp)
 404b4d4:	68fff40e 	bge	r13,r3,404b4a8 <__flash_rwdata_start+0xffff0d78>
 404b4d8:	1000101e 	bne	r2,zero,404b51c <___vfiprintf_internal_r+0xc9c>
 404b4dc:	e73ffc04 	addi	fp,fp,-16
 404b4e0:	01000044 	movi	r4,1
 404b4e4:	000b883a 	mov	r5,zero
 404b4e8:	d811883a 	mov	r8,sp
 404b4ec:	3f3ff316 	blt	r7,fp,404b4bc <__flash_rwdata_start+0xffff0d8c>
 404b4f0:	da802417 	ldw	r10,144(sp)
 404b4f4:	1705883a 	add	r2,r2,fp
 404b4f8:	47000115 	stw	fp,4(r8)
 404b4fc:	42800015 	stw	r10,0(r8)
 404b500:	d8801c15 	stw	r2,112(sp)
 404b504:	d9001b15 	stw	r4,108(sp)
 404b508:	00c001c4 	movi	r3,7
 404b50c:	19003616 	blt	r3,r4,404b5e8 <___vfiprintf_internal_r+0xd68>
 404b510:	42000204 	addi	r8,r8,8
 404b514:	21000044 	addi	r4,r4,1
 404b518:	003e5706 	br	404ae78 <__flash_rwdata_start+0xffff0748>
 404b51c:	d9402117 	ldw	r5,132(sp)
 404b520:	d9002017 	ldw	r4,128(sp)
 404b524:	d9801a04 	addi	r6,sp,104
 404b528:	d9c02b15 	stw	r7,172(sp)
 404b52c:	db402a15 	stw	r13,168(sp)
 404b530:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b534:	d9c02b17 	ldw	r7,172(sp)
 404b538:	db402a17 	ldw	r13,168(sp)
 404b53c:	1000241e 	bne	r2,zero,404b5d0 <___vfiprintf_internal_r+0xd50>
 404b540:	d9401b17 	ldw	r5,108(sp)
 404b544:	d8801c17 	ldw	r2,112(sp)
 404b548:	d811883a 	mov	r8,sp
 404b54c:	29000044 	addi	r4,r5,1
 404b550:	003fd806 	br	404b4b4 <__flash_rwdata_start+0xffff0d84>
 404b554:	d9401b17 	ldw	r5,108(sp)
 404b558:	00c08034 	movhi	r3,512
 404b55c:	18c10104 	addi	r3,r3,1028
 404b560:	d8c02415 	stw	r3,144(sp)
 404b564:	29400044 	addi	r5,r5,1
 404b568:	d8c02417 	ldw	r3,144(sp)
 404b56c:	14c5883a 	add	r2,r2,r19
 404b570:	44c00115 	stw	r19,4(r8)
 404b574:	40c00015 	stw	r3,0(r8)
 404b578:	d8801c15 	stw	r2,112(sp)
 404b57c:	d9401b15 	stw	r5,108(sp)
 404b580:	00c001c4 	movi	r3,7
 404b584:	1940070e 	bge	r3,r5,404b5a4 <___vfiprintf_internal_r+0xd24>
 404b588:	103e4826 	beq	r2,zero,404aeac <__flash_rwdata_start+0xffff077c>
 404b58c:	d9402117 	ldw	r5,132(sp)
 404b590:	d9002017 	ldw	r4,128(sp)
 404b594:	d9801a04 	addi	r6,sp,104
 404b598:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b59c:	10000c1e 	bne	r2,zero,404b5d0 <___vfiprintf_internal_r+0xd50>
 404b5a0:	d8801c17 	ldw	r2,112(sp)
 404b5a4:	8c80010e 	bge	r17,r18,404b5ac <___vfiprintf_internal_r+0xd2c>
 404b5a8:	9023883a 	mov	r17,r18
 404b5ac:	da802317 	ldw	r10,140(sp)
 404b5b0:	5455883a 	add	r10,r10,r17
 404b5b4:	da802315 	stw	r10,140(sp)
 404b5b8:	103e4126 	beq	r2,zero,404aec0 <__flash_rwdata_start+0xffff0790>
 404b5bc:	d9402117 	ldw	r5,132(sp)
 404b5c0:	d9002017 	ldw	r4,128(sp)
 404b5c4:	d9801a04 	addi	r6,sp,104
 404b5c8:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b5cc:	103e3c26 	beq	r2,zero,404aec0 <__flash_rwdata_start+0xffff0790>
 404b5d0:	dd002117 	ldw	r20,132(sp)
 404b5d4:	a080030b 	ldhu	r2,12(r20)
 404b5d8:	1080100c 	andi	r2,r2,64
 404b5dc:	1001231e 	bne	r2,zero,404ba6c <___vfiprintf_internal_r+0x11ec>
 404b5e0:	d8802317 	ldw	r2,140(sp)
 404b5e4:	003d7b06 	br	404abd4 <__flash_rwdata_start+0xffff04a4>
 404b5e8:	1000991e 	bne	r2,zero,404b850 <___vfiprintf_internal_r+0xfd0>
 404b5ec:	00c00044 	movi	r3,1
 404b5f0:	9805883a 	mov	r2,r19
 404b5f4:	dd400015 	stw	r21,0(sp)
 404b5f8:	dcc00115 	stw	r19,4(sp)
 404b5fc:	dcc01c15 	stw	r19,112(sp)
 404b600:	d8c01b15 	stw	r3,108(sp)
 404b604:	d811883a 	mov	r8,sp
 404b608:	42000204 	addi	r8,r8,8
 404b60c:	a2c0010c 	andi	r11,r20,4
 404b610:	583fe426 	beq	r11,zero,404b5a4 <__flash_rwdata_start+0xffff0e74>
 404b614:	8ca7c83a 	sub	r19,r17,r18
 404b618:	04ffe20e 	bge	zero,r19,404b5a4 <__flash_rwdata_start+0xffff0e74>
 404b61c:	01c00404 	movi	r7,16
 404b620:	3cffcc0e 	bge	r7,r19,404b554 <__flash_rwdata_start+0xffff0e24>
 404b624:	02808034 	movhi	r10,512
 404b628:	52810104 	addi	r10,r10,1028
 404b62c:	d9001b17 	ldw	r4,108(sp)
 404b630:	da802415 	stw	r10,144(sp)
 404b634:	382b883a 	mov	r21,r7
 404b638:	050001c4 	movi	r20,7
 404b63c:	df002017 	ldw	fp,128(sp)
 404b640:	00000506 	br	404b658 <___vfiprintf_internal_r+0xdd8>
 404b644:	21400084 	addi	r5,r4,2
 404b648:	42000204 	addi	r8,r8,8
 404b64c:	1809883a 	mov	r4,r3
 404b650:	9cfffc04 	addi	r19,r19,-16
 404b654:	acffc40e 	bge	r21,r19,404b568 <__flash_rwdata_start+0xffff0e38>
 404b658:	10800404 	addi	r2,r2,16
 404b65c:	20c00044 	addi	r3,r4,1
 404b660:	45800015 	stw	r22,0(r8)
 404b664:	45400115 	stw	r21,4(r8)
 404b668:	d8801c15 	stw	r2,112(sp)
 404b66c:	d8c01b15 	stw	r3,108(sp)
 404b670:	a0fff40e 	bge	r20,r3,404b644 <__flash_rwdata_start+0xffff0f14>
 404b674:	1000041e 	bne	r2,zero,404b688 <___vfiprintf_internal_r+0xe08>
 404b678:	01400044 	movi	r5,1
 404b67c:	0009883a 	mov	r4,zero
 404b680:	d811883a 	mov	r8,sp
 404b684:	003ff206 	br	404b650 <__flash_rwdata_start+0xffff0f20>
 404b688:	d9402117 	ldw	r5,132(sp)
 404b68c:	d9801a04 	addi	r6,sp,104
 404b690:	e009883a 	mov	r4,fp
 404b694:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b698:	103fcd1e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404b69c:	d9001b17 	ldw	r4,108(sp)
 404b6a0:	d8801c17 	ldw	r2,112(sp)
 404b6a4:	d811883a 	mov	r8,sp
 404b6a8:	21400044 	addi	r5,r4,1
 404b6ac:	003fe806 	br	404b650 <__flash_rwdata_start+0xffff0f20>
 404b6b0:	d9402117 	ldw	r5,132(sp)
 404b6b4:	d9002017 	ldw	r4,128(sp)
 404b6b8:	d9801a04 	addi	r6,sp,104
 404b6bc:	d9c02b15 	stw	r7,172(sp)
 404b6c0:	db402a15 	stw	r13,168(sp)
 404b6c4:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b6c8:	d9c02b17 	ldw	r7,172(sp)
 404b6cc:	db402a17 	ldw	r13,168(sp)
 404b6d0:	103fbf1e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404b6d4:	d9401b17 	ldw	r5,108(sp)
 404b6d8:	d8801c17 	ldw	r2,112(sp)
 404b6dc:	d811883a 	mov	r8,sp
 404b6e0:	29800044 	addi	r6,r5,1
 404b6e4:	003dc406 	br	404adf8 <__flash_rwdata_start+0xffff06c8>
 404b6e8:	1000d21e 	bne	r2,zero,404ba34 <___vfiprintf_internal_r+0x11b4>
 404b6ec:	d8c01d87 	ldb	r3,118(sp)
 404b6f0:	18009526 	beq	r3,zero,404b948 <___vfiprintf_internal_r+0x10c8>
 404b6f4:	00800044 	movi	r2,1
 404b6f8:	d8c01d84 	addi	r3,sp,118
 404b6fc:	1009883a 	mov	r4,r2
 404b700:	d8c00015 	stw	r3,0(sp)
 404b704:	d8800115 	stw	r2,4(sp)
 404b708:	d811883a 	mov	r8,sp
 404b70c:	200b883a 	mov	r5,r4
 404b710:	42000204 	addi	r8,r8,8
 404b714:	21000044 	addi	r4,r4,1
 404b718:	003d9706 	br	404ad78 <__flash_rwdata_start+0xffff0648>
 404b71c:	d9001d04 	addi	r4,sp,116
 404b720:	00800084 	movi	r2,2
 404b724:	d9000015 	stw	r4,0(sp)
 404b728:	d8800115 	stw	r2,4(sp)
 404b72c:	1809883a 	mov	r4,r3
 404b730:	d811883a 	mov	r8,sp
 404b734:	200b883a 	mov	r5,r4
 404b738:	42000204 	addi	r8,r8,8
 404b73c:	21000044 	addi	r4,r4,1
 404b740:	003f4e06 	br	404b47c <__flash_rwdata_start+0xffff0d4c>
 404b744:	d8001d85 	stb	zero,118(sp)
 404b748:	48005016 	blt	r9,zero,404b88c <___vfiprintf_internal_r+0x100c>
 404b74c:	00ffdfc4 	movi	r3,-129
 404b750:	94c4b03a 	or	r2,r18,r19
 404b754:	a0e8703a 	and	r20,r20,r3
 404b758:	103d4426 	beq	r2,zero,404ac6c <__flash_rwdata_start+0xffff053c>
 404b75c:	0039883a 	mov	fp,zero
 404b760:	d9002617 	ldw	r4,152(sp)
 404b764:	dd401a04 	addi	r21,sp,104
 404b768:	908003cc 	andi	r2,r18,15
 404b76c:	9806973a 	slli	r3,r19,28
 404b770:	2085883a 	add	r2,r4,r2
 404b774:	9024d13a 	srli	r18,r18,4
 404b778:	10800003 	ldbu	r2,0(r2)
 404b77c:	9826d13a 	srli	r19,r19,4
 404b780:	ad7fffc4 	addi	r21,r21,-1
 404b784:	1ca4b03a 	or	r18,r3,r18
 404b788:	a8800005 	stb	r2,0(r21)
 404b78c:	94c4b03a 	or	r2,r18,r19
 404b790:	103ff51e 	bne	r2,zero,404b768 <__flash_rwdata_start+0xffff1038>
 404b794:	003e5906 	br	404b0fc <__flash_rwdata_start+0xffff09cc>
 404b798:	d9402117 	ldw	r5,132(sp)
 404b79c:	d9002017 	ldw	r4,128(sp)
 404b7a0:	d9801a04 	addi	r6,sp,104
 404b7a4:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b7a8:	103f891e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404b7ac:	d8801c17 	ldw	r2,112(sp)
 404b7b0:	d811883a 	mov	r8,sp
 404b7b4:	003f9506 	br	404b60c <__flash_rwdata_start+0xffff0edc>
 404b7b8:	d9402117 	ldw	r5,132(sp)
 404b7bc:	d9002017 	ldw	r4,128(sp)
 404b7c0:	d9801a04 	addi	r6,sp,104
 404b7c4:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b7c8:	103f811e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404b7cc:	d811883a 	mov	r8,sp
 404b7d0:	003ced06 	br	404ab88 <__flash_rwdata_start+0xffff0458>
 404b7d4:	d9402117 	ldw	r5,132(sp)
 404b7d8:	d9002017 	ldw	r4,128(sp)
 404b7dc:	d9801a04 	addi	r6,sp,104
 404b7e0:	da402c15 	stw	r9,176(sp)
 404b7e4:	db802a15 	stw	r14,168(sp)
 404b7e8:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b7ec:	da402c17 	ldw	r9,176(sp)
 404b7f0:	db802a17 	ldw	r14,168(sp)
 404b7f4:	103f761e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404b7f8:	d9401b17 	ldw	r5,108(sp)
 404b7fc:	d8801c17 	ldw	r2,112(sp)
 404b800:	d811883a 	mov	r8,sp
 404b804:	29000044 	addi	r4,r5,1
 404b808:	003d5b06 	br	404ad78 <__flash_rwdata_start+0xffff0648>
 404b80c:	d9402117 	ldw	r5,132(sp)
 404b810:	d9002017 	ldw	r4,128(sp)
 404b814:	d9801a04 	addi	r6,sp,104
 404b818:	da402c15 	stw	r9,176(sp)
 404b81c:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b820:	da402c17 	ldw	r9,176(sp)
 404b824:	103f6a1e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404b828:	d9401b17 	ldw	r5,108(sp)
 404b82c:	d8801c17 	ldw	r2,112(sp)
 404b830:	d811883a 	mov	r8,sp
 404b834:	29000044 	addi	r4,r5,1
 404b838:	003f1006 	br	404b47c <__flash_rwdata_start+0xffff0d4c>
 404b83c:	1000c31e 	bne	r2,zero,404bb4c <___vfiprintf_internal_r+0x12cc>
 404b840:	01000044 	movi	r4,1
 404b844:	000b883a 	mov	r5,zero
 404b848:	d811883a 	mov	r8,sp
 404b84c:	003f0d06 	br	404b484 <__flash_rwdata_start+0xffff0d54>
 404b850:	d9402117 	ldw	r5,132(sp)
 404b854:	d9002017 	ldw	r4,128(sp)
 404b858:	d9801a04 	addi	r6,sp,104
 404b85c:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404b860:	103f5b1e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404b864:	d9001b17 	ldw	r4,108(sp)
 404b868:	d8801c17 	ldw	r2,112(sp)
 404b86c:	d811883a 	mov	r8,sp
 404b870:	21000044 	addi	r4,r4,1
 404b874:	003d8006 	br	404ae78 <__flash_rwdata_start+0xffff0748>
 404b878:	01008034 	movhi	r4,512
 404b87c:	21009c04 	addi	r4,r4,624
 404b880:	d9002615 	stw	r4,152(sp)
 404b884:	d8c02215 	stw	r3,136(sp)
 404b888:	1029883a 	mov	r20,r2
 404b88c:	94c4b03a 	or	r2,r18,r19
 404b890:	103fb21e 	bne	r2,zero,404b75c <__flash_rwdata_start+0xffff102c>
 404b894:	0039883a 	mov	fp,zero
 404b898:	00800084 	movi	r2,2
 404b89c:	003e6b06 	br	404b24c <__flash_rwdata_start+0xffff0b1c>
 404b8a0:	da802217 	ldw	r10,136(sp)
 404b8a4:	d8001d85 	stb	zero,118(sp)
 404b8a8:	0027883a 	mov	r19,zero
 404b8ac:	50800104 	addi	r2,r10,4
 404b8b0:	54800017 	ldw	r18,0(r10)
 404b8b4:	483e6016 	blt	r9,zero,404b238 <__flash_rwdata_start+0xffff0b08>
 404b8b8:	00ffdfc4 	movi	r3,-129
 404b8bc:	d8802215 	stw	r2,136(sp)
 404b8c0:	a0e8703a 	and	r20,r20,r3
 404b8c4:	0039883a 	mov	fp,zero
 404b8c8:	903ebb26 	beq	r18,zero,404b3b8 <__flash_rwdata_start+0xffff0c88>
 404b8cc:	00800244 	movi	r2,9
 404b8d0:	14bdee36 	bltu	r2,r18,404b08c <__flash_rwdata_start+0xffff095c>
 404b8d4:	003eba06 	br	404b3c0 <__flash_rwdata_start+0xffff0c90>
 404b8d8:	00800c04 	movi	r2,48
 404b8dc:	d8c01d45 	stb	r3,117(sp)
 404b8e0:	d8801d05 	stb	r2,116(sp)
 404b8e4:	d8001d85 	stb	zero,118(sp)
 404b8e8:	a0c00094 	ori	r3,r20,2
 404b8ec:	4800a916 	blt	r9,zero,404bb94 <___vfiprintf_internal_r+0x1314>
 404b8f0:	00bfdfc4 	movi	r2,-129
 404b8f4:	a096703a 	and	r11,r20,r2
 404b8f8:	5d000094 	ori	r20,r11,2
 404b8fc:	0039883a 	mov	fp,zero
 404b900:	003f9706 	br	404b760 <__flash_rwdata_start+0xffff1030>
 404b904:	8025883a 	mov	r18,r16
 404b908:	003c2e06 	br	404a9c4 <__flash_rwdata_start+0xffff0294>
 404b90c:	00808034 	movhi	r2,512
 404b910:	10809c04 	addi	r2,r2,624
 404b914:	0039883a 	mov	fp,zero
 404b918:	d8802615 	stw	r2,152(sp)
 404b91c:	003f9006 	br	404b760 <__flash_rwdata_start+0xffff1030>
 404b920:	04a5c83a 	sub	r18,zero,r18
 404b924:	07000b44 	movi	fp,45
 404b928:	9004c03a 	cmpne	r2,r18,zero
 404b92c:	04e7c83a 	sub	r19,zero,r19
 404b930:	df001d85 	stb	fp,118(sp)
 404b934:	98a7c83a 	sub	r19,r19,r2
 404b938:	48009f16 	blt	r9,zero,404bbb8 <___vfiprintf_internal_r+0x1338>
 404b93c:	00bfdfc4 	movi	r2,-129
 404b940:	a0a8703a 	and	r20,r20,r2
 404b944:	003dd006 	br	404b088 <__flash_rwdata_start+0xffff0958>
 404b948:	70004c26 	beq	r14,zero,404ba7c <___vfiprintf_internal_r+0x11fc>
 404b94c:	00800084 	movi	r2,2
 404b950:	d8c01d04 	addi	r3,sp,116
 404b954:	d8c00015 	stw	r3,0(sp)
 404b958:	d8800115 	stw	r2,4(sp)
 404b95c:	01000044 	movi	r4,1
 404b960:	d811883a 	mov	r8,sp
 404b964:	003f7306 	br	404b734 <__flash_rwdata_start+0xffff1004>
 404b968:	a080100c 	andi	r2,r20,64
 404b96c:	da802217 	ldw	r10,136(sp)
 404b970:	103e0626 	beq	r2,zero,404b18c <__flash_rwdata_start+0xffff0a5c>
 404b974:	5480000f 	ldh	r18,0(r10)
 404b978:	52800104 	addi	r10,r10,4
 404b97c:	da802215 	stw	r10,136(sp)
 404b980:	9027d7fa 	srai	r19,r18,31
 404b984:	9805883a 	mov	r2,r19
 404b988:	003db806 	br	404b06c <__flash_rwdata_start+0xffff093c>
 404b98c:	a080040c 	andi	r2,r20,16
 404b990:	1000091e 	bne	r2,zero,404b9b8 <___vfiprintf_internal_r+0x1138>
 404b994:	a2c0100c 	andi	r11,r20,64
 404b998:	58000726 	beq	r11,zero,404b9b8 <___vfiprintf_internal_r+0x1138>
 404b99c:	da802217 	ldw	r10,136(sp)
 404b9a0:	50800017 	ldw	r2,0(r10)
 404b9a4:	52800104 	addi	r10,r10,4
 404b9a8:	da802215 	stw	r10,136(sp)
 404b9ac:	da802317 	ldw	r10,140(sp)
 404b9b0:	1280000d 	sth	r10,0(r2)
 404b9b4:	003be706 	br	404a954 <__flash_rwdata_start+0xffff0224>
 404b9b8:	da802217 	ldw	r10,136(sp)
 404b9bc:	50800017 	ldw	r2,0(r10)
 404b9c0:	52800104 	addi	r10,r10,4
 404b9c4:	da802215 	stw	r10,136(sp)
 404b9c8:	da802317 	ldw	r10,140(sp)
 404b9cc:	12800015 	stw	r10,0(r2)
 404b9d0:	003be006 	br	404a954 <__flash_rwdata_start+0xffff0224>
 404b9d4:	a080100c 	andi	r2,r20,64
 404b9d8:	da802217 	ldw	r10,136(sp)
 404b9dc:	10003026 	beq	r2,zero,404baa0 <___vfiprintf_internal_r+0x1220>
 404b9e0:	5480000b 	ldhu	r18,0(r10)
 404b9e4:	52800104 	addi	r10,r10,4
 404b9e8:	0027883a 	mov	r19,zero
 404b9ec:	da802215 	stw	r10,136(sp)
 404b9f0:	003d8006 	br	404aff4 <__flash_rwdata_start+0xffff08c4>
 404b9f4:	80c00007 	ldb	r3,0(r16)
 404b9f8:	003c0006 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404b9fc:	a080100c 	andi	r2,r20,64
 404ba00:	d8001d85 	stb	zero,118(sp)
 404ba04:	da802217 	ldw	r10,136(sp)
 404ba08:	1000201e 	bne	r2,zero,404ba8c <___vfiprintf_internal_r+0x120c>
 404ba0c:	50800104 	addi	r2,r10,4
 404ba10:	54800017 	ldw	r18,0(r10)
 404ba14:	0027883a 	mov	r19,zero
 404ba18:	483def0e 	bge	r9,zero,404b1d8 <__flash_rwdata_start+0xffff0aa8>
 404ba1c:	94c6b03a 	or	r3,r18,r19
 404ba20:	d8802215 	stw	r2,136(sp)
 404ba24:	183d4e1e 	bne	r3,zero,404af60 <__flash_rwdata_start+0xffff0830>
 404ba28:	0039883a 	mov	fp,zero
 404ba2c:	0005883a 	mov	r2,zero
 404ba30:	003e0606 	br	404b24c <__flash_rwdata_start+0xffff0b1c>
 404ba34:	d9402117 	ldw	r5,132(sp)
 404ba38:	d9002017 	ldw	r4,128(sp)
 404ba3c:	d9801a04 	addi	r6,sp,104
 404ba40:	da402c15 	stw	r9,176(sp)
 404ba44:	db802a15 	stw	r14,168(sp)
 404ba48:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404ba4c:	da402c17 	ldw	r9,176(sp)
 404ba50:	db802a17 	ldw	r14,168(sp)
 404ba54:	103ede1e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404ba58:	d9401b17 	ldw	r5,108(sp)
 404ba5c:	d8801c17 	ldw	r2,112(sp)
 404ba60:	d811883a 	mov	r8,sp
 404ba64:	29000044 	addi	r4,r5,1
 404ba68:	003e7406 	br	404b43c <__flash_rwdata_start+0xffff0d0c>
 404ba6c:	00bfffc4 	movi	r2,-1
 404ba70:	003c5806 	br	404abd4 <__flash_rwdata_start+0xffff04a4>
 404ba74:	d811883a 	mov	r8,sp
 404ba78:	003ee806 	br	404b61c <__flash_rwdata_start+0xffff0eec>
 404ba7c:	000b883a 	mov	r5,zero
 404ba80:	01000044 	movi	r4,1
 404ba84:	d811883a 	mov	r8,sp
 404ba88:	003e7c06 	br	404b47c <__flash_rwdata_start+0xffff0d4c>
 404ba8c:	50800104 	addi	r2,r10,4
 404ba90:	5480000b 	ldhu	r18,0(r10)
 404ba94:	0027883a 	mov	r19,zero
 404ba98:	483dcf0e 	bge	r9,zero,404b1d8 <__flash_rwdata_start+0xffff0aa8>
 404ba9c:	003fdf06 	br	404ba1c <__flash_rwdata_start+0xffff12ec>
 404baa0:	54800017 	ldw	r18,0(r10)
 404baa4:	52800104 	addi	r10,r10,4
 404baa8:	0027883a 	mov	r19,zero
 404baac:	da802215 	stw	r10,136(sp)
 404bab0:	003d5006 	br	404aff4 <__flash_rwdata_start+0xffff08c4>
 404bab4:	50800104 	addi	r2,r10,4
 404bab8:	5480000b 	ldhu	r18,0(r10)
 404babc:	0027883a 	mov	r19,zero
 404bac0:	483f7d0e 	bge	r9,zero,404b8b8 <__flash_rwdata_start+0xffff1188>
 404bac4:	003ddc06 	br	404b238 <__flash_rwdata_start+0xffff0b08>
 404bac8:	d8c02215 	stw	r3,136(sp)
 404bacc:	0039883a 	mov	fp,zero
 404bad0:	003ddb06 	br	404b240 <__flash_rwdata_start+0xffff0b10>
 404bad4:	02808034 	movhi	r10,512
 404bad8:	5280fd04 	addi	r10,r10,1012
 404badc:	da802415 	stw	r10,144(sp)
 404bae0:	003e8306 	br	404b4f0 <__flash_rwdata_start+0xffff0dc0>
 404bae4:	d8801c17 	ldw	r2,112(sp)
 404bae8:	dd002117 	ldw	r20,132(sp)
 404baec:	103eb926 	beq	r2,zero,404b5d4 <__flash_rwdata_start+0xffff0ea4>
 404baf0:	d9002017 	ldw	r4,128(sp)
 404baf4:	d9801a04 	addi	r6,sp,104
 404baf8:	a00b883a 	mov	r5,r20
 404bafc:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404bb00:	003eb406 	br	404b5d4 <__flash_rwdata_start+0xffff0ea4>
 404bb04:	80c00043 	ldbu	r3,1(r16)
 404bb08:	a5000814 	ori	r20,r20,32
 404bb0c:	84000044 	addi	r16,r16,1
 404bb10:	18c03fcc 	andi	r3,r3,255
 404bb14:	18c0201c 	xori	r3,r3,128
 404bb18:	18ffe004 	addi	r3,r3,-128
 404bb1c:	003bb706 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404bb20:	a809883a 	mov	r4,r21
 404bb24:	d8c02a15 	stw	r3,168(sp)
 404bb28:	da002b15 	stw	r8,172(sp)
 404bb2c:	4043b7c0 	call	4043b7c <strlen>
 404bb30:	d8c02a17 	ldw	r3,168(sp)
 404bb34:	1027883a 	mov	r19,r2
 404bb38:	df001d83 	ldbu	fp,118(sp)
 404bb3c:	d8c02215 	stw	r3,136(sp)
 404bb40:	0013883a 	mov	r9,zero
 404bb44:	da002b17 	ldw	r8,172(sp)
 404bb48:	003c4d06 	br	404ac80 <__flash_rwdata_start+0xffff0550>
 404bb4c:	d9402117 	ldw	r5,132(sp)
 404bb50:	d9002017 	ldw	r4,128(sp)
 404bb54:	d9801a04 	addi	r6,sp,104
 404bb58:	da402c15 	stw	r9,176(sp)
 404bb5c:	404a76c0 	call	404a76c <__sprint_r.part.0>
 404bb60:	da402c17 	ldw	r9,176(sp)
 404bb64:	103e9a1e 	bne	r2,zero,404b5d0 <__flash_rwdata_start+0xffff0ea0>
 404bb68:	d9401b17 	ldw	r5,108(sp)
 404bb6c:	d8801c17 	ldw	r2,112(sp)
 404bb70:	d811883a 	mov	r8,sp
 404bb74:	29000044 	addi	r4,r5,1
 404bb78:	003e4206 	br	404b484 <__flash_rwdata_start+0xffff0d54>
 404bb7c:	d9401b17 	ldw	r5,108(sp)
 404bb80:	01008034 	movhi	r4,512
 404bb84:	21010104 	addi	r4,r4,1028
 404bb88:	d9002415 	stw	r4,144(sp)
 404bb8c:	29400044 	addi	r5,r5,1
 404bb90:	003c6d06 	br	404ad48 <__flash_rwdata_start+0xffff0618>
 404bb94:	0039883a 	mov	fp,zero
 404bb98:	00800084 	movi	r2,2
 404bb9c:	10803fcc 	andi	r2,r2,255
 404bba0:	01000044 	movi	r4,1
 404bba4:	11001e26 	beq	r2,r4,404bc20 <___vfiprintf_internal_r+0x13a0>
 404bba8:	01000084 	movi	r4,2
 404bbac:	11001e1e 	bne	r2,r4,404bc28 <___vfiprintf_internal_r+0x13a8>
 404bbb0:	1829883a 	mov	r20,r3
 404bbb4:	003eea06 	br	404b760 <__flash_rwdata_start+0xffff1030>
 404bbb8:	a007883a 	mov	r3,r20
 404bbbc:	00800044 	movi	r2,1
 404bbc0:	003ff606 	br	404bb9c <__flash_rwdata_start+0xffff146c>
 404bbc4:	00800184 	movi	r2,6
 404bbc8:	1240012e 	bgeu	r2,r9,404bbd0 <___vfiprintf_internal_r+0x1350>
 404bbcc:	1013883a 	mov	r9,r2
 404bbd0:	4827883a 	mov	r19,r9
 404bbd4:	4825883a 	mov	r18,r9
 404bbd8:	48001516 	blt	r9,zero,404bc30 <___vfiprintf_internal_r+0x13b0>
 404bbdc:	05408034 	movhi	r21,512
 404bbe0:	d8c02215 	stw	r3,136(sp)
 404bbe4:	ad40a104 	addi	r21,r21,644
 404bbe8:	003d1406 	br	404b03c <__flash_rwdata_start+0xffff090c>
 404bbec:	02808034 	movhi	r10,512
 404bbf0:	5280fd04 	addi	r10,r10,1012
 404bbf4:	da802415 	stw	r10,144(sp)
 404bbf8:	200d883a 	mov	r6,r4
 404bbfc:	003c9106 	br	404ae44 <__flash_rwdata_start+0xffff0714>
 404bc00:	5021883a 	mov	r16,r10
 404bc04:	0013883a 	mov	r9,zero
 404bc08:	003b7d06 	br	404aa00 <__flash_rwdata_start+0xffff02d0>
 404bc0c:	4827883a 	mov	r19,r9
 404bc10:	df001d83 	ldbu	fp,118(sp)
 404bc14:	d8c02215 	stw	r3,136(sp)
 404bc18:	0013883a 	mov	r9,zero
 404bc1c:	003c1806 	br	404ac80 <__flash_rwdata_start+0xffff0550>
 404bc20:	1829883a 	mov	r20,r3
 404bc24:	003d1806 	br	404b088 <__flash_rwdata_start+0xffff0958>
 404bc28:	1829883a 	mov	r20,r3
 404bc2c:	003ccd06 	br	404af64 <__flash_rwdata_start+0xffff0834>
 404bc30:	0025883a 	mov	r18,zero
 404bc34:	003fe906 	br	404bbdc <__flash_rwdata_start+0xffff14ac>
 404bc38:	d8802217 	ldw	r2,136(sp)
 404bc3c:	80c00043 	ldbu	r3,1(r16)
 404bc40:	5021883a 	mov	r16,r10
 404bc44:	12400017 	ldw	r9,0(r2)
 404bc48:	10800104 	addi	r2,r2,4
 404bc4c:	d8802215 	stw	r2,136(sp)
 404bc50:	483faf0e 	bge	r9,zero,404bb10 <__flash_rwdata_start+0xffff13e0>
 404bc54:	18c03fcc 	andi	r3,r3,255
 404bc58:	18c0201c 	xori	r3,r3,128
 404bc5c:	027fffc4 	movi	r9,-1
 404bc60:	18ffe004 	addi	r3,r3,-128
 404bc64:	003b6506 	br	404a9fc <__flash_rwdata_start+0xffff02cc>
 404bc68:	d9c01d85 	stb	r7,118(sp)
 404bc6c:	003ca006 	br	404aef0 <__flash_rwdata_start+0xffff07c0>
 404bc70:	d9c01d85 	stb	r7,118(sp)
 404bc74:	003cad06 	br	404af2c <__flash_rwdata_start+0xffff07fc>
 404bc78:	d9c01d85 	stb	r7,118(sp)
 404bc7c:	003d7d06 	br	404b274 <__flash_rwdata_start+0xffff0b44>
 404bc80:	d9c01d85 	stb	r7,118(sp)
 404bc84:	003d5f06 	br	404b204 <__flash_rwdata_start+0xffff0ad4>
 404bc88:	a080004c 	andi	r2,r20,1
 404bc8c:	0039883a 	mov	fp,zero
 404bc90:	10000526 	beq	r2,zero,404bca8 <___vfiprintf_internal_r+0x1428>
 404bc94:	00800c04 	movi	r2,48
 404bc98:	d88019c5 	stb	r2,103(sp)
 404bc9c:	dcc02717 	ldw	r19,156(sp)
 404bca0:	dd4019c4 	addi	r21,sp,103
 404bca4:	003bf606 	br	404ac80 <__flash_rwdata_start+0xffff0550>
 404bca8:	0027883a 	mov	r19,zero
 404bcac:	dd401a04 	addi	r21,sp,104
 404bcb0:	003bf306 	br	404ac80 <__flash_rwdata_start+0xffff0550>
 404bcb4:	d9c01d85 	stb	r7,118(sp)
 404bcb8:	003dc806 	br	404b3dc <__flash_rwdata_start+0xffff0cac>
 404bcbc:	d9c01d85 	stb	r7,118(sp)
 404bcc0:	003d3a06 	br	404b1ac <__flash_rwdata_start+0xffff0a7c>
 404bcc4:	d9c01d85 	stb	r7,118(sp)
 404bcc8:	003d2a06 	br	404b174 <__flash_rwdata_start+0xffff0a44>
 404bccc:	d9c01d85 	stb	r7,118(sp)
 404bcd0:	003cde06 	br	404b04c <__flash_rwdata_start+0xffff091c>
 404bcd4:	d9c01d85 	stb	r7,118(sp)
 404bcd8:	003cbc06 	br	404afcc <__flash_rwdata_start+0xffff089c>

0404bcdc <__vfiprintf_internal>:
 404bcdc:	00808034 	movhi	r2,512
 404bce0:	10886904 	addi	r2,r2,8612
 404bce4:	300f883a 	mov	r7,r6
 404bce8:	280d883a 	mov	r6,r5
 404bcec:	200b883a 	mov	r5,r4
 404bcf0:	11000017 	ldw	r4,0(r2)
 404bcf4:	404a8801 	jmpi	404a880 <___vfiprintf_internal_r>

0404bcf8 <__sbprintf>:
 404bcf8:	2880030b 	ldhu	r2,12(r5)
 404bcfc:	2ac01917 	ldw	r11,100(r5)
 404bd00:	2a80038b 	ldhu	r10,14(r5)
 404bd04:	2a400717 	ldw	r9,28(r5)
 404bd08:	2a000917 	ldw	r8,36(r5)
 404bd0c:	defee204 	addi	sp,sp,-1144
 404bd10:	00c10004 	movi	r3,1024
 404bd14:	dc011a15 	stw	r16,1128(sp)
 404bd18:	10bfff4c 	andi	r2,r2,65533
 404bd1c:	2821883a 	mov	r16,r5
 404bd20:	d8cb883a 	add	r5,sp,r3
 404bd24:	dc811c15 	stw	r18,1136(sp)
 404bd28:	dc411b15 	stw	r17,1132(sp)
 404bd2c:	dfc11d15 	stw	ra,1140(sp)
 404bd30:	2025883a 	mov	r18,r4
 404bd34:	d881030d 	sth	r2,1036(sp)
 404bd38:	dac11915 	stw	r11,1124(sp)
 404bd3c:	da81038d 	sth	r10,1038(sp)
 404bd40:	da410715 	stw	r9,1052(sp)
 404bd44:	da010915 	stw	r8,1060(sp)
 404bd48:	dec10015 	stw	sp,1024(sp)
 404bd4c:	dec10415 	stw	sp,1040(sp)
 404bd50:	d8c10215 	stw	r3,1032(sp)
 404bd54:	d8c10515 	stw	r3,1044(sp)
 404bd58:	d8010615 	stw	zero,1048(sp)
 404bd5c:	404a8800 	call	404a880 <___vfiprintf_internal_r>
 404bd60:	1023883a 	mov	r17,r2
 404bd64:	10000416 	blt	r2,zero,404bd78 <__sbprintf+0x80>
 404bd68:	d9410004 	addi	r5,sp,1024
 404bd6c:	9009883a 	mov	r4,r18
 404bd70:	4047adc0 	call	4047adc <_fflush_r>
 404bd74:	10000d1e 	bne	r2,zero,404bdac <__sbprintf+0xb4>
 404bd78:	d881030b 	ldhu	r2,1036(sp)
 404bd7c:	1080100c 	andi	r2,r2,64
 404bd80:	10000326 	beq	r2,zero,404bd90 <__sbprintf+0x98>
 404bd84:	8080030b 	ldhu	r2,12(r16)
 404bd88:	10801014 	ori	r2,r2,64
 404bd8c:	8080030d 	sth	r2,12(r16)
 404bd90:	8805883a 	mov	r2,r17
 404bd94:	dfc11d17 	ldw	ra,1140(sp)
 404bd98:	dc811c17 	ldw	r18,1136(sp)
 404bd9c:	dc411b17 	ldw	r17,1132(sp)
 404bda0:	dc011a17 	ldw	r16,1128(sp)
 404bda4:	dec11e04 	addi	sp,sp,1144
 404bda8:	f800283a 	ret
 404bdac:	047fffc4 	movi	r17,-1
 404bdb0:	003ff106 	br	404bd78 <__flash_rwdata_start+0xffff1648>

0404bdb4 <_write_r>:
 404bdb4:	defffd04 	addi	sp,sp,-12
 404bdb8:	2805883a 	mov	r2,r5
 404bdbc:	dc000015 	stw	r16,0(sp)
 404bdc0:	04008034 	movhi	r16,512
 404bdc4:	dc400115 	stw	r17,4(sp)
 404bdc8:	300b883a 	mov	r5,r6
 404bdcc:	8408ab04 	addi	r16,r16,8876
 404bdd0:	2023883a 	mov	r17,r4
 404bdd4:	380d883a 	mov	r6,r7
 404bdd8:	1009883a 	mov	r4,r2
 404bddc:	dfc00215 	stw	ra,8(sp)
 404bde0:	80000015 	stw	zero,0(r16)
 404bde4:	40502e40 	call	40502e4 <write>
 404bde8:	00ffffc4 	movi	r3,-1
 404bdec:	10c00526 	beq	r2,r3,404be04 <_write_r+0x50>
 404bdf0:	dfc00217 	ldw	ra,8(sp)
 404bdf4:	dc400117 	ldw	r17,4(sp)
 404bdf8:	dc000017 	ldw	r16,0(sp)
 404bdfc:	dec00304 	addi	sp,sp,12
 404be00:	f800283a 	ret
 404be04:	80c00017 	ldw	r3,0(r16)
 404be08:	183ff926 	beq	r3,zero,404bdf0 <__flash_rwdata_start+0xffff16c0>
 404be0c:	88c00015 	stw	r3,0(r17)
 404be10:	003ff706 	br	404bdf0 <__flash_rwdata_start+0xffff16c0>

0404be14 <_close_r>:
 404be14:	defffd04 	addi	sp,sp,-12
 404be18:	dc000015 	stw	r16,0(sp)
 404be1c:	04008034 	movhi	r16,512
 404be20:	dc400115 	stw	r17,4(sp)
 404be24:	8408ab04 	addi	r16,r16,8876
 404be28:	2023883a 	mov	r17,r4
 404be2c:	2809883a 	mov	r4,r5
 404be30:	dfc00215 	stw	ra,8(sp)
 404be34:	80000015 	stw	zero,0(r16)
 404be38:	404f83c0 	call	404f83c <close>
 404be3c:	00ffffc4 	movi	r3,-1
 404be40:	10c00526 	beq	r2,r3,404be58 <_close_r+0x44>
 404be44:	dfc00217 	ldw	ra,8(sp)
 404be48:	dc400117 	ldw	r17,4(sp)
 404be4c:	dc000017 	ldw	r16,0(sp)
 404be50:	dec00304 	addi	sp,sp,12
 404be54:	f800283a 	ret
 404be58:	80c00017 	ldw	r3,0(r16)
 404be5c:	183ff926 	beq	r3,zero,404be44 <__flash_rwdata_start+0xffff1714>
 404be60:	88c00015 	stw	r3,0(r17)
 404be64:	003ff706 	br	404be44 <__flash_rwdata_start+0xffff1714>

0404be68 <_calloc_r>:
 404be68:	298b383a 	mul	r5,r5,r6
 404be6c:	defffe04 	addi	sp,sp,-8
 404be70:	dfc00115 	stw	ra,4(sp)
 404be74:	dc000015 	stw	r16,0(sp)
 404be78:	40430940 	call	4043094 <_malloc_r>
 404be7c:	10002926 	beq	r2,zero,404bf24 <_calloc_r+0xbc>
 404be80:	11bfff17 	ldw	r6,-4(r2)
 404be84:	1021883a 	mov	r16,r2
 404be88:	00bfff04 	movi	r2,-4
 404be8c:	308c703a 	and	r6,r6,r2
 404be90:	00c00904 	movi	r3,36
 404be94:	308d883a 	add	r6,r6,r2
 404be98:	19801636 	bltu	r3,r6,404bef4 <_calloc_r+0x8c>
 404be9c:	008004c4 	movi	r2,19
 404bea0:	11800b2e 	bgeu	r2,r6,404bed0 <_calloc_r+0x68>
 404bea4:	80000015 	stw	zero,0(r16)
 404bea8:	80000115 	stw	zero,4(r16)
 404beac:	008006c4 	movi	r2,27
 404beb0:	11801a2e 	bgeu	r2,r6,404bf1c <_calloc_r+0xb4>
 404beb4:	80000215 	stw	zero,8(r16)
 404beb8:	80000315 	stw	zero,12(r16)
 404bebc:	30c0151e 	bne	r6,r3,404bf14 <_calloc_r+0xac>
 404bec0:	80000415 	stw	zero,16(r16)
 404bec4:	80800604 	addi	r2,r16,24
 404bec8:	80000515 	stw	zero,20(r16)
 404becc:	00000106 	br	404bed4 <_calloc_r+0x6c>
 404bed0:	8005883a 	mov	r2,r16
 404bed4:	10000015 	stw	zero,0(r2)
 404bed8:	10000115 	stw	zero,4(r2)
 404bedc:	10000215 	stw	zero,8(r2)
 404bee0:	8005883a 	mov	r2,r16
 404bee4:	dfc00117 	ldw	ra,4(sp)
 404bee8:	dc000017 	ldw	r16,0(sp)
 404beec:	dec00204 	addi	sp,sp,8
 404bef0:	f800283a 	ret
 404bef4:	000b883a 	mov	r5,zero
 404bef8:	8009883a 	mov	r4,r16
 404befc:	4048e580 	call	4048e58 <memset>
 404bf00:	8005883a 	mov	r2,r16
 404bf04:	dfc00117 	ldw	ra,4(sp)
 404bf08:	dc000017 	ldw	r16,0(sp)
 404bf0c:	dec00204 	addi	sp,sp,8
 404bf10:	f800283a 	ret
 404bf14:	80800404 	addi	r2,r16,16
 404bf18:	003fee06 	br	404bed4 <__flash_rwdata_start+0xffff17a4>
 404bf1c:	80800204 	addi	r2,r16,8
 404bf20:	003fec06 	br	404bed4 <__flash_rwdata_start+0xffff17a4>
 404bf24:	0005883a 	mov	r2,zero
 404bf28:	003fee06 	br	404bee4 <__flash_rwdata_start+0xffff17b4>

0404bf2c <_fclose_r>:
 404bf2c:	28003926 	beq	r5,zero,404c014 <_fclose_r+0xe8>
 404bf30:	defffc04 	addi	sp,sp,-16
 404bf34:	dc400115 	stw	r17,4(sp)
 404bf38:	dc000015 	stw	r16,0(sp)
 404bf3c:	dfc00315 	stw	ra,12(sp)
 404bf40:	dc800215 	stw	r18,8(sp)
 404bf44:	2023883a 	mov	r17,r4
 404bf48:	2821883a 	mov	r16,r5
 404bf4c:	20000226 	beq	r4,zero,404bf58 <_fclose_r+0x2c>
 404bf50:	20800e17 	ldw	r2,56(r4)
 404bf54:	10002726 	beq	r2,zero,404bff4 <_fclose_r+0xc8>
 404bf58:	8080030f 	ldh	r2,12(r16)
 404bf5c:	1000071e 	bne	r2,zero,404bf7c <_fclose_r+0x50>
 404bf60:	0005883a 	mov	r2,zero
 404bf64:	dfc00317 	ldw	ra,12(sp)
 404bf68:	dc800217 	ldw	r18,8(sp)
 404bf6c:	dc400117 	ldw	r17,4(sp)
 404bf70:	dc000017 	ldw	r16,0(sp)
 404bf74:	dec00404 	addi	sp,sp,16
 404bf78:	f800283a 	ret
 404bf7c:	800b883a 	mov	r5,r16
 404bf80:	8809883a 	mov	r4,r17
 404bf84:	40478c00 	call	40478c0 <__sflush_r>
 404bf88:	1025883a 	mov	r18,r2
 404bf8c:	80800b17 	ldw	r2,44(r16)
 404bf90:	10000426 	beq	r2,zero,404bfa4 <_fclose_r+0x78>
 404bf94:	81400717 	ldw	r5,28(r16)
 404bf98:	8809883a 	mov	r4,r17
 404bf9c:	103ee83a 	callr	r2
 404bfa0:	10001616 	blt	r2,zero,404bffc <_fclose_r+0xd0>
 404bfa4:	8080030b 	ldhu	r2,12(r16)
 404bfa8:	1080200c 	andi	r2,r2,128
 404bfac:	1000151e 	bne	r2,zero,404c004 <_fclose_r+0xd8>
 404bfb0:	81400c17 	ldw	r5,48(r16)
 404bfb4:	28000526 	beq	r5,zero,404bfcc <_fclose_r+0xa0>
 404bfb8:	80801004 	addi	r2,r16,64
 404bfbc:	28800226 	beq	r5,r2,404bfc8 <_fclose_r+0x9c>
 404bfc0:	8809883a 	mov	r4,r17
 404bfc4:	404802c0 	call	404802c <_free_r>
 404bfc8:	80000c15 	stw	zero,48(r16)
 404bfcc:	81401117 	ldw	r5,68(r16)
 404bfd0:	28000326 	beq	r5,zero,404bfe0 <_fclose_r+0xb4>
 404bfd4:	8809883a 	mov	r4,r17
 404bfd8:	404802c0 	call	404802c <_free_r>
 404bfdc:	80001115 	stw	zero,68(r16)
 404bfe0:	4047ec80 	call	4047ec8 <__sfp_lock_acquire>
 404bfe4:	8000030d 	sth	zero,12(r16)
 404bfe8:	4047ecc0 	call	4047ecc <__sfp_lock_release>
 404bfec:	9005883a 	mov	r2,r18
 404bff0:	003fdc06 	br	404bf64 <__flash_rwdata_start+0xffff1834>
 404bff4:	4047eb80 	call	4047eb8 <__sinit>
 404bff8:	003fd706 	br	404bf58 <__flash_rwdata_start+0xffff1828>
 404bffc:	04bfffc4 	movi	r18,-1
 404c000:	003fe806 	br	404bfa4 <__flash_rwdata_start+0xffff1874>
 404c004:	81400417 	ldw	r5,16(r16)
 404c008:	8809883a 	mov	r4,r17
 404c00c:	404802c0 	call	404802c <_free_r>
 404c010:	003fe706 	br	404bfb0 <__flash_rwdata_start+0xffff1880>
 404c014:	0005883a 	mov	r2,zero
 404c018:	f800283a 	ret

0404c01c <fclose>:
 404c01c:	00808034 	movhi	r2,512
 404c020:	10886904 	addi	r2,r2,8612
 404c024:	200b883a 	mov	r5,r4
 404c028:	11000017 	ldw	r4,0(r2)
 404c02c:	404bf2c1 	jmpi	404bf2c <_fclose_r>

0404c030 <__fputwc>:
 404c030:	defff804 	addi	sp,sp,-32
 404c034:	dcc00415 	stw	r19,16(sp)
 404c038:	dc800315 	stw	r18,12(sp)
 404c03c:	dc000115 	stw	r16,4(sp)
 404c040:	dfc00715 	stw	ra,28(sp)
 404c044:	dd400615 	stw	r21,24(sp)
 404c048:	dd000515 	stw	r20,20(sp)
 404c04c:	dc400215 	stw	r17,8(sp)
 404c050:	2027883a 	mov	r19,r4
 404c054:	2825883a 	mov	r18,r5
 404c058:	3021883a 	mov	r16,r6
 404c05c:	4048a080 	call	4048a08 <__locale_mb_cur_max>
 404c060:	00c00044 	movi	r3,1
 404c064:	10c03e26 	beq	r2,r3,404c160 <__fputwc+0x130>
 404c068:	81c01704 	addi	r7,r16,92
 404c06c:	900d883a 	mov	r6,r18
 404c070:	d80b883a 	mov	r5,sp
 404c074:	9809883a 	mov	r4,r19
 404c078:	404c5000 	call	404c500 <_wcrtomb_r>
 404c07c:	1029883a 	mov	r20,r2
 404c080:	00bfffc4 	movi	r2,-1
 404c084:	a0802026 	beq	r20,r2,404c108 <__fputwc+0xd8>
 404c088:	d9400003 	ldbu	r5,0(sp)
 404c08c:	a0001c26 	beq	r20,zero,404c100 <__fputwc+0xd0>
 404c090:	0023883a 	mov	r17,zero
 404c094:	05400284 	movi	r21,10
 404c098:	00000906 	br	404c0c0 <__fputwc+0x90>
 404c09c:	80800017 	ldw	r2,0(r16)
 404c0a0:	11400005 	stb	r5,0(r2)
 404c0a4:	80c00017 	ldw	r3,0(r16)
 404c0a8:	18c00044 	addi	r3,r3,1
 404c0ac:	80c00015 	stw	r3,0(r16)
 404c0b0:	8c400044 	addi	r17,r17,1
 404c0b4:	dc45883a 	add	r2,sp,r17
 404c0b8:	8d00112e 	bgeu	r17,r20,404c100 <__fputwc+0xd0>
 404c0bc:	11400003 	ldbu	r5,0(r2)
 404c0c0:	80c00217 	ldw	r3,8(r16)
 404c0c4:	18ffffc4 	addi	r3,r3,-1
 404c0c8:	80c00215 	stw	r3,8(r16)
 404c0cc:	183ff30e 	bge	r3,zero,404c09c <__flash_rwdata_start+0xffff196c>
 404c0d0:	80800617 	ldw	r2,24(r16)
 404c0d4:	18801916 	blt	r3,r2,404c13c <__fputwc+0x10c>
 404c0d8:	80800017 	ldw	r2,0(r16)
 404c0dc:	11400005 	stb	r5,0(r2)
 404c0e0:	80800017 	ldw	r2,0(r16)
 404c0e4:	10c00003 	ldbu	r3,0(r2)
 404c0e8:	10800044 	addi	r2,r2,1
 404c0ec:	1d402326 	beq	r3,r21,404c17c <__fputwc+0x14c>
 404c0f0:	80800015 	stw	r2,0(r16)
 404c0f4:	8c400044 	addi	r17,r17,1
 404c0f8:	dc45883a 	add	r2,sp,r17
 404c0fc:	8d3fef36 	bltu	r17,r20,404c0bc <__flash_rwdata_start+0xffff198c>
 404c100:	9005883a 	mov	r2,r18
 404c104:	00000406 	br	404c118 <__fputwc+0xe8>
 404c108:	80c0030b 	ldhu	r3,12(r16)
 404c10c:	a005883a 	mov	r2,r20
 404c110:	18c01014 	ori	r3,r3,64
 404c114:	80c0030d 	sth	r3,12(r16)
 404c118:	dfc00717 	ldw	ra,28(sp)
 404c11c:	dd400617 	ldw	r21,24(sp)
 404c120:	dd000517 	ldw	r20,20(sp)
 404c124:	dcc00417 	ldw	r19,16(sp)
 404c128:	dc800317 	ldw	r18,12(sp)
 404c12c:	dc400217 	ldw	r17,8(sp)
 404c130:	dc000117 	ldw	r16,4(sp)
 404c134:	dec00804 	addi	sp,sp,32
 404c138:	f800283a 	ret
 404c13c:	800d883a 	mov	r6,r16
 404c140:	29403fcc 	andi	r5,r5,255
 404c144:	9809883a 	mov	r4,r19
 404c148:	404c3a80 	call	404c3a8 <__swbuf_r>
 404c14c:	10bfffe0 	cmpeqi	r2,r2,-1
 404c150:	10803fcc 	andi	r2,r2,255
 404c154:	103fd626 	beq	r2,zero,404c0b0 <__flash_rwdata_start+0xffff1980>
 404c158:	00bfffc4 	movi	r2,-1
 404c15c:	003fee06 	br	404c118 <__flash_rwdata_start+0xffff19e8>
 404c160:	90ffffc4 	addi	r3,r18,-1
 404c164:	01003f84 	movi	r4,254
 404c168:	20ffbf36 	bltu	r4,r3,404c068 <__flash_rwdata_start+0xffff1938>
 404c16c:	900b883a 	mov	r5,r18
 404c170:	dc800005 	stb	r18,0(sp)
 404c174:	1029883a 	mov	r20,r2
 404c178:	003fc506 	br	404c090 <__flash_rwdata_start+0xffff1960>
 404c17c:	800d883a 	mov	r6,r16
 404c180:	a80b883a 	mov	r5,r21
 404c184:	9809883a 	mov	r4,r19
 404c188:	404c3a80 	call	404c3a8 <__swbuf_r>
 404c18c:	10bfffe0 	cmpeqi	r2,r2,-1
 404c190:	003fef06 	br	404c150 <__flash_rwdata_start+0xffff1a20>

0404c194 <_fputwc_r>:
 404c194:	3080030b 	ldhu	r2,12(r6)
 404c198:	10c8000c 	andi	r3,r2,8192
 404c19c:	1800051e 	bne	r3,zero,404c1b4 <_fputwc_r+0x20>
 404c1a0:	30c01917 	ldw	r3,100(r6)
 404c1a4:	10880014 	ori	r2,r2,8192
 404c1a8:	3080030d 	sth	r2,12(r6)
 404c1ac:	18880014 	ori	r2,r3,8192
 404c1b0:	30801915 	stw	r2,100(r6)
 404c1b4:	404c0301 	jmpi	404c030 <__fputwc>

0404c1b8 <fputwc>:
 404c1b8:	00808034 	movhi	r2,512
 404c1bc:	defffc04 	addi	sp,sp,-16
 404c1c0:	10886904 	addi	r2,r2,8612
 404c1c4:	dc000115 	stw	r16,4(sp)
 404c1c8:	14000017 	ldw	r16,0(r2)
 404c1cc:	dc400215 	stw	r17,8(sp)
 404c1d0:	dfc00315 	stw	ra,12(sp)
 404c1d4:	2023883a 	mov	r17,r4
 404c1d8:	80000226 	beq	r16,zero,404c1e4 <fputwc+0x2c>
 404c1dc:	80800e17 	ldw	r2,56(r16)
 404c1e0:	10001026 	beq	r2,zero,404c224 <fputwc+0x6c>
 404c1e4:	2880030b 	ldhu	r2,12(r5)
 404c1e8:	10c8000c 	andi	r3,r2,8192
 404c1ec:	1800051e 	bne	r3,zero,404c204 <fputwc+0x4c>
 404c1f0:	28c01917 	ldw	r3,100(r5)
 404c1f4:	10880014 	ori	r2,r2,8192
 404c1f8:	2880030d 	sth	r2,12(r5)
 404c1fc:	18880014 	ori	r2,r3,8192
 404c200:	28801915 	stw	r2,100(r5)
 404c204:	280d883a 	mov	r6,r5
 404c208:	8009883a 	mov	r4,r16
 404c20c:	880b883a 	mov	r5,r17
 404c210:	dfc00317 	ldw	ra,12(sp)
 404c214:	dc400217 	ldw	r17,8(sp)
 404c218:	dc000117 	ldw	r16,4(sp)
 404c21c:	dec00404 	addi	sp,sp,16
 404c220:	404c0301 	jmpi	404c030 <__fputwc>
 404c224:	8009883a 	mov	r4,r16
 404c228:	d9400015 	stw	r5,0(sp)
 404c22c:	4047eb80 	call	4047eb8 <__sinit>
 404c230:	d9400017 	ldw	r5,0(sp)
 404c234:	003feb06 	br	404c1e4 <__flash_rwdata_start+0xffff1ab4>

0404c238 <_fstat_r>:
 404c238:	defffd04 	addi	sp,sp,-12
 404c23c:	2805883a 	mov	r2,r5
 404c240:	dc000015 	stw	r16,0(sp)
 404c244:	04008034 	movhi	r16,512
 404c248:	dc400115 	stw	r17,4(sp)
 404c24c:	8408ab04 	addi	r16,r16,8876
 404c250:	2023883a 	mov	r17,r4
 404c254:	300b883a 	mov	r5,r6
 404c258:	1009883a 	mov	r4,r2
 404c25c:	dfc00215 	stw	ra,8(sp)
 404c260:	80000015 	stw	zero,0(r16)
 404c264:	404f9740 	call	404f974 <fstat>
 404c268:	00ffffc4 	movi	r3,-1
 404c26c:	10c00526 	beq	r2,r3,404c284 <_fstat_r+0x4c>
 404c270:	dfc00217 	ldw	ra,8(sp)
 404c274:	dc400117 	ldw	r17,4(sp)
 404c278:	dc000017 	ldw	r16,0(sp)
 404c27c:	dec00304 	addi	sp,sp,12
 404c280:	f800283a 	ret
 404c284:	80c00017 	ldw	r3,0(r16)
 404c288:	183ff926 	beq	r3,zero,404c270 <__flash_rwdata_start+0xffff1b40>
 404c28c:	88c00015 	stw	r3,0(r17)
 404c290:	003ff706 	br	404c270 <__flash_rwdata_start+0xffff1b40>

0404c294 <_isatty_r>:
 404c294:	defffd04 	addi	sp,sp,-12
 404c298:	dc000015 	stw	r16,0(sp)
 404c29c:	04008034 	movhi	r16,512
 404c2a0:	dc400115 	stw	r17,4(sp)
 404c2a4:	8408ab04 	addi	r16,r16,8876
 404c2a8:	2023883a 	mov	r17,r4
 404c2ac:	2809883a 	mov	r4,r5
 404c2b0:	dfc00215 	stw	ra,8(sp)
 404c2b4:	80000015 	stw	zero,0(r16)
 404c2b8:	404fd000 	call	404fd00 <isatty>
 404c2bc:	00ffffc4 	movi	r3,-1
 404c2c0:	10c00526 	beq	r2,r3,404c2d8 <_isatty_r+0x44>
 404c2c4:	dfc00217 	ldw	ra,8(sp)
 404c2c8:	dc400117 	ldw	r17,4(sp)
 404c2cc:	dc000017 	ldw	r16,0(sp)
 404c2d0:	dec00304 	addi	sp,sp,12
 404c2d4:	f800283a 	ret
 404c2d8:	80c00017 	ldw	r3,0(r16)
 404c2dc:	183ff926 	beq	r3,zero,404c2c4 <__flash_rwdata_start+0xffff1b94>
 404c2e0:	88c00015 	stw	r3,0(r17)
 404c2e4:	003ff706 	br	404c2c4 <__flash_rwdata_start+0xffff1b94>

0404c2e8 <_lseek_r>:
 404c2e8:	defffd04 	addi	sp,sp,-12
 404c2ec:	2805883a 	mov	r2,r5
 404c2f0:	dc000015 	stw	r16,0(sp)
 404c2f4:	04008034 	movhi	r16,512
 404c2f8:	dc400115 	stw	r17,4(sp)
 404c2fc:	300b883a 	mov	r5,r6
 404c300:	8408ab04 	addi	r16,r16,8876
 404c304:	2023883a 	mov	r17,r4
 404c308:	380d883a 	mov	r6,r7
 404c30c:	1009883a 	mov	r4,r2
 404c310:	dfc00215 	stw	ra,8(sp)
 404c314:	80000015 	stw	zero,0(r16)
 404c318:	404fecc0 	call	404fecc <lseek>
 404c31c:	00ffffc4 	movi	r3,-1
 404c320:	10c00526 	beq	r2,r3,404c338 <_lseek_r+0x50>
 404c324:	dfc00217 	ldw	ra,8(sp)
 404c328:	dc400117 	ldw	r17,4(sp)
 404c32c:	dc000017 	ldw	r16,0(sp)
 404c330:	dec00304 	addi	sp,sp,12
 404c334:	f800283a 	ret
 404c338:	80c00017 	ldw	r3,0(r16)
 404c33c:	183ff926 	beq	r3,zero,404c324 <__flash_rwdata_start+0xffff1bf4>
 404c340:	88c00015 	stw	r3,0(r17)
 404c344:	003ff706 	br	404c324 <__flash_rwdata_start+0xffff1bf4>

0404c348 <_read_r>:
 404c348:	defffd04 	addi	sp,sp,-12
 404c34c:	2805883a 	mov	r2,r5
 404c350:	dc000015 	stw	r16,0(sp)
 404c354:	04008034 	movhi	r16,512
 404c358:	dc400115 	stw	r17,4(sp)
 404c35c:	300b883a 	mov	r5,r6
 404c360:	8408ab04 	addi	r16,r16,8876
 404c364:	2023883a 	mov	r17,r4
 404c368:	380d883a 	mov	r6,r7
 404c36c:	1009883a 	mov	r4,r2
 404c370:	dfc00215 	stw	ra,8(sp)
 404c374:	80000015 	stw	zero,0(r16)
 404c378:	40500980 	call	4050098 <read>
 404c37c:	00ffffc4 	movi	r3,-1
 404c380:	10c00526 	beq	r2,r3,404c398 <_read_r+0x50>
 404c384:	dfc00217 	ldw	ra,8(sp)
 404c388:	dc400117 	ldw	r17,4(sp)
 404c38c:	dc000017 	ldw	r16,0(sp)
 404c390:	dec00304 	addi	sp,sp,12
 404c394:	f800283a 	ret
 404c398:	80c00017 	ldw	r3,0(r16)
 404c39c:	183ff926 	beq	r3,zero,404c384 <__flash_rwdata_start+0xffff1c54>
 404c3a0:	88c00015 	stw	r3,0(r17)
 404c3a4:	003ff706 	br	404c384 <__flash_rwdata_start+0xffff1c54>

0404c3a8 <__swbuf_r>:
 404c3a8:	defffb04 	addi	sp,sp,-20
 404c3ac:	dcc00315 	stw	r19,12(sp)
 404c3b0:	dc800215 	stw	r18,8(sp)
 404c3b4:	dc000015 	stw	r16,0(sp)
 404c3b8:	dfc00415 	stw	ra,16(sp)
 404c3bc:	dc400115 	stw	r17,4(sp)
 404c3c0:	2025883a 	mov	r18,r4
 404c3c4:	2827883a 	mov	r19,r5
 404c3c8:	3021883a 	mov	r16,r6
 404c3cc:	20000226 	beq	r4,zero,404c3d8 <__swbuf_r+0x30>
 404c3d0:	20800e17 	ldw	r2,56(r4)
 404c3d4:	10004226 	beq	r2,zero,404c4e0 <__swbuf_r+0x138>
 404c3d8:	80800617 	ldw	r2,24(r16)
 404c3dc:	8100030b 	ldhu	r4,12(r16)
 404c3e0:	80800215 	stw	r2,8(r16)
 404c3e4:	2080020c 	andi	r2,r4,8
 404c3e8:	10003626 	beq	r2,zero,404c4c4 <__swbuf_r+0x11c>
 404c3ec:	80c00417 	ldw	r3,16(r16)
 404c3f0:	18003426 	beq	r3,zero,404c4c4 <__swbuf_r+0x11c>
 404c3f4:	2088000c 	andi	r2,r4,8192
 404c3f8:	9c403fcc 	andi	r17,r19,255
 404c3fc:	10001a26 	beq	r2,zero,404c468 <__swbuf_r+0xc0>
 404c400:	80800017 	ldw	r2,0(r16)
 404c404:	81000517 	ldw	r4,20(r16)
 404c408:	10c7c83a 	sub	r3,r2,r3
 404c40c:	1900200e 	bge	r3,r4,404c490 <__swbuf_r+0xe8>
 404c410:	18c00044 	addi	r3,r3,1
 404c414:	81000217 	ldw	r4,8(r16)
 404c418:	11400044 	addi	r5,r2,1
 404c41c:	81400015 	stw	r5,0(r16)
 404c420:	213fffc4 	addi	r4,r4,-1
 404c424:	81000215 	stw	r4,8(r16)
 404c428:	14c00005 	stb	r19,0(r2)
 404c42c:	80800517 	ldw	r2,20(r16)
 404c430:	10c01e26 	beq	r2,r3,404c4ac <__swbuf_r+0x104>
 404c434:	8080030b 	ldhu	r2,12(r16)
 404c438:	1080004c 	andi	r2,r2,1
 404c43c:	10000226 	beq	r2,zero,404c448 <__swbuf_r+0xa0>
 404c440:	00800284 	movi	r2,10
 404c444:	88801926 	beq	r17,r2,404c4ac <__swbuf_r+0x104>
 404c448:	8805883a 	mov	r2,r17
 404c44c:	dfc00417 	ldw	ra,16(sp)
 404c450:	dcc00317 	ldw	r19,12(sp)
 404c454:	dc800217 	ldw	r18,8(sp)
 404c458:	dc400117 	ldw	r17,4(sp)
 404c45c:	dc000017 	ldw	r16,0(sp)
 404c460:	dec00504 	addi	sp,sp,20
 404c464:	f800283a 	ret
 404c468:	81401917 	ldw	r5,100(r16)
 404c46c:	00b7ffc4 	movi	r2,-8193
 404c470:	21080014 	ori	r4,r4,8192
 404c474:	2884703a 	and	r2,r5,r2
 404c478:	80801915 	stw	r2,100(r16)
 404c47c:	80800017 	ldw	r2,0(r16)
 404c480:	8100030d 	sth	r4,12(r16)
 404c484:	81000517 	ldw	r4,20(r16)
 404c488:	10c7c83a 	sub	r3,r2,r3
 404c48c:	193fe016 	blt	r3,r4,404c410 <__flash_rwdata_start+0xffff1ce0>
 404c490:	800b883a 	mov	r5,r16
 404c494:	9009883a 	mov	r4,r18
 404c498:	4047adc0 	call	4047adc <_fflush_r>
 404c49c:	1000071e 	bne	r2,zero,404c4bc <__swbuf_r+0x114>
 404c4a0:	80800017 	ldw	r2,0(r16)
 404c4a4:	00c00044 	movi	r3,1
 404c4a8:	003fda06 	br	404c414 <__flash_rwdata_start+0xffff1ce4>
 404c4ac:	800b883a 	mov	r5,r16
 404c4b0:	9009883a 	mov	r4,r18
 404c4b4:	4047adc0 	call	4047adc <_fflush_r>
 404c4b8:	103fe326 	beq	r2,zero,404c448 <__flash_rwdata_start+0xffff1d18>
 404c4bc:	00bfffc4 	movi	r2,-1
 404c4c0:	003fe206 	br	404c44c <__flash_rwdata_start+0xffff1d1c>
 404c4c4:	800b883a 	mov	r5,r16
 404c4c8:	9009883a 	mov	r4,r18
 404c4cc:	4045ee40 	call	4045ee4 <__swsetup_r>
 404c4d0:	103ffa1e 	bne	r2,zero,404c4bc <__flash_rwdata_start+0xffff1d8c>
 404c4d4:	8100030b 	ldhu	r4,12(r16)
 404c4d8:	80c00417 	ldw	r3,16(r16)
 404c4dc:	003fc506 	br	404c3f4 <__flash_rwdata_start+0xffff1cc4>
 404c4e0:	4047eb80 	call	4047eb8 <__sinit>
 404c4e4:	003fbc06 	br	404c3d8 <__flash_rwdata_start+0xffff1ca8>

0404c4e8 <__swbuf>:
 404c4e8:	00808034 	movhi	r2,512
 404c4ec:	10886904 	addi	r2,r2,8612
 404c4f0:	280d883a 	mov	r6,r5
 404c4f4:	200b883a 	mov	r5,r4
 404c4f8:	11000017 	ldw	r4,0(r2)
 404c4fc:	404c3a81 	jmpi	404c3a8 <__swbuf_r>

0404c500 <_wcrtomb_r>:
 404c500:	defff604 	addi	sp,sp,-40
 404c504:	00808034 	movhi	r2,512
 404c508:	dc800815 	stw	r18,32(sp)
 404c50c:	dc400715 	stw	r17,28(sp)
 404c510:	dc000615 	stw	r16,24(sp)
 404c514:	10886b04 	addi	r2,r2,8620
 404c518:	dfc00915 	stw	ra,36(sp)
 404c51c:	2021883a 	mov	r16,r4
 404c520:	3823883a 	mov	r17,r7
 404c524:	14800017 	ldw	r18,0(r2)
 404c528:	28001426 	beq	r5,zero,404c57c <_wcrtomb_r+0x7c>
 404c52c:	d9400415 	stw	r5,16(sp)
 404c530:	d9800515 	stw	r6,20(sp)
 404c534:	40489fc0 	call	40489fc <__locale_charset>
 404c538:	d9800517 	ldw	r6,20(sp)
 404c53c:	d9400417 	ldw	r5,16(sp)
 404c540:	100f883a 	mov	r7,r2
 404c544:	dc400015 	stw	r17,0(sp)
 404c548:	8009883a 	mov	r4,r16
 404c54c:	903ee83a 	callr	r18
 404c550:	00ffffc4 	movi	r3,-1
 404c554:	10c0031e 	bne	r2,r3,404c564 <_wcrtomb_r+0x64>
 404c558:	88000015 	stw	zero,0(r17)
 404c55c:	00c02284 	movi	r3,138
 404c560:	80c00015 	stw	r3,0(r16)
 404c564:	dfc00917 	ldw	ra,36(sp)
 404c568:	dc800817 	ldw	r18,32(sp)
 404c56c:	dc400717 	ldw	r17,28(sp)
 404c570:	dc000617 	ldw	r16,24(sp)
 404c574:	dec00a04 	addi	sp,sp,40
 404c578:	f800283a 	ret
 404c57c:	40489fc0 	call	40489fc <__locale_charset>
 404c580:	100f883a 	mov	r7,r2
 404c584:	dc400015 	stw	r17,0(sp)
 404c588:	000d883a 	mov	r6,zero
 404c58c:	d9400104 	addi	r5,sp,4
 404c590:	8009883a 	mov	r4,r16
 404c594:	903ee83a 	callr	r18
 404c598:	003fed06 	br	404c550 <__flash_rwdata_start+0xffff1e20>

0404c59c <wcrtomb>:
 404c59c:	defff604 	addi	sp,sp,-40
 404c5a0:	00808034 	movhi	r2,512
 404c5a4:	dc800615 	stw	r18,24(sp)
 404c5a8:	dc400515 	stw	r17,20(sp)
 404c5ac:	10886904 	addi	r2,r2,8612
 404c5b0:	dfc00915 	stw	ra,36(sp)
 404c5b4:	dd000815 	stw	r20,32(sp)
 404c5b8:	dcc00715 	stw	r19,28(sp)
 404c5bc:	dc000415 	stw	r16,16(sp)
 404c5c0:	3025883a 	mov	r18,r6
 404c5c4:	14400017 	ldw	r17,0(r2)
 404c5c8:	20001926 	beq	r4,zero,404c630 <wcrtomb+0x94>
 404c5cc:	00808034 	movhi	r2,512
 404c5d0:	10886b04 	addi	r2,r2,8620
 404c5d4:	15000017 	ldw	r20,0(r2)
 404c5d8:	2021883a 	mov	r16,r4
 404c5dc:	2827883a 	mov	r19,r5
 404c5e0:	40489fc0 	call	40489fc <__locale_charset>
 404c5e4:	100f883a 	mov	r7,r2
 404c5e8:	dc800015 	stw	r18,0(sp)
 404c5ec:	980d883a 	mov	r6,r19
 404c5f0:	800b883a 	mov	r5,r16
 404c5f4:	8809883a 	mov	r4,r17
 404c5f8:	a03ee83a 	callr	r20
 404c5fc:	00ffffc4 	movi	r3,-1
 404c600:	10c0031e 	bne	r2,r3,404c610 <wcrtomb+0x74>
 404c604:	90000015 	stw	zero,0(r18)
 404c608:	00c02284 	movi	r3,138
 404c60c:	88c00015 	stw	r3,0(r17)
 404c610:	dfc00917 	ldw	ra,36(sp)
 404c614:	dd000817 	ldw	r20,32(sp)
 404c618:	dcc00717 	ldw	r19,28(sp)
 404c61c:	dc800617 	ldw	r18,24(sp)
 404c620:	dc400517 	ldw	r17,20(sp)
 404c624:	dc000417 	ldw	r16,16(sp)
 404c628:	dec00a04 	addi	sp,sp,40
 404c62c:	f800283a 	ret
 404c630:	00808034 	movhi	r2,512
 404c634:	10886b04 	addi	r2,r2,8620
 404c638:	14000017 	ldw	r16,0(r2)
 404c63c:	40489fc0 	call	40489fc <__locale_charset>
 404c640:	100f883a 	mov	r7,r2
 404c644:	dc800015 	stw	r18,0(sp)
 404c648:	000d883a 	mov	r6,zero
 404c64c:	d9400104 	addi	r5,sp,4
 404c650:	8809883a 	mov	r4,r17
 404c654:	803ee83a 	callr	r16
 404c658:	003fe806 	br	404c5fc <__flash_rwdata_start+0xffff1ecc>

0404c65c <__ascii_wctomb>:
 404c65c:	28000526 	beq	r5,zero,404c674 <__ascii_wctomb+0x18>
 404c660:	00803fc4 	movi	r2,255
 404c664:	11800536 	bltu	r2,r6,404c67c <__ascii_wctomb+0x20>
 404c668:	29800005 	stb	r6,0(r5)
 404c66c:	00800044 	movi	r2,1
 404c670:	f800283a 	ret
 404c674:	0005883a 	mov	r2,zero
 404c678:	f800283a 	ret
 404c67c:	00802284 	movi	r2,138
 404c680:	20800015 	stw	r2,0(r4)
 404c684:	00bfffc4 	movi	r2,-1
 404c688:	f800283a 	ret

0404c68c <_wctomb_r>:
 404c68c:	00808034 	movhi	r2,512
 404c690:	defff904 	addi	sp,sp,-28
 404c694:	10886b04 	addi	r2,r2,8620
 404c698:	dfc00615 	stw	ra,24(sp)
 404c69c:	dc400515 	stw	r17,20(sp)
 404c6a0:	dc000415 	stw	r16,16(sp)
 404c6a4:	3823883a 	mov	r17,r7
 404c6a8:	14000017 	ldw	r16,0(r2)
 404c6ac:	d9000115 	stw	r4,4(sp)
 404c6b0:	d9400215 	stw	r5,8(sp)
 404c6b4:	d9800315 	stw	r6,12(sp)
 404c6b8:	40489fc0 	call	40489fc <__locale_charset>
 404c6bc:	d9800317 	ldw	r6,12(sp)
 404c6c0:	d9400217 	ldw	r5,8(sp)
 404c6c4:	d9000117 	ldw	r4,4(sp)
 404c6c8:	100f883a 	mov	r7,r2
 404c6cc:	dc400015 	stw	r17,0(sp)
 404c6d0:	803ee83a 	callr	r16
 404c6d4:	dfc00617 	ldw	ra,24(sp)
 404c6d8:	dc400517 	ldw	r17,20(sp)
 404c6dc:	dc000417 	ldw	r16,16(sp)
 404c6e0:	dec00704 	addi	sp,sp,28
 404c6e4:	f800283a 	ret

0404c6e8 <__udivdi3>:
 404c6e8:	defff504 	addi	sp,sp,-44
 404c6ec:	dcc00415 	stw	r19,16(sp)
 404c6f0:	dc000115 	stw	r16,4(sp)
 404c6f4:	dfc00a15 	stw	ra,40(sp)
 404c6f8:	df000915 	stw	fp,36(sp)
 404c6fc:	ddc00815 	stw	r23,32(sp)
 404c700:	dd800715 	stw	r22,28(sp)
 404c704:	dd400615 	stw	r21,24(sp)
 404c708:	dd000515 	stw	r20,20(sp)
 404c70c:	dc800315 	stw	r18,12(sp)
 404c710:	dc400215 	stw	r17,8(sp)
 404c714:	2027883a 	mov	r19,r4
 404c718:	2821883a 	mov	r16,r5
 404c71c:	3800411e 	bne	r7,zero,404c824 <__udivdi3+0x13c>
 404c720:	3023883a 	mov	r17,r6
 404c724:	2025883a 	mov	r18,r4
 404c728:	2980522e 	bgeu	r5,r6,404c874 <__udivdi3+0x18c>
 404c72c:	00bfffd4 	movui	r2,65535
 404c730:	282d883a 	mov	r22,r5
 404c734:	1180a836 	bltu	r2,r6,404c9d8 <__udivdi3+0x2f0>
 404c738:	00803fc4 	movi	r2,255
 404c73c:	1185803a 	cmpltu	r2,r2,r6
 404c740:	100490fa 	slli	r2,r2,3
 404c744:	3086d83a 	srl	r3,r6,r2
 404c748:	01008034 	movhi	r4,512
 404c74c:	21010504 	addi	r4,r4,1044
 404c750:	20c7883a 	add	r3,r4,r3
 404c754:	18c00003 	ldbu	r3,0(r3)
 404c758:	1885883a 	add	r2,r3,r2
 404c75c:	00c00804 	movi	r3,32
 404c760:	1887c83a 	sub	r3,r3,r2
 404c764:	18000526 	beq	r3,zero,404c77c <__udivdi3+0x94>
 404c768:	80e0983a 	sll	r16,r16,r3
 404c76c:	9884d83a 	srl	r2,r19,r2
 404c770:	30e2983a 	sll	r17,r6,r3
 404c774:	98e4983a 	sll	r18,r19,r3
 404c778:	142cb03a 	or	r22,r2,r16
 404c77c:	882ad43a 	srli	r21,r17,16
 404c780:	b009883a 	mov	r4,r22
 404c784:	8d3fffcc 	andi	r20,r17,65535
 404c788:	a80b883a 	mov	r5,r21
 404c78c:	40430140 	call	4043014 <__umodsi3>
 404c790:	b009883a 	mov	r4,r22
 404c794:	a80b883a 	mov	r5,r21
 404c798:	1027883a 	mov	r19,r2
 404c79c:	4042fb00 	call	4042fb0 <__udivsi3>
 404c7a0:	102d883a 	mov	r22,r2
 404c7a4:	9826943a 	slli	r19,r19,16
 404c7a8:	9004d43a 	srli	r2,r18,16
 404c7ac:	a5a1383a 	mul	r16,r20,r22
 404c7b0:	14c4b03a 	or	r2,r2,r19
 404c7b4:	1400052e 	bgeu	r2,r16,404c7cc <__udivdi3+0xe4>
 404c7b8:	1445883a 	add	r2,r2,r17
 404c7bc:	b0ffffc4 	addi	r3,r22,-1
 404c7c0:	14400136 	bltu	r2,r17,404c7c8 <__udivdi3+0xe0>
 404c7c4:	14012336 	bltu	r2,r16,404cc54 <__udivdi3+0x56c>
 404c7c8:	182d883a 	mov	r22,r3
 404c7cc:	1421c83a 	sub	r16,r2,r16
 404c7d0:	a80b883a 	mov	r5,r21
 404c7d4:	8009883a 	mov	r4,r16
 404c7d8:	40430140 	call	4043014 <__umodsi3>
 404c7dc:	1027883a 	mov	r19,r2
 404c7e0:	a80b883a 	mov	r5,r21
 404c7e4:	8009883a 	mov	r4,r16
 404c7e8:	4042fb00 	call	4042fb0 <__udivsi3>
 404c7ec:	9826943a 	slli	r19,r19,16
 404c7f0:	a0a9383a 	mul	r20,r20,r2
 404c7f4:	94bfffcc 	andi	r18,r18,65535
 404c7f8:	94e4b03a 	or	r18,r18,r19
 404c7fc:	9500052e 	bgeu	r18,r20,404c814 <__udivdi3+0x12c>
 404c800:	8ca5883a 	add	r18,r17,r18
 404c804:	10ffffc4 	addi	r3,r2,-1
 404c808:	9440f136 	bltu	r18,r17,404cbd0 <__udivdi3+0x4e8>
 404c80c:	9500f02e 	bgeu	r18,r20,404cbd0 <__udivdi3+0x4e8>
 404c810:	10bfff84 	addi	r2,r2,-2
 404c814:	b00c943a 	slli	r6,r22,16
 404c818:	0007883a 	mov	r3,zero
 404c81c:	3084b03a 	or	r2,r6,r2
 404c820:	00005906 	br	404c988 <__udivdi3+0x2a0>
 404c824:	29c05636 	bltu	r5,r7,404c980 <__udivdi3+0x298>
 404c828:	00bfffd4 	movui	r2,65535
 404c82c:	11c0622e 	bgeu	r2,r7,404c9b8 <__udivdi3+0x2d0>
 404c830:	00804034 	movhi	r2,256
 404c834:	10bfffc4 	addi	r2,r2,-1
 404c838:	11c0ee36 	bltu	r2,r7,404cbf4 <__udivdi3+0x50c>
 404c83c:	00800404 	movi	r2,16
 404c840:	3886d83a 	srl	r3,r7,r2
 404c844:	01008034 	movhi	r4,512
 404c848:	21010504 	addi	r4,r4,1044
 404c84c:	20c7883a 	add	r3,r4,r3
 404c850:	18c00003 	ldbu	r3,0(r3)
 404c854:	05400804 	movi	r21,32
 404c858:	1885883a 	add	r2,r3,r2
 404c85c:	a8abc83a 	sub	r21,r21,r2
 404c860:	a800621e 	bne	r21,zero,404c9ec <__udivdi3+0x304>
 404c864:	3c00e936 	bltu	r7,r16,404cc0c <__udivdi3+0x524>
 404c868:	9985403a 	cmpgeu	r2,r19,r6
 404c86c:	0007883a 	mov	r3,zero
 404c870:	00004506 	br	404c988 <__udivdi3+0x2a0>
 404c874:	3000041e 	bne	r6,zero,404c888 <__udivdi3+0x1a0>
 404c878:	000b883a 	mov	r5,zero
 404c87c:	01000044 	movi	r4,1
 404c880:	4042fb00 	call	4042fb0 <__udivsi3>
 404c884:	1023883a 	mov	r17,r2
 404c888:	00bfffd4 	movui	r2,65535
 404c88c:	14404e2e 	bgeu	r2,r17,404c9c8 <__udivdi3+0x2e0>
 404c890:	00804034 	movhi	r2,256
 404c894:	10bfffc4 	addi	r2,r2,-1
 404c898:	1440d836 	bltu	r2,r17,404cbfc <__udivdi3+0x514>
 404c89c:	00800404 	movi	r2,16
 404c8a0:	8886d83a 	srl	r3,r17,r2
 404c8a4:	01008034 	movhi	r4,512
 404c8a8:	21010504 	addi	r4,r4,1044
 404c8ac:	20c7883a 	add	r3,r4,r3
 404c8b0:	18c00003 	ldbu	r3,0(r3)
 404c8b4:	1885883a 	add	r2,r3,r2
 404c8b8:	00c00804 	movi	r3,32
 404c8bc:	1887c83a 	sub	r3,r3,r2
 404c8c0:	18008f1e 	bne	r3,zero,404cb00 <__udivdi3+0x418>
 404c8c4:	882ad43a 	srli	r21,r17,16
 404c8c8:	8461c83a 	sub	r16,r16,r17
 404c8cc:	8d3fffcc 	andi	r20,r17,65535
 404c8d0:	00c00044 	movi	r3,1
 404c8d4:	8009883a 	mov	r4,r16
 404c8d8:	a80b883a 	mov	r5,r21
 404c8dc:	d8c00015 	stw	r3,0(sp)
 404c8e0:	40430140 	call	4043014 <__umodsi3>
 404c8e4:	8009883a 	mov	r4,r16
 404c8e8:	a80b883a 	mov	r5,r21
 404c8ec:	1027883a 	mov	r19,r2
 404c8f0:	4042fb00 	call	4042fb0 <__udivsi3>
 404c8f4:	9826943a 	slli	r19,r19,16
 404c8f8:	9008d43a 	srli	r4,r18,16
 404c8fc:	1521383a 	mul	r16,r2,r20
 404c900:	102d883a 	mov	r22,r2
 404c904:	24c8b03a 	or	r4,r4,r19
 404c908:	d8c00017 	ldw	r3,0(sp)
 404c90c:	2400052e 	bgeu	r4,r16,404c924 <__udivdi3+0x23c>
 404c910:	2449883a 	add	r4,r4,r17
 404c914:	b0bfffc4 	addi	r2,r22,-1
 404c918:	24400136 	bltu	r4,r17,404c920 <__udivdi3+0x238>
 404c91c:	2400ca36 	bltu	r4,r16,404cc48 <__udivdi3+0x560>
 404c920:	102d883a 	mov	r22,r2
 404c924:	2421c83a 	sub	r16,r4,r16
 404c928:	a80b883a 	mov	r5,r21
 404c92c:	8009883a 	mov	r4,r16
 404c930:	d8c00015 	stw	r3,0(sp)
 404c934:	40430140 	call	4043014 <__umodsi3>
 404c938:	1027883a 	mov	r19,r2
 404c93c:	a80b883a 	mov	r5,r21
 404c940:	8009883a 	mov	r4,r16
 404c944:	4042fb00 	call	4042fb0 <__udivsi3>
 404c948:	9826943a 	slli	r19,r19,16
 404c94c:	1529383a 	mul	r20,r2,r20
 404c950:	94bfffcc 	andi	r18,r18,65535
 404c954:	94e4b03a 	or	r18,r18,r19
 404c958:	d8c00017 	ldw	r3,0(sp)
 404c95c:	9500052e 	bgeu	r18,r20,404c974 <__udivdi3+0x28c>
 404c960:	8ca5883a 	add	r18,r17,r18
 404c964:	113fffc4 	addi	r4,r2,-1
 404c968:	94409736 	bltu	r18,r17,404cbc8 <__udivdi3+0x4e0>
 404c96c:	9500962e 	bgeu	r18,r20,404cbc8 <__udivdi3+0x4e0>
 404c970:	10bfff84 	addi	r2,r2,-2
 404c974:	b00c943a 	slli	r6,r22,16
 404c978:	3084b03a 	or	r2,r6,r2
 404c97c:	00000206 	br	404c988 <__udivdi3+0x2a0>
 404c980:	0007883a 	mov	r3,zero
 404c984:	0005883a 	mov	r2,zero
 404c988:	dfc00a17 	ldw	ra,40(sp)
 404c98c:	df000917 	ldw	fp,36(sp)
 404c990:	ddc00817 	ldw	r23,32(sp)
 404c994:	dd800717 	ldw	r22,28(sp)
 404c998:	dd400617 	ldw	r21,24(sp)
 404c99c:	dd000517 	ldw	r20,20(sp)
 404c9a0:	dcc00417 	ldw	r19,16(sp)
 404c9a4:	dc800317 	ldw	r18,12(sp)
 404c9a8:	dc400217 	ldw	r17,8(sp)
 404c9ac:	dc000117 	ldw	r16,4(sp)
 404c9b0:	dec00b04 	addi	sp,sp,44
 404c9b4:	f800283a 	ret
 404c9b8:	00803fc4 	movi	r2,255
 404c9bc:	11c5803a 	cmpltu	r2,r2,r7
 404c9c0:	100490fa 	slli	r2,r2,3
 404c9c4:	003f9e06 	br	404c840 <__flash_rwdata_start+0xffff2110>
 404c9c8:	00803fc4 	movi	r2,255
 404c9cc:	1445803a 	cmpltu	r2,r2,r17
 404c9d0:	100490fa 	slli	r2,r2,3
 404c9d4:	003fb206 	br	404c8a0 <__flash_rwdata_start+0xffff2170>
 404c9d8:	00804034 	movhi	r2,256
 404c9dc:	10bfffc4 	addi	r2,r2,-1
 404c9e0:	11808836 	bltu	r2,r6,404cc04 <__udivdi3+0x51c>
 404c9e4:	00800404 	movi	r2,16
 404c9e8:	003f5606 	br	404c744 <__flash_rwdata_start+0xffff2014>
 404c9ec:	30aed83a 	srl	r23,r6,r2
 404c9f0:	3d4e983a 	sll	r7,r7,r21
 404c9f4:	80acd83a 	srl	r22,r16,r2
 404c9f8:	9884d83a 	srl	r2,r19,r2
 404c9fc:	3deeb03a 	or	r23,r7,r23
 404ca00:	b824d43a 	srli	r18,r23,16
 404ca04:	8560983a 	sll	r16,r16,r21
 404ca08:	b009883a 	mov	r4,r22
 404ca0c:	900b883a 	mov	r5,r18
 404ca10:	3568983a 	sll	r20,r6,r21
 404ca14:	1420b03a 	or	r16,r2,r16
 404ca18:	40430140 	call	4043014 <__umodsi3>
 404ca1c:	b009883a 	mov	r4,r22
 404ca20:	900b883a 	mov	r5,r18
 404ca24:	1023883a 	mov	r17,r2
 404ca28:	4042fb00 	call	4042fb0 <__udivsi3>
 404ca2c:	8808943a 	slli	r4,r17,16
 404ca30:	bf3fffcc 	andi	fp,r23,65535
 404ca34:	8006d43a 	srli	r3,r16,16
 404ca38:	e0a3383a 	mul	r17,fp,r2
 404ca3c:	100d883a 	mov	r6,r2
 404ca40:	1906b03a 	or	r3,r3,r4
 404ca44:	1c40042e 	bgeu	r3,r17,404ca58 <__udivdi3+0x370>
 404ca48:	1dc7883a 	add	r3,r3,r23
 404ca4c:	10bfffc4 	addi	r2,r2,-1
 404ca50:	1dc0752e 	bgeu	r3,r23,404cc28 <__udivdi3+0x540>
 404ca54:	100d883a 	mov	r6,r2
 404ca58:	1c63c83a 	sub	r17,r3,r17
 404ca5c:	900b883a 	mov	r5,r18
 404ca60:	8809883a 	mov	r4,r17
 404ca64:	d9800015 	stw	r6,0(sp)
 404ca68:	40430140 	call	4043014 <__umodsi3>
 404ca6c:	102d883a 	mov	r22,r2
 404ca70:	8809883a 	mov	r4,r17
 404ca74:	900b883a 	mov	r5,r18
 404ca78:	4042fb00 	call	4042fb0 <__udivsi3>
 404ca7c:	b02c943a 	slli	r22,r22,16
 404ca80:	e089383a 	mul	r4,fp,r2
 404ca84:	843fffcc 	andi	r16,r16,65535
 404ca88:	85a0b03a 	or	r16,r16,r22
 404ca8c:	d9800017 	ldw	r6,0(sp)
 404ca90:	8100042e 	bgeu	r16,r4,404caa4 <__udivdi3+0x3bc>
 404ca94:	85e1883a 	add	r16,r16,r23
 404ca98:	10ffffc4 	addi	r3,r2,-1
 404ca9c:	85c05e2e 	bgeu	r16,r23,404cc18 <__udivdi3+0x530>
 404caa0:	1805883a 	mov	r2,r3
 404caa4:	300c943a 	slli	r6,r6,16
 404caa8:	a17fffcc 	andi	r5,r20,65535
 404caac:	a028d43a 	srli	r20,r20,16
 404cab0:	3084b03a 	or	r2,r6,r2
 404cab4:	10ffffcc 	andi	r3,r2,65535
 404cab8:	100cd43a 	srli	r6,r2,16
 404cabc:	194f383a 	mul	r7,r3,r5
 404cac0:	1d07383a 	mul	r3,r3,r20
 404cac4:	314b383a 	mul	r5,r6,r5
 404cac8:	3810d43a 	srli	r8,r7,16
 404cacc:	8121c83a 	sub	r16,r16,r4
 404cad0:	1947883a 	add	r3,r3,r5
 404cad4:	40c7883a 	add	r3,r8,r3
 404cad8:	350d383a 	mul	r6,r6,r20
 404cadc:	1940022e 	bgeu	r3,r5,404cae8 <__udivdi3+0x400>
 404cae0:	01000074 	movhi	r4,1
 404cae4:	310d883a 	add	r6,r6,r4
 404cae8:	1828d43a 	srli	r20,r3,16
 404caec:	a18d883a 	add	r6,r20,r6
 404caf0:	81803e36 	bltu	r16,r6,404cbec <__udivdi3+0x504>
 404caf4:	81803826 	beq	r16,r6,404cbd8 <__udivdi3+0x4f0>
 404caf8:	0007883a 	mov	r3,zero
 404cafc:	003fa206 	br	404c988 <__flash_rwdata_start+0xffff2258>
 404cb00:	88e2983a 	sll	r17,r17,r3
 404cb04:	80a8d83a 	srl	r20,r16,r2
 404cb08:	80e0983a 	sll	r16,r16,r3
 404cb0c:	882ad43a 	srli	r21,r17,16
 404cb10:	9884d83a 	srl	r2,r19,r2
 404cb14:	a009883a 	mov	r4,r20
 404cb18:	a80b883a 	mov	r5,r21
 404cb1c:	142eb03a 	or	r23,r2,r16
 404cb20:	98e4983a 	sll	r18,r19,r3
 404cb24:	40430140 	call	4043014 <__umodsi3>
 404cb28:	a009883a 	mov	r4,r20
 404cb2c:	a80b883a 	mov	r5,r21
 404cb30:	1021883a 	mov	r16,r2
 404cb34:	4042fb00 	call	4042fb0 <__udivsi3>
 404cb38:	1039883a 	mov	fp,r2
 404cb3c:	8d3fffcc 	andi	r20,r17,65535
 404cb40:	8020943a 	slli	r16,r16,16
 404cb44:	b804d43a 	srli	r2,r23,16
 404cb48:	a72d383a 	mul	r22,r20,fp
 404cb4c:	1404b03a 	or	r2,r2,r16
 404cb50:	1580062e 	bgeu	r2,r22,404cb6c <__udivdi3+0x484>
 404cb54:	1445883a 	add	r2,r2,r17
 404cb58:	e0ffffc4 	addi	r3,fp,-1
 404cb5c:	14403836 	bltu	r2,r17,404cc40 <__udivdi3+0x558>
 404cb60:	1580372e 	bgeu	r2,r22,404cc40 <__udivdi3+0x558>
 404cb64:	e73fff84 	addi	fp,fp,-2
 404cb68:	1445883a 	add	r2,r2,r17
 404cb6c:	15adc83a 	sub	r22,r2,r22
 404cb70:	a80b883a 	mov	r5,r21
 404cb74:	b009883a 	mov	r4,r22
 404cb78:	40430140 	call	4043014 <__umodsi3>
 404cb7c:	1027883a 	mov	r19,r2
 404cb80:	b009883a 	mov	r4,r22
 404cb84:	a80b883a 	mov	r5,r21
 404cb88:	4042fb00 	call	4042fb0 <__udivsi3>
 404cb8c:	9826943a 	slli	r19,r19,16
 404cb90:	a0a1383a 	mul	r16,r20,r2
 404cb94:	b93fffcc 	andi	r4,r23,65535
 404cb98:	24c8b03a 	or	r4,r4,r19
 404cb9c:	2400062e 	bgeu	r4,r16,404cbb8 <__udivdi3+0x4d0>
 404cba0:	2449883a 	add	r4,r4,r17
 404cba4:	10ffffc4 	addi	r3,r2,-1
 404cba8:	24402336 	bltu	r4,r17,404cc38 <__udivdi3+0x550>
 404cbac:	2400222e 	bgeu	r4,r16,404cc38 <__udivdi3+0x550>
 404cbb0:	10bfff84 	addi	r2,r2,-2
 404cbb4:	2449883a 	add	r4,r4,r17
 404cbb8:	e038943a 	slli	fp,fp,16
 404cbbc:	2421c83a 	sub	r16,r4,r16
 404cbc0:	e086b03a 	or	r3,fp,r2
 404cbc4:	003f4306 	br	404c8d4 <__flash_rwdata_start+0xffff21a4>
 404cbc8:	2005883a 	mov	r2,r4
 404cbcc:	003f6906 	br	404c974 <__flash_rwdata_start+0xffff2244>
 404cbd0:	1805883a 	mov	r2,r3
 404cbd4:	003f0f06 	br	404c814 <__flash_rwdata_start+0xffff20e4>
 404cbd8:	1806943a 	slli	r3,r3,16
 404cbdc:	9d66983a 	sll	r19,r19,r21
 404cbe0:	39ffffcc 	andi	r7,r7,65535
 404cbe4:	19c7883a 	add	r3,r3,r7
 404cbe8:	98ffc32e 	bgeu	r19,r3,404caf8 <__flash_rwdata_start+0xffff23c8>
 404cbec:	10bfffc4 	addi	r2,r2,-1
 404cbf0:	003fc106 	br	404caf8 <__flash_rwdata_start+0xffff23c8>
 404cbf4:	00800604 	movi	r2,24
 404cbf8:	003f1106 	br	404c840 <__flash_rwdata_start+0xffff2110>
 404cbfc:	00800604 	movi	r2,24
 404cc00:	003f2706 	br	404c8a0 <__flash_rwdata_start+0xffff2170>
 404cc04:	00800604 	movi	r2,24
 404cc08:	003ece06 	br	404c744 <__flash_rwdata_start+0xffff2014>
 404cc0c:	0007883a 	mov	r3,zero
 404cc10:	00800044 	movi	r2,1
 404cc14:	003f5c06 	br	404c988 <__flash_rwdata_start+0xffff2258>
 404cc18:	813fa12e 	bgeu	r16,r4,404caa0 <__flash_rwdata_start+0xffff2370>
 404cc1c:	10bfff84 	addi	r2,r2,-2
 404cc20:	85e1883a 	add	r16,r16,r23
 404cc24:	003f9f06 	br	404caa4 <__flash_rwdata_start+0xffff2374>
 404cc28:	1c7f8a2e 	bgeu	r3,r17,404ca54 <__flash_rwdata_start+0xffff2324>
 404cc2c:	31bfff84 	addi	r6,r6,-2
 404cc30:	1dc7883a 	add	r3,r3,r23
 404cc34:	003f8806 	br	404ca58 <__flash_rwdata_start+0xffff2328>
 404cc38:	1805883a 	mov	r2,r3
 404cc3c:	003fde06 	br	404cbb8 <__flash_rwdata_start+0xffff2488>
 404cc40:	1839883a 	mov	fp,r3
 404cc44:	003fc906 	br	404cb6c <__flash_rwdata_start+0xffff243c>
 404cc48:	b5bfff84 	addi	r22,r22,-2
 404cc4c:	2449883a 	add	r4,r4,r17
 404cc50:	003f3406 	br	404c924 <__flash_rwdata_start+0xffff21f4>
 404cc54:	b5bfff84 	addi	r22,r22,-2
 404cc58:	1445883a 	add	r2,r2,r17
 404cc5c:	003edb06 	br	404c7cc <__flash_rwdata_start+0xffff209c>

0404cc60 <__umoddi3>:
 404cc60:	defff404 	addi	sp,sp,-48
 404cc64:	df000a15 	stw	fp,40(sp)
 404cc68:	dc400315 	stw	r17,12(sp)
 404cc6c:	dc000215 	stw	r16,8(sp)
 404cc70:	dfc00b15 	stw	ra,44(sp)
 404cc74:	ddc00915 	stw	r23,36(sp)
 404cc78:	dd800815 	stw	r22,32(sp)
 404cc7c:	dd400715 	stw	r21,28(sp)
 404cc80:	dd000615 	stw	r20,24(sp)
 404cc84:	dcc00515 	stw	r19,20(sp)
 404cc88:	dc800415 	stw	r18,16(sp)
 404cc8c:	2021883a 	mov	r16,r4
 404cc90:	2823883a 	mov	r17,r5
 404cc94:	2839883a 	mov	fp,r5
 404cc98:	38003c1e 	bne	r7,zero,404cd8c <__umoddi3+0x12c>
 404cc9c:	3027883a 	mov	r19,r6
 404cca0:	2029883a 	mov	r20,r4
 404cca4:	2980512e 	bgeu	r5,r6,404cdec <__umoddi3+0x18c>
 404cca8:	00bfffd4 	movui	r2,65535
 404ccac:	11809a36 	bltu	r2,r6,404cf18 <__umoddi3+0x2b8>
 404ccb0:	01003fc4 	movi	r4,255
 404ccb4:	2189803a 	cmpltu	r4,r4,r6
 404ccb8:	200890fa 	slli	r4,r4,3
 404ccbc:	3104d83a 	srl	r2,r6,r4
 404ccc0:	00c08034 	movhi	r3,512
 404ccc4:	18c10504 	addi	r3,r3,1044
 404ccc8:	1885883a 	add	r2,r3,r2
 404cccc:	10c00003 	ldbu	r3,0(r2)
 404ccd0:	00800804 	movi	r2,32
 404ccd4:	1909883a 	add	r4,r3,r4
 404ccd8:	1125c83a 	sub	r18,r2,r4
 404ccdc:	90000526 	beq	r18,zero,404ccf4 <__umoddi3+0x94>
 404cce0:	8ca2983a 	sll	r17,r17,r18
 404cce4:	8108d83a 	srl	r4,r16,r4
 404cce8:	34a6983a 	sll	r19,r6,r18
 404ccec:	84a8983a 	sll	r20,r16,r18
 404ccf0:	2478b03a 	or	fp,r4,r17
 404ccf4:	982ed43a 	srli	r23,r19,16
 404ccf8:	e009883a 	mov	r4,fp
 404ccfc:	9dbfffcc 	andi	r22,r19,65535
 404cd00:	b80b883a 	mov	r5,r23
 404cd04:	40430140 	call	4043014 <__umodsi3>
 404cd08:	e009883a 	mov	r4,fp
 404cd0c:	b80b883a 	mov	r5,r23
 404cd10:	102b883a 	mov	r21,r2
 404cd14:	4042fb00 	call	4042fb0 <__udivsi3>
 404cd18:	a806943a 	slli	r3,r21,16
 404cd1c:	a008d43a 	srli	r4,r20,16
 404cd20:	b085383a 	mul	r2,r22,r2
 404cd24:	20c8b03a 	or	r4,r4,r3
 404cd28:	2080032e 	bgeu	r4,r2,404cd38 <__umoddi3+0xd8>
 404cd2c:	24c9883a 	add	r4,r4,r19
 404cd30:	24c00136 	bltu	r4,r19,404cd38 <__umoddi3+0xd8>
 404cd34:	20811036 	bltu	r4,r2,404d178 <__umoddi3+0x518>
 404cd38:	20abc83a 	sub	r21,r4,r2
 404cd3c:	b80b883a 	mov	r5,r23
 404cd40:	a809883a 	mov	r4,r21
 404cd44:	40430140 	call	4043014 <__umodsi3>
 404cd48:	1023883a 	mov	r17,r2
 404cd4c:	b80b883a 	mov	r5,r23
 404cd50:	a809883a 	mov	r4,r21
 404cd54:	4042fb00 	call	4042fb0 <__udivsi3>
 404cd58:	8822943a 	slli	r17,r17,16
 404cd5c:	b085383a 	mul	r2,r22,r2
 404cd60:	a0ffffcc 	andi	r3,r20,65535
 404cd64:	1c46b03a 	or	r3,r3,r17
 404cd68:	1880042e 	bgeu	r3,r2,404cd7c <__umoddi3+0x11c>
 404cd6c:	1cc7883a 	add	r3,r3,r19
 404cd70:	1cc00236 	bltu	r3,r19,404cd7c <__umoddi3+0x11c>
 404cd74:	1880012e 	bgeu	r3,r2,404cd7c <__umoddi3+0x11c>
 404cd78:	1cc7883a 	add	r3,r3,r19
 404cd7c:	1885c83a 	sub	r2,r3,r2
 404cd80:	1484d83a 	srl	r2,r2,r18
 404cd84:	0007883a 	mov	r3,zero
 404cd88:	00004f06 	br	404cec8 <__umoddi3+0x268>
 404cd8c:	29c04c36 	bltu	r5,r7,404cec0 <__umoddi3+0x260>
 404cd90:	00bfffd4 	movui	r2,65535
 404cd94:	11c0582e 	bgeu	r2,r7,404cef8 <__umoddi3+0x298>
 404cd98:	00804034 	movhi	r2,256
 404cd9c:	10bfffc4 	addi	r2,r2,-1
 404cda0:	11c0e736 	bltu	r2,r7,404d140 <__umoddi3+0x4e0>
 404cda4:	01000404 	movi	r4,16
 404cda8:	3904d83a 	srl	r2,r7,r4
 404cdac:	00c08034 	movhi	r3,512
 404cdb0:	18c10504 	addi	r3,r3,1044
 404cdb4:	1885883a 	add	r2,r3,r2
 404cdb8:	14c00003 	ldbu	r19,0(r2)
 404cdbc:	00c00804 	movi	r3,32
 404cdc0:	9927883a 	add	r19,r19,r4
 404cdc4:	1ce9c83a 	sub	r20,r3,r19
 404cdc8:	a000581e 	bne	r20,zero,404cf2c <__umoddi3+0x2cc>
 404cdcc:	3c400136 	bltu	r7,r17,404cdd4 <__umoddi3+0x174>
 404cdd0:	8180eb36 	bltu	r16,r6,404d180 <__umoddi3+0x520>
 404cdd4:	8185c83a 	sub	r2,r16,r6
 404cdd8:	89e3c83a 	sub	r17,r17,r7
 404cddc:	8089803a 	cmpltu	r4,r16,r2
 404cde0:	8939c83a 	sub	fp,r17,r4
 404cde4:	e007883a 	mov	r3,fp
 404cde8:	00003706 	br	404cec8 <__umoddi3+0x268>
 404cdec:	3000041e 	bne	r6,zero,404ce00 <__umoddi3+0x1a0>
 404cdf0:	000b883a 	mov	r5,zero
 404cdf4:	01000044 	movi	r4,1
 404cdf8:	4042fb00 	call	4042fb0 <__udivsi3>
 404cdfc:	1027883a 	mov	r19,r2
 404ce00:	00bfffd4 	movui	r2,65535
 404ce04:	14c0402e 	bgeu	r2,r19,404cf08 <__umoddi3+0x2a8>
 404ce08:	00804034 	movhi	r2,256
 404ce0c:	10bfffc4 	addi	r2,r2,-1
 404ce10:	14c0cd36 	bltu	r2,r19,404d148 <__umoddi3+0x4e8>
 404ce14:	00800404 	movi	r2,16
 404ce18:	9886d83a 	srl	r3,r19,r2
 404ce1c:	01008034 	movhi	r4,512
 404ce20:	21010504 	addi	r4,r4,1044
 404ce24:	20c7883a 	add	r3,r4,r3
 404ce28:	18c00003 	ldbu	r3,0(r3)
 404ce2c:	1887883a 	add	r3,r3,r2
 404ce30:	00800804 	movi	r2,32
 404ce34:	10e5c83a 	sub	r18,r2,r3
 404ce38:	9000901e 	bne	r18,zero,404d07c <__umoddi3+0x41c>
 404ce3c:	982cd43a 	srli	r22,r19,16
 404ce40:	8ce3c83a 	sub	r17,r17,r19
 404ce44:	9d7fffcc 	andi	r21,r19,65535
 404ce48:	b00b883a 	mov	r5,r22
 404ce4c:	8809883a 	mov	r4,r17
 404ce50:	40430140 	call	4043014 <__umodsi3>
 404ce54:	8809883a 	mov	r4,r17
 404ce58:	b00b883a 	mov	r5,r22
 404ce5c:	1021883a 	mov	r16,r2
 404ce60:	4042fb00 	call	4042fb0 <__udivsi3>
 404ce64:	8006943a 	slli	r3,r16,16
 404ce68:	a008d43a 	srli	r4,r20,16
 404ce6c:	1545383a 	mul	r2,r2,r21
 404ce70:	20c8b03a 	or	r4,r4,r3
 404ce74:	2080042e 	bgeu	r4,r2,404ce88 <__umoddi3+0x228>
 404ce78:	24c9883a 	add	r4,r4,r19
 404ce7c:	24c00236 	bltu	r4,r19,404ce88 <__umoddi3+0x228>
 404ce80:	2080012e 	bgeu	r4,r2,404ce88 <__umoddi3+0x228>
 404ce84:	24c9883a 	add	r4,r4,r19
 404ce88:	20a1c83a 	sub	r16,r4,r2
 404ce8c:	b00b883a 	mov	r5,r22
 404ce90:	8009883a 	mov	r4,r16
 404ce94:	40430140 	call	4043014 <__umodsi3>
 404ce98:	1023883a 	mov	r17,r2
 404ce9c:	b00b883a 	mov	r5,r22
 404cea0:	8009883a 	mov	r4,r16
 404cea4:	4042fb00 	call	4042fb0 <__udivsi3>
 404cea8:	8822943a 	slli	r17,r17,16
 404ceac:	1545383a 	mul	r2,r2,r21
 404ceb0:	a53fffcc 	andi	r20,r20,65535
 404ceb4:	a446b03a 	or	r3,r20,r17
 404ceb8:	18bfb02e 	bgeu	r3,r2,404cd7c <__flash_rwdata_start+0xffff264c>
 404cebc:	003fab06 	br	404cd6c <__flash_rwdata_start+0xffff263c>
 404cec0:	2005883a 	mov	r2,r4
 404cec4:	2807883a 	mov	r3,r5
 404cec8:	dfc00b17 	ldw	ra,44(sp)
 404cecc:	df000a17 	ldw	fp,40(sp)
 404ced0:	ddc00917 	ldw	r23,36(sp)
 404ced4:	dd800817 	ldw	r22,32(sp)
 404ced8:	dd400717 	ldw	r21,28(sp)
 404cedc:	dd000617 	ldw	r20,24(sp)
 404cee0:	dcc00517 	ldw	r19,20(sp)
 404cee4:	dc800417 	ldw	r18,16(sp)
 404cee8:	dc400317 	ldw	r17,12(sp)
 404ceec:	dc000217 	ldw	r16,8(sp)
 404cef0:	dec00c04 	addi	sp,sp,48
 404cef4:	f800283a 	ret
 404cef8:	04c03fc4 	movi	r19,255
 404cefc:	99c9803a 	cmpltu	r4,r19,r7
 404cf00:	200890fa 	slli	r4,r4,3
 404cf04:	003fa806 	br	404cda8 <__flash_rwdata_start+0xffff2678>
 404cf08:	00803fc4 	movi	r2,255
 404cf0c:	14c5803a 	cmpltu	r2,r2,r19
 404cf10:	100490fa 	slli	r2,r2,3
 404cf14:	003fc006 	br	404ce18 <__flash_rwdata_start+0xffff26e8>
 404cf18:	00804034 	movhi	r2,256
 404cf1c:	10bfffc4 	addi	r2,r2,-1
 404cf20:	11808b36 	bltu	r2,r6,404d150 <__umoddi3+0x4f0>
 404cf24:	01000404 	movi	r4,16
 404cf28:	003f6406 	br	404ccbc <__flash_rwdata_start+0xffff258c>
 404cf2c:	34c4d83a 	srl	r2,r6,r19
 404cf30:	3d0e983a 	sll	r7,r7,r20
 404cf34:	8cf8d83a 	srl	fp,r17,r19
 404cf38:	8d10983a 	sll	r8,r17,r20
 404cf3c:	38aab03a 	or	r21,r7,r2
 404cf40:	a82cd43a 	srli	r22,r21,16
 404cf44:	84e2d83a 	srl	r17,r16,r19
 404cf48:	e009883a 	mov	r4,fp
 404cf4c:	b00b883a 	mov	r5,r22
 404cf50:	8a22b03a 	or	r17,r17,r8
 404cf54:	3524983a 	sll	r18,r6,r20
 404cf58:	40430140 	call	4043014 <__umodsi3>
 404cf5c:	e009883a 	mov	r4,fp
 404cf60:	b00b883a 	mov	r5,r22
 404cf64:	102f883a 	mov	r23,r2
 404cf68:	4042fb00 	call	4042fb0 <__udivsi3>
 404cf6c:	100d883a 	mov	r6,r2
 404cf70:	b808943a 	slli	r4,r23,16
 404cf74:	aa3fffcc 	andi	r8,r21,65535
 404cf78:	8804d43a 	srli	r2,r17,16
 404cf7c:	41af383a 	mul	r23,r8,r6
 404cf80:	8520983a 	sll	r16,r16,r20
 404cf84:	1104b03a 	or	r2,r2,r4
 404cf88:	15c0042e 	bgeu	r2,r23,404cf9c <__umoddi3+0x33c>
 404cf8c:	1545883a 	add	r2,r2,r21
 404cf90:	30ffffc4 	addi	r3,r6,-1
 404cf94:	1540742e 	bgeu	r2,r21,404d168 <__umoddi3+0x508>
 404cf98:	180d883a 	mov	r6,r3
 404cf9c:	15efc83a 	sub	r23,r2,r23
 404cfa0:	b00b883a 	mov	r5,r22
 404cfa4:	b809883a 	mov	r4,r23
 404cfa8:	d9800115 	stw	r6,4(sp)
 404cfac:	da000015 	stw	r8,0(sp)
 404cfb0:	40430140 	call	4043014 <__umodsi3>
 404cfb4:	b00b883a 	mov	r5,r22
 404cfb8:	b809883a 	mov	r4,r23
 404cfbc:	1039883a 	mov	fp,r2
 404cfc0:	4042fb00 	call	4042fb0 <__udivsi3>
 404cfc4:	da000017 	ldw	r8,0(sp)
 404cfc8:	e038943a 	slli	fp,fp,16
 404cfcc:	100b883a 	mov	r5,r2
 404cfd0:	4089383a 	mul	r4,r8,r2
 404cfd4:	8a3fffcc 	andi	r8,r17,65535
 404cfd8:	4710b03a 	or	r8,r8,fp
 404cfdc:	d9800117 	ldw	r6,4(sp)
 404cfe0:	4100042e 	bgeu	r8,r4,404cff4 <__umoddi3+0x394>
 404cfe4:	4551883a 	add	r8,r8,r21
 404cfe8:	10bfffc4 	addi	r2,r2,-1
 404cfec:	45405a2e 	bgeu	r8,r21,404d158 <__umoddi3+0x4f8>
 404cff0:	100b883a 	mov	r5,r2
 404cff4:	300c943a 	slli	r6,r6,16
 404cff8:	91ffffcc 	andi	r7,r18,65535
 404cffc:	9004d43a 	srli	r2,r18,16
 404d000:	314cb03a 	or	r6,r6,r5
 404d004:	317fffcc 	andi	r5,r6,65535
 404d008:	300cd43a 	srli	r6,r6,16
 404d00c:	29d3383a 	mul	r9,r5,r7
 404d010:	288b383a 	mul	r5,r5,r2
 404d014:	31cf383a 	mul	r7,r6,r7
 404d018:	4806d43a 	srli	r3,r9,16
 404d01c:	4111c83a 	sub	r8,r8,r4
 404d020:	29cb883a 	add	r5,r5,r7
 404d024:	194b883a 	add	r5,r3,r5
 404d028:	3085383a 	mul	r2,r6,r2
 404d02c:	29c0022e 	bgeu	r5,r7,404d038 <__umoddi3+0x3d8>
 404d030:	00c00074 	movhi	r3,1
 404d034:	10c5883a 	add	r2,r2,r3
 404d038:	2808d43a 	srli	r4,r5,16
 404d03c:	280a943a 	slli	r5,r5,16
 404d040:	4a7fffcc 	andi	r9,r9,65535
 404d044:	2085883a 	add	r2,r4,r2
 404d048:	2a4b883a 	add	r5,r5,r9
 404d04c:	40803636 	bltu	r8,r2,404d128 <__umoddi3+0x4c8>
 404d050:	40804d26 	beq	r8,r2,404d188 <__umoddi3+0x528>
 404d054:	4089c83a 	sub	r4,r8,r2
 404d058:	280f883a 	mov	r7,r5
 404d05c:	81cfc83a 	sub	r7,r16,r7
 404d060:	81c7803a 	cmpltu	r3,r16,r7
 404d064:	20c7c83a 	sub	r3,r4,r3
 404d068:	1cc4983a 	sll	r2,r3,r19
 404d06c:	3d0ed83a 	srl	r7,r7,r20
 404d070:	1d06d83a 	srl	r3,r3,r20
 404d074:	11c4b03a 	or	r2,r2,r7
 404d078:	003f9306 	br	404cec8 <__flash_rwdata_start+0xffff2798>
 404d07c:	9ca6983a 	sll	r19,r19,r18
 404d080:	88e8d83a 	srl	r20,r17,r3
 404d084:	80c4d83a 	srl	r2,r16,r3
 404d088:	982cd43a 	srli	r22,r19,16
 404d08c:	8ca2983a 	sll	r17,r17,r18
 404d090:	a009883a 	mov	r4,r20
 404d094:	b00b883a 	mov	r5,r22
 404d098:	1478b03a 	or	fp,r2,r17
 404d09c:	40430140 	call	4043014 <__umodsi3>
 404d0a0:	a009883a 	mov	r4,r20
 404d0a4:	b00b883a 	mov	r5,r22
 404d0a8:	1023883a 	mov	r17,r2
 404d0ac:	4042fb00 	call	4042fb0 <__udivsi3>
 404d0b0:	9d7fffcc 	andi	r21,r19,65535
 404d0b4:	880a943a 	slli	r5,r17,16
 404d0b8:	e008d43a 	srli	r4,fp,16
 404d0bc:	a885383a 	mul	r2,r21,r2
 404d0c0:	84a8983a 	sll	r20,r16,r18
 404d0c4:	2148b03a 	or	r4,r4,r5
 404d0c8:	2080042e 	bgeu	r4,r2,404d0dc <__umoddi3+0x47c>
 404d0cc:	24c9883a 	add	r4,r4,r19
 404d0d0:	24c00236 	bltu	r4,r19,404d0dc <__umoddi3+0x47c>
 404d0d4:	2080012e 	bgeu	r4,r2,404d0dc <__umoddi3+0x47c>
 404d0d8:	24c9883a 	add	r4,r4,r19
 404d0dc:	20a3c83a 	sub	r17,r4,r2
 404d0e0:	b00b883a 	mov	r5,r22
 404d0e4:	8809883a 	mov	r4,r17
 404d0e8:	40430140 	call	4043014 <__umodsi3>
 404d0ec:	102f883a 	mov	r23,r2
 404d0f0:	8809883a 	mov	r4,r17
 404d0f4:	b00b883a 	mov	r5,r22
 404d0f8:	4042fb00 	call	4042fb0 <__udivsi3>
 404d0fc:	b82e943a 	slli	r23,r23,16
 404d100:	a885383a 	mul	r2,r21,r2
 404d104:	e13fffcc 	andi	r4,fp,65535
 404d108:	25c8b03a 	or	r4,r4,r23
 404d10c:	2080042e 	bgeu	r4,r2,404d120 <__umoddi3+0x4c0>
 404d110:	24c9883a 	add	r4,r4,r19
 404d114:	24c00236 	bltu	r4,r19,404d120 <__umoddi3+0x4c0>
 404d118:	2080012e 	bgeu	r4,r2,404d120 <__umoddi3+0x4c0>
 404d11c:	24c9883a 	add	r4,r4,r19
 404d120:	20a3c83a 	sub	r17,r4,r2
 404d124:	003f4806 	br	404ce48 <__flash_rwdata_start+0xffff2718>
 404d128:	2c8fc83a 	sub	r7,r5,r18
 404d12c:	1545c83a 	sub	r2,r2,r21
 404d130:	29cb803a 	cmpltu	r5,r5,r7
 404d134:	1145c83a 	sub	r2,r2,r5
 404d138:	4089c83a 	sub	r4,r8,r2
 404d13c:	003fc706 	br	404d05c <__flash_rwdata_start+0xffff292c>
 404d140:	01000604 	movi	r4,24
 404d144:	003f1806 	br	404cda8 <__flash_rwdata_start+0xffff2678>
 404d148:	00800604 	movi	r2,24
 404d14c:	003f3206 	br	404ce18 <__flash_rwdata_start+0xffff26e8>
 404d150:	01000604 	movi	r4,24
 404d154:	003ed906 	br	404ccbc <__flash_rwdata_start+0xffff258c>
 404d158:	413fa52e 	bgeu	r8,r4,404cff0 <__flash_rwdata_start+0xffff28c0>
 404d15c:	297fff84 	addi	r5,r5,-2
 404d160:	4551883a 	add	r8,r8,r21
 404d164:	003fa306 	br	404cff4 <__flash_rwdata_start+0xffff28c4>
 404d168:	15ff8b2e 	bgeu	r2,r23,404cf98 <__flash_rwdata_start+0xffff2868>
 404d16c:	31bfff84 	addi	r6,r6,-2
 404d170:	1545883a 	add	r2,r2,r21
 404d174:	003f8906 	br	404cf9c <__flash_rwdata_start+0xffff286c>
 404d178:	24c9883a 	add	r4,r4,r19
 404d17c:	003eee06 	br	404cd38 <__flash_rwdata_start+0xffff2608>
 404d180:	8005883a 	mov	r2,r16
 404d184:	003f1706 	br	404cde4 <__flash_rwdata_start+0xffff26b4>
 404d188:	817fe736 	bltu	r16,r5,404d128 <__flash_rwdata_start+0xffff29f8>
 404d18c:	280f883a 	mov	r7,r5
 404d190:	0009883a 	mov	r4,zero
 404d194:	003fb106 	br	404d05c <__flash_rwdata_start+0xffff292c>

0404d198 <__adddf3>:
 404d198:	02c00434 	movhi	r11,16
 404d19c:	5affffc4 	addi	r11,r11,-1
 404d1a0:	2806d7fa 	srli	r3,r5,31
 404d1a4:	2ad4703a 	and	r10,r5,r11
 404d1a8:	3ad2703a 	and	r9,r7,r11
 404d1ac:	3804d53a 	srli	r2,r7,20
 404d1b0:	3018d77a 	srli	r12,r6,29
 404d1b4:	280ad53a 	srli	r5,r5,20
 404d1b8:	501490fa 	slli	r10,r10,3
 404d1bc:	2010d77a 	srli	r8,r4,29
 404d1c0:	481290fa 	slli	r9,r9,3
 404d1c4:	380ed7fa 	srli	r7,r7,31
 404d1c8:	defffb04 	addi	sp,sp,-20
 404d1cc:	dc800215 	stw	r18,8(sp)
 404d1d0:	dc400115 	stw	r17,4(sp)
 404d1d4:	dc000015 	stw	r16,0(sp)
 404d1d8:	dfc00415 	stw	ra,16(sp)
 404d1dc:	dcc00315 	stw	r19,12(sp)
 404d1e0:	1c803fcc 	andi	r18,r3,255
 404d1e4:	2c01ffcc 	andi	r16,r5,2047
 404d1e8:	5210b03a 	or	r8,r10,r8
 404d1ec:	202290fa 	slli	r17,r4,3
 404d1f0:	1081ffcc 	andi	r2,r2,2047
 404d1f4:	4b12b03a 	or	r9,r9,r12
 404d1f8:	300c90fa 	slli	r6,r6,3
 404d1fc:	91c07526 	beq	r18,r7,404d3d4 <__adddf3+0x23c>
 404d200:	8087c83a 	sub	r3,r16,r2
 404d204:	00c0ab0e 	bge	zero,r3,404d4b4 <__adddf3+0x31c>
 404d208:	10002a1e 	bne	r2,zero,404d2b4 <__adddf3+0x11c>
 404d20c:	4984b03a 	or	r2,r9,r6
 404d210:	1000961e 	bne	r2,zero,404d46c <__adddf3+0x2d4>
 404d214:	888001cc 	andi	r2,r17,7
 404d218:	10000726 	beq	r2,zero,404d238 <__adddf3+0xa0>
 404d21c:	888003cc 	andi	r2,r17,15
 404d220:	00c00104 	movi	r3,4
 404d224:	10c00426 	beq	r2,r3,404d238 <__adddf3+0xa0>
 404d228:	88c7883a 	add	r3,r17,r3
 404d22c:	1c63803a 	cmpltu	r17,r3,r17
 404d230:	4451883a 	add	r8,r8,r17
 404d234:	1823883a 	mov	r17,r3
 404d238:	4080202c 	andhi	r2,r8,128
 404d23c:	10005926 	beq	r2,zero,404d3a4 <__adddf3+0x20c>
 404d240:	84000044 	addi	r16,r16,1
 404d244:	0081ffc4 	movi	r2,2047
 404d248:	8080ba26 	beq	r16,r2,404d534 <__adddf3+0x39c>
 404d24c:	00bfe034 	movhi	r2,65408
 404d250:	10bfffc4 	addi	r2,r2,-1
 404d254:	4090703a 	and	r8,r8,r2
 404d258:	4004977a 	slli	r2,r8,29
 404d25c:	4010927a 	slli	r8,r8,9
 404d260:	8822d0fa 	srli	r17,r17,3
 404d264:	8401ffcc 	andi	r16,r16,2047
 404d268:	4010d33a 	srli	r8,r8,12
 404d26c:	9007883a 	mov	r3,r18
 404d270:	1444b03a 	or	r2,r2,r17
 404d274:	8401ffcc 	andi	r16,r16,2047
 404d278:	8020953a 	slli	r16,r16,20
 404d27c:	18c03fcc 	andi	r3,r3,255
 404d280:	01000434 	movhi	r4,16
 404d284:	213fffc4 	addi	r4,r4,-1
 404d288:	180697fa 	slli	r3,r3,31
 404d28c:	4110703a 	and	r8,r8,r4
 404d290:	4410b03a 	or	r8,r8,r16
 404d294:	40c6b03a 	or	r3,r8,r3
 404d298:	dfc00417 	ldw	ra,16(sp)
 404d29c:	dcc00317 	ldw	r19,12(sp)
 404d2a0:	dc800217 	ldw	r18,8(sp)
 404d2a4:	dc400117 	ldw	r17,4(sp)
 404d2a8:	dc000017 	ldw	r16,0(sp)
 404d2ac:	dec00504 	addi	sp,sp,20
 404d2b0:	f800283a 	ret
 404d2b4:	0081ffc4 	movi	r2,2047
 404d2b8:	80bfd626 	beq	r16,r2,404d214 <__flash_rwdata_start+0xffff2ae4>
 404d2bc:	4a402034 	orhi	r9,r9,128
 404d2c0:	00800e04 	movi	r2,56
 404d2c4:	10c09f16 	blt	r2,r3,404d544 <__adddf3+0x3ac>
 404d2c8:	008007c4 	movi	r2,31
 404d2cc:	10c0c216 	blt	r2,r3,404d5d8 <__adddf3+0x440>
 404d2d0:	00800804 	movi	r2,32
 404d2d4:	10c5c83a 	sub	r2,r2,r3
 404d2d8:	488a983a 	sll	r5,r9,r2
 404d2dc:	30c8d83a 	srl	r4,r6,r3
 404d2e0:	3084983a 	sll	r2,r6,r2
 404d2e4:	48c6d83a 	srl	r3,r9,r3
 404d2e8:	290cb03a 	or	r6,r5,r4
 404d2ec:	1004c03a 	cmpne	r2,r2,zero
 404d2f0:	308cb03a 	or	r6,r6,r2
 404d2f4:	898dc83a 	sub	r6,r17,r6
 404d2f8:	89a3803a 	cmpltu	r17,r17,r6
 404d2fc:	40d1c83a 	sub	r8,r8,r3
 404d300:	4451c83a 	sub	r8,r8,r17
 404d304:	3023883a 	mov	r17,r6
 404d308:	4080202c 	andhi	r2,r8,128
 404d30c:	10002326 	beq	r2,zero,404d39c <__adddf3+0x204>
 404d310:	04c02034 	movhi	r19,128
 404d314:	9cffffc4 	addi	r19,r19,-1
 404d318:	44e6703a 	and	r19,r8,r19
 404d31c:	98007626 	beq	r19,zero,404d4f8 <__adddf3+0x360>
 404d320:	9809883a 	mov	r4,r19
 404d324:	404f79c0 	call	404f79c <__clzsi2>
 404d328:	10fffe04 	addi	r3,r2,-8
 404d32c:	010007c4 	movi	r4,31
 404d330:	20c07716 	blt	r4,r3,404d510 <__adddf3+0x378>
 404d334:	00800804 	movi	r2,32
 404d338:	10c5c83a 	sub	r2,r2,r3
 404d33c:	8884d83a 	srl	r2,r17,r2
 404d340:	98d0983a 	sll	r8,r19,r3
 404d344:	88e2983a 	sll	r17,r17,r3
 404d348:	1204b03a 	or	r2,r2,r8
 404d34c:	1c007416 	blt	r3,r16,404d520 <__adddf3+0x388>
 404d350:	1c21c83a 	sub	r16,r3,r16
 404d354:	82000044 	addi	r8,r16,1
 404d358:	00c007c4 	movi	r3,31
 404d35c:	1a009116 	blt	r3,r8,404d5a4 <__adddf3+0x40c>
 404d360:	00c00804 	movi	r3,32
 404d364:	1a07c83a 	sub	r3,r3,r8
 404d368:	8a08d83a 	srl	r4,r17,r8
 404d36c:	88e2983a 	sll	r17,r17,r3
 404d370:	10c6983a 	sll	r3,r2,r3
 404d374:	1210d83a 	srl	r8,r2,r8
 404d378:	8804c03a 	cmpne	r2,r17,zero
 404d37c:	1906b03a 	or	r3,r3,r4
 404d380:	18a2b03a 	or	r17,r3,r2
 404d384:	0021883a 	mov	r16,zero
 404d388:	003fa206 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d38c:	1890b03a 	or	r8,r3,r2
 404d390:	40017d26 	beq	r8,zero,404d988 <__adddf3+0x7f0>
 404d394:	1011883a 	mov	r8,r2
 404d398:	1823883a 	mov	r17,r3
 404d39c:	888001cc 	andi	r2,r17,7
 404d3a0:	103f9e1e 	bne	r2,zero,404d21c <__flash_rwdata_start+0xffff2aec>
 404d3a4:	4004977a 	slli	r2,r8,29
 404d3a8:	8822d0fa 	srli	r17,r17,3
 404d3ac:	4010d0fa 	srli	r8,r8,3
 404d3b0:	9007883a 	mov	r3,r18
 404d3b4:	1444b03a 	or	r2,r2,r17
 404d3b8:	0101ffc4 	movi	r4,2047
 404d3bc:	81002426 	beq	r16,r4,404d450 <__adddf3+0x2b8>
 404d3c0:	8120703a 	and	r16,r16,r4
 404d3c4:	01000434 	movhi	r4,16
 404d3c8:	213fffc4 	addi	r4,r4,-1
 404d3cc:	4110703a 	and	r8,r8,r4
 404d3d0:	003fa806 	br	404d274 <__flash_rwdata_start+0xffff2b44>
 404d3d4:	8089c83a 	sub	r4,r16,r2
 404d3d8:	01005e0e 	bge	zero,r4,404d554 <__adddf3+0x3bc>
 404d3dc:	10002b26 	beq	r2,zero,404d48c <__adddf3+0x2f4>
 404d3e0:	0081ffc4 	movi	r2,2047
 404d3e4:	80bf8b26 	beq	r16,r2,404d214 <__flash_rwdata_start+0xffff2ae4>
 404d3e8:	4a402034 	orhi	r9,r9,128
 404d3ec:	00800e04 	movi	r2,56
 404d3f0:	1100a40e 	bge	r2,r4,404d684 <__adddf3+0x4ec>
 404d3f4:	498cb03a 	or	r6,r9,r6
 404d3f8:	300ac03a 	cmpne	r5,r6,zero
 404d3fc:	0013883a 	mov	r9,zero
 404d400:	2c4b883a 	add	r5,r5,r17
 404d404:	2c63803a 	cmpltu	r17,r5,r17
 404d408:	4a11883a 	add	r8,r9,r8
 404d40c:	8a11883a 	add	r8,r17,r8
 404d410:	2823883a 	mov	r17,r5
 404d414:	4080202c 	andhi	r2,r8,128
 404d418:	103fe026 	beq	r2,zero,404d39c <__flash_rwdata_start+0xffff2c6c>
 404d41c:	84000044 	addi	r16,r16,1
 404d420:	0081ffc4 	movi	r2,2047
 404d424:	8080d226 	beq	r16,r2,404d770 <__adddf3+0x5d8>
 404d428:	00bfe034 	movhi	r2,65408
 404d42c:	10bfffc4 	addi	r2,r2,-1
 404d430:	4090703a 	and	r8,r8,r2
 404d434:	880ad07a 	srli	r5,r17,1
 404d438:	400897fa 	slli	r4,r8,31
 404d43c:	88c0004c 	andi	r3,r17,1
 404d440:	28e2b03a 	or	r17,r5,r3
 404d444:	4010d07a 	srli	r8,r8,1
 404d448:	2462b03a 	or	r17,r4,r17
 404d44c:	003f7106 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d450:	4088b03a 	or	r4,r8,r2
 404d454:	20014526 	beq	r4,zero,404d96c <__adddf3+0x7d4>
 404d458:	01000434 	movhi	r4,16
 404d45c:	42000234 	orhi	r8,r8,8
 404d460:	213fffc4 	addi	r4,r4,-1
 404d464:	4110703a 	and	r8,r8,r4
 404d468:	003f8206 	br	404d274 <__flash_rwdata_start+0xffff2b44>
 404d46c:	18ffffc4 	addi	r3,r3,-1
 404d470:	1800491e 	bne	r3,zero,404d598 <__adddf3+0x400>
 404d474:	898bc83a 	sub	r5,r17,r6
 404d478:	8963803a 	cmpltu	r17,r17,r5
 404d47c:	4251c83a 	sub	r8,r8,r9
 404d480:	4451c83a 	sub	r8,r8,r17
 404d484:	2823883a 	mov	r17,r5
 404d488:	003f9f06 	br	404d308 <__flash_rwdata_start+0xffff2bd8>
 404d48c:	4984b03a 	or	r2,r9,r6
 404d490:	103f6026 	beq	r2,zero,404d214 <__flash_rwdata_start+0xffff2ae4>
 404d494:	213fffc4 	addi	r4,r4,-1
 404d498:	2000931e 	bne	r4,zero,404d6e8 <__adddf3+0x550>
 404d49c:	898d883a 	add	r6,r17,r6
 404d4a0:	3463803a 	cmpltu	r17,r6,r17
 404d4a4:	4251883a 	add	r8,r8,r9
 404d4a8:	8a11883a 	add	r8,r17,r8
 404d4ac:	3023883a 	mov	r17,r6
 404d4b0:	003fd806 	br	404d414 <__flash_rwdata_start+0xffff2ce4>
 404d4b4:	1800541e 	bne	r3,zero,404d608 <__adddf3+0x470>
 404d4b8:	80800044 	addi	r2,r16,1
 404d4bc:	1081ffcc 	andi	r2,r2,2047
 404d4c0:	00c00044 	movi	r3,1
 404d4c4:	1880a00e 	bge	r3,r2,404d748 <__adddf3+0x5b0>
 404d4c8:	8989c83a 	sub	r4,r17,r6
 404d4cc:	8905803a 	cmpltu	r2,r17,r4
 404d4d0:	4267c83a 	sub	r19,r8,r9
 404d4d4:	98a7c83a 	sub	r19,r19,r2
 404d4d8:	9880202c 	andhi	r2,r19,128
 404d4dc:	10006326 	beq	r2,zero,404d66c <__adddf3+0x4d4>
 404d4e0:	3463c83a 	sub	r17,r6,r17
 404d4e4:	4a07c83a 	sub	r3,r9,r8
 404d4e8:	344d803a 	cmpltu	r6,r6,r17
 404d4ec:	19a7c83a 	sub	r19,r3,r6
 404d4f0:	3825883a 	mov	r18,r7
 404d4f4:	983f8a1e 	bne	r19,zero,404d320 <__flash_rwdata_start+0xffff2bf0>
 404d4f8:	8809883a 	mov	r4,r17
 404d4fc:	404f79c0 	call	404f79c <__clzsi2>
 404d500:	10800804 	addi	r2,r2,32
 404d504:	10fffe04 	addi	r3,r2,-8
 404d508:	010007c4 	movi	r4,31
 404d50c:	20ff890e 	bge	r4,r3,404d334 <__flash_rwdata_start+0xffff2c04>
 404d510:	10bff604 	addi	r2,r2,-40
 404d514:	8884983a 	sll	r2,r17,r2
 404d518:	0023883a 	mov	r17,zero
 404d51c:	1c3f8c0e 	bge	r3,r16,404d350 <__flash_rwdata_start+0xffff2c20>
 404d520:	023fe034 	movhi	r8,65408
 404d524:	423fffc4 	addi	r8,r8,-1
 404d528:	80e1c83a 	sub	r16,r16,r3
 404d52c:	1210703a 	and	r8,r2,r8
 404d530:	003f3806 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d534:	9007883a 	mov	r3,r18
 404d538:	0011883a 	mov	r8,zero
 404d53c:	0005883a 	mov	r2,zero
 404d540:	003f4c06 	br	404d274 <__flash_rwdata_start+0xffff2b44>
 404d544:	498cb03a 	or	r6,r9,r6
 404d548:	300cc03a 	cmpne	r6,r6,zero
 404d54c:	0007883a 	mov	r3,zero
 404d550:	003f6806 	br	404d2f4 <__flash_rwdata_start+0xffff2bc4>
 404d554:	20009c1e 	bne	r4,zero,404d7c8 <__adddf3+0x630>
 404d558:	80800044 	addi	r2,r16,1
 404d55c:	1141ffcc 	andi	r5,r2,2047
 404d560:	01000044 	movi	r4,1
 404d564:	2140670e 	bge	r4,r5,404d704 <__adddf3+0x56c>
 404d568:	0101ffc4 	movi	r4,2047
 404d56c:	11007f26 	beq	r2,r4,404d76c <__adddf3+0x5d4>
 404d570:	898d883a 	add	r6,r17,r6
 404d574:	4247883a 	add	r3,r8,r9
 404d578:	3451803a 	cmpltu	r8,r6,r17
 404d57c:	40d1883a 	add	r8,r8,r3
 404d580:	402297fa 	slli	r17,r8,31
 404d584:	300cd07a 	srli	r6,r6,1
 404d588:	4010d07a 	srli	r8,r8,1
 404d58c:	1021883a 	mov	r16,r2
 404d590:	89a2b03a 	or	r17,r17,r6
 404d594:	003f1f06 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d598:	0081ffc4 	movi	r2,2047
 404d59c:	80bf481e 	bne	r16,r2,404d2c0 <__flash_rwdata_start+0xffff2b90>
 404d5a0:	003f1c06 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d5a4:	843ff844 	addi	r16,r16,-31
 404d5a8:	01000804 	movi	r4,32
 404d5ac:	1406d83a 	srl	r3,r2,r16
 404d5b0:	41005026 	beq	r8,r4,404d6f4 <__adddf3+0x55c>
 404d5b4:	01001004 	movi	r4,64
 404d5b8:	2211c83a 	sub	r8,r4,r8
 404d5bc:	1204983a 	sll	r2,r2,r8
 404d5c0:	88a2b03a 	or	r17,r17,r2
 404d5c4:	8822c03a 	cmpne	r17,r17,zero
 404d5c8:	1c62b03a 	or	r17,r3,r17
 404d5cc:	0011883a 	mov	r8,zero
 404d5d0:	0021883a 	mov	r16,zero
 404d5d4:	003f7106 	br	404d39c <__flash_rwdata_start+0xffff2c6c>
 404d5d8:	193ff804 	addi	r4,r3,-32
 404d5dc:	00800804 	movi	r2,32
 404d5e0:	4908d83a 	srl	r4,r9,r4
 404d5e4:	18804526 	beq	r3,r2,404d6fc <__adddf3+0x564>
 404d5e8:	00801004 	movi	r2,64
 404d5ec:	10c5c83a 	sub	r2,r2,r3
 404d5f0:	4886983a 	sll	r3,r9,r2
 404d5f4:	198cb03a 	or	r6,r3,r6
 404d5f8:	300cc03a 	cmpne	r6,r6,zero
 404d5fc:	218cb03a 	or	r6,r4,r6
 404d600:	0007883a 	mov	r3,zero
 404d604:	003f3b06 	br	404d2f4 <__flash_rwdata_start+0xffff2bc4>
 404d608:	80002a26 	beq	r16,zero,404d6b4 <__adddf3+0x51c>
 404d60c:	0101ffc4 	movi	r4,2047
 404d610:	11006826 	beq	r2,r4,404d7b4 <__adddf3+0x61c>
 404d614:	00c7c83a 	sub	r3,zero,r3
 404d618:	42002034 	orhi	r8,r8,128
 404d61c:	01000e04 	movi	r4,56
 404d620:	20c07c16 	blt	r4,r3,404d814 <__adddf3+0x67c>
 404d624:	010007c4 	movi	r4,31
 404d628:	20c0da16 	blt	r4,r3,404d994 <__adddf3+0x7fc>
 404d62c:	01000804 	movi	r4,32
 404d630:	20c9c83a 	sub	r4,r4,r3
 404d634:	4114983a 	sll	r10,r8,r4
 404d638:	88cad83a 	srl	r5,r17,r3
 404d63c:	8908983a 	sll	r4,r17,r4
 404d640:	40c6d83a 	srl	r3,r8,r3
 404d644:	5162b03a 	or	r17,r10,r5
 404d648:	2008c03a 	cmpne	r4,r4,zero
 404d64c:	8922b03a 	or	r17,r17,r4
 404d650:	3463c83a 	sub	r17,r6,r17
 404d654:	48c7c83a 	sub	r3,r9,r3
 404d658:	344d803a 	cmpltu	r6,r6,r17
 404d65c:	1991c83a 	sub	r8,r3,r6
 404d660:	1021883a 	mov	r16,r2
 404d664:	3825883a 	mov	r18,r7
 404d668:	003f2706 	br	404d308 <__flash_rwdata_start+0xffff2bd8>
 404d66c:	24d0b03a 	or	r8,r4,r19
 404d670:	40001b1e 	bne	r8,zero,404d6e0 <__adddf3+0x548>
 404d674:	0005883a 	mov	r2,zero
 404d678:	0007883a 	mov	r3,zero
 404d67c:	0021883a 	mov	r16,zero
 404d680:	003f4d06 	br	404d3b8 <__flash_rwdata_start+0xffff2c88>
 404d684:	008007c4 	movi	r2,31
 404d688:	11003c16 	blt	r2,r4,404d77c <__adddf3+0x5e4>
 404d68c:	00800804 	movi	r2,32
 404d690:	1105c83a 	sub	r2,r2,r4
 404d694:	488e983a 	sll	r7,r9,r2
 404d698:	310ad83a 	srl	r5,r6,r4
 404d69c:	3084983a 	sll	r2,r6,r2
 404d6a0:	4912d83a 	srl	r9,r9,r4
 404d6a4:	394ab03a 	or	r5,r7,r5
 404d6a8:	1004c03a 	cmpne	r2,r2,zero
 404d6ac:	288ab03a 	or	r5,r5,r2
 404d6b0:	003f5306 	br	404d400 <__flash_rwdata_start+0xffff2cd0>
 404d6b4:	4448b03a 	or	r4,r8,r17
 404d6b8:	20003e26 	beq	r4,zero,404d7b4 <__adddf3+0x61c>
 404d6bc:	00c6303a 	nor	r3,zero,r3
 404d6c0:	18003a1e 	bne	r3,zero,404d7ac <__adddf3+0x614>
 404d6c4:	3463c83a 	sub	r17,r6,r17
 404d6c8:	4a07c83a 	sub	r3,r9,r8
 404d6cc:	344d803a 	cmpltu	r6,r6,r17
 404d6d0:	1991c83a 	sub	r8,r3,r6
 404d6d4:	1021883a 	mov	r16,r2
 404d6d8:	3825883a 	mov	r18,r7
 404d6dc:	003f0a06 	br	404d308 <__flash_rwdata_start+0xffff2bd8>
 404d6e0:	2023883a 	mov	r17,r4
 404d6e4:	003f0d06 	br	404d31c <__flash_rwdata_start+0xffff2bec>
 404d6e8:	0081ffc4 	movi	r2,2047
 404d6ec:	80bf3f1e 	bne	r16,r2,404d3ec <__flash_rwdata_start+0xffff2cbc>
 404d6f0:	003ec806 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d6f4:	0005883a 	mov	r2,zero
 404d6f8:	003fb106 	br	404d5c0 <__flash_rwdata_start+0xffff2e90>
 404d6fc:	0007883a 	mov	r3,zero
 404d700:	003fbc06 	br	404d5f4 <__flash_rwdata_start+0xffff2ec4>
 404d704:	4444b03a 	or	r2,r8,r17
 404d708:	8000871e 	bne	r16,zero,404d928 <__adddf3+0x790>
 404d70c:	1000ba26 	beq	r2,zero,404d9f8 <__adddf3+0x860>
 404d710:	4984b03a 	or	r2,r9,r6
 404d714:	103ebf26 	beq	r2,zero,404d214 <__flash_rwdata_start+0xffff2ae4>
 404d718:	8985883a 	add	r2,r17,r6
 404d71c:	4247883a 	add	r3,r8,r9
 404d720:	1451803a 	cmpltu	r8,r2,r17
 404d724:	40d1883a 	add	r8,r8,r3
 404d728:	40c0202c 	andhi	r3,r8,128
 404d72c:	1023883a 	mov	r17,r2
 404d730:	183f1a26 	beq	r3,zero,404d39c <__flash_rwdata_start+0xffff2c6c>
 404d734:	00bfe034 	movhi	r2,65408
 404d738:	10bfffc4 	addi	r2,r2,-1
 404d73c:	2021883a 	mov	r16,r4
 404d740:	4090703a 	and	r8,r8,r2
 404d744:	003eb306 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d748:	4444b03a 	or	r2,r8,r17
 404d74c:	8000291e 	bne	r16,zero,404d7f4 <__adddf3+0x65c>
 404d750:	10004b1e 	bne	r2,zero,404d880 <__adddf3+0x6e8>
 404d754:	4990b03a 	or	r8,r9,r6
 404d758:	40008b26 	beq	r8,zero,404d988 <__adddf3+0x7f0>
 404d75c:	4811883a 	mov	r8,r9
 404d760:	3023883a 	mov	r17,r6
 404d764:	3825883a 	mov	r18,r7
 404d768:	003eaa06 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d76c:	1021883a 	mov	r16,r2
 404d770:	0011883a 	mov	r8,zero
 404d774:	0005883a 	mov	r2,zero
 404d778:	003f0f06 	br	404d3b8 <__flash_rwdata_start+0xffff2c88>
 404d77c:	217ff804 	addi	r5,r4,-32
 404d780:	00800804 	movi	r2,32
 404d784:	494ad83a 	srl	r5,r9,r5
 404d788:	20807d26 	beq	r4,r2,404d980 <__adddf3+0x7e8>
 404d78c:	00801004 	movi	r2,64
 404d790:	1109c83a 	sub	r4,r2,r4
 404d794:	4912983a 	sll	r9,r9,r4
 404d798:	498cb03a 	or	r6,r9,r6
 404d79c:	300cc03a 	cmpne	r6,r6,zero
 404d7a0:	298ab03a 	or	r5,r5,r6
 404d7a4:	0013883a 	mov	r9,zero
 404d7a8:	003f1506 	br	404d400 <__flash_rwdata_start+0xffff2cd0>
 404d7ac:	0101ffc4 	movi	r4,2047
 404d7b0:	113f9a1e 	bne	r2,r4,404d61c <__flash_rwdata_start+0xffff2eec>
 404d7b4:	4811883a 	mov	r8,r9
 404d7b8:	3023883a 	mov	r17,r6
 404d7bc:	1021883a 	mov	r16,r2
 404d7c0:	3825883a 	mov	r18,r7
 404d7c4:	003e9306 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d7c8:	8000161e 	bne	r16,zero,404d824 <__adddf3+0x68c>
 404d7cc:	444ab03a 	or	r5,r8,r17
 404d7d0:	28005126 	beq	r5,zero,404d918 <__adddf3+0x780>
 404d7d4:	0108303a 	nor	r4,zero,r4
 404d7d8:	20004d1e 	bne	r4,zero,404d910 <__adddf3+0x778>
 404d7dc:	89a3883a 	add	r17,r17,r6
 404d7e0:	4253883a 	add	r9,r8,r9
 404d7e4:	898d803a 	cmpltu	r6,r17,r6
 404d7e8:	3251883a 	add	r8,r6,r9
 404d7ec:	1021883a 	mov	r16,r2
 404d7f0:	003f0806 	br	404d414 <__flash_rwdata_start+0xffff2ce4>
 404d7f4:	1000301e 	bne	r2,zero,404d8b8 <__adddf3+0x720>
 404d7f8:	4984b03a 	or	r2,r9,r6
 404d7fc:	10007126 	beq	r2,zero,404d9c4 <__adddf3+0x82c>
 404d800:	4811883a 	mov	r8,r9
 404d804:	3023883a 	mov	r17,r6
 404d808:	3825883a 	mov	r18,r7
 404d80c:	0401ffc4 	movi	r16,2047
 404d810:	003e8006 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d814:	4462b03a 	or	r17,r8,r17
 404d818:	8822c03a 	cmpne	r17,r17,zero
 404d81c:	0007883a 	mov	r3,zero
 404d820:	003f8b06 	br	404d650 <__flash_rwdata_start+0xffff2f20>
 404d824:	0141ffc4 	movi	r5,2047
 404d828:	11403b26 	beq	r2,r5,404d918 <__adddf3+0x780>
 404d82c:	0109c83a 	sub	r4,zero,r4
 404d830:	42002034 	orhi	r8,r8,128
 404d834:	01400e04 	movi	r5,56
 404d838:	29006716 	blt	r5,r4,404d9d8 <__adddf3+0x840>
 404d83c:	014007c4 	movi	r5,31
 404d840:	29007016 	blt	r5,r4,404da04 <__adddf3+0x86c>
 404d844:	01400804 	movi	r5,32
 404d848:	290bc83a 	sub	r5,r5,r4
 404d84c:	4154983a 	sll	r10,r8,r5
 404d850:	890ed83a 	srl	r7,r17,r4
 404d854:	894a983a 	sll	r5,r17,r5
 404d858:	4108d83a 	srl	r4,r8,r4
 404d85c:	51e2b03a 	or	r17,r10,r7
 404d860:	280ac03a 	cmpne	r5,r5,zero
 404d864:	8962b03a 	or	r17,r17,r5
 404d868:	89a3883a 	add	r17,r17,r6
 404d86c:	2253883a 	add	r9,r4,r9
 404d870:	898d803a 	cmpltu	r6,r17,r6
 404d874:	3251883a 	add	r8,r6,r9
 404d878:	1021883a 	mov	r16,r2
 404d87c:	003ee506 	br	404d414 <__flash_rwdata_start+0xffff2ce4>
 404d880:	4984b03a 	or	r2,r9,r6
 404d884:	103e6326 	beq	r2,zero,404d214 <__flash_rwdata_start+0xffff2ae4>
 404d888:	8987c83a 	sub	r3,r17,r6
 404d88c:	88c9803a 	cmpltu	r4,r17,r3
 404d890:	4245c83a 	sub	r2,r8,r9
 404d894:	1105c83a 	sub	r2,r2,r4
 404d898:	1100202c 	andhi	r4,r2,128
 404d89c:	203ebb26 	beq	r4,zero,404d38c <__flash_rwdata_start+0xffff2c5c>
 404d8a0:	3463c83a 	sub	r17,r6,r17
 404d8a4:	4a07c83a 	sub	r3,r9,r8
 404d8a8:	344d803a 	cmpltu	r6,r6,r17
 404d8ac:	1991c83a 	sub	r8,r3,r6
 404d8b0:	3825883a 	mov	r18,r7
 404d8b4:	003e5706 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d8b8:	4984b03a 	or	r2,r9,r6
 404d8bc:	10002e26 	beq	r2,zero,404d978 <__adddf3+0x7e0>
 404d8c0:	4004d0fa 	srli	r2,r8,3
 404d8c4:	8822d0fa 	srli	r17,r17,3
 404d8c8:	4010977a 	slli	r8,r8,29
 404d8cc:	10c0022c 	andhi	r3,r2,8
 404d8d0:	4462b03a 	or	r17,r8,r17
 404d8d4:	18000826 	beq	r3,zero,404d8f8 <__adddf3+0x760>
 404d8d8:	4808d0fa 	srli	r4,r9,3
 404d8dc:	20c0022c 	andhi	r3,r4,8
 404d8e0:	1800051e 	bne	r3,zero,404d8f8 <__adddf3+0x760>
 404d8e4:	300cd0fa 	srli	r6,r6,3
 404d8e8:	4806977a 	slli	r3,r9,29
 404d8ec:	2005883a 	mov	r2,r4
 404d8f0:	3825883a 	mov	r18,r7
 404d8f4:	19a2b03a 	or	r17,r3,r6
 404d8f8:	8810d77a 	srli	r8,r17,29
 404d8fc:	100490fa 	slli	r2,r2,3
 404d900:	882290fa 	slli	r17,r17,3
 404d904:	0401ffc4 	movi	r16,2047
 404d908:	4090b03a 	or	r8,r8,r2
 404d90c:	003e4106 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d910:	0141ffc4 	movi	r5,2047
 404d914:	117fc71e 	bne	r2,r5,404d834 <__flash_rwdata_start+0xffff3104>
 404d918:	4811883a 	mov	r8,r9
 404d91c:	3023883a 	mov	r17,r6
 404d920:	1021883a 	mov	r16,r2
 404d924:	003e3b06 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d928:	10002f26 	beq	r2,zero,404d9e8 <__adddf3+0x850>
 404d92c:	4984b03a 	or	r2,r9,r6
 404d930:	10001126 	beq	r2,zero,404d978 <__adddf3+0x7e0>
 404d934:	4004d0fa 	srli	r2,r8,3
 404d938:	8822d0fa 	srli	r17,r17,3
 404d93c:	4010977a 	slli	r8,r8,29
 404d940:	10c0022c 	andhi	r3,r2,8
 404d944:	4462b03a 	or	r17,r8,r17
 404d948:	183feb26 	beq	r3,zero,404d8f8 <__flash_rwdata_start+0xffff31c8>
 404d94c:	4808d0fa 	srli	r4,r9,3
 404d950:	20c0022c 	andhi	r3,r4,8
 404d954:	183fe81e 	bne	r3,zero,404d8f8 <__flash_rwdata_start+0xffff31c8>
 404d958:	300cd0fa 	srli	r6,r6,3
 404d95c:	4806977a 	slli	r3,r9,29
 404d960:	2005883a 	mov	r2,r4
 404d964:	19a2b03a 	or	r17,r3,r6
 404d968:	003fe306 	br	404d8f8 <__flash_rwdata_start+0xffff31c8>
 404d96c:	0011883a 	mov	r8,zero
 404d970:	0005883a 	mov	r2,zero
 404d974:	003e3f06 	br	404d274 <__flash_rwdata_start+0xffff2b44>
 404d978:	0401ffc4 	movi	r16,2047
 404d97c:	003e2506 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d980:	0013883a 	mov	r9,zero
 404d984:	003f8406 	br	404d798 <__flash_rwdata_start+0xffff3068>
 404d988:	0005883a 	mov	r2,zero
 404d98c:	0007883a 	mov	r3,zero
 404d990:	003e8906 	br	404d3b8 <__flash_rwdata_start+0xffff2c88>
 404d994:	197ff804 	addi	r5,r3,-32
 404d998:	01000804 	movi	r4,32
 404d99c:	414ad83a 	srl	r5,r8,r5
 404d9a0:	19002426 	beq	r3,r4,404da34 <__adddf3+0x89c>
 404d9a4:	01001004 	movi	r4,64
 404d9a8:	20c7c83a 	sub	r3,r4,r3
 404d9ac:	40c6983a 	sll	r3,r8,r3
 404d9b0:	1c46b03a 	or	r3,r3,r17
 404d9b4:	1806c03a 	cmpne	r3,r3,zero
 404d9b8:	28e2b03a 	or	r17,r5,r3
 404d9bc:	0007883a 	mov	r3,zero
 404d9c0:	003f2306 	br	404d650 <__flash_rwdata_start+0xffff2f20>
 404d9c4:	0007883a 	mov	r3,zero
 404d9c8:	5811883a 	mov	r8,r11
 404d9cc:	00bfffc4 	movi	r2,-1
 404d9d0:	0401ffc4 	movi	r16,2047
 404d9d4:	003e7806 	br	404d3b8 <__flash_rwdata_start+0xffff2c88>
 404d9d8:	4462b03a 	or	r17,r8,r17
 404d9dc:	8822c03a 	cmpne	r17,r17,zero
 404d9e0:	0009883a 	mov	r4,zero
 404d9e4:	003fa006 	br	404d868 <__flash_rwdata_start+0xffff3138>
 404d9e8:	4811883a 	mov	r8,r9
 404d9ec:	3023883a 	mov	r17,r6
 404d9f0:	0401ffc4 	movi	r16,2047
 404d9f4:	003e0706 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404d9f8:	4811883a 	mov	r8,r9
 404d9fc:	3023883a 	mov	r17,r6
 404da00:	003e0406 	br	404d214 <__flash_rwdata_start+0xffff2ae4>
 404da04:	21fff804 	addi	r7,r4,-32
 404da08:	01400804 	movi	r5,32
 404da0c:	41ced83a 	srl	r7,r8,r7
 404da10:	21400a26 	beq	r4,r5,404da3c <__adddf3+0x8a4>
 404da14:	01401004 	movi	r5,64
 404da18:	2909c83a 	sub	r4,r5,r4
 404da1c:	4108983a 	sll	r4,r8,r4
 404da20:	2448b03a 	or	r4,r4,r17
 404da24:	2008c03a 	cmpne	r4,r4,zero
 404da28:	3922b03a 	or	r17,r7,r4
 404da2c:	0009883a 	mov	r4,zero
 404da30:	003f8d06 	br	404d868 <__flash_rwdata_start+0xffff3138>
 404da34:	0007883a 	mov	r3,zero
 404da38:	003fdd06 	br	404d9b0 <__flash_rwdata_start+0xffff3280>
 404da3c:	0009883a 	mov	r4,zero
 404da40:	003ff706 	br	404da20 <__flash_rwdata_start+0xffff32f0>

0404da44 <__divdf3>:
 404da44:	defff204 	addi	sp,sp,-56
 404da48:	dd400915 	stw	r21,36(sp)
 404da4c:	282ad53a 	srli	r21,r5,20
 404da50:	dd000815 	stw	r20,32(sp)
 404da54:	2828d7fa 	srli	r20,r5,31
 404da58:	dc000415 	stw	r16,16(sp)
 404da5c:	04000434 	movhi	r16,16
 404da60:	df000c15 	stw	fp,48(sp)
 404da64:	843fffc4 	addi	r16,r16,-1
 404da68:	dfc00d15 	stw	ra,52(sp)
 404da6c:	ddc00b15 	stw	r23,44(sp)
 404da70:	dd800a15 	stw	r22,40(sp)
 404da74:	dcc00715 	stw	r19,28(sp)
 404da78:	dc800615 	stw	r18,24(sp)
 404da7c:	dc400515 	stw	r17,20(sp)
 404da80:	ad41ffcc 	andi	r21,r21,2047
 404da84:	2c20703a 	and	r16,r5,r16
 404da88:	a7003fcc 	andi	fp,r20,255
 404da8c:	a8006126 	beq	r21,zero,404dc14 <__divdf3+0x1d0>
 404da90:	0081ffc4 	movi	r2,2047
 404da94:	2025883a 	mov	r18,r4
 404da98:	a8803726 	beq	r21,r2,404db78 <__divdf3+0x134>
 404da9c:	80800434 	orhi	r2,r16,16
 404daa0:	100490fa 	slli	r2,r2,3
 404daa4:	2020d77a 	srli	r16,r4,29
 404daa8:	202490fa 	slli	r18,r4,3
 404daac:	ad7f0044 	addi	r21,r21,-1023
 404dab0:	80a0b03a 	or	r16,r16,r2
 404dab4:	0027883a 	mov	r19,zero
 404dab8:	0013883a 	mov	r9,zero
 404dabc:	3804d53a 	srli	r2,r7,20
 404dac0:	382cd7fa 	srli	r22,r7,31
 404dac4:	04400434 	movhi	r17,16
 404dac8:	8c7fffc4 	addi	r17,r17,-1
 404dacc:	1081ffcc 	andi	r2,r2,2047
 404dad0:	3011883a 	mov	r8,r6
 404dad4:	3c62703a 	and	r17,r7,r17
 404dad8:	b5c03fcc 	andi	r23,r22,255
 404dadc:	10006c26 	beq	r2,zero,404dc90 <__divdf3+0x24c>
 404dae0:	00c1ffc4 	movi	r3,2047
 404dae4:	10c06426 	beq	r2,r3,404dc78 <__divdf3+0x234>
 404dae8:	88c00434 	orhi	r3,r17,16
 404daec:	180690fa 	slli	r3,r3,3
 404daf0:	3022d77a 	srli	r17,r6,29
 404daf4:	301090fa 	slli	r8,r6,3
 404daf8:	10bf0044 	addi	r2,r2,-1023
 404dafc:	88e2b03a 	or	r17,r17,r3
 404db00:	000f883a 	mov	r7,zero
 404db04:	a58cf03a 	xor	r6,r20,r22
 404db08:	3cc8b03a 	or	r4,r7,r19
 404db0c:	a8abc83a 	sub	r21,r21,r2
 404db10:	008003c4 	movi	r2,15
 404db14:	3007883a 	mov	r3,r6
 404db18:	34c03fcc 	andi	r19,r6,255
 404db1c:	11009036 	bltu	r2,r4,404dd60 <__divdf3+0x31c>
 404db20:	200890ba 	slli	r4,r4,2
 404db24:	00810174 	movhi	r2,1029
 404db28:	10b6ce04 	addi	r2,r2,-9416
 404db2c:	2089883a 	add	r4,r4,r2
 404db30:	20800017 	ldw	r2,0(r4)
 404db34:	1000683a 	jmp	r2
 404db38:	0404dd60 	cmpeqi	r16,zero,4981
 404db3c:	0404dbb0 	cmpltui	r16,zero,4974
 404db40:	0404dd50 	cmplti	r16,zero,4981
 404db44:	0404dba4 	muli	r16,zero,4974
 404db48:	0404dd50 	cmplti	r16,zero,4981
 404db4c:	0404dd24 	muli	r16,zero,4980
 404db50:	0404dd50 	cmplti	r16,zero,4981
 404db54:	0404dba4 	muli	r16,zero,4974
 404db58:	0404dbb0 	cmpltui	r16,zero,4974
 404db5c:	0404dbb0 	cmpltui	r16,zero,4974
 404db60:	0404dd24 	muli	r16,zero,4980
 404db64:	0404dba4 	muli	r16,zero,4974
 404db68:	0404db94 	movui	r16,4974
 404db6c:	0404db94 	movui	r16,4974
 404db70:	0404db94 	movui	r16,4974
 404db74:	0404e044 	movi	r16,4993
 404db78:	2404b03a 	or	r2,r4,r16
 404db7c:	1000661e 	bne	r2,zero,404dd18 <__divdf3+0x2d4>
 404db80:	04c00204 	movi	r19,8
 404db84:	0021883a 	mov	r16,zero
 404db88:	0025883a 	mov	r18,zero
 404db8c:	02400084 	movi	r9,2
 404db90:	003fca06 	br	404dabc <__flash_rwdata_start+0xffff338c>
 404db94:	8023883a 	mov	r17,r16
 404db98:	9011883a 	mov	r8,r18
 404db9c:	e02f883a 	mov	r23,fp
 404dba0:	480f883a 	mov	r7,r9
 404dba4:	00800084 	movi	r2,2
 404dba8:	3881311e 	bne	r7,r2,404e070 <__divdf3+0x62c>
 404dbac:	b827883a 	mov	r19,r23
 404dbb0:	98c0004c 	andi	r3,r19,1
 404dbb4:	0081ffc4 	movi	r2,2047
 404dbb8:	000b883a 	mov	r5,zero
 404dbbc:	0025883a 	mov	r18,zero
 404dbc0:	1004953a 	slli	r2,r2,20
 404dbc4:	18c03fcc 	andi	r3,r3,255
 404dbc8:	04400434 	movhi	r17,16
 404dbcc:	8c7fffc4 	addi	r17,r17,-1
 404dbd0:	180697fa 	slli	r3,r3,31
 404dbd4:	2c4a703a 	and	r5,r5,r17
 404dbd8:	288ab03a 	or	r5,r5,r2
 404dbdc:	28c6b03a 	or	r3,r5,r3
 404dbe0:	9005883a 	mov	r2,r18
 404dbe4:	dfc00d17 	ldw	ra,52(sp)
 404dbe8:	df000c17 	ldw	fp,48(sp)
 404dbec:	ddc00b17 	ldw	r23,44(sp)
 404dbf0:	dd800a17 	ldw	r22,40(sp)
 404dbf4:	dd400917 	ldw	r21,36(sp)
 404dbf8:	dd000817 	ldw	r20,32(sp)
 404dbfc:	dcc00717 	ldw	r19,28(sp)
 404dc00:	dc800617 	ldw	r18,24(sp)
 404dc04:	dc400517 	ldw	r17,20(sp)
 404dc08:	dc000417 	ldw	r16,16(sp)
 404dc0c:	dec00e04 	addi	sp,sp,56
 404dc10:	f800283a 	ret
 404dc14:	2404b03a 	or	r2,r4,r16
 404dc18:	2027883a 	mov	r19,r4
 404dc1c:	10003926 	beq	r2,zero,404dd04 <__divdf3+0x2c0>
 404dc20:	80012e26 	beq	r16,zero,404e0dc <__divdf3+0x698>
 404dc24:	8009883a 	mov	r4,r16
 404dc28:	d9800315 	stw	r6,12(sp)
 404dc2c:	d9c00215 	stw	r7,8(sp)
 404dc30:	404f79c0 	call	404f79c <__clzsi2>
 404dc34:	d9800317 	ldw	r6,12(sp)
 404dc38:	d9c00217 	ldw	r7,8(sp)
 404dc3c:	113ffd44 	addi	r4,r2,-11
 404dc40:	00c00704 	movi	r3,28
 404dc44:	19012116 	blt	r3,r4,404e0cc <__divdf3+0x688>
 404dc48:	00c00744 	movi	r3,29
 404dc4c:	147ffe04 	addi	r17,r2,-8
 404dc50:	1907c83a 	sub	r3,r3,r4
 404dc54:	8460983a 	sll	r16,r16,r17
 404dc58:	98c6d83a 	srl	r3,r19,r3
 404dc5c:	9c64983a 	sll	r18,r19,r17
 404dc60:	1c20b03a 	or	r16,r3,r16
 404dc64:	1080fcc4 	addi	r2,r2,1011
 404dc68:	00abc83a 	sub	r21,zero,r2
 404dc6c:	0027883a 	mov	r19,zero
 404dc70:	0013883a 	mov	r9,zero
 404dc74:	003f9106 	br	404dabc <__flash_rwdata_start+0xffff338c>
 404dc78:	3446b03a 	or	r3,r6,r17
 404dc7c:	18001f1e 	bne	r3,zero,404dcfc <__divdf3+0x2b8>
 404dc80:	0023883a 	mov	r17,zero
 404dc84:	0011883a 	mov	r8,zero
 404dc88:	01c00084 	movi	r7,2
 404dc8c:	003f9d06 	br	404db04 <__flash_rwdata_start+0xffff33d4>
 404dc90:	3446b03a 	or	r3,r6,r17
 404dc94:	18001526 	beq	r3,zero,404dcec <__divdf3+0x2a8>
 404dc98:	88011b26 	beq	r17,zero,404e108 <__divdf3+0x6c4>
 404dc9c:	8809883a 	mov	r4,r17
 404dca0:	d9800315 	stw	r6,12(sp)
 404dca4:	da400115 	stw	r9,4(sp)
 404dca8:	404f79c0 	call	404f79c <__clzsi2>
 404dcac:	d9800317 	ldw	r6,12(sp)
 404dcb0:	da400117 	ldw	r9,4(sp)
 404dcb4:	113ffd44 	addi	r4,r2,-11
 404dcb8:	00c00704 	movi	r3,28
 404dcbc:	19010e16 	blt	r3,r4,404e0f8 <__divdf3+0x6b4>
 404dcc0:	00c00744 	movi	r3,29
 404dcc4:	123ffe04 	addi	r8,r2,-8
 404dcc8:	1907c83a 	sub	r3,r3,r4
 404dccc:	8a22983a 	sll	r17,r17,r8
 404dcd0:	30c6d83a 	srl	r3,r6,r3
 404dcd4:	3210983a 	sll	r8,r6,r8
 404dcd8:	1c62b03a 	or	r17,r3,r17
 404dcdc:	1080fcc4 	addi	r2,r2,1011
 404dce0:	0085c83a 	sub	r2,zero,r2
 404dce4:	000f883a 	mov	r7,zero
 404dce8:	003f8606 	br	404db04 <__flash_rwdata_start+0xffff33d4>
 404dcec:	0023883a 	mov	r17,zero
 404dcf0:	0011883a 	mov	r8,zero
 404dcf4:	01c00044 	movi	r7,1
 404dcf8:	003f8206 	br	404db04 <__flash_rwdata_start+0xffff33d4>
 404dcfc:	01c000c4 	movi	r7,3
 404dd00:	003f8006 	br	404db04 <__flash_rwdata_start+0xffff33d4>
 404dd04:	04c00104 	movi	r19,4
 404dd08:	0021883a 	mov	r16,zero
 404dd0c:	0025883a 	mov	r18,zero
 404dd10:	02400044 	movi	r9,1
 404dd14:	003f6906 	br	404dabc <__flash_rwdata_start+0xffff338c>
 404dd18:	04c00304 	movi	r19,12
 404dd1c:	024000c4 	movi	r9,3
 404dd20:	003f6606 	br	404dabc <__flash_rwdata_start+0xffff338c>
 404dd24:	01400434 	movhi	r5,16
 404dd28:	0007883a 	mov	r3,zero
 404dd2c:	297fffc4 	addi	r5,r5,-1
 404dd30:	04bfffc4 	movi	r18,-1
 404dd34:	0081ffc4 	movi	r2,2047
 404dd38:	003fa106 	br	404dbc0 <__flash_rwdata_start+0xffff3490>
 404dd3c:	00c00044 	movi	r3,1
 404dd40:	1887c83a 	sub	r3,r3,r2
 404dd44:	01000e04 	movi	r4,56
 404dd48:	20c1210e 	bge	r4,r3,404e1d0 <__divdf3+0x78c>
 404dd4c:	98c0004c 	andi	r3,r19,1
 404dd50:	0005883a 	mov	r2,zero
 404dd54:	000b883a 	mov	r5,zero
 404dd58:	0025883a 	mov	r18,zero
 404dd5c:	003f9806 	br	404dbc0 <__flash_rwdata_start+0xffff3490>
 404dd60:	8c00fd36 	bltu	r17,r16,404e158 <__divdf3+0x714>
 404dd64:	8440fb26 	beq	r16,r17,404e154 <__divdf3+0x710>
 404dd68:	8007883a 	mov	r3,r16
 404dd6c:	ad7fffc4 	addi	r21,r21,-1
 404dd70:	0021883a 	mov	r16,zero
 404dd74:	4004d63a 	srli	r2,r8,24
 404dd78:	8822923a 	slli	r17,r17,8
 404dd7c:	1809883a 	mov	r4,r3
 404dd80:	402c923a 	slli	r22,r8,8
 404dd84:	88b8b03a 	or	fp,r17,r2
 404dd88:	e028d43a 	srli	r20,fp,16
 404dd8c:	d8c00015 	stw	r3,0(sp)
 404dd90:	e5ffffcc 	andi	r23,fp,65535
 404dd94:	a00b883a 	mov	r5,r20
 404dd98:	4042fb00 	call	4042fb0 <__udivsi3>
 404dd9c:	d8c00017 	ldw	r3,0(sp)
 404dda0:	a00b883a 	mov	r5,r20
 404dda4:	d8800315 	stw	r2,12(sp)
 404dda8:	1809883a 	mov	r4,r3
 404ddac:	40430140 	call	4043014 <__umodsi3>
 404ddb0:	d9800317 	ldw	r6,12(sp)
 404ddb4:	1006943a 	slli	r3,r2,16
 404ddb8:	9004d43a 	srli	r2,r18,16
 404ddbc:	b9a3383a 	mul	r17,r23,r6
 404ddc0:	10c4b03a 	or	r2,r2,r3
 404ddc4:	1440062e 	bgeu	r2,r17,404dde0 <__divdf3+0x39c>
 404ddc8:	1705883a 	add	r2,r2,fp
 404ddcc:	30ffffc4 	addi	r3,r6,-1
 404ddd0:	1700ee36 	bltu	r2,fp,404e18c <__divdf3+0x748>
 404ddd4:	1440ed2e 	bgeu	r2,r17,404e18c <__divdf3+0x748>
 404ddd8:	31bfff84 	addi	r6,r6,-2
 404dddc:	1705883a 	add	r2,r2,fp
 404dde0:	1463c83a 	sub	r17,r2,r17
 404dde4:	a00b883a 	mov	r5,r20
 404dde8:	8809883a 	mov	r4,r17
 404ddec:	d9800315 	stw	r6,12(sp)
 404ddf0:	4042fb00 	call	4042fb0 <__udivsi3>
 404ddf4:	a00b883a 	mov	r5,r20
 404ddf8:	8809883a 	mov	r4,r17
 404ddfc:	d8800215 	stw	r2,8(sp)
 404de00:	40430140 	call	4043014 <__umodsi3>
 404de04:	d9c00217 	ldw	r7,8(sp)
 404de08:	1004943a 	slli	r2,r2,16
 404de0c:	94bfffcc 	andi	r18,r18,65535
 404de10:	b9d1383a 	mul	r8,r23,r7
 404de14:	90a4b03a 	or	r18,r18,r2
 404de18:	d9800317 	ldw	r6,12(sp)
 404de1c:	9200062e 	bgeu	r18,r8,404de38 <__divdf3+0x3f4>
 404de20:	9725883a 	add	r18,r18,fp
 404de24:	38bfffc4 	addi	r2,r7,-1
 404de28:	9700d636 	bltu	r18,fp,404e184 <__divdf3+0x740>
 404de2c:	9200d52e 	bgeu	r18,r8,404e184 <__divdf3+0x740>
 404de30:	39ffff84 	addi	r7,r7,-2
 404de34:	9725883a 	add	r18,r18,fp
 404de38:	3004943a 	slli	r2,r6,16
 404de3c:	b012d43a 	srli	r9,r22,16
 404de40:	b1bfffcc 	andi	r6,r22,65535
 404de44:	11e2b03a 	or	r17,r2,r7
 404de48:	8806d43a 	srli	r3,r17,16
 404de4c:	893fffcc 	andi	r4,r17,65535
 404de50:	218b383a 	mul	r5,r4,r6
 404de54:	30c5383a 	mul	r2,r6,r3
 404de58:	2249383a 	mul	r4,r4,r9
 404de5c:	280ed43a 	srli	r7,r5,16
 404de60:	9225c83a 	sub	r18,r18,r8
 404de64:	2089883a 	add	r4,r4,r2
 404de68:	3909883a 	add	r4,r7,r4
 404de6c:	1a47383a 	mul	r3,r3,r9
 404de70:	2080022e 	bgeu	r4,r2,404de7c <__divdf3+0x438>
 404de74:	00800074 	movhi	r2,1
 404de78:	1887883a 	add	r3,r3,r2
 404de7c:	2004d43a 	srli	r2,r4,16
 404de80:	2008943a 	slli	r4,r4,16
 404de84:	297fffcc 	andi	r5,r5,65535
 404de88:	10c7883a 	add	r3,r2,r3
 404de8c:	2149883a 	add	r4,r4,r5
 404de90:	90c0a536 	bltu	r18,r3,404e128 <__divdf3+0x6e4>
 404de94:	90c0bf26 	beq	r18,r3,404e194 <__divdf3+0x750>
 404de98:	90c7c83a 	sub	r3,r18,r3
 404de9c:	810fc83a 	sub	r7,r16,r4
 404dea0:	81e5803a 	cmpltu	r18,r16,r7
 404dea4:	1ca5c83a 	sub	r18,r3,r18
 404dea8:	e480c126 	beq	fp,r18,404e1b0 <__divdf3+0x76c>
 404deac:	a00b883a 	mov	r5,r20
 404deb0:	9009883a 	mov	r4,r18
 404deb4:	d9800315 	stw	r6,12(sp)
 404deb8:	d9c00215 	stw	r7,8(sp)
 404debc:	da400115 	stw	r9,4(sp)
 404dec0:	4042fb00 	call	4042fb0 <__udivsi3>
 404dec4:	a00b883a 	mov	r5,r20
 404dec8:	9009883a 	mov	r4,r18
 404decc:	d8800015 	stw	r2,0(sp)
 404ded0:	40430140 	call	4043014 <__umodsi3>
 404ded4:	d9c00217 	ldw	r7,8(sp)
 404ded8:	da000017 	ldw	r8,0(sp)
 404dedc:	1006943a 	slli	r3,r2,16
 404dee0:	3804d43a 	srli	r2,r7,16
 404dee4:	ba21383a 	mul	r16,r23,r8
 404dee8:	d9800317 	ldw	r6,12(sp)
 404deec:	10c4b03a 	or	r2,r2,r3
 404def0:	da400117 	ldw	r9,4(sp)
 404def4:	1400062e 	bgeu	r2,r16,404df10 <__divdf3+0x4cc>
 404def8:	1705883a 	add	r2,r2,fp
 404defc:	40ffffc4 	addi	r3,r8,-1
 404df00:	1700ad36 	bltu	r2,fp,404e1b8 <__divdf3+0x774>
 404df04:	1400ac2e 	bgeu	r2,r16,404e1b8 <__divdf3+0x774>
 404df08:	423fff84 	addi	r8,r8,-2
 404df0c:	1705883a 	add	r2,r2,fp
 404df10:	1421c83a 	sub	r16,r2,r16
 404df14:	a00b883a 	mov	r5,r20
 404df18:	8009883a 	mov	r4,r16
 404df1c:	d9800315 	stw	r6,12(sp)
 404df20:	d9c00215 	stw	r7,8(sp)
 404df24:	da000015 	stw	r8,0(sp)
 404df28:	da400115 	stw	r9,4(sp)
 404df2c:	4042fb00 	call	4042fb0 <__udivsi3>
 404df30:	8009883a 	mov	r4,r16
 404df34:	a00b883a 	mov	r5,r20
 404df38:	1025883a 	mov	r18,r2
 404df3c:	40430140 	call	4043014 <__umodsi3>
 404df40:	d9c00217 	ldw	r7,8(sp)
 404df44:	1004943a 	slli	r2,r2,16
 404df48:	bcaf383a 	mul	r23,r23,r18
 404df4c:	393fffcc 	andi	r4,r7,65535
 404df50:	2088b03a 	or	r4,r4,r2
 404df54:	d9800317 	ldw	r6,12(sp)
 404df58:	da000017 	ldw	r8,0(sp)
 404df5c:	da400117 	ldw	r9,4(sp)
 404df60:	25c0062e 	bgeu	r4,r23,404df7c <__divdf3+0x538>
 404df64:	2709883a 	add	r4,r4,fp
 404df68:	90bfffc4 	addi	r2,r18,-1
 404df6c:	27009436 	bltu	r4,fp,404e1c0 <__divdf3+0x77c>
 404df70:	25c0932e 	bgeu	r4,r23,404e1c0 <__divdf3+0x77c>
 404df74:	94bfff84 	addi	r18,r18,-2
 404df78:	2709883a 	add	r4,r4,fp
 404df7c:	4004943a 	slli	r2,r8,16
 404df80:	25efc83a 	sub	r23,r4,r23
 404df84:	1490b03a 	or	r8,r2,r18
 404df88:	4008d43a 	srli	r4,r8,16
 404df8c:	40ffffcc 	andi	r3,r8,65535
 404df90:	30c5383a 	mul	r2,r6,r3
 404df94:	1a47383a 	mul	r3,r3,r9
 404df98:	310d383a 	mul	r6,r6,r4
 404df9c:	100ad43a 	srli	r5,r2,16
 404dfa0:	4913383a 	mul	r9,r9,r4
 404dfa4:	1987883a 	add	r3,r3,r6
 404dfa8:	28c7883a 	add	r3,r5,r3
 404dfac:	1980022e 	bgeu	r3,r6,404dfb8 <__divdf3+0x574>
 404dfb0:	01000074 	movhi	r4,1
 404dfb4:	4913883a 	add	r9,r9,r4
 404dfb8:	1808d43a 	srli	r4,r3,16
 404dfbc:	1806943a 	slli	r3,r3,16
 404dfc0:	10bfffcc 	andi	r2,r2,65535
 404dfc4:	2253883a 	add	r9,r4,r9
 404dfc8:	1887883a 	add	r3,r3,r2
 404dfcc:	ba403836 	bltu	r23,r9,404e0b0 <__divdf3+0x66c>
 404dfd0:	ba403626 	beq	r23,r9,404e0ac <__divdf3+0x668>
 404dfd4:	42000054 	ori	r8,r8,1
 404dfd8:	a880ffc4 	addi	r2,r21,1023
 404dfdc:	00bf570e 	bge	zero,r2,404dd3c <__flash_rwdata_start+0xffff360c>
 404dfe0:	40c001cc 	andi	r3,r8,7
 404dfe4:	18000726 	beq	r3,zero,404e004 <__divdf3+0x5c0>
 404dfe8:	40c003cc 	andi	r3,r8,15
 404dfec:	01000104 	movi	r4,4
 404dff0:	19000426 	beq	r3,r4,404e004 <__divdf3+0x5c0>
 404dff4:	4107883a 	add	r3,r8,r4
 404dff8:	1a11803a 	cmpltu	r8,r3,r8
 404dffc:	8a23883a 	add	r17,r17,r8
 404e000:	1811883a 	mov	r8,r3
 404e004:	88c0402c 	andhi	r3,r17,256
 404e008:	18000426 	beq	r3,zero,404e01c <__divdf3+0x5d8>
 404e00c:	00ffc034 	movhi	r3,65280
 404e010:	18ffffc4 	addi	r3,r3,-1
 404e014:	a8810004 	addi	r2,r21,1024
 404e018:	88e2703a 	and	r17,r17,r3
 404e01c:	00c1ff84 	movi	r3,2046
 404e020:	18bee316 	blt	r3,r2,404dbb0 <__flash_rwdata_start+0xffff3480>
 404e024:	8824977a 	slli	r18,r17,29
 404e028:	4010d0fa 	srli	r8,r8,3
 404e02c:	8822927a 	slli	r17,r17,9
 404e030:	1081ffcc 	andi	r2,r2,2047
 404e034:	9224b03a 	or	r18,r18,r8
 404e038:	880ad33a 	srli	r5,r17,12
 404e03c:	98c0004c 	andi	r3,r19,1
 404e040:	003edf06 	br	404dbc0 <__flash_rwdata_start+0xffff3490>
 404e044:	8080022c 	andhi	r2,r16,8
 404e048:	10001226 	beq	r2,zero,404e094 <__divdf3+0x650>
 404e04c:	8880022c 	andhi	r2,r17,8
 404e050:	1000101e 	bne	r2,zero,404e094 <__divdf3+0x650>
 404e054:	00800434 	movhi	r2,16
 404e058:	89400234 	orhi	r5,r17,8
 404e05c:	10bfffc4 	addi	r2,r2,-1
 404e060:	b007883a 	mov	r3,r22
 404e064:	288a703a 	and	r5,r5,r2
 404e068:	4025883a 	mov	r18,r8
 404e06c:	003f3106 	br	404dd34 <__flash_rwdata_start+0xffff3604>
 404e070:	008000c4 	movi	r2,3
 404e074:	3880a626 	beq	r7,r2,404e310 <__divdf3+0x8cc>
 404e078:	00800044 	movi	r2,1
 404e07c:	3880521e 	bne	r7,r2,404e1c8 <__divdf3+0x784>
 404e080:	b807883a 	mov	r3,r23
 404e084:	0005883a 	mov	r2,zero
 404e088:	000b883a 	mov	r5,zero
 404e08c:	0025883a 	mov	r18,zero
 404e090:	003ecb06 	br	404dbc0 <__flash_rwdata_start+0xffff3490>
 404e094:	00800434 	movhi	r2,16
 404e098:	81400234 	orhi	r5,r16,8
 404e09c:	10bfffc4 	addi	r2,r2,-1
 404e0a0:	a007883a 	mov	r3,r20
 404e0a4:	288a703a 	and	r5,r5,r2
 404e0a8:	003f2206 	br	404dd34 <__flash_rwdata_start+0xffff3604>
 404e0ac:	183fca26 	beq	r3,zero,404dfd8 <__flash_rwdata_start+0xffff38a8>
 404e0b0:	e5ef883a 	add	r23,fp,r23
 404e0b4:	40bfffc4 	addi	r2,r8,-1
 404e0b8:	bf00392e 	bgeu	r23,fp,404e1a0 <__divdf3+0x75c>
 404e0bc:	1011883a 	mov	r8,r2
 404e0c0:	ba7fc41e 	bne	r23,r9,404dfd4 <__flash_rwdata_start+0xffff38a4>
 404e0c4:	b0ffc31e 	bne	r22,r3,404dfd4 <__flash_rwdata_start+0xffff38a4>
 404e0c8:	003fc306 	br	404dfd8 <__flash_rwdata_start+0xffff38a8>
 404e0cc:	143ff604 	addi	r16,r2,-40
 404e0d0:	9c20983a 	sll	r16,r19,r16
 404e0d4:	0025883a 	mov	r18,zero
 404e0d8:	003ee206 	br	404dc64 <__flash_rwdata_start+0xffff3534>
 404e0dc:	d9800315 	stw	r6,12(sp)
 404e0e0:	d9c00215 	stw	r7,8(sp)
 404e0e4:	404f79c0 	call	404f79c <__clzsi2>
 404e0e8:	10800804 	addi	r2,r2,32
 404e0ec:	d9c00217 	ldw	r7,8(sp)
 404e0f0:	d9800317 	ldw	r6,12(sp)
 404e0f4:	003ed106 	br	404dc3c <__flash_rwdata_start+0xffff350c>
 404e0f8:	147ff604 	addi	r17,r2,-40
 404e0fc:	3462983a 	sll	r17,r6,r17
 404e100:	0011883a 	mov	r8,zero
 404e104:	003ef506 	br	404dcdc <__flash_rwdata_start+0xffff35ac>
 404e108:	3009883a 	mov	r4,r6
 404e10c:	d9800315 	stw	r6,12(sp)
 404e110:	da400115 	stw	r9,4(sp)
 404e114:	404f79c0 	call	404f79c <__clzsi2>
 404e118:	10800804 	addi	r2,r2,32
 404e11c:	da400117 	ldw	r9,4(sp)
 404e120:	d9800317 	ldw	r6,12(sp)
 404e124:	003ee306 	br	404dcb4 <__flash_rwdata_start+0xffff3584>
 404e128:	85a1883a 	add	r16,r16,r22
 404e12c:	8585803a 	cmpltu	r2,r16,r22
 404e130:	1705883a 	add	r2,r2,fp
 404e134:	14a5883a 	add	r18,r2,r18
 404e138:	88bfffc4 	addi	r2,r17,-1
 404e13c:	e4800c2e 	bgeu	fp,r18,404e170 <__divdf3+0x72c>
 404e140:	90c03e36 	bltu	r18,r3,404e23c <__divdf3+0x7f8>
 404e144:	1c806926 	beq	r3,r18,404e2ec <__divdf3+0x8a8>
 404e148:	90c7c83a 	sub	r3,r18,r3
 404e14c:	1023883a 	mov	r17,r2
 404e150:	003f5206 	br	404de9c <__flash_rwdata_start+0xffff376c>
 404e154:	923f0436 	bltu	r18,r8,404dd68 <__flash_rwdata_start+0xffff3638>
 404e158:	800897fa 	slli	r4,r16,31
 404e15c:	9004d07a 	srli	r2,r18,1
 404e160:	8006d07a 	srli	r3,r16,1
 404e164:	902097fa 	slli	r16,r18,31
 404e168:	20a4b03a 	or	r18,r4,r2
 404e16c:	003f0106 	br	404dd74 <__flash_rwdata_start+0xffff3644>
 404e170:	e4bff51e 	bne	fp,r18,404e148 <__flash_rwdata_start+0xffff3a18>
 404e174:	85bff22e 	bgeu	r16,r22,404e140 <__flash_rwdata_start+0xffff3a10>
 404e178:	e0c7c83a 	sub	r3,fp,r3
 404e17c:	1023883a 	mov	r17,r2
 404e180:	003f4606 	br	404de9c <__flash_rwdata_start+0xffff376c>
 404e184:	100f883a 	mov	r7,r2
 404e188:	003f2b06 	br	404de38 <__flash_rwdata_start+0xffff3708>
 404e18c:	180d883a 	mov	r6,r3
 404e190:	003f1306 	br	404dde0 <__flash_rwdata_start+0xffff36b0>
 404e194:	813fe436 	bltu	r16,r4,404e128 <__flash_rwdata_start+0xffff39f8>
 404e198:	0007883a 	mov	r3,zero
 404e19c:	003f3f06 	br	404de9c <__flash_rwdata_start+0xffff376c>
 404e1a0:	ba402c36 	bltu	r23,r9,404e254 <__divdf3+0x810>
 404e1a4:	4dc05426 	beq	r9,r23,404e2f8 <__divdf3+0x8b4>
 404e1a8:	1011883a 	mov	r8,r2
 404e1ac:	003f8906 	br	404dfd4 <__flash_rwdata_start+0xffff38a4>
 404e1b0:	023fffc4 	movi	r8,-1
 404e1b4:	003f8806 	br	404dfd8 <__flash_rwdata_start+0xffff38a8>
 404e1b8:	1811883a 	mov	r8,r3
 404e1bc:	003f5406 	br	404df10 <__flash_rwdata_start+0xffff37e0>
 404e1c0:	1025883a 	mov	r18,r2
 404e1c4:	003f6d06 	br	404df7c <__flash_rwdata_start+0xffff384c>
 404e1c8:	b827883a 	mov	r19,r23
 404e1cc:	003f8206 	br	404dfd8 <__flash_rwdata_start+0xffff38a8>
 404e1d0:	010007c4 	movi	r4,31
 404e1d4:	20c02616 	blt	r4,r3,404e270 <__divdf3+0x82c>
 404e1d8:	00800804 	movi	r2,32
 404e1dc:	10c5c83a 	sub	r2,r2,r3
 404e1e0:	888a983a 	sll	r5,r17,r2
 404e1e4:	40c8d83a 	srl	r4,r8,r3
 404e1e8:	4084983a 	sll	r2,r8,r2
 404e1ec:	88e2d83a 	srl	r17,r17,r3
 404e1f0:	2906b03a 	or	r3,r5,r4
 404e1f4:	1004c03a 	cmpne	r2,r2,zero
 404e1f8:	1886b03a 	or	r3,r3,r2
 404e1fc:	188001cc 	andi	r2,r3,7
 404e200:	10000726 	beq	r2,zero,404e220 <__divdf3+0x7dc>
 404e204:	188003cc 	andi	r2,r3,15
 404e208:	01000104 	movi	r4,4
 404e20c:	11000426 	beq	r2,r4,404e220 <__divdf3+0x7dc>
 404e210:	1805883a 	mov	r2,r3
 404e214:	10c00104 	addi	r3,r2,4
 404e218:	1885803a 	cmpltu	r2,r3,r2
 404e21c:	88a3883a 	add	r17,r17,r2
 404e220:	8880202c 	andhi	r2,r17,128
 404e224:	10002726 	beq	r2,zero,404e2c4 <__divdf3+0x880>
 404e228:	98c0004c 	andi	r3,r19,1
 404e22c:	00800044 	movi	r2,1
 404e230:	000b883a 	mov	r5,zero
 404e234:	0025883a 	mov	r18,zero
 404e238:	003e6106 	br	404dbc0 <__flash_rwdata_start+0xffff3490>
 404e23c:	85a1883a 	add	r16,r16,r22
 404e240:	8585803a 	cmpltu	r2,r16,r22
 404e244:	1705883a 	add	r2,r2,fp
 404e248:	14a5883a 	add	r18,r2,r18
 404e24c:	8c7fff84 	addi	r17,r17,-2
 404e250:	003f1106 	br	404de98 <__flash_rwdata_start+0xffff3768>
 404e254:	b589883a 	add	r4,r22,r22
 404e258:	25ad803a 	cmpltu	r22,r4,r22
 404e25c:	b739883a 	add	fp,r22,fp
 404e260:	40bfff84 	addi	r2,r8,-2
 404e264:	bf2f883a 	add	r23,r23,fp
 404e268:	202d883a 	mov	r22,r4
 404e26c:	003f9306 	br	404e0bc <__flash_rwdata_start+0xffff398c>
 404e270:	013ff844 	movi	r4,-31
 404e274:	2085c83a 	sub	r2,r4,r2
 404e278:	8888d83a 	srl	r4,r17,r2
 404e27c:	00800804 	movi	r2,32
 404e280:	18802126 	beq	r3,r2,404e308 <__divdf3+0x8c4>
 404e284:	00801004 	movi	r2,64
 404e288:	10c5c83a 	sub	r2,r2,r3
 404e28c:	8884983a 	sll	r2,r17,r2
 404e290:	1204b03a 	or	r2,r2,r8
 404e294:	1004c03a 	cmpne	r2,r2,zero
 404e298:	2084b03a 	or	r2,r4,r2
 404e29c:	144001cc 	andi	r17,r2,7
 404e2a0:	88000d1e 	bne	r17,zero,404e2d8 <__divdf3+0x894>
 404e2a4:	000b883a 	mov	r5,zero
 404e2a8:	1024d0fa 	srli	r18,r2,3
 404e2ac:	98c0004c 	andi	r3,r19,1
 404e2b0:	0005883a 	mov	r2,zero
 404e2b4:	9464b03a 	or	r18,r18,r17
 404e2b8:	003e4106 	br	404dbc0 <__flash_rwdata_start+0xffff3490>
 404e2bc:	1007883a 	mov	r3,r2
 404e2c0:	0023883a 	mov	r17,zero
 404e2c4:	880a927a 	slli	r5,r17,9
 404e2c8:	1805883a 	mov	r2,r3
 404e2cc:	8822977a 	slli	r17,r17,29
 404e2d0:	280ad33a 	srli	r5,r5,12
 404e2d4:	003ff406 	br	404e2a8 <__flash_rwdata_start+0xffff3b78>
 404e2d8:	10c003cc 	andi	r3,r2,15
 404e2dc:	01000104 	movi	r4,4
 404e2e0:	193ff626 	beq	r3,r4,404e2bc <__flash_rwdata_start+0xffff3b8c>
 404e2e4:	0023883a 	mov	r17,zero
 404e2e8:	003fca06 	br	404e214 <__flash_rwdata_start+0xffff3ae4>
 404e2ec:	813fd336 	bltu	r16,r4,404e23c <__flash_rwdata_start+0xffff3b0c>
 404e2f0:	1023883a 	mov	r17,r2
 404e2f4:	003fa806 	br	404e198 <__flash_rwdata_start+0xffff3a68>
 404e2f8:	b0ffd636 	bltu	r22,r3,404e254 <__flash_rwdata_start+0xffff3b24>
 404e2fc:	1011883a 	mov	r8,r2
 404e300:	b0ff341e 	bne	r22,r3,404dfd4 <__flash_rwdata_start+0xffff38a4>
 404e304:	003f3406 	br	404dfd8 <__flash_rwdata_start+0xffff38a8>
 404e308:	0005883a 	mov	r2,zero
 404e30c:	003fe006 	br	404e290 <__flash_rwdata_start+0xffff3b60>
 404e310:	00800434 	movhi	r2,16
 404e314:	89400234 	orhi	r5,r17,8
 404e318:	10bfffc4 	addi	r2,r2,-1
 404e31c:	b807883a 	mov	r3,r23
 404e320:	288a703a 	and	r5,r5,r2
 404e324:	4025883a 	mov	r18,r8
 404e328:	003e8206 	br	404dd34 <__flash_rwdata_start+0xffff3604>

0404e32c <__eqdf2>:
 404e32c:	2804d53a 	srli	r2,r5,20
 404e330:	3806d53a 	srli	r3,r7,20
 404e334:	02000434 	movhi	r8,16
 404e338:	423fffc4 	addi	r8,r8,-1
 404e33c:	1081ffcc 	andi	r2,r2,2047
 404e340:	0281ffc4 	movi	r10,2047
 404e344:	2a12703a 	and	r9,r5,r8
 404e348:	18c1ffcc 	andi	r3,r3,2047
 404e34c:	3a10703a 	and	r8,r7,r8
 404e350:	280ad7fa 	srli	r5,r5,31
 404e354:	380ed7fa 	srli	r7,r7,31
 404e358:	12801026 	beq	r2,r10,404e39c <__eqdf2+0x70>
 404e35c:	0281ffc4 	movi	r10,2047
 404e360:	1a800a26 	beq	r3,r10,404e38c <__eqdf2+0x60>
 404e364:	10c00226 	beq	r2,r3,404e370 <__eqdf2+0x44>
 404e368:	00800044 	movi	r2,1
 404e36c:	f800283a 	ret
 404e370:	4a3ffd1e 	bne	r9,r8,404e368 <__flash_rwdata_start+0xffff3c38>
 404e374:	21bffc1e 	bne	r4,r6,404e368 <__flash_rwdata_start+0xffff3c38>
 404e378:	29c00c26 	beq	r5,r7,404e3ac <__eqdf2+0x80>
 404e37c:	103ffa1e 	bne	r2,zero,404e368 <__flash_rwdata_start+0xffff3c38>
 404e380:	2244b03a 	or	r2,r4,r9
 404e384:	1004c03a 	cmpne	r2,r2,zero
 404e388:	f800283a 	ret
 404e38c:	3214b03a 	or	r10,r6,r8
 404e390:	503ff426 	beq	r10,zero,404e364 <__flash_rwdata_start+0xffff3c34>
 404e394:	00800044 	movi	r2,1
 404e398:	f800283a 	ret
 404e39c:	2254b03a 	or	r10,r4,r9
 404e3a0:	503fee26 	beq	r10,zero,404e35c <__flash_rwdata_start+0xffff3c2c>
 404e3a4:	00800044 	movi	r2,1
 404e3a8:	f800283a 	ret
 404e3ac:	0005883a 	mov	r2,zero
 404e3b0:	f800283a 	ret

0404e3b4 <__gedf2>:
 404e3b4:	2804d53a 	srli	r2,r5,20
 404e3b8:	3806d53a 	srli	r3,r7,20
 404e3bc:	02000434 	movhi	r8,16
 404e3c0:	423fffc4 	addi	r8,r8,-1
 404e3c4:	1081ffcc 	andi	r2,r2,2047
 404e3c8:	0241ffc4 	movi	r9,2047
 404e3cc:	2a14703a 	and	r10,r5,r8
 404e3d0:	18c1ffcc 	andi	r3,r3,2047
 404e3d4:	3a10703a 	and	r8,r7,r8
 404e3d8:	280ad7fa 	srli	r5,r5,31
 404e3dc:	380ed7fa 	srli	r7,r7,31
 404e3e0:	12401d26 	beq	r2,r9,404e458 <__gedf2+0xa4>
 404e3e4:	0241ffc4 	movi	r9,2047
 404e3e8:	1a401226 	beq	r3,r9,404e434 <__gedf2+0x80>
 404e3ec:	1000081e 	bne	r2,zero,404e410 <__gedf2+0x5c>
 404e3f0:	2296b03a 	or	r11,r4,r10
 404e3f4:	5813003a 	cmpeq	r9,r11,zero
 404e3f8:	1800091e 	bne	r3,zero,404e420 <__gedf2+0x6c>
 404e3fc:	3218b03a 	or	r12,r6,r8
 404e400:	6000071e 	bne	r12,zero,404e420 <__gedf2+0x6c>
 404e404:	0005883a 	mov	r2,zero
 404e408:	5800101e 	bne	r11,zero,404e44c <__gedf2+0x98>
 404e40c:	f800283a 	ret
 404e410:	18000c1e 	bne	r3,zero,404e444 <__gedf2+0x90>
 404e414:	3212b03a 	or	r9,r6,r8
 404e418:	48000c26 	beq	r9,zero,404e44c <__gedf2+0x98>
 404e41c:	0013883a 	mov	r9,zero
 404e420:	39c03fcc 	andi	r7,r7,255
 404e424:	48000826 	beq	r9,zero,404e448 <__gedf2+0x94>
 404e428:	38000926 	beq	r7,zero,404e450 <__gedf2+0x9c>
 404e42c:	00800044 	movi	r2,1
 404e430:	f800283a 	ret
 404e434:	3212b03a 	or	r9,r6,r8
 404e438:	483fec26 	beq	r9,zero,404e3ec <__flash_rwdata_start+0xffff3cbc>
 404e43c:	00bfff84 	movi	r2,-2
 404e440:	f800283a 	ret
 404e444:	39c03fcc 	andi	r7,r7,255
 404e448:	29c00626 	beq	r5,r7,404e464 <__gedf2+0xb0>
 404e44c:	283ff726 	beq	r5,zero,404e42c <__flash_rwdata_start+0xffff3cfc>
 404e450:	00bfffc4 	movi	r2,-1
 404e454:	f800283a 	ret
 404e458:	2292b03a 	or	r9,r4,r10
 404e45c:	483fe126 	beq	r9,zero,404e3e4 <__flash_rwdata_start+0xffff3cb4>
 404e460:	003ff606 	br	404e43c <__flash_rwdata_start+0xffff3d0c>
 404e464:	18bff916 	blt	r3,r2,404e44c <__flash_rwdata_start+0xffff3d1c>
 404e468:	10c00316 	blt	r2,r3,404e478 <__gedf2+0xc4>
 404e46c:	42bff736 	bltu	r8,r10,404e44c <__flash_rwdata_start+0xffff3d1c>
 404e470:	52000326 	beq	r10,r8,404e480 <__gedf2+0xcc>
 404e474:	5200042e 	bgeu	r10,r8,404e488 <__gedf2+0xd4>
 404e478:	283fec1e 	bne	r5,zero,404e42c <__flash_rwdata_start+0xffff3cfc>
 404e47c:	003ff406 	br	404e450 <__flash_rwdata_start+0xffff3d20>
 404e480:	313ff236 	bltu	r6,r4,404e44c <__flash_rwdata_start+0xffff3d1c>
 404e484:	21bffc36 	bltu	r4,r6,404e478 <__flash_rwdata_start+0xffff3d48>
 404e488:	0005883a 	mov	r2,zero
 404e48c:	f800283a 	ret

0404e490 <__ledf2>:
 404e490:	2804d53a 	srli	r2,r5,20
 404e494:	3810d53a 	srli	r8,r7,20
 404e498:	00c00434 	movhi	r3,16
 404e49c:	18ffffc4 	addi	r3,r3,-1
 404e4a0:	1081ffcc 	andi	r2,r2,2047
 404e4a4:	0241ffc4 	movi	r9,2047
 404e4a8:	28d4703a 	and	r10,r5,r3
 404e4ac:	4201ffcc 	andi	r8,r8,2047
 404e4b0:	38c6703a 	and	r3,r7,r3
 404e4b4:	280ad7fa 	srli	r5,r5,31
 404e4b8:	380ed7fa 	srli	r7,r7,31
 404e4bc:	12401f26 	beq	r2,r9,404e53c <__ledf2+0xac>
 404e4c0:	0241ffc4 	movi	r9,2047
 404e4c4:	42401426 	beq	r8,r9,404e518 <__ledf2+0x88>
 404e4c8:	1000091e 	bne	r2,zero,404e4f0 <__ledf2+0x60>
 404e4cc:	2296b03a 	or	r11,r4,r10
 404e4d0:	5813003a 	cmpeq	r9,r11,zero
 404e4d4:	29403fcc 	andi	r5,r5,255
 404e4d8:	40000a1e 	bne	r8,zero,404e504 <__ledf2+0x74>
 404e4dc:	30d8b03a 	or	r12,r6,r3
 404e4e0:	6000081e 	bne	r12,zero,404e504 <__ledf2+0x74>
 404e4e4:	0005883a 	mov	r2,zero
 404e4e8:	5800111e 	bne	r11,zero,404e530 <__ledf2+0xa0>
 404e4ec:	f800283a 	ret
 404e4f0:	29403fcc 	andi	r5,r5,255
 404e4f4:	40000c1e 	bne	r8,zero,404e528 <__ledf2+0x98>
 404e4f8:	30d2b03a 	or	r9,r6,r3
 404e4fc:	48000c26 	beq	r9,zero,404e530 <__ledf2+0xa0>
 404e500:	0013883a 	mov	r9,zero
 404e504:	39c03fcc 	andi	r7,r7,255
 404e508:	48000826 	beq	r9,zero,404e52c <__ledf2+0x9c>
 404e50c:	38001126 	beq	r7,zero,404e554 <__ledf2+0xc4>
 404e510:	00800044 	movi	r2,1
 404e514:	f800283a 	ret
 404e518:	30d2b03a 	or	r9,r6,r3
 404e51c:	483fea26 	beq	r9,zero,404e4c8 <__flash_rwdata_start+0xffff3d98>
 404e520:	00800084 	movi	r2,2
 404e524:	f800283a 	ret
 404e528:	39c03fcc 	andi	r7,r7,255
 404e52c:	39400726 	beq	r7,r5,404e54c <__ledf2+0xbc>
 404e530:	2800081e 	bne	r5,zero,404e554 <__ledf2+0xc4>
 404e534:	00800044 	movi	r2,1
 404e538:	f800283a 	ret
 404e53c:	2292b03a 	or	r9,r4,r10
 404e540:	483fdf26 	beq	r9,zero,404e4c0 <__flash_rwdata_start+0xffff3d90>
 404e544:	00800084 	movi	r2,2
 404e548:	f800283a 	ret
 404e54c:	4080030e 	bge	r8,r2,404e55c <__ledf2+0xcc>
 404e550:	383fef26 	beq	r7,zero,404e510 <__flash_rwdata_start+0xffff3de0>
 404e554:	00bfffc4 	movi	r2,-1
 404e558:	f800283a 	ret
 404e55c:	123feb16 	blt	r2,r8,404e50c <__flash_rwdata_start+0xffff3ddc>
 404e560:	1abff336 	bltu	r3,r10,404e530 <__flash_rwdata_start+0xffff3e00>
 404e564:	50c00326 	beq	r10,r3,404e574 <__ledf2+0xe4>
 404e568:	50c0042e 	bgeu	r10,r3,404e57c <__ledf2+0xec>
 404e56c:	283fe81e 	bne	r5,zero,404e510 <__flash_rwdata_start+0xffff3de0>
 404e570:	003ff806 	br	404e554 <__flash_rwdata_start+0xffff3e24>
 404e574:	313fee36 	bltu	r6,r4,404e530 <__flash_rwdata_start+0xffff3e00>
 404e578:	21bffc36 	bltu	r4,r6,404e56c <__flash_rwdata_start+0xffff3e3c>
 404e57c:	0005883a 	mov	r2,zero
 404e580:	f800283a 	ret

0404e584 <__muldf3>:
 404e584:	defff304 	addi	sp,sp,-52
 404e588:	2804d53a 	srli	r2,r5,20
 404e58c:	dd800915 	stw	r22,36(sp)
 404e590:	282cd7fa 	srli	r22,r5,31
 404e594:	dc000315 	stw	r16,12(sp)
 404e598:	04000434 	movhi	r16,16
 404e59c:	dd400815 	stw	r21,32(sp)
 404e5a0:	dc800515 	stw	r18,20(sp)
 404e5a4:	843fffc4 	addi	r16,r16,-1
 404e5a8:	dfc00c15 	stw	ra,48(sp)
 404e5ac:	df000b15 	stw	fp,44(sp)
 404e5b0:	ddc00a15 	stw	r23,40(sp)
 404e5b4:	dd000715 	stw	r20,28(sp)
 404e5b8:	dcc00615 	stw	r19,24(sp)
 404e5bc:	dc400415 	stw	r17,16(sp)
 404e5c0:	1481ffcc 	andi	r18,r2,2047
 404e5c4:	2c20703a 	and	r16,r5,r16
 404e5c8:	b02b883a 	mov	r21,r22
 404e5cc:	b2403fcc 	andi	r9,r22,255
 404e5d0:	90006026 	beq	r18,zero,404e754 <__muldf3+0x1d0>
 404e5d4:	0081ffc4 	movi	r2,2047
 404e5d8:	2029883a 	mov	r20,r4
 404e5dc:	90803626 	beq	r18,r2,404e6b8 <__muldf3+0x134>
 404e5e0:	80800434 	orhi	r2,r16,16
 404e5e4:	100490fa 	slli	r2,r2,3
 404e5e8:	2020d77a 	srli	r16,r4,29
 404e5ec:	202890fa 	slli	r20,r4,3
 404e5f0:	94bf0044 	addi	r18,r18,-1023
 404e5f4:	80a0b03a 	or	r16,r16,r2
 404e5f8:	0027883a 	mov	r19,zero
 404e5fc:	0039883a 	mov	fp,zero
 404e600:	3804d53a 	srli	r2,r7,20
 404e604:	382ed7fa 	srli	r23,r7,31
 404e608:	04400434 	movhi	r17,16
 404e60c:	8c7fffc4 	addi	r17,r17,-1
 404e610:	1081ffcc 	andi	r2,r2,2047
 404e614:	3011883a 	mov	r8,r6
 404e618:	3c62703a 	and	r17,r7,r17
 404e61c:	ba803fcc 	andi	r10,r23,255
 404e620:	10006d26 	beq	r2,zero,404e7d8 <__muldf3+0x254>
 404e624:	00c1ffc4 	movi	r3,2047
 404e628:	10c06526 	beq	r2,r3,404e7c0 <__muldf3+0x23c>
 404e62c:	88c00434 	orhi	r3,r17,16
 404e630:	180690fa 	slli	r3,r3,3
 404e634:	3022d77a 	srli	r17,r6,29
 404e638:	301090fa 	slli	r8,r6,3
 404e63c:	10bf0044 	addi	r2,r2,-1023
 404e640:	88e2b03a 	or	r17,r17,r3
 404e644:	000b883a 	mov	r5,zero
 404e648:	9085883a 	add	r2,r18,r2
 404e64c:	2cc8b03a 	or	r4,r5,r19
 404e650:	00c003c4 	movi	r3,15
 404e654:	bdacf03a 	xor	r22,r23,r22
 404e658:	12c00044 	addi	r11,r2,1
 404e65c:	19009936 	bltu	r3,r4,404e8c4 <__muldf3+0x340>
 404e660:	200890ba 	slli	r4,r4,2
 404e664:	00c10174 	movhi	r3,1029
 404e668:	18f99e04 	addi	r3,r3,-6536
 404e66c:	20c9883a 	add	r4,r4,r3
 404e670:	20c00017 	ldw	r3,0(r4)
 404e674:	1800683a 	jmp	r3
 404e678:	0404e8c4 	movi	r16,5027
 404e67c:	0404e6d8 	cmpnei	r16,zero,5019
 404e680:	0404e6d8 	cmpnei	r16,zero,5019
 404e684:	0404e6d4 	movui	r16,5019
 404e688:	0404e8a0 	cmpeqi	r16,zero,5026
 404e68c:	0404e8a0 	cmpeqi	r16,zero,5026
 404e690:	0404e888 	cmpgei	r16,zero,5026
 404e694:	0404e6d4 	movui	r16,5019
 404e698:	0404e8a0 	cmpeqi	r16,zero,5026
 404e69c:	0404e888 	cmpgei	r16,zero,5026
 404e6a0:	0404e8a0 	cmpeqi	r16,zero,5026
 404e6a4:	0404e6d4 	movui	r16,5019
 404e6a8:	0404e8b0 	cmpltui	r16,zero,5026
 404e6ac:	0404e8b0 	cmpltui	r16,zero,5026
 404e6b0:	0404e8b0 	cmpltui	r16,zero,5026
 404e6b4:	0404eacc 	andi	r16,zero,5035
 404e6b8:	2404b03a 	or	r2,r4,r16
 404e6bc:	10006f1e 	bne	r2,zero,404e87c <__muldf3+0x2f8>
 404e6c0:	04c00204 	movi	r19,8
 404e6c4:	0021883a 	mov	r16,zero
 404e6c8:	0029883a 	mov	r20,zero
 404e6cc:	07000084 	movi	fp,2
 404e6d0:	003fcb06 	br	404e600 <__flash_rwdata_start+0xffff3ed0>
 404e6d4:	502d883a 	mov	r22,r10
 404e6d8:	00800084 	movi	r2,2
 404e6dc:	28805726 	beq	r5,r2,404e83c <__muldf3+0x2b8>
 404e6e0:	008000c4 	movi	r2,3
 404e6e4:	28816626 	beq	r5,r2,404ec80 <__muldf3+0x6fc>
 404e6e8:	00800044 	movi	r2,1
 404e6ec:	2881411e 	bne	r5,r2,404ebf4 <__muldf3+0x670>
 404e6f0:	b02b883a 	mov	r21,r22
 404e6f4:	0005883a 	mov	r2,zero
 404e6f8:	000b883a 	mov	r5,zero
 404e6fc:	0029883a 	mov	r20,zero
 404e700:	1004953a 	slli	r2,r2,20
 404e704:	a8c03fcc 	andi	r3,r21,255
 404e708:	04400434 	movhi	r17,16
 404e70c:	8c7fffc4 	addi	r17,r17,-1
 404e710:	180697fa 	slli	r3,r3,31
 404e714:	2c4a703a 	and	r5,r5,r17
 404e718:	288ab03a 	or	r5,r5,r2
 404e71c:	28c6b03a 	or	r3,r5,r3
 404e720:	a005883a 	mov	r2,r20
 404e724:	dfc00c17 	ldw	ra,48(sp)
 404e728:	df000b17 	ldw	fp,44(sp)
 404e72c:	ddc00a17 	ldw	r23,40(sp)
 404e730:	dd800917 	ldw	r22,36(sp)
 404e734:	dd400817 	ldw	r21,32(sp)
 404e738:	dd000717 	ldw	r20,28(sp)
 404e73c:	dcc00617 	ldw	r19,24(sp)
 404e740:	dc800517 	ldw	r18,20(sp)
 404e744:	dc400417 	ldw	r17,16(sp)
 404e748:	dc000317 	ldw	r16,12(sp)
 404e74c:	dec00d04 	addi	sp,sp,52
 404e750:	f800283a 	ret
 404e754:	2404b03a 	or	r2,r4,r16
 404e758:	2027883a 	mov	r19,r4
 404e75c:	10004226 	beq	r2,zero,404e868 <__muldf3+0x2e4>
 404e760:	8000fc26 	beq	r16,zero,404eb54 <__muldf3+0x5d0>
 404e764:	8009883a 	mov	r4,r16
 404e768:	d9800215 	stw	r6,8(sp)
 404e76c:	d9c00015 	stw	r7,0(sp)
 404e770:	da400115 	stw	r9,4(sp)
 404e774:	404f79c0 	call	404f79c <__clzsi2>
 404e778:	d9800217 	ldw	r6,8(sp)
 404e77c:	d9c00017 	ldw	r7,0(sp)
 404e780:	da400117 	ldw	r9,4(sp)
 404e784:	113ffd44 	addi	r4,r2,-11
 404e788:	00c00704 	movi	r3,28
 404e78c:	1900ed16 	blt	r3,r4,404eb44 <__muldf3+0x5c0>
 404e790:	00c00744 	movi	r3,29
 404e794:	147ffe04 	addi	r17,r2,-8
 404e798:	1907c83a 	sub	r3,r3,r4
 404e79c:	8460983a 	sll	r16,r16,r17
 404e7a0:	98c6d83a 	srl	r3,r19,r3
 404e7a4:	9c68983a 	sll	r20,r19,r17
 404e7a8:	1c20b03a 	or	r16,r3,r16
 404e7ac:	1080fcc4 	addi	r2,r2,1011
 404e7b0:	00a5c83a 	sub	r18,zero,r2
 404e7b4:	0027883a 	mov	r19,zero
 404e7b8:	0039883a 	mov	fp,zero
 404e7bc:	003f9006 	br	404e600 <__flash_rwdata_start+0xffff3ed0>
 404e7c0:	3446b03a 	or	r3,r6,r17
 404e7c4:	1800261e 	bne	r3,zero,404e860 <__muldf3+0x2dc>
 404e7c8:	0023883a 	mov	r17,zero
 404e7cc:	0011883a 	mov	r8,zero
 404e7d0:	01400084 	movi	r5,2
 404e7d4:	003f9c06 	br	404e648 <__flash_rwdata_start+0xffff3f18>
 404e7d8:	3446b03a 	or	r3,r6,r17
 404e7dc:	18001c26 	beq	r3,zero,404e850 <__muldf3+0x2cc>
 404e7e0:	8800ce26 	beq	r17,zero,404eb1c <__muldf3+0x598>
 404e7e4:	8809883a 	mov	r4,r17
 404e7e8:	d9800215 	stw	r6,8(sp)
 404e7ec:	da400115 	stw	r9,4(sp)
 404e7f0:	da800015 	stw	r10,0(sp)
 404e7f4:	404f79c0 	call	404f79c <__clzsi2>
 404e7f8:	d9800217 	ldw	r6,8(sp)
 404e7fc:	da400117 	ldw	r9,4(sp)
 404e800:	da800017 	ldw	r10,0(sp)
 404e804:	113ffd44 	addi	r4,r2,-11
 404e808:	00c00704 	movi	r3,28
 404e80c:	1900bf16 	blt	r3,r4,404eb0c <__muldf3+0x588>
 404e810:	00c00744 	movi	r3,29
 404e814:	123ffe04 	addi	r8,r2,-8
 404e818:	1907c83a 	sub	r3,r3,r4
 404e81c:	8a22983a 	sll	r17,r17,r8
 404e820:	30c6d83a 	srl	r3,r6,r3
 404e824:	3210983a 	sll	r8,r6,r8
 404e828:	1c62b03a 	or	r17,r3,r17
 404e82c:	1080fcc4 	addi	r2,r2,1011
 404e830:	0085c83a 	sub	r2,zero,r2
 404e834:	000b883a 	mov	r5,zero
 404e838:	003f8306 	br	404e648 <__flash_rwdata_start+0xffff3f18>
 404e83c:	b02b883a 	mov	r21,r22
 404e840:	0081ffc4 	movi	r2,2047
 404e844:	000b883a 	mov	r5,zero
 404e848:	0029883a 	mov	r20,zero
 404e84c:	003fac06 	br	404e700 <__flash_rwdata_start+0xffff3fd0>
 404e850:	0023883a 	mov	r17,zero
 404e854:	0011883a 	mov	r8,zero
 404e858:	01400044 	movi	r5,1
 404e85c:	003f7a06 	br	404e648 <__flash_rwdata_start+0xffff3f18>
 404e860:	014000c4 	movi	r5,3
 404e864:	003f7806 	br	404e648 <__flash_rwdata_start+0xffff3f18>
 404e868:	04c00104 	movi	r19,4
 404e86c:	0021883a 	mov	r16,zero
 404e870:	0029883a 	mov	r20,zero
 404e874:	07000044 	movi	fp,1
 404e878:	003f6106 	br	404e600 <__flash_rwdata_start+0xffff3ed0>
 404e87c:	04c00304 	movi	r19,12
 404e880:	070000c4 	movi	fp,3
 404e884:	003f5e06 	br	404e600 <__flash_rwdata_start+0xffff3ed0>
 404e888:	01400434 	movhi	r5,16
 404e88c:	002b883a 	mov	r21,zero
 404e890:	297fffc4 	addi	r5,r5,-1
 404e894:	053fffc4 	movi	r20,-1
 404e898:	0081ffc4 	movi	r2,2047
 404e89c:	003f9806 	br	404e700 <__flash_rwdata_start+0xffff3fd0>
 404e8a0:	8023883a 	mov	r17,r16
 404e8a4:	a011883a 	mov	r8,r20
 404e8a8:	e00b883a 	mov	r5,fp
 404e8ac:	003f8a06 	br	404e6d8 <__flash_rwdata_start+0xffff3fa8>
 404e8b0:	8023883a 	mov	r17,r16
 404e8b4:	a011883a 	mov	r8,r20
 404e8b8:	482d883a 	mov	r22,r9
 404e8bc:	e00b883a 	mov	r5,fp
 404e8c0:	003f8506 	br	404e6d8 <__flash_rwdata_start+0xffff3fa8>
 404e8c4:	a00ad43a 	srli	r5,r20,16
 404e8c8:	401ad43a 	srli	r13,r8,16
 404e8cc:	a53fffcc 	andi	r20,r20,65535
 404e8d0:	423fffcc 	andi	r8,r8,65535
 404e8d4:	4519383a 	mul	r12,r8,r20
 404e8d8:	4147383a 	mul	r3,r8,r5
 404e8dc:	6d09383a 	mul	r4,r13,r20
 404e8e0:	600cd43a 	srli	r6,r12,16
 404e8e4:	2b5d383a 	mul	r14,r5,r13
 404e8e8:	20c9883a 	add	r4,r4,r3
 404e8ec:	310d883a 	add	r6,r6,r4
 404e8f0:	30c0022e 	bgeu	r6,r3,404e8fc <__muldf3+0x378>
 404e8f4:	00c00074 	movhi	r3,1
 404e8f8:	70dd883a 	add	r14,r14,r3
 404e8fc:	8826d43a 	srli	r19,r17,16
 404e900:	8bffffcc 	andi	r15,r17,65535
 404e904:	7d23383a 	mul	r17,r15,r20
 404e908:	7949383a 	mul	r4,r15,r5
 404e90c:	9d29383a 	mul	r20,r19,r20
 404e910:	8814d43a 	srli	r10,r17,16
 404e914:	3012943a 	slli	r9,r6,16
 404e918:	a129883a 	add	r20,r20,r4
 404e91c:	633fffcc 	andi	r12,r12,65535
 404e920:	5515883a 	add	r10,r10,r20
 404e924:	3006d43a 	srli	r3,r6,16
 404e928:	4b13883a 	add	r9,r9,r12
 404e92c:	2ccb383a 	mul	r5,r5,r19
 404e930:	5100022e 	bgeu	r10,r4,404e93c <__muldf3+0x3b8>
 404e934:	01000074 	movhi	r4,1
 404e938:	290b883a 	add	r5,r5,r4
 404e93c:	802ad43a 	srli	r21,r16,16
 404e940:	843fffcc 	andi	r16,r16,65535
 404e944:	440d383a 	mul	r6,r8,r16
 404e948:	4565383a 	mul	r18,r8,r21
 404e94c:	8349383a 	mul	r4,r16,r13
 404e950:	500e943a 	slli	r7,r10,16
 404e954:	3010d43a 	srli	r8,r6,16
 404e958:	5028d43a 	srli	r20,r10,16
 404e95c:	2489883a 	add	r4,r4,r18
 404e960:	8abfffcc 	andi	r10,r17,65535
 404e964:	3a95883a 	add	r10,r7,r10
 404e968:	4119883a 	add	r12,r8,r4
 404e96c:	a169883a 	add	r20,r20,r5
 404e970:	1a87883a 	add	r3,r3,r10
 404e974:	6d5b383a 	mul	r13,r13,r21
 404e978:	6480022e 	bgeu	r12,r18,404e984 <__muldf3+0x400>
 404e97c:	01000074 	movhi	r4,1
 404e980:	691b883a 	add	r13,r13,r4
 404e984:	7c25383a 	mul	r18,r15,r16
 404e988:	7d4b383a 	mul	r5,r15,r21
 404e98c:	84cf383a 	mul	r7,r16,r19
 404e990:	901ed43a 	srli	r15,r18,16
 404e994:	6008d43a 	srli	r4,r12,16
 404e998:	6010943a 	slli	r8,r12,16
 404e99c:	394f883a 	add	r7,r7,r5
 404e9a0:	333fffcc 	andi	r12,r6,65535
 404e9a4:	79df883a 	add	r15,r15,r7
 404e9a8:	235b883a 	add	r13,r4,r13
 404e9ac:	9d63383a 	mul	r17,r19,r21
 404e9b0:	4309883a 	add	r4,r8,r12
 404e9b4:	7940022e 	bgeu	r15,r5,404e9c0 <__muldf3+0x43c>
 404e9b8:	01400074 	movhi	r5,1
 404e9bc:	8963883a 	add	r17,r17,r5
 404e9c0:	780a943a 	slli	r5,r15,16
 404e9c4:	91bfffcc 	andi	r6,r18,65535
 404e9c8:	70c7883a 	add	r3,r14,r3
 404e9cc:	298d883a 	add	r6,r5,r6
 404e9d0:	1a8f803a 	cmpltu	r7,r3,r10
 404e9d4:	350b883a 	add	r5,r6,r20
 404e9d8:	20c7883a 	add	r3,r4,r3
 404e9dc:	3955883a 	add	r10,r7,r5
 404e9e0:	1909803a 	cmpltu	r4,r3,r4
 404e9e4:	6a91883a 	add	r8,r13,r10
 404e9e8:	780cd43a 	srli	r6,r15,16
 404e9ec:	2219883a 	add	r12,r4,r8
 404e9f0:	2d0b803a 	cmpltu	r5,r5,r20
 404e9f4:	51cf803a 	cmpltu	r7,r10,r7
 404e9f8:	29ceb03a 	or	r7,r5,r7
 404e9fc:	4351803a 	cmpltu	r8,r8,r13
 404ea00:	610b803a 	cmpltu	r5,r12,r4
 404ea04:	4148b03a 	or	r4,r8,r5
 404ea08:	398f883a 	add	r7,r7,r6
 404ea0c:	3909883a 	add	r4,r7,r4
 404ea10:	1810927a 	slli	r8,r3,9
 404ea14:	2449883a 	add	r4,r4,r17
 404ea18:	2008927a 	slli	r4,r4,9
 404ea1c:	6022d5fa 	srli	r17,r12,23
 404ea20:	1806d5fa 	srli	r3,r3,23
 404ea24:	4252b03a 	or	r9,r8,r9
 404ea28:	600a927a 	slli	r5,r12,9
 404ea2c:	4810c03a 	cmpne	r8,r9,zero
 404ea30:	2462b03a 	or	r17,r4,r17
 404ea34:	40c6b03a 	or	r3,r8,r3
 404ea38:	8900402c 	andhi	r4,r17,256
 404ea3c:	1950b03a 	or	r8,r3,r5
 404ea40:	20000726 	beq	r4,zero,404ea60 <__muldf3+0x4dc>
 404ea44:	4006d07a 	srli	r3,r8,1
 404ea48:	880497fa 	slli	r2,r17,31
 404ea4c:	4200004c 	andi	r8,r8,1
 404ea50:	8822d07a 	srli	r17,r17,1
 404ea54:	1a10b03a 	or	r8,r3,r8
 404ea58:	1210b03a 	or	r8,r2,r8
 404ea5c:	5805883a 	mov	r2,r11
 404ea60:	1140ffc4 	addi	r5,r2,1023
 404ea64:	0140440e 	bge	zero,r5,404eb78 <__muldf3+0x5f4>
 404ea68:	40c001cc 	andi	r3,r8,7
 404ea6c:	18000726 	beq	r3,zero,404ea8c <__muldf3+0x508>
 404ea70:	40c003cc 	andi	r3,r8,15
 404ea74:	01000104 	movi	r4,4
 404ea78:	19000426 	beq	r3,r4,404ea8c <__muldf3+0x508>
 404ea7c:	4107883a 	add	r3,r8,r4
 404ea80:	1a11803a 	cmpltu	r8,r3,r8
 404ea84:	8a23883a 	add	r17,r17,r8
 404ea88:	1811883a 	mov	r8,r3
 404ea8c:	88c0402c 	andhi	r3,r17,256
 404ea90:	18000426 	beq	r3,zero,404eaa4 <__muldf3+0x520>
 404ea94:	11410004 	addi	r5,r2,1024
 404ea98:	00bfc034 	movhi	r2,65280
 404ea9c:	10bfffc4 	addi	r2,r2,-1
 404eaa0:	88a2703a 	and	r17,r17,r2
 404eaa4:	0081ff84 	movi	r2,2046
 404eaa8:	117f6416 	blt	r2,r5,404e83c <__flash_rwdata_start+0xffff410c>
 404eaac:	8828977a 	slli	r20,r17,29
 404eab0:	4010d0fa 	srli	r8,r8,3
 404eab4:	8822927a 	slli	r17,r17,9
 404eab8:	2881ffcc 	andi	r2,r5,2047
 404eabc:	a228b03a 	or	r20,r20,r8
 404eac0:	880ad33a 	srli	r5,r17,12
 404eac4:	b02b883a 	mov	r21,r22
 404eac8:	003f0d06 	br	404e700 <__flash_rwdata_start+0xffff3fd0>
 404eacc:	8080022c 	andhi	r2,r16,8
 404ead0:	10000926 	beq	r2,zero,404eaf8 <__muldf3+0x574>
 404ead4:	8880022c 	andhi	r2,r17,8
 404ead8:	1000071e 	bne	r2,zero,404eaf8 <__muldf3+0x574>
 404eadc:	00800434 	movhi	r2,16
 404eae0:	89400234 	orhi	r5,r17,8
 404eae4:	10bfffc4 	addi	r2,r2,-1
 404eae8:	b82b883a 	mov	r21,r23
 404eaec:	288a703a 	and	r5,r5,r2
 404eaf0:	4029883a 	mov	r20,r8
 404eaf4:	003f6806 	br	404e898 <__flash_rwdata_start+0xffff4168>
 404eaf8:	00800434 	movhi	r2,16
 404eafc:	81400234 	orhi	r5,r16,8
 404eb00:	10bfffc4 	addi	r2,r2,-1
 404eb04:	288a703a 	and	r5,r5,r2
 404eb08:	003f6306 	br	404e898 <__flash_rwdata_start+0xffff4168>
 404eb0c:	147ff604 	addi	r17,r2,-40
 404eb10:	3462983a 	sll	r17,r6,r17
 404eb14:	0011883a 	mov	r8,zero
 404eb18:	003f4406 	br	404e82c <__flash_rwdata_start+0xffff40fc>
 404eb1c:	3009883a 	mov	r4,r6
 404eb20:	d9800215 	stw	r6,8(sp)
 404eb24:	da400115 	stw	r9,4(sp)
 404eb28:	da800015 	stw	r10,0(sp)
 404eb2c:	404f79c0 	call	404f79c <__clzsi2>
 404eb30:	10800804 	addi	r2,r2,32
 404eb34:	da800017 	ldw	r10,0(sp)
 404eb38:	da400117 	ldw	r9,4(sp)
 404eb3c:	d9800217 	ldw	r6,8(sp)
 404eb40:	003f3006 	br	404e804 <__flash_rwdata_start+0xffff40d4>
 404eb44:	143ff604 	addi	r16,r2,-40
 404eb48:	9c20983a 	sll	r16,r19,r16
 404eb4c:	0029883a 	mov	r20,zero
 404eb50:	003f1606 	br	404e7ac <__flash_rwdata_start+0xffff407c>
 404eb54:	d9800215 	stw	r6,8(sp)
 404eb58:	d9c00015 	stw	r7,0(sp)
 404eb5c:	da400115 	stw	r9,4(sp)
 404eb60:	404f79c0 	call	404f79c <__clzsi2>
 404eb64:	10800804 	addi	r2,r2,32
 404eb68:	da400117 	ldw	r9,4(sp)
 404eb6c:	d9c00017 	ldw	r7,0(sp)
 404eb70:	d9800217 	ldw	r6,8(sp)
 404eb74:	003f0306 	br	404e784 <__flash_rwdata_start+0xffff4054>
 404eb78:	00c00044 	movi	r3,1
 404eb7c:	1947c83a 	sub	r3,r3,r5
 404eb80:	00800e04 	movi	r2,56
 404eb84:	10feda16 	blt	r2,r3,404e6f0 <__flash_rwdata_start+0xffff3fc0>
 404eb88:	008007c4 	movi	r2,31
 404eb8c:	10c01b16 	blt	r2,r3,404ebfc <__muldf3+0x678>
 404eb90:	00800804 	movi	r2,32
 404eb94:	10c5c83a 	sub	r2,r2,r3
 404eb98:	888a983a 	sll	r5,r17,r2
 404eb9c:	40c8d83a 	srl	r4,r8,r3
 404eba0:	4084983a 	sll	r2,r8,r2
 404eba4:	88e2d83a 	srl	r17,r17,r3
 404eba8:	2906b03a 	or	r3,r5,r4
 404ebac:	1004c03a 	cmpne	r2,r2,zero
 404ebb0:	1886b03a 	or	r3,r3,r2
 404ebb4:	188001cc 	andi	r2,r3,7
 404ebb8:	10000726 	beq	r2,zero,404ebd8 <__muldf3+0x654>
 404ebbc:	188003cc 	andi	r2,r3,15
 404ebc0:	01000104 	movi	r4,4
 404ebc4:	11000426 	beq	r2,r4,404ebd8 <__muldf3+0x654>
 404ebc8:	1805883a 	mov	r2,r3
 404ebcc:	10c00104 	addi	r3,r2,4
 404ebd0:	1885803a 	cmpltu	r2,r3,r2
 404ebd4:	88a3883a 	add	r17,r17,r2
 404ebd8:	8880202c 	andhi	r2,r17,128
 404ebdc:	10001c26 	beq	r2,zero,404ec50 <__muldf3+0x6cc>
 404ebe0:	b02b883a 	mov	r21,r22
 404ebe4:	00800044 	movi	r2,1
 404ebe8:	000b883a 	mov	r5,zero
 404ebec:	0029883a 	mov	r20,zero
 404ebf0:	003ec306 	br	404e700 <__flash_rwdata_start+0xffff3fd0>
 404ebf4:	5805883a 	mov	r2,r11
 404ebf8:	003f9906 	br	404ea60 <__flash_rwdata_start+0xffff4330>
 404ebfc:	00bff844 	movi	r2,-31
 404ec00:	1145c83a 	sub	r2,r2,r5
 404ec04:	8888d83a 	srl	r4,r17,r2
 404ec08:	00800804 	movi	r2,32
 404ec0c:	18801a26 	beq	r3,r2,404ec78 <__muldf3+0x6f4>
 404ec10:	00801004 	movi	r2,64
 404ec14:	10c5c83a 	sub	r2,r2,r3
 404ec18:	8884983a 	sll	r2,r17,r2
 404ec1c:	1204b03a 	or	r2,r2,r8
 404ec20:	1004c03a 	cmpne	r2,r2,zero
 404ec24:	2084b03a 	or	r2,r4,r2
 404ec28:	144001cc 	andi	r17,r2,7
 404ec2c:	88000d1e 	bne	r17,zero,404ec64 <__muldf3+0x6e0>
 404ec30:	000b883a 	mov	r5,zero
 404ec34:	1028d0fa 	srli	r20,r2,3
 404ec38:	b02b883a 	mov	r21,r22
 404ec3c:	0005883a 	mov	r2,zero
 404ec40:	a468b03a 	or	r20,r20,r17
 404ec44:	003eae06 	br	404e700 <__flash_rwdata_start+0xffff3fd0>
 404ec48:	1007883a 	mov	r3,r2
 404ec4c:	0023883a 	mov	r17,zero
 404ec50:	880a927a 	slli	r5,r17,9
 404ec54:	1805883a 	mov	r2,r3
 404ec58:	8822977a 	slli	r17,r17,29
 404ec5c:	280ad33a 	srli	r5,r5,12
 404ec60:	003ff406 	br	404ec34 <__flash_rwdata_start+0xffff4504>
 404ec64:	10c003cc 	andi	r3,r2,15
 404ec68:	01000104 	movi	r4,4
 404ec6c:	193ff626 	beq	r3,r4,404ec48 <__flash_rwdata_start+0xffff4518>
 404ec70:	0023883a 	mov	r17,zero
 404ec74:	003fd506 	br	404ebcc <__flash_rwdata_start+0xffff449c>
 404ec78:	0005883a 	mov	r2,zero
 404ec7c:	003fe706 	br	404ec1c <__flash_rwdata_start+0xffff44ec>
 404ec80:	00800434 	movhi	r2,16
 404ec84:	89400234 	orhi	r5,r17,8
 404ec88:	10bfffc4 	addi	r2,r2,-1
 404ec8c:	b02b883a 	mov	r21,r22
 404ec90:	288a703a 	and	r5,r5,r2
 404ec94:	4029883a 	mov	r20,r8
 404ec98:	003eff06 	br	404e898 <__flash_rwdata_start+0xffff4168>

0404ec9c <__subdf3>:
 404ec9c:	02000434 	movhi	r8,16
 404eca0:	423fffc4 	addi	r8,r8,-1
 404eca4:	defffb04 	addi	sp,sp,-20
 404eca8:	2a14703a 	and	r10,r5,r8
 404ecac:	3812d53a 	srli	r9,r7,20
 404ecb0:	3a10703a 	and	r8,r7,r8
 404ecb4:	2006d77a 	srli	r3,r4,29
 404ecb8:	3004d77a 	srli	r2,r6,29
 404ecbc:	dc000015 	stw	r16,0(sp)
 404ecc0:	501490fa 	slli	r10,r10,3
 404ecc4:	2820d53a 	srli	r16,r5,20
 404ecc8:	401090fa 	slli	r8,r8,3
 404eccc:	dc800215 	stw	r18,8(sp)
 404ecd0:	dc400115 	stw	r17,4(sp)
 404ecd4:	dfc00415 	stw	ra,16(sp)
 404ecd8:	202290fa 	slli	r17,r4,3
 404ecdc:	dcc00315 	stw	r19,12(sp)
 404ece0:	4a41ffcc 	andi	r9,r9,2047
 404ece4:	0101ffc4 	movi	r4,2047
 404ece8:	2824d7fa 	srli	r18,r5,31
 404ecec:	8401ffcc 	andi	r16,r16,2047
 404ecf0:	50c6b03a 	or	r3,r10,r3
 404ecf4:	380ed7fa 	srli	r7,r7,31
 404ecf8:	408ab03a 	or	r5,r8,r2
 404ecfc:	300c90fa 	slli	r6,r6,3
 404ed00:	49009626 	beq	r9,r4,404ef5c <__subdf3+0x2c0>
 404ed04:	39c0005c 	xori	r7,r7,1
 404ed08:	8245c83a 	sub	r2,r16,r9
 404ed0c:	3c807426 	beq	r7,r18,404eee0 <__subdf3+0x244>
 404ed10:	0080af0e 	bge	zero,r2,404efd0 <__subdf3+0x334>
 404ed14:	48002a1e 	bne	r9,zero,404edc0 <__subdf3+0x124>
 404ed18:	2988b03a 	or	r4,r5,r6
 404ed1c:	20009a1e 	bne	r4,zero,404ef88 <__subdf3+0x2ec>
 404ed20:	888001cc 	andi	r2,r17,7
 404ed24:	10000726 	beq	r2,zero,404ed44 <__subdf3+0xa8>
 404ed28:	888003cc 	andi	r2,r17,15
 404ed2c:	01000104 	movi	r4,4
 404ed30:	11000426 	beq	r2,r4,404ed44 <__subdf3+0xa8>
 404ed34:	890b883a 	add	r5,r17,r4
 404ed38:	2c63803a 	cmpltu	r17,r5,r17
 404ed3c:	1c47883a 	add	r3,r3,r17
 404ed40:	2823883a 	mov	r17,r5
 404ed44:	1880202c 	andhi	r2,r3,128
 404ed48:	10005926 	beq	r2,zero,404eeb0 <__subdf3+0x214>
 404ed4c:	84000044 	addi	r16,r16,1
 404ed50:	0081ffc4 	movi	r2,2047
 404ed54:	8080be26 	beq	r16,r2,404f050 <__subdf3+0x3b4>
 404ed58:	017fe034 	movhi	r5,65408
 404ed5c:	297fffc4 	addi	r5,r5,-1
 404ed60:	1946703a 	and	r3,r3,r5
 404ed64:	1804977a 	slli	r2,r3,29
 404ed68:	1806927a 	slli	r3,r3,9
 404ed6c:	8822d0fa 	srli	r17,r17,3
 404ed70:	8401ffcc 	andi	r16,r16,2047
 404ed74:	180ad33a 	srli	r5,r3,12
 404ed78:	9100004c 	andi	r4,r18,1
 404ed7c:	1444b03a 	or	r2,r2,r17
 404ed80:	80c1ffcc 	andi	r3,r16,2047
 404ed84:	1820953a 	slli	r16,r3,20
 404ed88:	20c03fcc 	andi	r3,r4,255
 404ed8c:	180897fa 	slli	r4,r3,31
 404ed90:	00c00434 	movhi	r3,16
 404ed94:	18ffffc4 	addi	r3,r3,-1
 404ed98:	28c6703a 	and	r3,r5,r3
 404ed9c:	1c06b03a 	or	r3,r3,r16
 404eda0:	1906b03a 	or	r3,r3,r4
 404eda4:	dfc00417 	ldw	ra,16(sp)
 404eda8:	dcc00317 	ldw	r19,12(sp)
 404edac:	dc800217 	ldw	r18,8(sp)
 404edb0:	dc400117 	ldw	r17,4(sp)
 404edb4:	dc000017 	ldw	r16,0(sp)
 404edb8:	dec00504 	addi	sp,sp,20
 404edbc:	f800283a 	ret
 404edc0:	0101ffc4 	movi	r4,2047
 404edc4:	813fd626 	beq	r16,r4,404ed20 <__flash_rwdata_start+0xffff45f0>
 404edc8:	29402034 	orhi	r5,r5,128
 404edcc:	01000e04 	movi	r4,56
 404edd0:	2080a316 	blt	r4,r2,404f060 <__subdf3+0x3c4>
 404edd4:	010007c4 	movi	r4,31
 404edd8:	2080c616 	blt	r4,r2,404f0f4 <__subdf3+0x458>
 404eddc:	01000804 	movi	r4,32
 404ede0:	2089c83a 	sub	r4,r4,r2
 404ede4:	2910983a 	sll	r8,r5,r4
 404ede8:	308ed83a 	srl	r7,r6,r2
 404edec:	3108983a 	sll	r4,r6,r4
 404edf0:	2884d83a 	srl	r2,r5,r2
 404edf4:	41ccb03a 	or	r6,r8,r7
 404edf8:	2008c03a 	cmpne	r4,r4,zero
 404edfc:	310cb03a 	or	r6,r6,r4
 404ee00:	898dc83a 	sub	r6,r17,r6
 404ee04:	89a3803a 	cmpltu	r17,r17,r6
 404ee08:	1887c83a 	sub	r3,r3,r2
 404ee0c:	1c47c83a 	sub	r3,r3,r17
 404ee10:	3023883a 	mov	r17,r6
 404ee14:	1880202c 	andhi	r2,r3,128
 404ee18:	10002326 	beq	r2,zero,404eea8 <__subdf3+0x20c>
 404ee1c:	04c02034 	movhi	r19,128
 404ee20:	9cffffc4 	addi	r19,r19,-1
 404ee24:	1ce6703a 	and	r19,r3,r19
 404ee28:	98007a26 	beq	r19,zero,404f014 <__subdf3+0x378>
 404ee2c:	9809883a 	mov	r4,r19
 404ee30:	404f79c0 	call	404f79c <__clzsi2>
 404ee34:	113ffe04 	addi	r4,r2,-8
 404ee38:	00c007c4 	movi	r3,31
 404ee3c:	19007b16 	blt	r3,r4,404f02c <__subdf3+0x390>
 404ee40:	00800804 	movi	r2,32
 404ee44:	1105c83a 	sub	r2,r2,r4
 404ee48:	8884d83a 	srl	r2,r17,r2
 404ee4c:	9906983a 	sll	r3,r19,r4
 404ee50:	8922983a 	sll	r17,r17,r4
 404ee54:	10c4b03a 	or	r2,r2,r3
 404ee58:	24007816 	blt	r4,r16,404f03c <__subdf3+0x3a0>
 404ee5c:	2421c83a 	sub	r16,r4,r16
 404ee60:	80c00044 	addi	r3,r16,1
 404ee64:	010007c4 	movi	r4,31
 404ee68:	20c09516 	blt	r4,r3,404f0c0 <__subdf3+0x424>
 404ee6c:	01400804 	movi	r5,32
 404ee70:	28cbc83a 	sub	r5,r5,r3
 404ee74:	88c8d83a 	srl	r4,r17,r3
 404ee78:	8962983a 	sll	r17,r17,r5
 404ee7c:	114a983a 	sll	r5,r2,r5
 404ee80:	10c6d83a 	srl	r3,r2,r3
 404ee84:	8804c03a 	cmpne	r2,r17,zero
 404ee88:	290ab03a 	or	r5,r5,r4
 404ee8c:	28a2b03a 	or	r17,r5,r2
 404ee90:	0021883a 	mov	r16,zero
 404ee94:	003fa206 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404ee98:	2090b03a 	or	r8,r4,r2
 404ee9c:	40018e26 	beq	r8,zero,404f4d8 <__subdf3+0x83c>
 404eea0:	1007883a 	mov	r3,r2
 404eea4:	2023883a 	mov	r17,r4
 404eea8:	888001cc 	andi	r2,r17,7
 404eeac:	103f9e1e 	bne	r2,zero,404ed28 <__flash_rwdata_start+0xffff45f8>
 404eeb0:	1804977a 	slli	r2,r3,29
 404eeb4:	8822d0fa 	srli	r17,r17,3
 404eeb8:	1810d0fa 	srli	r8,r3,3
 404eebc:	9100004c 	andi	r4,r18,1
 404eec0:	1444b03a 	or	r2,r2,r17
 404eec4:	00c1ffc4 	movi	r3,2047
 404eec8:	80c02826 	beq	r16,r3,404ef6c <__subdf3+0x2d0>
 404eecc:	01400434 	movhi	r5,16
 404eed0:	297fffc4 	addi	r5,r5,-1
 404eed4:	80e0703a 	and	r16,r16,r3
 404eed8:	414a703a 	and	r5,r8,r5
 404eedc:	003fa806 	br	404ed80 <__flash_rwdata_start+0xffff4650>
 404eee0:	0080630e 	bge	zero,r2,404f070 <__subdf3+0x3d4>
 404eee4:	48003026 	beq	r9,zero,404efa8 <__subdf3+0x30c>
 404eee8:	0101ffc4 	movi	r4,2047
 404eeec:	813f8c26 	beq	r16,r4,404ed20 <__flash_rwdata_start+0xffff45f0>
 404eef0:	29402034 	orhi	r5,r5,128
 404eef4:	01000e04 	movi	r4,56
 404eef8:	2080a90e 	bge	r4,r2,404f1a0 <__subdf3+0x504>
 404eefc:	298cb03a 	or	r6,r5,r6
 404ef00:	3012c03a 	cmpne	r9,r6,zero
 404ef04:	0005883a 	mov	r2,zero
 404ef08:	4c53883a 	add	r9,r9,r17
 404ef0c:	4c63803a 	cmpltu	r17,r9,r17
 404ef10:	10c7883a 	add	r3,r2,r3
 404ef14:	88c7883a 	add	r3,r17,r3
 404ef18:	4823883a 	mov	r17,r9
 404ef1c:	1880202c 	andhi	r2,r3,128
 404ef20:	1000d026 	beq	r2,zero,404f264 <__subdf3+0x5c8>
 404ef24:	84000044 	addi	r16,r16,1
 404ef28:	0081ffc4 	movi	r2,2047
 404ef2c:	8080fe26 	beq	r16,r2,404f328 <__subdf3+0x68c>
 404ef30:	00bfe034 	movhi	r2,65408
 404ef34:	10bfffc4 	addi	r2,r2,-1
 404ef38:	1886703a 	and	r3,r3,r2
 404ef3c:	880ad07a 	srli	r5,r17,1
 404ef40:	180497fa 	slli	r2,r3,31
 404ef44:	8900004c 	andi	r4,r17,1
 404ef48:	2922b03a 	or	r17,r5,r4
 404ef4c:	1806d07a 	srli	r3,r3,1
 404ef50:	1462b03a 	or	r17,r2,r17
 404ef54:	3825883a 	mov	r18,r7
 404ef58:	003f7106 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404ef5c:	2984b03a 	or	r2,r5,r6
 404ef60:	103f6826 	beq	r2,zero,404ed04 <__flash_rwdata_start+0xffff45d4>
 404ef64:	39c03fcc 	andi	r7,r7,255
 404ef68:	003f6706 	br	404ed08 <__flash_rwdata_start+0xffff45d8>
 404ef6c:	4086b03a 	or	r3,r8,r2
 404ef70:	18015226 	beq	r3,zero,404f4bc <__subdf3+0x820>
 404ef74:	00c00434 	movhi	r3,16
 404ef78:	41400234 	orhi	r5,r8,8
 404ef7c:	18ffffc4 	addi	r3,r3,-1
 404ef80:	28ca703a 	and	r5,r5,r3
 404ef84:	003f7e06 	br	404ed80 <__flash_rwdata_start+0xffff4650>
 404ef88:	10bfffc4 	addi	r2,r2,-1
 404ef8c:	1000491e 	bne	r2,zero,404f0b4 <__subdf3+0x418>
 404ef90:	898fc83a 	sub	r7,r17,r6
 404ef94:	89e3803a 	cmpltu	r17,r17,r7
 404ef98:	1947c83a 	sub	r3,r3,r5
 404ef9c:	1c47c83a 	sub	r3,r3,r17
 404efa0:	3823883a 	mov	r17,r7
 404efa4:	003f9b06 	br	404ee14 <__flash_rwdata_start+0xffff46e4>
 404efa8:	2988b03a 	or	r4,r5,r6
 404efac:	203f5c26 	beq	r4,zero,404ed20 <__flash_rwdata_start+0xffff45f0>
 404efb0:	10bfffc4 	addi	r2,r2,-1
 404efb4:	1000931e 	bne	r2,zero,404f204 <__subdf3+0x568>
 404efb8:	898d883a 	add	r6,r17,r6
 404efbc:	3463803a 	cmpltu	r17,r6,r17
 404efc0:	1947883a 	add	r3,r3,r5
 404efc4:	88c7883a 	add	r3,r17,r3
 404efc8:	3023883a 	mov	r17,r6
 404efcc:	003fd306 	br	404ef1c <__flash_rwdata_start+0xffff47ec>
 404efd0:	1000541e 	bne	r2,zero,404f124 <__subdf3+0x488>
 404efd4:	80800044 	addi	r2,r16,1
 404efd8:	1081ffcc 	andi	r2,r2,2047
 404efdc:	01000044 	movi	r4,1
 404efe0:	2080a20e 	bge	r4,r2,404f26c <__subdf3+0x5d0>
 404efe4:	8989c83a 	sub	r4,r17,r6
 404efe8:	8905803a 	cmpltu	r2,r17,r4
 404efec:	1967c83a 	sub	r19,r3,r5
 404eff0:	98a7c83a 	sub	r19,r19,r2
 404eff4:	9880202c 	andhi	r2,r19,128
 404eff8:	10006326 	beq	r2,zero,404f188 <__subdf3+0x4ec>
 404effc:	3463c83a 	sub	r17,r6,r17
 404f000:	28c7c83a 	sub	r3,r5,r3
 404f004:	344d803a 	cmpltu	r6,r6,r17
 404f008:	19a7c83a 	sub	r19,r3,r6
 404f00c:	3825883a 	mov	r18,r7
 404f010:	983f861e 	bne	r19,zero,404ee2c <__flash_rwdata_start+0xffff46fc>
 404f014:	8809883a 	mov	r4,r17
 404f018:	404f79c0 	call	404f79c <__clzsi2>
 404f01c:	10800804 	addi	r2,r2,32
 404f020:	113ffe04 	addi	r4,r2,-8
 404f024:	00c007c4 	movi	r3,31
 404f028:	193f850e 	bge	r3,r4,404ee40 <__flash_rwdata_start+0xffff4710>
 404f02c:	10bff604 	addi	r2,r2,-40
 404f030:	8884983a 	sll	r2,r17,r2
 404f034:	0023883a 	mov	r17,zero
 404f038:	243f880e 	bge	r4,r16,404ee5c <__flash_rwdata_start+0xffff472c>
 404f03c:	00ffe034 	movhi	r3,65408
 404f040:	18ffffc4 	addi	r3,r3,-1
 404f044:	8121c83a 	sub	r16,r16,r4
 404f048:	10c6703a 	and	r3,r2,r3
 404f04c:	003f3406 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f050:	9100004c 	andi	r4,r18,1
 404f054:	000b883a 	mov	r5,zero
 404f058:	0005883a 	mov	r2,zero
 404f05c:	003f4806 	br	404ed80 <__flash_rwdata_start+0xffff4650>
 404f060:	298cb03a 	or	r6,r5,r6
 404f064:	300cc03a 	cmpne	r6,r6,zero
 404f068:	0005883a 	mov	r2,zero
 404f06c:	003f6406 	br	404ee00 <__flash_rwdata_start+0xffff46d0>
 404f070:	10009a1e 	bne	r2,zero,404f2dc <__subdf3+0x640>
 404f074:	82400044 	addi	r9,r16,1
 404f078:	4881ffcc 	andi	r2,r9,2047
 404f07c:	02800044 	movi	r10,1
 404f080:	5080670e 	bge	r10,r2,404f220 <__subdf3+0x584>
 404f084:	0081ffc4 	movi	r2,2047
 404f088:	4880af26 	beq	r9,r2,404f348 <__subdf3+0x6ac>
 404f08c:	898d883a 	add	r6,r17,r6
 404f090:	1945883a 	add	r2,r3,r5
 404f094:	3447803a 	cmpltu	r3,r6,r17
 404f098:	1887883a 	add	r3,r3,r2
 404f09c:	182297fa 	slli	r17,r3,31
 404f0a0:	300cd07a 	srli	r6,r6,1
 404f0a4:	1806d07a 	srli	r3,r3,1
 404f0a8:	4821883a 	mov	r16,r9
 404f0ac:	89a2b03a 	or	r17,r17,r6
 404f0b0:	003f1b06 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f0b4:	0101ffc4 	movi	r4,2047
 404f0b8:	813f441e 	bne	r16,r4,404edcc <__flash_rwdata_start+0xffff469c>
 404f0bc:	003f1806 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f0c0:	843ff844 	addi	r16,r16,-31
 404f0c4:	01400804 	movi	r5,32
 404f0c8:	1408d83a 	srl	r4,r2,r16
 404f0cc:	19405026 	beq	r3,r5,404f210 <__subdf3+0x574>
 404f0d0:	01401004 	movi	r5,64
 404f0d4:	28c7c83a 	sub	r3,r5,r3
 404f0d8:	10c4983a 	sll	r2,r2,r3
 404f0dc:	88a2b03a 	or	r17,r17,r2
 404f0e0:	8822c03a 	cmpne	r17,r17,zero
 404f0e4:	2462b03a 	or	r17,r4,r17
 404f0e8:	0007883a 	mov	r3,zero
 404f0ec:	0021883a 	mov	r16,zero
 404f0f0:	003f6d06 	br	404eea8 <__flash_rwdata_start+0xffff4778>
 404f0f4:	11fff804 	addi	r7,r2,-32
 404f0f8:	01000804 	movi	r4,32
 404f0fc:	29ced83a 	srl	r7,r5,r7
 404f100:	11004526 	beq	r2,r4,404f218 <__subdf3+0x57c>
 404f104:	01001004 	movi	r4,64
 404f108:	2089c83a 	sub	r4,r4,r2
 404f10c:	2904983a 	sll	r2,r5,r4
 404f110:	118cb03a 	or	r6,r2,r6
 404f114:	300cc03a 	cmpne	r6,r6,zero
 404f118:	398cb03a 	or	r6,r7,r6
 404f11c:	0005883a 	mov	r2,zero
 404f120:	003f3706 	br	404ee00 <__flash_rwdata_start+0xffff46d0>
 404f124:	80002a26 	beq	r16,zero,404f1d0 <__subdf3+0x534>
 404f128:	0101ffc4 	movi	r4,2047
 404f12c:	49006626 	beq	r9,r4,404f2c8 <__subdf3+0x62c>
 404f130:	0085c83a 	sub	r2,zero,r2
 404f134:	18c02034 	orhi	r3,r3,128
 404f138:	01000e04 	movi	r4,56
 404f13c:	20807e16 	blt	r4,r2,404f338 <__subdf3+0x69c>
 404f140:	010007c4 	movi	r4,31
 404f144:	2080e716 	blt	r4,r2,404f4e4 <__subdf3+0x848>
 404f148:	01000804 	movi	r4,32
 404f14c:	2089c83a 	sub	r4,r4,r2
 404f150:	1914983a 	sll	r10,r3,r4
 404f154:	8890d83a 	srl	r8,r17,r2
 404f158:	8908983a 	sll	r4,r17,r4
 404f15c:	1884d83a 	srl	r2,r3,r2
 404f160:	5222b03a 	or	r17,r10,r8
 404f164:	2006c03a 	cmpne	r3,r4,zero
 404f168:	88e2b03a 	or	r17,r17,r3
 404f16c:	3463c83a 	sub	r17,r6,r17
 404f170:	2885c83a 	sub	r2,r5,r2
 404f174:	344d803a 	cmpltu	r6,r6,r17
 404f178:	1187c83a 	sub	r3,r2,r6
 404f17c:	4821883a 	mov	r16,r9
 404f180:	3825883a 	mov	r18,r7
 404f184:	003f2306 	br	404ee14 <__flash_rwdata_start+0xffff46e4>
 404f188:	24d0b03a 	or	r8,r4,r19
 404f18c:	40001b1e 	bne	r8,zero,404f1fc <__subdf3+0x560>
 404f190:	0005883a 	mov	r2,zero
 404f194:	0009883a 	mov	r4,zero
 404f198:	0021883a 	mov	r16,zero
 404f19c:	003f4906 	br	404eec4 <__flash_rwdata_start+0xffff4794>
 404f1a0:	010007c4 	movi	r4,31
 404f1a4:	20803a16 	blt	r4,r2,404f290 <__subdf3+0x5f4>
 404f1a8:	01000804 	movi	r4,32
 404f1ac:	2089c83a 	sub	r4,r4,r2
 404f1b0:	2912983a 	sll	r9,r5,r4
 404f1b4:	3090d83a 	srl	r8,r6,r2
 404f1b8:	3108983a 	sll	r4,r6,r4
 404f1bc:	2884d83a 	srl	r2,r5,r2
 404f1c0:	4a12b03a 	or	r9,r9,r8
 404f1c4:	2008c03a 	cmpne	r4,r4,zero
 404f1c8:	4912b03a 	or	r9,r9,r4
 404f1cc:	003f4e06 	br	404ef08 <__flash_rwdata_start+0xffff47d8>
 404f1d0:	1c48b03a 	or	r4,r3,r17
 404f1d4:	20003c26 	beq	r4,zero,404f2c8 <__subdf3+0x62c>
 404f1d8:	0084303a 	nor	r2,zero,r2
 404f1dc:	1000381e 	bne	r2,zero,404f2c0 <__subdf3+0x624>
 404f1e0:	3463c83a 	sub	r17,r6,r17
 404f1e4:	28c5c83a 	sub	r2,r5,r3
 404f1e8:	344d803a 	cmpltu	r6,r6,r17
 404f1ec:	1187c83a 	sub	r3,r2,r6
 404f1f0:	4821883a 	mov	r16,r9
 404f1f4:	3825883a 	mov	r18,r7
 404f1f8:	003f0606 	br	404ee14 <__flash_rwdata_start+0xffff46e4>
 404f1fc:	2023883a 	mov	r17,r4
 404f200:	003f0906 	br	404ee28 <__flash_rwdata_start+0xffff46f8>
 404f204:	0101ffc4 	movi	r4,2047
 404f208:	813f3a1e 	bne	r16,r4,404eef4 <__flash_rwdata_start+0xffff47c4>
 404f20c:	003ec406 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f210:	0005883a 	mov	r2,zero
 404f214:	003fb106 	br	404f0dc <__flash_rwdata_start+0xffff49ac>
 404f218:	0005883a 	mov	r2,zero
 404f21c:	003fbc06 	br	404f110 <__flash_rwdata_start+0xffff49e0>
 404f220:	1c44b03a 	or	r2,r3,r17
 404f224:	80008e1e 	bne	r16,zero,404f460 <__subdf3+0x7c4>
 404f228:	1000c826 	beq	r2,zero,404f54c <__subdf3+0x8b0>
 404f22c:	2984b03a 	or	r2,r5,r6
 404f230:	103ebb26 	beq	r2,zero,404ed20 <__flash_rwdata_start+0xffff45f0>
 404f234:	8989883a 	add	r4,r17,r6
 404f238:	1945883a 	add	r2,r3,r5
 404f23c:	2447803a 	cmpltu	r3,r4,r17
 404f240:	1887883a 	add	r3,r3,r2
 404f244:	1880202c 	andhi	r2,r3,128
 404f248:	2023883a 	mov	r17,r4
 404f24c:	103f1626 	beq	r2,zero,404eea8 <__flash_rwdata_start+0xffff4778>
 404f250:	00bfe034 	movhi	r2,65408
 404f254:	10bfffc4 	addi	r2,r2,-1
 404f258:	5021883a 	mov	r16,r10
 404f25c:	1886703a 	and	r3,r3,r2
 404f260:	003eaf06 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f264:	3825883a 	mov	r18,r7
 404f268:	003f0f06 	br	404eea8 <__flash_rwdata_start+0xffff4778>
 404f26c:	1c44b03a 	or	r2,r3,r17
 404f270:	8000251e 	bne	r16,zero,404f308 <__subdf3+0x66c>
 404f274:	1000661e 	bne	r2,zero,404f410 <__subdf3+0x774>
 404f278:	2990b03a 	or	r8,r5,r6
 404f27c:	40009626 	beq	r8,zero,404f4d8 <__subdf3+0x83c>
 404f280:	2807883a 	mov	r3,r5
 404f284:	3023883a 	mov	r17,r6
 404f288:	3825883a 	mov	r18,r7
 404f28c:	003ea406 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f290:	127ff804 	addi	r9,r2,-32
 404f294:	01000804 	movi	r4,32
 404f298:	2a52d83a 	srl	r9,r5,r9
 404f29c:	11008c26 	beq	r2,r4,404f4d0 <__subdf3+0x834>
 404f2a0:	01001004 	movi	r4,64
 404f2a4:	2085c83a 	sub	r2,r4,r2
 404f2a8:	2884983a 	sll	r2,r5,r2
 404f2ac:	118cb03a 	or	r6,r2,r6
 404f2b0:	300cc03a 	cmpne	r6,r6,zero
 404f2b4:	4992b03a 	or	r9,r9,r6
 404f2b8:	0005883a 	mov	r2,zero
 404f2bc:	003f1206 	br	404ef08 <__flash_rwdata_start+0xffff47d8>
 404f2c0:	0101ffc4 	movi	r4,2047
 404f2c4:	493f9c1e 	bne	r9,r4,404f138 <__flash_rwdata_start+0xffff4a08>
 404f2c8:	2807883a 	mov	r3,r5
 404f2cc:	3023883a 	mov	r17,r6
 404f2d0:	4821883a 	mov	r16,r9
 404f2d4:	3825883a 	mov	r18,r7
 404f2d8:	003e9106 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f2dc:	80001f1e 	bne	r16,zero,404f35c <__subdf3+0x6c0>
 404f2e0:	1c48b03a 	or	r4,r3,r17
 404f2e4:	20005a26 	beq	r4,zero,404f450 <__subdf3+0x7b4>
 404f2e8:	0084303a 	nor	r2,zero,r2
 404f2ec:	1000561e 	bne	r2,zero,404f448 <__subdf3+0x7ac>
 404f2f0:	89a3883a 	add	r17,r17,r6
 404f2f4:	1945883a 	add	r2,r3,r5
 404f2f8:	898d803a 	cmpltu	r6,r17,r6
 404f2fc:	3087883a 	add	r3,r6,r2
 404f300:	4821883a 	mov	r16,r9
 404f304:	003f0506 	br	404ef1c <__flash_rwdata_start+0xffff47ec>
 404f308:	10002b1e 	bne	r2,zero,404f3b8 <__subdf3+0x71c>
 404f30c:	2984b03a 	or	r2,r5,r6
 404f310:	10008026 	beq	r2,zero,404f514 <__subdf3+0x878>
 404f314:	2807883a 	mov	r3,r5
 404f318:	3023883a 	mov	r17,r6
 404f31c:	3825883a 	mov	r18,r7
 404f320:	0401ffc4 	movi	r16,2047
 404f324:	003e7e06 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f328:	3809883a 	mov	r4,r7
 404f32c:	0011883a 	mov	r8,zero
 404f330:	0005883a 	mov	r2,zero
 404f334:	003ee306 	br	404eec4 <__flash_rwdata_start+0xffff4794>
 404f338:	1c62b03a 	or	r17,r3,r17
 404f33c:	8822c03a 	cmpne	r17,r17,zero
 404f340:	0005883a 	mov	r2,zero
 404f344:	003f8906 	br	404f16c <__flash_rwdata_start+0xffff4a3c>
 404f348:	3809883a 	mov	r4,r7
 404f34c:	4821883a 	mov	r16,r9
 404f350:	0011883a 	mov	r8,zero
 404f354:	0005883a 	mov	r2,zero
 404f358:	003eda06 	br	404eec4 <__flash_rwdata_start+0xffff4794>
 404f35c:	0101ffc4 	movi	r4,2047
 404f360:	49003b26 	beq	r9,r4,404f450 <__subdf3+0x7b4>
 404f364:	0085c83a 	sub	r2,zero,r2
 404f368:	18c02034 	orhi	r3,r3,128
 404f36c:	01000e04 	movi	r4,56
 404f370:	20806e16 	blt	r4,r2,404f52c <__subdf3+0x890>
 404f374:	010007c4 	movi	r4,31
 404f378:	20807716 	blt	r4,r2,404f558 <__subdf3+0x8bc>
 404f37c:	01000804 	movi	r4,32
 404f380:	2089c83a 	sub	r4,r4,r2
 404f384:	1914983a 	sll	r10,r3,r4
 404f388:	8890d83a 	srl	r8,r17,r2
 404f38c:	8908983a 	sll	r4,r17,r4
 404f390:	1884d83a 	srl	r2,r3,r2
 404f394:	5222b03a 	or	r17,r10,r8
 404f398:	2006c03a 	cmpne	r3,r4,zero
 404f39c:	88e2b03a 	or	r17,r17,r3
 404f3a0:	89a3883a 	add	r17,r17,r6
 404f3a4:	1145883a 	add	r2,r2,r5
 404f3a8:	898d803a 	cmpltu	r6,r17,r6
 404f3ac:	3087883a 	add	r3,r6,r2
 404f3b0:	4821883a 	mov	r16,r9
 404f3b4:	003ed906 	br	404ef1c <__flash_rwdata_start+0xffff47ec>
 404f3b8:	2984b03a 	or	r2,r5,r6
 404f3bc:	10004226 	beq	r2,zero,404f4c8 <__subdf3+0x82c>
 404f3c0:	1808d0fa 	srli	r4,r3,3
 404f3c4:	8822d0fa 	srli	r17,r17,3
 404f3c8:	1806977a 	slli	r3,r3,29
 404f3cc:	2080022c 	andhi	r2,r4,8
 404f3d0:	1c62b03a 	or	r17,r3,r17
 404f3d4:	10000826 	beq	r2,zero,404f3f8 <__subdf3+0x75c>
 404f3d8:	2812d0fa 	srli	r9,r5,3
 404f3dc:	4880022c 	andhi	r2,r9,8
 404f3e0:	1000051e 	bne	r2,zero,404f3f8 <__subdf3+0x75c>
 404f3e4:	300cd0fa 	srli	r6,r6,3
 404f3e8:	2804977a 	slli	r2,r5,29
 404f3ec:	4809883a 	mov	r4,r9
 404f3f0:	3825883a 	mov	r18,r7
 404f3f4:	11a2b03a 	or	r17,r2,r6
 404f3f8:	8806d77a 	srli	r3,r17,29
 404f3fc:	200890fa 	slli	r4,r4,3
 404f400:	882290fa 	slli	r17,r17,3
 404f404:	0401ffc4 	movi	r16,2047
 404f408:	1906b03a 	or	r3,r3,r4
 404f40c:	003e4406 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f410:	2984b03a 	or	r2,r5,r6
 404f414:	103e4226 	beq	r2,zero,404ed20 <__flash_rwdata_start+0xffff45f0>
 404f418:	8989c83a 	sub	r4,r17,r6
 404f41c:	8911803a 	cmpltu	r8,r17,r4
 404f420:	1945c83a 	sub	r2,r3,r5
 404f424:	1205c83a 	sub	r2,r2,r8
 404f428:	1200202c 	andhi	r8,r2,128
 404f42c:	403e9a26 	beq	r8,zero,404ee98 <__flash_rwdata_start+0xffff4768>
 404f430:	3463c83a 	sub	r17,r6,r17
 404f434:	28c5c83a 	sub	r2,r5,r3
 404f438:	344d803a 	cmpltu	r6,r6,r17
 404f43c:	1187c83a 	sub	r3,r2,r6
 404f440:	3825883a 	mov	r18,r7
 404f444:	003e3606 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f448:	0101ffc4 	movi	r4,2047
 404f44c:	493fc71e 	bne	r9,r4,404f36c <__flash_rwdata_start+0xffff4c3c>
 404f450:	2807883a 	mov	r3,r5
 404f454:	3023883a 	mov	r17,r6
 404f458:	4821883a 	mov	r16,r9
 404f45c:	003e3006 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f460:	10003626 	beq	r2,zero,404f53c <__subdf3+0x8a0>
 404f464:	2984b03a 	or	r2,r5,r6
 404f468:	10001726 	beq	r2,zero,404f4c8 <__subdf3+0x82c>
 404f46c:	1808d0fa 	srli	r4,r3,3
 404f470:	8822d0fa 	srli	r17,r17,3
 404f474:	1806977a 	slli	r3,r3,29
 404f478:	2080022c 	andhi	r2,r4,8
 404f47c:	1c62b03a 	or	r17,r3,r17
 404f480:	10000726 	beq	r2,zero,404f4a0 <__subdf3+0x804>
 404f484:	2812d0fa 	srli	r9,r5,3
 404f488:	4880022c 	andhi	r2,r9,8
 404f48c:	1000041e 	bne	r2,zero,404f4a0 <__subdf3+0x804>
 404f490:	300cd0fa 	srli	r6,r6,3
 404f494:	2804977a 	slli	r2,r5,29
 404f498:	4809883a 	mov	r4,r9
 404f49c:	11a2b03a 	or	r17,r2,r6
 404f4a0:	8806d77a 	srli	r3,r17,29
 404f4a4:	200890fa 	slli	r4,r4,3
 404f4a8:	882290fa 	slli	r17,r17,3
 404f4ac:	3825883a 	mov	r18,r7
 404f4b0:	1906b03a 	or	r3,r3,r4
 404f4b4:	0401ffc4 	movi	r16,2047
 404f4b8:	003e1906 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f4bc:	000b883a 	mov	r5,zero
 404f4c0:	0005883a 	mov	r2,zero
 404f4c4:	003e2e06 	br	404ed80 <__flash_rwdata_start+0xffff4650>
 404f4c8:	0401ffc4 	movi	r16,2047
 404f4cc:	003e1406 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f4d0:	0005883a 	mov	r2,zero
 404f4d4:	003f7506 	br	404f2ac <__flash_rwdata_start+0xffff4b7c>
 404f4d8:	0005883a 	mov	r2,zero
 404f4dc:	0009883a 	mov	r4,zero
 404f4e0:	003e7806 	br	404eec4 <__flash_rwdata_start+0xffff4794>
 404f4e4:	123ff804 	addi	r8,r2,-32
 404f4e8:	01000804 	movi	r4,32
 404f4ec:	1a10d83a 	srl	r8,r3,r8
 404f4f0:	11002526 	beq	r2,r4,404f588 <__subdf3+0x8ec>
 404f4f4:	01001004 	movi	r4,64
 404f4f8:	2085c83a 	sub	r2,r4,r2
 404f4fc:	1884983a 	sll	r2,r3,r2
 404f500:	1444b03a 	or	r2,r2,r17
 404f504:	1004c03a 	cmpne	r2,r2,zero
 404f508:	40a2b03a 	or	r17,r8,r2
 404f50c:	0005883a 	mov	r2,zero
 404f510:	003f1606 	br	404f16c <__flash_rwdata_start+0xffff4a3c>
 404f514:	02000434 	movhi	r8,16
 404f518:	0009883a 	mov	r4,zero
 404f51c:	423fffc4 	addi	r8,r8,-1
 404f520:	00bfffc4 	movi	r2,-1
 404f524:	0401ffc4 	movi	r16,2047
 404f528:	003e6606 	br	404eec4 <__flash_rwdata_start+0xffff4794>
 404f52c:	1c62b03a 	or	r17,r3,r17
 404f530:	8822c03a 	cmpne	r17,r17,zero
 404f534:	0005883a 	mov	r2,zero
 404f538:	003f9906 	br	404f3a0 <__flash_rwdata_start+0xffff4c70>
 404f53c:	2807883a 	mov	r3,r5
 404f540:	3023883a 	mov	r17,r6
 404f544:	0401ffc4 	movi	r16,2047
 404f548:	003df506 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f54c:	2807883a 	mov	r3,r5
 404f550:	3023883a 	mov	r17,r6
 404f554:	003df206 	br	404ed20 <__flash_rwdata_start+0xffff45f0>
 404f558:	123ff804 	addi	r8,r2,-32
 404f55c:	01000804 	movi	r4,32
 404f560:	1a10d83a 	srl	r8,r3,r8
 404f564:	11000a26 	beq	r2,r4,404f590 <__subdf3+0x8f4>
 404f568:	01001004 	movi	r4,64
 404f56c:	2085c83a 	sub	r2,r4,r2
 404f570:	1884983a 	sll	r2,r3,r2
 404f574:	1444b03a 	or	r2,r2,r17
 404f578:	1004c03a 	cmpne	r2,r2,zero
 404f57c:	40a2b03a 	or	r17,r8,r2
 404f580:	0005883a 	mov	r2,zero
 404f584:	003f8606 	br	404f3a0 <__flash_rwdata_start+0xffff4c70>
 404f588:	0005883a 	mov	r2,zero
 404f58c:	003fdc06 	br	404f500 <__flash_rwdata_start+0xffff4dd0>
 404f590:	0005883a 	mov	r2,zero
 404f594:	003ff706 	br	404f574 <__flash_rwdata_start+0xffff4e44>

0404f598 <__fixdfsi>:
 404f598:	280cd53a 	srli	r6,r5,20
 404f59c:	00c00434 	movhi	r3,16
 404f5a0:	18ffffc4 	addi	r3,r3,-1
 404f5a4:	3181ffcc 	andi	r6,r6,2047
 404f5a8:	01c0ff84 	movi	r7,1022
 404f5ac:	28c6703a 	and	r3,r5,r3
 404f5b0:	280ad7fa 	srli	r5,r5,31
 404f5b4:	3980120e 	bge	r7,r6,404f600 <__fixdfsi+0x68>
 404f5b8:	00810744 	movi	r2,1053
 404f5bc:	11800c16 	blt	r2,r6,404f5f0 <__fixdfsi+0x58>
 404f5c0:	00810cc4 	movi	r2,1075
 404f5c4:	1185c83a 	sub	r2,r2,r6
 404f5c8:	01c007c4 	movi	r7,31
 404f5cc:	18c00434 	orhi	r3,r3,16
 404f5d0:	38800d16 	blt	r7,r2,404f608 <__fixdfsi+0x70>
 404f5d4:	31befb44 	addi	r6,r6,-1043
 404f5d8:	2084d83a 	srl	r2,r4,r2
 404f5dc:	1986983a 	sll	r3,r3,r6
 404f5e0:	1884b03a 	or	r2,r3,r2
 404f5e4:	28000726 	beq	r5,zero,404f604 <__fixdfsi+0x6c>
 404f5e8:	0085c83a 	sub	r2,zero,r2
 404f5ec:	f800283a 	ret
 404f5f0:	00a00034 	movhi	r2,32768
 404f5f4:	10bfffc4 	addi	r2,r2,-1
 404f5f8:	2885883a 	add	r2,r5,r2
 404f5fc:	f800283a 	ret
 404f600:	0005883a 	mov	r2,zero
 404f604:	f800283a 	ret
 404f608:	008104c4 	movi	r2,1043
 404f60c:	1185c83a 	sub	r2,r2,r6
 404f610:	1884d83a 	srl	r2,r3,r2
 404f614:	003ff306 	br	404f5e4 <__flash_rwdata_start+0xffff4eb4>

0404f618 <__floatsidf>:
 404f618:	defffd04 	addi	sp,sp,-12
 404f61c:	dfc00215 	stw	ra,8(sp)
 404f620:	dc400115 	stw	r17,4(sp)
 404f624:	dc000015 	stw	r16,0(sp)
 404f628:	20002b26 	beq	r4,zero,404f6d8 <__floatsidf+0xc0>
 404f62c:	2023883a 	mov	r17,r4
 404f630:	2020d7fa 	srli	r16,r4,31
 404f634:	20002d16 	blt	r4,zero,404f6ec <__floatsidf+0xd4>
 404f638:	8809883a 	mov	r4,r17
 404f63c:	404f79c0 	call	404f79c <__clzsi2>
 404f640:	01410784 	movi	r5,1054
 404f644:	288bc83a 	sub	r5,r5,r2
 404f648:	01010cc4 	movi	r4,1075
 404f64c:	2149c83a 	sub	r4,r4,r5
 404f650:	00c007c4 	movi	r3,31
 404f654:	1900160e 	bge	r3,r4,404f6b0 <__floatsidf+0x98>
 404f658:	00c104c4 	movi	r3,1043
 404f65c:	1947c83a 	sub	r3,r3,r5
 404f660:	88c6983a 	sll	r3,r17,r3
 404f664:	00800434 	movhi	r2,16
 404f668:	10bfffc4 	addi	r2,r2,-1
 404f66c:	1886703a 	and	r3,r3,r2
 404f670:	2941ffcc 	andi	r5,r5,2047
 404f674:	800d883a 	mov	r6,r16
 404f678:	0005883a 	mov	r2,zero
 404f67c:	280a953a 	slli	r5,r5,20
 404f680:	31803fcc 	andi	r6,r6,255
 404f684:	01000434 	movhi	r4,16
 404f688:	300c97fa 	slli	r6,r6,31
 404f68c:	213fffc4 	addi	r4,r4,-1
 404f690:	1906703a 	and	r3,r3,r4
 404f694:	1946b03a 	or	r3,r3,r5
 404f698:	1986b03a 	or	r3,r3,r6
 404f69c:	dfc00217 	ldw	ra,8(sp)
 404f6a0:	dc400117 	ldw	r17,4(sp)
 404f6a4:	dc000017 	ldw	r16,0(sp)
 404f6a8:	dec00304 	addi	sp,sp,12
 404f6ac:	f800283a 	ret
 404f6b0:	00c002c4 	movi	r3,11
 404f6b4:	1887c83a 	sub	r3,r3,r2
 404f6b8:	88c6d83a 	srl	r3,r17,r3
 404f6bc:	8904983a 	sll	r2,r17,r4
 404f6c0:	01000434 	movhi	r4,16
 404f6c4:	213fffc4 	addi	r4,r4,-1
 404f6c8:	2941ffcc 	andi	r5,r5,2047
 404f6cc:	1906703a 	and	r3,r3,r4
 404f6d0:	800d883a 	mov	r6,r16
 404f6d4:	003fe906 	br	404f67c <__flash_rwdata_start+0xffff4f4c>
 404f6d8:	000d883a 	mov	r6,zero
 404f6dc:	000b883a 	mov	r5,zero
 404f6e0:	0007883a 	mov	r3,zero
 404f6e4:	0005883a 	mov	r2,zero
 404f6e8:	003fe406 	br	404f67c <__flash_rwdata_start+0xffff4f4c>
 404f6ec:	0123c83a 	sub	r17,zero,r4
 404f6f0:	003fd106 	br	404f638 <__flash_rwdata_start+0xffff4f08>

0404f6f4 <__floatunsidf>:
 404f6f4:	defffe04 	addi	sp,sp,-8
 404f6f8:	dc000015 	stw	r16,0(sp)
 404f6fc:	dfc00115 	stw	ra,4(sp)
 404f700:	2021883a 	mov	r16,r4
 404f704:	20002226 	beq	r4,zero,404f790 <__floatunsidf+0x9c>
 404f708:	404f79c0 	call	404f79c <__clzsi2>
 404f70c:	01010784 	movi	r4,1054
 404f710:	2089c83a 	sub	r4,r4,r2
 404f714:	01810cc4 	movi	r6,1075
 404f718:	310dc83a 	sub	r6,r6,r4
 404f71c:	00c007c4 	movi	r3,31
 404f720:	1980120e 	bge	r3,r6,404f76c <__floatunsidf+0x78>
 404f724:	00c104c4 	movi	r3,1043
 404f728:	1907c83a 	sub	r3,r3,r4
 404f72c:	80ca983a 	sll	r5,r16,r3
 404f730:	00800434 	movhi	r2,16
 404f734:	10bfffc4 	addi	r2,r2,-1
 404f738:	2101ffcc 	andi	r4,r4,2047
 404f73c:	0021883a 	mov	r16,zero
 404f740:	288a703a 	and	r5,r5,r2
 404f744:	2008953a 	slli	r4,r4,20
 404f748:	00c00434 	movhi	r3,16
 404f74c:	18ffffc4 	addi	r3,r3,-1
 404f750:	28c6703a 	and	r3,r5,r3
 404f754:	8005883a 	mov	r2,r16
 404f758:	1906b03a 	or	r3,r3,r4
 404f75c:	dfc00117 	ldw	ra,4(sp)
 404f760:	dc000017 	ldw	r16,0(sp)
 404f764:	dec00204 	addi	sp,sp,8
 404f768:	f800283a 	ret
 404f76c:	00c002c4 	movi	r3,11
 404f770:	188bc83a 	sub	r5,r3,r2
 404f774:	814ad83a 	srl	r5,r16,r5
 404f778:	00c00434 	movhi	r3,16
 404f77c:	18ffffc4 	addi	r3,r3,-1
 404f780:	81a0983a 	sll	r16,r16,r6
 404f784:	2101ffcc 	andi	r4,r4,2047
 404f788:	28ca703a 	and	r5,r5,r3
 404f78c:	003fed06 	br	404f744 <__flash_rwdata_start+0xffff5014>
 404f790:	0009883a 	mov	r4,zero
 404f794:	000b883a 	mov	r5,zero
 404f798:	003fea06 	br	404f744 <__flash_rwdata_start+0xffff5014>

0404f79c <__clzsi2>:
 404f79c:	00bfffd4 	movui	r2,65535
 404f7a0:	11000536 	bltu	r2,r4,404f7b8 <__clzsi2+0x1c>
 404f7a4:	00803fc4 	movi	r2,255
 404f7a8:	11000f36 	bltu	r2,r4,404f7e8 <__clzsi2+0x4c>
 404f7ac:	00800804 	movi	r2,32
 404f7b0:	0007883a 	mov	r3,zero
 404f7b4:	00000506 	br	404f7cc <__clzsi2+0x30>
 404f7b8:	00804034 	movhi	r2,256
 404f7bc:	10bfffc4 	addi	r2,r2,-1
 404f7c0:	11000c2e 	bgeu	r2,r4,404f7f4 <__clzsi2+0x58>
 404f7c4:	00800204 	movi	r2,8
 404f7c8:	00c00604 	movi	r3,24
 404f7cc:	20c8d83a 	srl	r4,r4,r3
 404f7d0:	00c08034 	movhi	r3,512
 404f7d4:	18c10504 	addi	r3,r3,1044
 404f7d8:	1909883a 	add	r4,r3,r4
 404f7dc:	20c00003 	ldbu	r3,0(r4)
 404f7e0:	10c5c83a 	sub	r2,r2,r3
 404f7e4:	f800283a 	ret
 404f7e8:	00800604 	movi	r2,24
 404f7ec:	00c00204 	movi	r3,8
 404f7f0:	003ff606 	br	404f7cc <__flash_rwdata_start+0xffff509c>
 404f7f4:	00800404 	movi	r2,16
 404f7f8:	1007883a 	mov	r3,r2
 404f7fc:	003ff306 	br	404f7cc <__flash_rwdata_start+0xffff509c>

0404f800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404f800:	defffe04 	addi	sp,sp,-8
 404f804:	dfc00115 	stw	ra,4(sp)
 404f808:	df000015 	stw	fp,0(sp)
 404f80c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404f810:	d0a00b17 	ldw	r2,-32724(gp)
 404f814:	10000326 	beq	r2,zero,404f824 <alt_get_errno+0x24>
 404f818:	d0a00b17 	ldw	r2,-32724(gp)
 404f81c:	103ee83a 	callr	r2
 404f820:	00000106 	br	404f828 <alt_get_errno+0x28>
 404f824:	d0a04504 	addi	r2,gp,-32492
}
 404f828:	e037883a 	mov	sp,fp
 404f82c:	dfc00117 	ldw	ra,4(sp)
 404f830:	df000017 	ldw	fp,0(sp)
 404f834:	dec00204 	addi	sp,sp,8
 404f838:	f800283a 	ret

0404f83c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 404f83c:	defffb04 	addi	sp,sp,-20
 404f840:	dfc00415 	stw	ra,16(sp)
 404f844:	df000315 	stw	fp,12(sp)
 404f848:	df000304 	addi	fp,sp,12
 404f84c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 404f850:	e0bfff17 	ldw	r2,-4(fp)
 404f854:	10000616 	blt	r2,zero,404f870 <close+0x34>
 404f858:	e0bfff17 	ldw	r2,-4(fp)
 404f85c:	10c00324 	muli	r3,r2,12
 404f860:	00808034 	movhi	r2,512
 404f864:	1083eb04 	addi	r2,r2,4012
 404f868:	1885883a 	add	r2,r3,r2
 404f86c:	00000106 	br	404f874 <close+0x38>
 404f870:	0005883a 	mov	r2,zero
 404f874:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 404f878:	e0bffd17 	ldw	r2,-12(fp)
 404f87c:	10001926 	beq	r2,zero,404f8e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 404f880:	e0bffd17 	ldw	r2,-12(fp)
 404f884:	10800017 	ldw	r2,0(r2)
 404f888:	10800417 	ldw	r2,16(r2)
 404f88c:	10000626 	beq	r2,zero,404f8a8 <close+0x6c>
 404f890:	e0bffd17 	ldw	r2,-12(fp)
 404f894:	10800017 	ldw	r2,0(r2)
 404f898:	10800417 	ldw	r2,16(r2)
 404f89c:	e13ffd17 	ldw	r4,-12(fp)
 404f8a0:	103ee83a 	callr	r2
 404f8a4:	00000106 	br	404f8ac <close+0x70>
 404f8a8:	0005883a 	mov	r2,zero
 404f8ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 404f8b0:	e13fff17 	ldw	r4,-4(fp)
 404f8b4:	40501940 	call	4050194 <alt_release_fd>
    if (rval < 0)
 404f8b8:	e0bffe17 	ldw	r2,-8(fp)
 404f8bc:	1000070e 	bge	r2,zero,404f8dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
 404f8c0:	404f8000 	call	404f800 <alt_get_errno>
 404f8c4:	1007883a 	mov	r3,r2
 404f8c8:	e0bffe17 	ldw	r2,-8(fp)
 404f8cc:	0085c83a 	sub	r2,zero,r2
 404f8d0:	18800015 	stw	r2,0(r3)
      return -1;
 404f8d4:	00bfffc4 	movi	r2,-1
 404f8d8:	00000706 	br	404f8f8 <close+0xbc>
    }
    return 0;
 404f8dc:	0005883a 	mov	r2,zero
 404f8e0:	00000506 	br	404f8f8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 404f8e4:	404f8000 	call	404f800 <alt_get_errno>
 404f8e8:	1007883a 	mov	r3,r2
 404f8ec:	00801444 	movi	r2,81
 404f8f0:	18800015 	stw	r2,0(r3)
    return -1;
 404f8f4:	00bfffc4 	movi	r2,-1
  }
}
 404f8f8:	e037883a 	mov	sp,fp
 404f8fc:	dfc00117 	ldw	ra,4(sp)
 404f900:	df000017 	ldw	fp,0(sp)
 404f904:	dec00204 	addi	sp,sp,8
 404f908:	f800283a 	ret

0404f90c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 404f90c:	defffc04 	addi	sp,sp,-16
 404f910:	df000315 	stw	fp,12(sp)
 404f914:	df000304 	addi	fp,sp,12
 404f918:	e13ffd15 	stw	r4,-12(fp)
 404f91c:	e17ffe15 	stw	r5,-8(fp)
 404f920:	e1bfff15 	stw	r6,-4(fp)
  return len;
 404f924:	e0bfff17 	ldw	r2,-4(fp)
}
 404f928:	e037883a 	mov	sp,fp
 404f92c:	df000017 	ldw	fp,0(sp)
 404f930:	dec00104 	addi	sp,sp,4
 404f934:	f800283a 	ret

0404f938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404f938:	defffe04 	addi	sp,sp,-8
 404f93c:	dfc00115 	stw	ra,4(sp)
 404f940:	df000015 	stw	fp,0(sp)
 404f944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404f948:	d0a00b17 	ldw	r2,-32724(gp)
 404f94c:	10000326 	beq	r2,zero,404f95c <alt_get_errno+0x24>
 404f950:	d0a00b17 	ldw	r2,-32724(gp)
 404f954:	103ee83a 	callr	r2
 404f958:	00000106 	br	404f960 <alt_get_errno+0x28>
 404f95c:	d0a04504 	addi	r2,gp,-32492
}
 404f960:	e037883a 	mov	sp,fp
 404f964:	dfc00117 	ldw	ra,4(sp)
 404f968:	df000017 	ldw	fp,0(sp)
 404f96c:	dec00204 	addi	sp,sp,8
 404f970:	f800283a 	ret

0404f974 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 404f974:	defffb04 	addi	sp,sp,-20
 404f978:	dfc00415 	stw	ra,16(sp)
 404f97c:	df000315 	stw	fp,12(sp)
 404f980:	df000304 	addi	fp,sp,12
 404f984:	e13ffe15 	stw	r4,-8(fp)
 404f988:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404f98c:	e0bffe17 	ldw	r2,-8(fp)
 404f990:	10000616 	blt	r2,zero,404f9ac <fstat+0x38>
 404f994:	e0bffe17 	ldw	r2,-8(fp)
 404f998:	10c00324 	muli	r3,r2,12
 404f99c:	00808034 	movhi	r2,512
 404f9a0:	1083eb04 	addi	r2,r2,4012
 404f9a4:	1885883a 	add	r2,r3,r2
 404f9a8:	00000106 	br	404f9b0 <fstat+0x3c>
 404f9ac:	0005883a 	mov	r2,zero
 404f9b0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 404f9b4:	e0bffd17 	ldw	r2,-12(fp)
 404f9b8:	10001026 	beq	r2,zero,404f9fc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 404f9bc:	e0bffd17 	ldw	r2,-12(fp)
 404f9c0:	10800017 	ldw	r2,0(r2)
 404f9c4:	10800817 	ldw	r2,32(r2)
 404f9c8:	10000726 	beq	r2,zero,404f9e8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 404f9cc:	e0bffd17 	ldw	r2,-12(fp)
 404f9d0:	10800017 	ldw	r2,0(r2)
 404f9d4:	10800817 	ldw	r2,32(r2)
 404f9d8:	e17fff17 	ldw	r5,-4(fp)
 404f9dc:	e13ffd17 	ldw	r4,-12(fp)
 404f9e0:	103ee83a 	callr	r2
 404f9e4:	00000a06 	br	404fa10 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 404f9e8:	e0bfff17 	ldw	r2,-4(fp)
 404f9ec:	00c80004 	movi	r3,8192
 404f9f0:	10c00115 	stw	r3,4(r2)
      return 0;
 404f9f4:	0005883a 	mov	r2,zero
 404f9f8:	00000506 	br	404fa10 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 404f9fc:	404f9380 	call	404f938 <alt_get_errno>
 404fa00:	1007883a 	mov	r3,r2
 404fa04:	00801444 	movi	r2,81
 404fa08:	18800015 	stw	r2,0(r3)
    return -1;
 404fa0c:	00bfffc4 	movi	r2,-1
  }
}
 404fa10:	e037883a 	mov	sp,fp
 404fa14:	dfc00117 	ldw	ra,4(sp)
 404fa18:	df000017 	ldw	fp,0(sp)
 404fa1c:	dec00204 	addi	sp,sp,8
 404fa20:	f800283a 	ret

0404fa24 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 404fa24:	defff904 	addi	sp,sp,-28
 404fa28:	dfc00615 	stw	ra,24(sp)
 404fa2c:	df000515 	stw	fp,20(sp)
 404fa30:	df000504 	addi	fp,sp,20
 404fa34:	e13ffc15 	stw	r4,-16(fp)
 404fa38:	e17ffd15 	stw	r5,-12(fp)
 404fa3c:	e1bffe15 	stw	r6,-8(fp)
 404fa40:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 404fa44:	e0800217 	ldw	r2,8(fp)
 404fa48:	d8800015 	stw	r2,0(sp)
 404fa4c:	e1ffff17 	ldw	r7,-4(fp)
 404fa50:	e1bffe17 	ldw	r6,-8(fp)
 404fa54:	e17ffd17 	ldw	r5,-12(fp)
 404fa58:	e13ffc17 	ldw	r4,-16(fp)
 404fa5c:	404fbd40 	call	404fbd4 <alt_iic_isr_register>
}  
 404fa60:	e037883a 	mov	sp,fp
 404fa64:	dfc00117 	ldw	ra,4(sp)
 404fa68:	df000017 	ldw	fp,0(sp)
 404fa6c:	dec00204 	addi	sp,sp,8
 404fa70:	f800283a 	ret

0404fa74 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 404fa74:	defff904 	addi	sp,sp,-28
 404fa78:	df000615 	stw	fp,24(sp)
 404fa7c:	df000604 	addi	fp,sp,24
 404fa80:	e13ffe15 	stw	r4,-8(fp)
 404fa84:	e17fff15 	stw	r5,-4(fp)
 404fa88:	e0bfff17 	ldw	r2,-4(fp)
 404fa8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404fa90:	0005303a 	rdctl	r2,status
 404fa94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404fa98:	e0fffb17 	ldw	r3,-20(fp)
 404fa9c:	00bfff84 	movi	r2,-2
 404faa0:	1884703a 	and	r2,r3,r2
 404faa4:	1001703a 	wrctl	status,r2
  
  return context;
 404faa8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 404faac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 404fab0:	00c00044 	movi	r3,1
 404fab4:	e0bffa17 	ldw	r2,-24(fp)
 404fab8:	1884983a 	sll	r2,r3,r2
 404fabc:	1007883a 	mov	r3,r2
 404fac0:	d0a04a17 	ldw	r2,-32472(gp)
 404fac4:	1884b03a 	or	r2,r3,r2
 404fac8:	d0a04a15 	stw	r2,-32472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 404facc:	d0a04a17 	ldw	r2,-32472(gp)
 404fad0:	100170fa 	wrctl	ienable,r2
 404fad4:	e0bffc17 	ldw	r2,-16(fp)
 404fad8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404fadc:	e0bffd17 	ldw	r2,-12(fp)
 404fae0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 404fae4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 404fae8:	0001883a 	nop
}
 404faec:	e037883a 	mov	sp,fp
 404faf0:	df000017 	ldw	fp,0(sp)
 404faf4:	dec00104 	addi	sp,sp,4
 404faf8:	f800283a 	ret

0404fafc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 404fafc:	defff904 	addi	sp,sp,-28
 404fb00:	df000615 	stw	fp,24(sp)
 404fb04:	df000604 	addi	fp,sp,24
 404fb08:	e13ffe15 	stw	r4,-8(fp)
 404fb0c:	e17fff15 	stw	r5,-4(fp)
 404fb10:	e0bfff17 	ldw	r2,-4(fp)
 404fb14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404fb18:	0005303a 	rdctl	r2,status
 404fb1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404fb20:	e0fffb17 	ldw	r3,-20(fp)
 404fb24:	00bfff84 	movi	r2,-2
 404fb28:	1884703a 	and	r2,r3,r2
 404fb2c:	1001703a 	wrctl	status,r2
  
  return context;
 404fb30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 404fb34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 404fb38:	00c00044 	movi	r3,1
 404fb3c:	e0bffa17 	ldw	r2,-24(fp)
 404fb40:	1884983a 	sll	r2,r3,r2
 404fb44:	0084303a 	nor	r2,zero,r2
 404fb48:	1007883a 	mov	r3,r2
 404fb4c:	d0a04a17 	ldw	r2,-32472(gp)
 404fb50:	1884703a 	and	r2,r3,r2
 404fb54:	d0a04a15 	stw	r2,-32472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 404fb58:	d0a04a17 	ldw	r2,-32472(gp)
 404fb5c:	100170fa 	wrctl	ienable,r2
 404fb60:	e0bffc17 	ldw	r2,-16(fp)
 404fb64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404fb68:	e0bffd17 	ldw	r2,-12(fp)
 404fb6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 404fb70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 404fb74:	0001883a 	nop
}
 404fb78:	e037883a 	mov	sp,fp
 404fb7c:	df000017 	ldw	fp,0(sp)
 404fb80:	dec00104 	addi	sp,sp,4
 404fb84:	f800283a 	ret

0404fb88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 404fb88:	defffc04 	addi	sp,sp,-16
 404fb8c:	df000315 	stw	fp,12(sp)
 404fb90:	df000304 	addi	fp,sp,12
 404fb94:	e13ffe15 	stw	r4,-8(fp)
 404fb98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 404fb9c:	000530fa 	rdctl	r2,ienable
 404fba0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 404fba4:	00c00044 	movi	r3,1
 404fba8:	e0bfff17 	ldw	r2,-4(fp)
 404fbac:	1884983a 	sll	r2,r3,r2
 404fbb0:	1007883a 	mov	r3,r2
 404fbb4:	e0bffd17 	ldw	r2,-12(fp)
 404fbb8:	1884703a 	and	r2,r3,r2
 404fbbc:	1004c03a 	cmpne	r2,r2,zero
 404fbc0:	10803fcc 	andi	r2,r2,255
}
 404fbc4:	e037883a 	mov	sp,fp
 404fbc8:	df000017 	ldw	fp,0(sp)
 404fbcc:	dec00104 	addi	sp,sp,4
 404fbd0:	f800283a 	ret

0404fbd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 404fbd4:	defff504 	addi	sp,sp,-44
 404fbd8:	dfc00a15 	stw	ra,40(sp)
 404fbdc:	df000915 	stw	fp,36(sp)
 404fbe0:	df000904 	addi	fp,sp,36
 404fbe4:	e13ffc15 	stw	r4,-16(fp)
 404fbe8:	e17ffd15 	stw	r5,-12(fp)
 404fbec:	e1bffe15 	stw	r6,-8(fp)
 404fbf0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 404fbf4:	00bffa84 	movi	r2,-22
 404fbf8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 404fbfc:	e0bffd17 	ldw	r2,-12(fp)
 404fc00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 404fc04:	e0bff817 	ldw	r2,-32(fp)
 404fc08:	10800808 	cmpgei	r2,r2,32
 404fc0c:	1000271e 	bne	r2,zero,404fcac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404fc10:	0005303a 	rdctl	r2,status
 404fc14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404fc18:	e0fffb17 	ldw	r3,-20(fp)
 404fc1c:	00bfff84 	movi	r2,-2
 404fc20:	1884703a 	and	r2,r3,r2
 404fc24:	1001703a 	wrctl	status,r2
  
  return context;
 404fc28:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 404fc2c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 404fc30:	00808074 	movhi	r2,513
 404fc34:	1088d904 	addi	r2,r2,9060
 404fc38:	e0fff817 	ldw	r3,-32(fp)
 404fc3c:	180690fa 	slli	r3,r3,3
 404fc40:	10c5883a 	add	r2,r2,r3
 404fc44:	e0fffe17 	ldw	r3,-8(fp)
 404fc48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 404fc4c:	00808074 	movhi	r2,513
 404fc50:	1088d904 	addi	r2,r2,9060
 404fc54:	e0fff817 	ldw	r3,-32(fp)
 404fc58:	180690fa 	slli	r3,r3,3
 404fc5c:	10c5883a 	add	r2,r2,r3
 404fc60:	10800104 	addi	r2,r2,4
 404fc64:	e0ffff17 	ldw	r3,-4(fp)
 404fc68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 404fc6c:	e0bffe17 	ldw	r2,-8(fp)
 404fc70:	10000526 	beq	r2,zero,404fc88 <alt_iic_isr_register+0xb4>
 404fc74:	e0bff817 	ldw	r2,-32(fp)
 404fc78:	100b883a 	mov	r5,r2
 404fc7c:	e13ffc17 	ldw	r4,-16(fp)
 404fc80:	404fa740 	call	404fa74 <alt_ic_irq_enable>
 404fc84:	00000406 	br	404fc98 <alt_iic_isr_register+0xc4>
 404fc88:	e0bff817 	ldw	r2,-32(fp)
 404fc8c:	100b883a 	mov	r5,r2
 404fc90:	e13ffc17 	ldw	r4,-16(fp)
 404fc94:	404fafc0 	call	404fafc <alt_ic_irq_disable>
 404fc98:	e0bff715 	stw	r2,-36(fp)
 404fc9c:	e0bffa17 	ldw	r2,-24(fp)
 404fca0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404fca4:	e0bff917 	ldw	r2,-28(fp)
 404fca8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 404fcac:	e0bff717 	ldw	r2,-36(fp)
}
 404fcb0:	e037883a 	mov	sp,fp
 404fcb4:	dfc00117 	ldw	ra,4(sp)
 404fcb8:	df000017 	ldw	fp,0(sp)
 404fcbc:	dec00204 	addi	sp,sp,8
 404fcc0:	f800283a 	ret

0404fcc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404fcc4:	defffe04 	addi	sp,sp,-8
 404fcc8:	dfc00115 	stw	ra,4(sp)
 404fccc:	df000015 	stw	fp,0(sp)
 404fcd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404fcd4:	d0a00b17 	ldw	r2,-32724(gp)
 404fcd8:	10000326 	beq	r2,zero,404fce8 <alt_get_errno+0x24>
 404fcdc:	d0a00b17 	ldw	r2,-32724(gp)
 404fce0:	103ee83a 	callr	r2
 404fce4:	00000106 	br	404fcec <alt_get_errno+0x28>
 404fce8:	d0a04504 	addi	r2,gp,-32492
}
 404fcec:	e037883a 	mov	sp,fp
 404fcf0:	dfc00117 	ldw	ra,4(sp)
 404fcf4:	df000017 	ldw	fp,0(sp)
 404fcf8:	dec00204 	addi	sp,sp,8
 404fcfc:	f800283a 	ret

0404fd00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 404fd00:	deffed04 	addi	sp,sp,-76
 404fd04:	dfc01215 	stw	ra,72(sp)
 404fd08:	df001115 	stw	fp,68(sp)
 404fd0c:	df001104 	addi	fp,sp,68
 404fd10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404fd14:	e0bfff17 	ldw	r2,-4(fp)
 404fd18:	10000616 	blt	r2,zero,404fd34 <isatty+0x34>
 404fd1c:	e0bfff17 	ldw	r2,-4(fp)
 404fd20:	10c00324 	muli	r3,r2,12
 404fd24:	00808034 	movhi	r2,512
 404fd28:	1083eb04 	addi	r2,r2,4012
 404fd2c:	1885883a 	add	r2,r3,r2
 404fd30:	00000106 	br	404fd38 <isatty+0x38>
 404fd34:	0005883a 	mov	r2,zero
 404fd38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 404fd3c:	e0bfef17 	ldw	r2,-68(fp)
 404fd40:	10000e26 	beq	r2,zero,404fd7c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 404fd44:	e0bfef17 	ldw	r2,-68(fp)
 404fd48:	10800017 	ldw	r2,0(r2)
 404fd4c:	10800817 	ldw	r2,32(r2)
 404fd50:	1000021e 	bne	r2,zero,404fd5c <isatty+0x5c>
    {
      return 1;
 404fd54:	00800044 	movi	r2,1
 404fd58:	00000d06 	br	404fd90 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 404fd5c:	e0bff004 	addi	r2,fp,-64
 404fd60:	100b883a 	mov	r5,r2
 404fd64:	e13fff17 	ldw	r4,-4(fp)
 404fd68:	404f9740 	call	404f974 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 404fd6c:	e0bff117 	ldw	r2,-60(fp)
 404fd70:	10880020 	cmpeqi	r2,r2,8192
 404fd74:	10803fcc 	andi	r2,r2,255
 404fd78:	00000506 	br	404fd90 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 404fd7c:	404fcc40 	call	404fcc4 <alt_get_errno>
 404fd80:	1007883a 	mov	r3,r2
 404fd84:	00801444 	movi	r2,81
 404fd88:	18800015 	stw	r2,0(r3)
    return 0;
 404fd8c:	0005883a 	mov	r2,zero
  }
}
 404fd90:	e037883a 	mov	sp,fp
 404fd94:	dfc00117 	ldw	ra,4(sp)
 404fd98:	df000017 	ldw	fp,0(sp)
 404fd9c:	dec00204 	addi	sp,sp,8
 404fda0:	f800283a 	ret

0404fda4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 404fda4:	defffc04 	addi	sp,sp,-16
 404fda8:	df000315 	stw	fp,12(sp)
 404fdac:	df000304 	addi	fp,sp,12
 404fdb0:	e13ffd15 	stw	r4,-12(fp)
 404fdb4:	e17ffe15 	stw	r5,-8(fp)
 404fdb8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 404fdbc:	e0fffe17 	ldw	r3,-8(fp)
 404fdc0:	e0bffd17 	ldw	r2,-12(fp)
 404fdc4:	18800c26 	beq	r3,r2,404fdf8 <alt_load_section+0x54>
  {
    while( to != end )
 404fdc8:	00000806 	br	404fdec <alt_load_section+0x48>
    {
      *to++ = *from++;
 404fdcc:	e0bffe17 	ldw	r2,-8(fp)
 404fdd0:	10c00104 	addi	r3,r2,4
 404fdd4:	e0fffe15 	stw	r3,-8(fp)
 404fdd8:	e0fffd17 	ldw	r3,-12(fp)
 404fddc:	19000104 	addi	r4,r3,4
 404fde0:	e13ffd15 	stw	r4,-12(fp)
 404fde4:	18c00017 	ldw	r3,0(r3)
 404fde8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 404fdec:	e0fffe17 	ldw	r3,-8(fp)
 404fdf0:	e0bfff17 	ldw	r2,-4(fp)
 404fdf4:	18bff51e 	bne	r3,r2,404fdcc <__flash_rwdata_start+0xffff569c>
    {
      *to++ = *from++;
    }
  }
}
 404fdf8:	0001883a 	nop
 404fdfc:	e037883a 	mov	sp,fp
 404fe00:	df000017 	ldw	fp,0(sp)
 404fe04:	dec00104 	addi	sp,sp,4
 404fe08:	f800283a 	ret

0404fe0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 404fe0c:	defffe04 	addi	sp,sp,-8
 404fe10:	dfc00115 	stw	ra,4(sp)
 404fe14:	df000015 	stw	fp,0(sp)
 404fe18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 404fe1c:	01808034 	movhi	r6,512
 404fe20:	31889504 	addi	r6,r6,8788
 404fe24:	01408034 	movhi	r5,512
 404fe28:	29419904 	addi	r5,r5,1636
 404fe2c:	010101b4 	movhi	r4,1030
 404fe30:	2129cc04 	addi	r4,r4,-22736
 404fe34:	404fda40 	call	404fda4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 404fe38:	01810134 	movhi	r6,1028
 404fe3c:	31809104 	addi	r6,r6,580
 404fe40:	01410134 	movhi	r5,1028
 404fe44:	29400804 	addi	r5,r5,32
 404fe48:	01010134 	movhi	r4,1028
 404fe4c:	21000804 	addi	r4,r4,32
 404fe50:	404fda40 	call	404fda4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 404fe54:	01808034 	movhi	r6,512
 404fe58:	31819904 	addi	r6,r6,1636
 404fe5c:	01408034 	movhi	r5,512
 404fe60:	29400004 	addi	r5,r5,0
 404fe64:	010101b4 	movhi	r4,1030
 404fe68:	21283304 	addi	r4,r4,-24372
 404fe6c:	404fda40 	call	404fda4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 404fe70:	4058ec80 	call	4058ec8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 404fe74:	40590b00 	call	40590b0 <alt_icache_flush_all>
}
 404fe78:	0001883a 	nop
 404fe7c:	e037883a 	mov	sp,fp
 404fe80:	dfc00117 	ldw	ra,4(sp)
 404fe84:	df000017 	ldw	fp,0(sp)
 404fe88:	dec00204 	addi	sp,sp,8
 404fe8c:	f800283a 	ret

0404fe90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404fe90:	defffe04 	addi	sp,sp,-8
 404fe94:	dfc00115 	stw	ra,4(sp)
 404fe98:	df000015 	stw	fp,0(sp)
 404fe9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404fea0:	d0a00b17 	ldw	r2,-32724(gp)
 404fea4:	10000326 	beq	r2,zero,404feb4 <alt_get_errno+0x24>
 404fea8:	d0a00b17 	ldw	r2,-32724(gp)
 404feac:	103ee83a 	callr	r2
 404feb0:	00000106 	br	404feb8 <alt_get_errno+0x28>
 404feb4:	d0a04504 	addi	r2,gp,-32492
}
 404feb8:	e037883a 	mov	sp,fp
 404febc:	dfc00117 	ldw	ra,4(sp)
 404fec0:	df000017 	ldw	fp,0(sp)
 404fec4:	dec00204 	addi	sp,sp,8
 404fec8:	f800283a 	ret

0404fecc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 404fecc:	defff904 	addi	sp,sp,-28
 404fed0:	dfc00615 	stw	ra,24(sp)
 404fed4:	df000515 	stw	fp,20(sp)
 404fed8:	df000504 	addi	fp,sp,20
 404fedc:	e13ffd15 	stw	r4,-12(fp)
 404fee0:	e17ffe15 	stw	r5,-8(fp)
 404fee4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 404fee8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404feec:	e0bffd17 	ldw	r2,-12(fp)
 404fef0:	10000616 	blt	r2,zero,404ff0c <lseek+0x40>
 404fef4:	e0bffd17 	ldw	r2,-12(fp)
 404fef8:	10c00324 	muli	r3,r2,12
 404fefc:	00808034 	movhi	r2,512
 404ff00:	1083eb04 	addi	r2,r2,4012
 404ff04:	1885883a 	add	r2,r3,r2
 404ff08:	00000106 	br	404ff10 <lseek+0x44>
 404ff0c:	0005883a 	mov	r2,zero
 404ff10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 404ff14:	e0bffc17 	ldw	r2,-16(fp)
 404ff18:	10001026 	beq	r2,zero,404ff5c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 404ff1c:	e0bffc17 	ldw	r2,-16(fp)
 404ff20:	10800017 	ldw	r2,0(r2)
 404ff24:	10800717 	ldw	r2,28(r2)
 404ff28:	10000926 	beq	r2,zero,404ff50 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 404ff2c:	e0bffc17 	ldw	r2,-16(fp)
 404ff30:	10800017 	ldw	r2,0(r2)
 404ff34:	10800717 	ldw	r2,28(r2)
 404ff38:	e1bfff17 	ldw	r6,-4(fp)
 404ff3c:	e17ffe17 	ldw	r5,-8(fp)
 404ff40:	e13ffc17 	ldw	r4,-16(fp)
 404ff44:	103ee83a 	callr	r2
 404ff48:	e0bffb15 	stw	r2,-20(fp)
 404ff4c:	00000506 	br	404ff64 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 404ff50:	00bfde84 	movi	r2,-134
 404ff54:	e0bffb15 	stw	r2,-20(fp)
 404ff58:	00000206 	br	404ff64 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 404ff5c:	00bfebc4 	movi	r2,-81
 404ff60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 404ff64:	e0bffb17 	ldw	r2,-20(fp)
 404ff68:	1000070e 	bge	r2,zero,404ff88 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 404ff6c:	404fe900 	call	404fe90 <alt_get_errno>
 404ff70:	1007883a 	mov	r3,r2
 404ff74:	e0bffb17 	ldw	r2,-20(fp)
 404ff78:	0085c83a 	sub	r2,zero,r2
 404ff7c:	18800015 	stw	r2,0(r3)
    rc = -1;
 404ff80:	00bfffc4 	movi	r2,-1
 404ff84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 404ff88:	e0bffb17 	ldw	r2,-20(fp)
}
 404ff8c:	e037883a 	mov	sp,fp
 404ff90:	dfc00117 	ldw	ra,4(sp)
 404ff94:	df000017 	ldw	fp,0(sp)
 404ff98:	dec00204 	addi	sp,sp,8
 404ff9c:	f800283a 	ret

0404ffa0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 404ffa0:	defff904 	addi	sp,sp,-28
 404ffa4:	dfc00615 	stw	ra,24(sp)
 404ffa8:	df000515 	stw	fp,20(sp)
 404ffac:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 404ffb0:	0009883a 	mov	r4,zero
 404ffb4:	4057ee40 	call	4057ee4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 404ffb8:	4050f5c0 	call	4050f5c <OSInit>
 404ffbc:	01000044 	movi	r4,1
 404ffc0:	40558ac0 	call	40558ac <OSSemCreate>
 404ffc4:	d0a04f15 	stw	r2,-32452(gp)
 404ffc8:	01000044 	movi	r4,1
 404ffcc:	40558ac0 	call	40558ac <OSSemCreate>
 404ffd0:	d0a05115 	stw	r2,-32444(gp)
 404ffd4:	d0a04904 	addi	r2,gp,-32476
 404ffd8:	e0bffc15 	stw	r2,-16(fp)
 404ffdc:	00800044 	movi	r2,1
 404ffe0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 404ffe4:	e0bffd0b 	ldhu	r2,-12(fp)
 404ffe8:	1009883a 	mov	r4,r2
 404ffec:	40558ac0 	call	40558ac <OSSemCreate>
 404fff0:	1007883a 	mov	r3,r2
 404fff4:	e0bffc17 	ldw	r2,-16(fp)
 404fff8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 404fffc:	4057f1c0 	call	4057f1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4050000:	01808034 	movhi	r6,512
 4050004:	31814804 	addi	r6,r6,1312
 4050008:	01408034 	movhi	r5,512
 405000c:	29414804 	addi	r5,r5,1312
 4050010:	01008034 	movhi	r4,512
 4050014:	21014804 	addi	r4,r4,1312
 4050018:	40592440 	call	4059244 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 405001c:	4058ff00 	call	4058ff0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4050020:	010101b4 	movhi	r4,1030
 4050024:	21241404 	addi	r4,r4,-28592
 4050028:	4059d380 	call	4059d38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 405002c:	d0a04b17 	ldw	r2,-32468(gp)
 4050030:	d0e04c17 	ldw	r3,-32464(gp)
 4050034:	d1204d17 	ldw	r4,-32460(gp)
 4050038:	200d883a 	mov	r6,r4
 405003c:	180b883a 	mov	r5,r3
 4050040:	1009883a 	mov	r4,r2
 4050044:	4042e000 	call	4042e00 <main>
 4050048:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 405004c:	01000044 	movi	r4,1
 4050050:	404f83c0 	call	404f83c <close>
  exit (result);
 4050054:	e13ffb17 	ldw	r4,-20(fp)
 4050058:	4059d4c0 	call	4059d4c <exit>

0405005c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 405005c:	defffe04 	addi	sp,sp,-8
 4050060:	dfc00115 	stw	ra,4(sp)
 4050064:	df000015 	stw	fp,0(sp)
 4050068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 405006c:	d0a00b17 	ldw	r2,-32724(gp)
 4050070:	10000326 	beq	r2,zero,4050080 <alt_get_errno+0x24>
 4050074:	d0a00b17 	ldw	r2,-32724(gp)
 4050078:	103ee83a 	callr	r2
 405007c:	00000106 	br	4050084 <alt_get_errno+0x28>
 4050080:	d0a04504 	addi	r2,gp,-32492
}
 4050084:	e037883a 	mov	sp,fp
 4050088:	dfc00117 	ldw	ra,4(sp)
 405008c:	df000017 	ldw	fp,0(sp)
 4050090:	dec00204 	addi	sp,sp,8
 4050094:	f800283a 	ret

04050098 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4050098:	defff904 	addi	sp,sp,-28
 405009c:	dfc00615 	stw	ra,24(sp)
 40500a0:	df000515 	stw	fp,20(sp)
 40500a4:	df000504 	addi	fp,sp,20
 40500a8:	e13ffd15 	stw	r4,-12(fp)
 40500ac:	e17ffe15 	stw	r5,-8(fp)
 40500b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40500b4:	e0bffd17 	ldw	r2,-12(fp)
 40500b8:	10000616 	blt	r2,zero,40500d4 <read+0x3c>
 40500bc:	e0bffd17 	ldw	r2,-12(fp)
 40500c0:	10c00324 	muli	r3,r2,12
 40500c4:	00808034 	movhi	r2,512
 40500c8:	1083eb04 	addi	r2,r2,4012
 40500cc:	1885883a 	add	r2,r3,r2
 40500d0:	00000106 	br	40500d8 <read+0x40>
 40500d4:	0005883a 	mov	r2,zero
 40500d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40500dc:	e0bffb17 	ldw	r2,-20(fp)
 40500e0:	10002226 	beq	r2,zero,405016c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40500e4:	e0bffb17 	ldw	r2,-20(fp)
 40500e8:	10800217 	ldw	r2,8(r2)
 40500ec:	108000cc 	andi	r2,r2,3
 40500f0:	10800060 	cmpeqi	r2,r2,1
 40500f4:	1000181e 	bne	r2,zero,4050158 <read+0xc0>
        (fd->dev->read))
 40500f8:	e0bffb17 	ldw	r2,-20(fp)
 40500fc:	10800017 	ldw	r2,0(r2)
 4050100:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4050104:	10001426 	beq	r2,zero,4050158 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4050108:	e0bffb17 	ldw	r2,-20(fp)
 405010c:	10800017 	ldw	r2,0(r2)
 4050110:	10800517 	ldw	r2,20(r2)
 4050114:	e0ffff17 	ldw	r3,-4(fp)
 4050118:	180d883a 	mov	r6,r3
 405011c:	e17ffe17 	ldw	r5,-8(fp)
 4050120:	e13ffb17 	ldw	r4,-20(fp)
 4050124:	103ee83a 	callr	r2
 4050128:	e0bffc15 	stw	r2,-16(fp)
 405012c:	e0bffc17 	ldw	r2,-16(fp)
 4050130:	1000070e 	bge	r2,zero,4050150 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4050134:	405005c0 	call	405005c <alt_get_errno>
 4050138:	1007883a 	mov	r3,r2
 405013c:	e0bffc17 	ldw	r2,-16(fp)
 4050140:	0085c83a 	sub	r2,zero,r2
 4050144:	18800015 	stw	r2,0(r3)
          return -1;
 4050148:	00bfffc4 	movi	r2,-1
 405014c:	00000c06 	br	4050180 <read+0xe8>
        }
        return rval;
 4050150:	e0bffc17 	ldw	r2,-16(fp)
 4050154:	00000a06 	br	4050180 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4050158:	405005c0 	call	405005c <alt_get_errno>
 405015c:	1007883a 	mov	r3,r2
 4050160:	00800344 	movi	r2,13
 4050164:	18800015 	stw	r2,0(r3)
 4050168:	00000406 	br	405017c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 405016c:	405005c0 	call	405005c <alt_get_errno>
 4050170:	1007883a 	mov	r3,r2
 4050174:	00801444 	movi	r2,81
 4050178:	18800015 	stw	r2,0(r3)
  }
  return -1;
 405017c:	00bfffc4 	movi	r2,-1
}
 4050180:	e037883a 	mov	sp,fp
 4050184:	dfc00117 	ldw	ra,4(sp)
 4050188:	df000017 	ldw	fp,0(sp)
 405018c:	dec00204 	addi	sp,sp,8
 4050190:	f800283a 	ret

04050194 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4050194:	defffe04 	addi	sp,sp,-8
 4050198:	df000115 	stw	fp,4(sp)
 405019c:	df000104 	addi	fp,sp,4
 40501a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40501a4:	e0bfff17 	ldw	r2,-4(fp)
 40501a8:	108000d0 	cmplti	r2,r2,3
 40501ac:	10000d1e 	bne	r2,zero,40501e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40501b0:	00808034 	movhi	r2,512
 40501b4:	1083eb04 	addi	r2,r2,4012
 40501b8:	e0ffff17 	ldw	r3,-4(fp)
 40501bc:	18c00324 	muli	r3,r3,12
 40501c0:	10c5883a 	add	r2,r2,r3
 40501c4:	10800204 	addi	r2,r2,8
 40501c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40501cc:	00808034 	movhi	r2,512
 40501d0:	1083eb04 	addi	r2,r2,4012
 40501d4:	e0ffff17 	ldw	r3,-4(fp)
 40501d8:	18c00324 	muli	r3,r3,12
 40501dc:	10c5883a 	add	r2,r2,r3
 40501e0:	10000015 	stw	zero,0(r2)
  }
}
 40501e4:	0001883a 	nop
 40501e8:	e037883a 	mov	sp,fp
 40501ec:	df000017 	ldw	fp,0(sp)
 40501f0:	dec00104 	addi	sp,sp,4
 40501f4:	f800283a 	ret

040501f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40501f8:	defff904 	addi	sp,sp,-28
 40501fc:	df000615 	stw	fp,24(sp)
 4050200:	df000604 	addi	fp,sp,24
 4050204:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4050208:	0005303a 	rdctl	r2,status
 405020c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4050210:	e0fffe17 	ldw	r3,-8(fp)
 4050214:	00bfff84 	movi	r2,-2
 4050218:	1884703a 	and	r2,r3,r2
 405021c:	1001703a 	wrctl	status,r2
  
  return context;
 4050220:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4050224:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4050228:	d0a00d17 	ldw	r2,-32716(gp)
 405022c:	10c000c4 	addi	r3,r2,3
 4050230:	00bfff04 	movi	r2,-4
 4050234:	1884703a 	and	r2,r3,r2
 4050238:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 405023c:	d0e00d17 	ldw	r3,-32716(gp)
 4050240:	e0bfff17 	ldw	r2,-4(fp)
 4050244:	1887883a 	add	r3,r3,r2
 4050248:	00810034 	movhi	r2,1024
 405024c:	10800004 	addi	r2,r2,0
 4050250:	10c0062e 	bgeu	r2,r3,405026c <sbrk+0x74>
 4050254:	e0bffb17 	ldw	r2,-20(fp)
 4050258:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 405025c:	e0bffa17 	ldw	r2,-24(fp)
 4050260:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4050264:	00bfffc4 	movi	r2,-1
 4050268:	00000b06 	br	4050298 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 405026c:	d0a00d17 	ldw	r2,-32716(gp)
 4050270:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4050274:	d0e00d17 	ldw	r3,-32716(gp)
 4050278:	e0bfff17 	ldw	r2,-4(fp)
 405027c:	1885883a 	add	r2,r3,r2
 4050280:	d0a00d15 	stw	r2,-32716(gp)
 4050284:	e0bffb17 	ldw	r2,-20(fp)
 4050288:	e0bffc15 	stw	r2,-16(fp)
 405028c:	e0bffc17 	ldw	r2,-16(fp)
 4050290:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4050294:	e0bffd17 	ldw	r2,-12(fp)
} 
 4050298:	e037883a 	mov	sp,fp
 405029c:	df000017 	ldw	fp,0(sp)
 40502a0:	dec00104 	addi	sp,sp,4
 40502a4:	f800283a 	ret

040502a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40502a8:	defffe04 	addi	sp,sp,-8
 40502ac:	dfc00115 	stw	ra,4(sp)
 40502b0:	df000015 	stw	fp,0(sp)
 40502b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40502b8:	d0a00b17 	ldw	r2,-32724(gp)
 40502bc:	10000326 	beq	r2,zero,40502cc <alt_get_errno+0x24>
 40502c0:	d0a00b17 	ldw	r2,-32724(gp)
 40502c4:	103ee83a 	callr	r2
 40502c8:	00000106 	br	40502d0 <alt_get_errno+0x28>
 40502cc:	d0a04504 	addi	r2,gp,-32492
}
 40502d0:	e037883a 	mov	sp,fp
 40502d4:	dfc00117 	ldw	ra,4(sp)
 40502d8:	df000017 	ldw	fp,0(sp)
 40502dc:	dec00204 	addi	sp,sp,8
 40502e0:	f800283a 	ret

040502e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40502e4:	defff904 	addi	sp,sp,-28
 40502e8:	dfc00615 	stw	ra,24(sp)
 40502ec:	df000515 	stw	fp,20(sp)
 40502f0:	df000504 	addi	fp,sp,20
 40502f4:	e13ffd15 	stw	r4,-12(fp)
 40502f8:	e17ffe15 	stw	r5,-8(fp)
 40502fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4050300:	e0bffd17 	ldw	r2,-12(fp)
 4050304:	10000616 	blt	r2,zero,4050320 <write+0x3c>
 4050308:	e0bffd17 	ldw	r2,-12(fp)
 405030c:	10c00324 	muli	r3,r2,12
 4050310:	00808034 	movhi	r2,512
 4050314:	1083eb04 	addi	r2,r2,4012
 4050318:	1885883a 	add	r2,r3,r2
 405031c:	00000106 	br	4050324 <write+0x40>
 4050320:	0005883a 	mov	r2,zero
 4050324:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4050328:	e0bffb17 	ldw	r2,-20(fp)
 405032c:	10002126 	beq	r2,zero,40503b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4050330:	e0bffb17 	ldw	r2,-20(fp)
 4050334:	10800217 	ldw	r2,8(r2)
 4050338:	108000cc 	andi	r2,r2,3
 405033c:	10001826 	beq	r2,zero,40503a0 <write+0xbc>
 4050340:	e0bffb17 	ldw	r2,-20(fp)
 4050344:	10800017 	ldw	r2,0(r2)
 4050348:	10800617 	ldw	r2,24(r2)
 405034c:	10001426 	beq	r2,zero,40503a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4050350:	e0bffb17 	ldw	r2,-20(fp)
 4050354:	10800017 	ldw	r2,0(r2)
 4050358:	10800617 	ldw	r2,24(r2)
 405035c:	e0ffff17 	ldw	r3,-4(fp)
 4050360:	180d883a 	mov	r6,r3
 4050364:	e17ffe17 	ldw	r5,-8(fp)
 4050368:	e13ffb17 	ldw	r4,-20(fp)
 405036c:	103ee83a 	callr	r2
 4050370:	e0bffc15 	stw	r2,-16(fp)
 4050374:	e0bffc17 	ldw	r2,-16(fp)
 4050378:	1000070e 	bge	r2,zero,4050398 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 405037c:	40502a80 	call	40502a8 <alt_get_errno>
 4050380:	1007883a 	mov	r3,r2
 4050384:	e0bffc17 	ldw	r2,-16(fp)
 4050388:	0085c83a 	sub	r2,zero,r2
 405038c:	18800015 	stw	r2,0(r3)
        return -1;
 4050390:	00bfffc4 	movi	r2,-1
 4050394:	00000c06 	br	40503c8 <write+0xe4>
      }
      return rval;
 4050398:	e0bffc17 	ldw	r2,-16(fp)
 405039c:	00000a06 	br	40503c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40503a0:	40502a80 	call	40502a8 <alt_get_errno>
 40503a4:	1007883a 	mov	r3,r2
 40503a8:	00800344 	movi	r2,13
 40503ac:	18800015 	stw	r2,0(r3)
 40503b0:	00000406 	br	40503c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40503b4:	40502a80 	call	40502a8 <alt_get_errno>
 40503b8:	1007883a 	mov	r3,r2
 40503bc:	00801444 	movi	r2,81
 40503c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40503c4:	00bfffc4 	movi	r2,-1
}
 40503c8:	e037883a 	mov	sp,fp
 40503cc:	dfc00117 	ldw	ra,4(sp)
 40503d0:	df000017 	ldw	fp,0(sp)
 40503d4:	dec00204 	addi	sp,sp,8
 40503d8:	f800283a 	ret

040503dc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 40503dc:	deffdf04 	addi	sp,sp,-132
 40503e0:	dfc02015 	stw	ra,128(sp)
 40503e4:	df001f15 	stw	fp,124(sp)
 40503e8:	df001f04 	addi	fp,sp,124
 40503ec:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 40503f0:	e0bfe204 	addi	r2,fp,-120
 40503f4:	100b883a 	mov	r5,r2
 40503f8:	01003fc4 	movi	r4,255
 40503fc:	40578340 	call	4057834 <OSTaskQuery>
 4050400:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4050404:	e0bffe83 	ldbu	r2,-6(fp)
 4050408:	10803fcc 	andi	r2,r2,255
 405040c:	10001e1e 	bne	r2,zero,4050488 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 4050410:	e0bfee83 	ldbu	r2,-70(fp)
 4050414:	10803fcc 	andi	r2,r2,255
 4050418:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 405041c:	d0a04f17 	ldw	r2,-32452(gp)
 4050420:	e0fffd04 	addi	r3,fp,-12
 4050424:	180b883a 	mov	r5,r3
 4050428:	1009883a 	mov	r4,r2
 405042c:	405604c0 	call	405604c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 4050430:	e0bffe43 	ldbu	r2,-7(fp)
 4050434:	10803fcc 	andi	r2,r2,255
 4050438:	10000726 	beq	r2,zero,4050458 <__env_lock+0x7c>
 405043c:	d0a00e17 	ldw	r2,-32712(gp)
 4050440:	e0ffe117 	ldw	r3,-124(fp)
 4050444:	1880041e 	bne	r3,r2,4050458 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 4050448:	d0a04e17 	ldw	r2,-32456(gp)
 405044c:	10800044 	addi	r2,r2,1
 4050450:	d0a04e15 	stw	r2,-32456(gp)
 4050454:	00000a06 	br	4050480 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 4050458:	d0a04f17 	ldw	r2,-32452(gp)
 405045c:	e0fffe84 	addi	r3,fp,-6
 4050460:	180d883a 	mov	r6,r3
 4050464:	000b883a 	mov	r5,zero
 4050468:	1009883a 	mov	r4,r2
 405046c:	4055bc40 	call	4055bc4 <OSSemPend>
    locks  = 1;
 4050470:	00800044 	movi	r2,1
 4050474:	d0a04e15 	stw	r2,-32456(gp)
    lockid = id;
 4050478:	e0bfe117 	ldw	r2,-124(fp)
 405047c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4050480:	0001883a 	nop
 4050484:	00000106 	br	405048c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4050488:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 405048c:	e037883a 	mov	sp,fp
 4050490:	dfc00117 	ldw	ra,4(sp)
 4050494:	df000017 	ldw	fp,0(sp)
 4050498:	dec00204 	addi	sp,sp,8
 405049c:	f800283a 	ret

040504a0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 40504a0:	defffd04 	addi	sp,sp,-12
 40504a4:	dfc00215 	stw	ra,8(sp)
 40504a8:	df000115 	stw	fp,4(sp)
 40504ac:	df000104 	addi	fp,sp,4
 40504b0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 40504b4:	d0a04e17 	ldw	r2,-32456(gp)
 40504b8:	10000b26 	beq	r2,zero,40504e8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 40504bc:	d0a04e17 	ldw	r2,-32456(gp)
 40504c0:	10bfffc4 	addi	r2,r2,-1
 40504c4:	d0a04e15 	stw	r2,-32456(gp)
 40504c8:	d0a04e17 	ldw	r2,-32456(gp)
 40504cc:	1000071e 	bne	r2,zero,40504ec <__env_unlock+0x4c>
  {
    lockid = -1;
 40504d0:	00bfffc4 	movi	r2,-1
 40504d4:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
 40504d8:	d0a04f17 	ldw	r2,-32452(gp)
 40504dc:	1009883a 	mov	r4,r2
 40504e0:	4055f3c0 	call	4055f3c <OSSemPost>
 40504e4:	00000106 	br	40504ec <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 40504e8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 40504ec:	e037883a 	mov	sp,fp
 40504f0:	dfc00117 	ldw	ra,4(sp)
 40504f4:	df000017 	ldw	fp,0(sp)
 40504f8:	dec00204 	addi	sp,sp,8
 40504fc:	f800283a 	ret

04050500 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 4050500:	deffdb04 	addi	sp,sp,-148
 4050504:	dfc02415 	stw	ra,144(sp)
 4050508:	df002315 	stw	fp,140(sp)
 405050c:	df002304 	addi	fp,sp,140
 4050510:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4050514:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 4050518:	d0a05243 	ldbu	r2,-32439(gp)
 405051c:	10803fcc 	andi	r2,r2,255
 4050520:	10800060 	cmpeqi	r2,r2,1
 4050524:	10003626 	beq	r2,zero,4050600 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4050528:	e0bfe204 	addi	r2,fp,-120
 405052c:	100b883a 	mov	r5,r2
 4050530:	01003fc4 	movi	r4,255
 4050534:	40578340 	call	4057834 <OSTaskQuery>
 4050538:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 405053c:	e0bffe83 	ldbu	r2,-6(fp)
 4050540:	10803fcc 	andi	r2,r2,255
 4050544:	1000301e 	bne	r2,zero,4050608 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 4050548:	e0bfee83 	ldbu	r2,-70(fp)
 405054c:	10803fcc 	andi	r2,r2,255
 4050550:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 4050554:	d0a05117 	ldw	r2,-32444(gp)
 4050558:	e0fffd04 	addi	r3,fp,-12
 405055c:	180b883a 	mov	r5,r3
 4050560:	1009883a 	mov	r4,r2
 4050564:	405604c0 	call	405604c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4050568:	0005303a 	rdctl	r2,status
 405056c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4050570:	e0ffe117 	ldw	r3,-124(fp)
 4050574:	00bfff84 	movi	r2,-2
 4050578:	1884703a 	and	r2,r3,r2
 405057c:	1001703a 	wrctl	status,r2
  
  return context;
 4050580:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 4050584:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 4050588:	e0bffd0b 	ldhu	r2,-12(fp)
 405058c:	10bfffcc 	andi	r2,r2,65535
 4050590:	10000b1e 	bne	r2,zero,40505c0 <__malloc_lock+0xc0>
 4050594:	d0a00f17 	ldw	r2,-32708(gp)
 4050598:	e0ffde17 	ldw	r3,-136(fp)
 405059c:	1880081e 	bne	r3,r2,40505c0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 40505a0:	d0a05017 	ldw	r2,-32448(gp)
 40505a4:	10800044 	addi	r2,r2,1
 40505a8:	d0a05015 	stw	r2,-32448(gp)
 40505ac:	e0bfdd17 	ldw	r2,-140(fp)
 40505b0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40505b4:	e0bfdf17 	ldw	r2,-132(fp)
 40505b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 40505bc:	00000e06 	br	40505f8 <__malloc_lock+0xf8>
 40505c0:	e0bfdd17 	ldw	r2,-140(fp)
 40505c4:	e0bfe015 	stw	r2,-128(fp)
 40505c8:	e0bfe017 	ldw	r2,-128(fp)
 40505cc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 40505d0:	d0a05117 	ldw	r2,-32444(gp)
 40505d4:	e0fffe84 	addi	r3,fp,-6
 40505d8:	180d883a 	mov	r6,r3
 40505dc:	000b883a 	mov	r5,zero
 40505e0:	1009883a 	mov	r4,r2
 40505e4:	4055bc40 	call	4055bc4 <OSSemPend>
    locks  = 1;
 40505e8:	00800044 	movi	r2,1
 40505ec:	d0a05015 	stw	r2,-32448(gp)
    lockid = id;
 40505f0:	e0bfde17 	ldw	r2,-136(fp)
 40505f4:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 40505f8:	0001883a 	nop
 40505fc:	00000306 	br	405060c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 4050600:	0001883a 	nop
 4050604:	00000106 	br	405060c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4050608:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 405060c:	e037883a 	mov	sp,fp
 4050610:	dfc00117 	ldw	ra,4(sp)
 4050614:	df000017 	ldw	fp,0(sp)
 4050618:	dec00204 	addi	sp,sp,8
 405061c:	f800283a 	ret

04050620 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4050620:	defff804 	addi	sp,sp,-32
 4050624:	dfc00715 	stw	ra,28(sp)
 4050628:	df000615 	stw	fp,24(sp)
 405062c:	df000604 	addi	fp,sp,24
 4050630:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4050634:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 4050638:	d0a05243 	ldbu	r2,-32439(gp)
 405063c:	10803fcc 	andi	r2,r2,255
 4050640:	10800060 	cmpeqi	r2,r2,1
 4050644:	10002326 	beq	r2,zero,40506d4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4050648:	0005303a 	rdctl	r2,status
 405064c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4050650:	e0fffe17 	ldw	r3,-8(fp)
 4050654:	00bfff84 	movi	r2,-2
 4050658:	1884703a 	and	r2,r3,r2
 405065c:	1001703a 	wrctl	status,r2
  
  return context;
 4050660:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 4050664:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 4050668:	d0a05017 	ldw	r2,-32448(gp)
 405066c:	1000051e 	bne	r2,zero,4050684 <__malloc_unlock+0x64>
 4050670:	e0bffa17 	ldw	r2,-24(fp)
 4050674:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4050678:	e0bffb17 	ldw	r2,-20(fp)
 405067c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 4050680:	00001506 	br	40506d8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 4050684:	d0a05017 	ldw	r2,-32448(gp)
 4050688:	10bfffc4 	addi	r2,r2,-1
 405068c:	d0a05015 	stw	r2,-32448(gp)
 4050690:	d0a05017 	ldw	r2,-32448(gp)
 4050694:	10000a1e 	bne	r2,zero,40506c0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 4050698:	00bfffc4 	movi	r2,-1
 405069c:	d0a00f15 	stw	r2,-32708(gp)
 40506a0:	e0bffa17 	ldw	r2,-24(fp)
 40506a4:	e0bffc15 	stw	r2,-16(fp)
 40506a8:	e0bffc17 	ldw	r2,-16(fp)
 40506ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 40506b0:	d0a05117 	ldw	r2,-32444(gp)
 40506b4:	1009883a 	mov	r4,r2
 40506b8:	4055f3c0 	call	4055f3c <OSSemPost>
 40506bc:	00000606 	br	40506d8 <__malloc_unlock+0xb8>
 40506c0:	e0bffa17 	ldw	r2,-24(fp)
 40506c4:	e0bffd15 	stw	r2,-12(fp)
 40506c8:	e0bffd17 	ldw	r2,-12(fp)
 40506cc:	1001703a 	wrctl	status,r2
 40506d0:	00000106 	br	40506d8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 40506d4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 40506d8:	e037883a 	mov	sp,fp
 40506dc:	dfc00117 	ldw	ra,4(sp)
 40506e0:	df000017 	ldw	fp,0(sp)
 40506e4:	dec00204 	addi	sp,sp,8
 40506e8:	f800283a 	ret

040506ec <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 40506ec:	defff704 	addi	sp,sp,-36
 40506f0:	dfc00815 	stw	ra,32(sp)
 40506f4:	df000715 	stw	fp,28(sp)
 40506f8:	df000704 	addi	fp,sp,28
 40506fc:	e13ffd15 	stw	r4,-12(fp)
 4050700:	e17ffe15 	stw	r5,-8(fp)
 4050704:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4050708:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 405070c:	e0bfff17 	ldw	r2,-4(fp)
 4050710:	1000021e 	bne	r2,zero,405071c <OSEventNameGet+0x30>
        return (0);
 4050714:	0005883a 	mov	r2,zero
 4050718:	00003706 	br	40507f8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 405071c:	e0bffd17 	ldw	r2,-12(fp)
 4050720:	1000051e 	bne	r2,zero,4050738 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 4050724:	e0bfff17 	ldw	r2,-4(fp)
 4050728:	00c00104 	movi	r3,4
 405072c:	10c00005 	stb	r3,0(r2)
        return (0);
 4050730:	0005883a 	mov	r2,zero
 4050734:	00003006 	br	40507f8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4050738:	e0bffe17 	ldw	r2,-8(fp)
 405073c:	1000051e 	bne	r2,zero,4050754 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4050740:	e0bfff17 	ldw	r2,-4(fp)
 4050744:	00c00304 	movi	r3,12
 4050748:	10c00005 	stb	r3,0(r2)
        return (0);
 405074c:	0005883a 	mov	r2,zero
 4050750:	00002906 	br	40507f8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4050754:	d0a06003 	ldbu	r2,-32384(gp)
 4050758:	10803fcc 	andi	r2,r2,255
 405075c:	10000526 	beq	r2,zero,4050774 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 4050760:	e0bfff17 	ldw	r2,-4(fp)
 4050764:	00c00444 	movi	r3,17
 4050768:	10c00005 	stb	r3,0(r2)
        return (0);
 405076c:	0005883a 	mov	r2,zero
 4050770:	00002106 	br	40507f8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 4050774:	e0bffd17 	ldw	r2,-12(fp)
 4050778:	10800003 	ldbu	r2,0(r2)
 405077c:	10803fcc 	andi	r2,r2,255
 4050780:	10bfffc4 	addi	r2,r2,-1
 4050784:	10800128 	cmpgeui	r2,r2,4
 4050788:	10000526 	beq	r2,zero,40507a0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 405078c:	e0bfff17 	ldw	r2,-4(fp)
 4050790:	00c00044 	movi	r3,1
 4050794:	10c00005 	stb	r3,0(r2)
             return (0);
 4050798:	0005883a 	mov	r2,zero
 405079c:	00001606 	br	40507f8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 40507a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40507a4:	0005303a 	rdctl	r2,status
 40507a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40507ac:	e0fffb17 	ldw	r3,-20(fp)
 40507b0:	00bfff84 	movi	r2,-2
 40507b4:	1884703a 	and	r2,r3,r2
 40507b8:	1001703a 	wrctl	status,r2
  
  return context;
 40507bc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 40507c0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 40507c4:	e0bffd17 	ldw	r2,-12(fp)
 40507c8:	10800384 	addi	r2,r2,14
 40507cc:	100b883a 	mov	r5,r2
 40507d0:	e13ffe17 	ldw	r4,-8(fp)
 40507d4:	40521700 	call	4052170 <OS_StrCopy>
 40507d8:	e0bffa05 	stb	r2,-24(fp)
 40507dc:	e0bff917 	ldw	r2,-28(fp)
 40507e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40507e4:	e0bffc17 	ldw	r2,-16(fp)
 40507e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40507ec:	e0bfff17 	ldw	r2,-4(fp)
 40507f0:	10000005 	stb	zero,0(r2)
    return (len);
 40507f4:	e0bffa03 	ldbu	r2,-24(fp)
}
 40507f8:	e037883a 	mov	sp,fp
 40507fc:	dfc00117 	ldw	ra,4(sp)
 4050800:	df000017 	ldw	fp,0(sp)
 4050804:	dec00204 	addi	sp,sp,8
 4050808:	f800283a 	ret

0405080c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 405080c:	defff604 	addi	sp,sp,-40
 4050810:	dfc00915 	stw	ra,36(sp)
 4050814:	df000815 	stw	fp,32(sp)
 4050818:	df000804 	addi	fp,sp,32
 405081c:	e13ffd15 	stw	r4,-12(fp)
 4050820:	e17ffe15 	stw	r5,-8(fp)
 4050824:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4050828:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 405082c:	e0bfff17 	ldw	r2,-4(fp)
 4050830:	10004026 	beq	r2,zero,4050934 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4050834:	e0bffd17 	ldw	r2,-12(fp)
 4050838:	1000041e 	bne	r2,zero,405084c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 405083c:	e0bfff17 	ldw	r2,-4(fp)
 4050840:	00c00104 	movi	r3,4
 4050844:	10c00005 	stb	r3,0(r2)
        return;
 4050848:	00003b06 	br	4050938 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 405084c:	e0bffe17 	ldw	r2,-8(fp)
 4050850:	1000041e 	bne	r2,zero,4050864 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4050854:	e0bfff17 	ldw	r2,-4(fp)
 4050858:	00c00304 	movi	r3,12
 405085c:	10c00005 	stb	r3,0(r2)
        return;
 4050860:	00003506 	br	4050938 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4050864:	d0a06003 	ldbu	r2,-32384(gp)
 4050868:	10803fcc 	andi	r2,r2,255
 405086c:	10000426 	beq	r2,zero,4050880 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4050870:	e0bfff17 	ldw	r2,-4(fp)
 4050874:	00c00484 	movi	r3,18
 4050878:	10c00005 	stb	r3,0(r2)
        return;
 405087c:	00002e06 	br	4050938 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 4050880:	e0bffd17 	ldw	r2,-12(fp)
 4050884:	10800003 	ldbu	r2,0(r2)
 4050888:	10803fcc 	andi	r2,r2,255
 405088c:	10bfffc4 	addi	r2,r2,-1
 4050890:	10800128 	cmpgeui	r2,r2,4
 4050894:	10000426 	beq	r2,zero,40508a8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4050898:	e0bfff17 	ldw	r2,-4(fp)
 405089c:	00c00044 	movi	r3,1
 40508a0:	10c00005 	stb	r3,0(r2)
             return;
 40508a4:	00002406 	br	4050938 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 40508a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40508ac:	0005303a 	rdctl	r2,status
 40508b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40508b4:	e0fffc17 	ldw	r3,-16(fp)
 40508b8:	00bfff84 	movi	r2,-2
 40508bc:	1884703a 	and	r2,r3,r2
 40508c0:	1001703a 	wrctl	status,r2
  
  return context;
 40508c4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 40508c8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 40508cc:	e13ffe17 	ldw	r4,-8(fp)
 40508d0:	40521e40 	call	40521e4 <OS_StrLen>
 40508d4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 40508d8:	e0bffa03 	ldbu	r2,-24(fp)
 40508dc:	10800830 	cmpltui	r2,r2,32
 40508e0:	1000081e 	bne	r2,zero,4050904 <OSEventNameSet+0xf8>
 40508e4:	e0bff817 	ldw	r2,-32(fp)
 40508e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40508ec:	e0bff917 	ldw	r2,-28(fp)
 40508f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 40508f4:	e0bfff17 	ldw	r2,-4(fp)
 40508f8:	00c002c4 	movi	r3,11
 40508fc:	10c00005 	stb	r3,0(r2)
        return;
 4050900:	00000d06 	br	4050938 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 4050904:	e0bffd17 	ldw	r2,-12(fp)
 4050908:	10800384 	addi	r2,r2,14
 405090c:	e17ffe17 	ldw	r5,-8(fp)
 4050910:	1009883a 	mov	r4,r2
 4050914:	40521700 	call	4052170 <OS_StrCopy>
 4050918:	e0bff817 	ldw	r2,-32(fp)
 405091c:	e0bffb15 	stw	r2,-20(fp)
 4050920:	e0bffb17 	ldw	r2,-20(fp)
 4050924:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4050928:	e0bfff17 	ldw	r2,-4(fp)
 405092c:	10000005 	stb	zero,0(r2)
 4050930:	00000106 	br	4050938 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4050934:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4050938:	e037883a 	mov	sp,fp
 405093c:	dfc00117 	ldw	ra,4(sp)
 4050940:	df000017 	ldw	fp,0(sp)
 4050944:	dec00204 	addi	sp,sp,8
 4050948:	f800283a 	ret

0405094c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 405094c:	deffed04 	addi	sp,sp,-76
 4050950:	dfc01215 	stw	ra,72(sp)
 4050954:	df001115 	stw	fp,68(sp)
 4050958:	df001104 	addi	fp,sp,68
 405095c:	e13ffc15 	stw	r4,-16(fp)
 4050960:	e17ffd15 	stw	r5,-12(fp)
 4050964:	e1bffe15 	stw	r6,-8(fp)
 4050968:	3805883a 	mov	r2,r7
 405096c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 4050970:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 4050974:	e0800217 	ldw	r2,8(fp)
 4050978:	1000021e 	bne	r2,zero,4050984 <OSEventPendMulti+0x38>
        return (0);
 405097c:	0005883a 	mov	r2,zero
 4050980:	00017106 	br	4050f48 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 4050984:	e0bffc17 	ldw	r2,-16(fp)
 4050988:	1000051e 	bne	r2,zero,40509a0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 405098c:	e0800217 	ldw	r2,8(fp)
 4050990:	00c00104 	movi	r3,4
 4050994:	10c00005 	stb	r3,0(r2)
        return (0);
 4050998:	0005883a 	mov	r2,zero
 405099c:	00016a06 	br	4050f48 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 40509a0:	e0bffd17 	ldw	r2,-12(fp)
 40509a4:	1000051e 	bne	r2,zero,40509bc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 40509a8:	e0800217 	ldw	r2,8(fp)
 40509ac:	00c00104 	movi	r3,4
 40509b0:	10c00005 	stb	r3,0(r2)
        return (0);
 40509b4:	0005883a 	mov	r2,zero
 40509b8:	00016306 	br	4050f48 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 40509bc:	e0bffe17 	ldw	r2,-8(fp)
 40509c0:	1000051e 	bne	r2,zero,40509d8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 40509c4:	e0800217 	ldw	r2,8(fp)
 40509c8:	00c00104 	movi	r3,4
 40509cc:	10c00005 	stb	r3,0(r2)
        return (0);
 40509d0:	0005883a 	mov	r2,zero
 40509d4:	00015c06 	br	4050f48 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 40509d8:	e0bffd17 	ldw	r2,-12(fp)
 40509dc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 40509e0:	e0bffc17 	ldw	r2,-16(fp)
 40509e4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 40509e8:	e0bfef17 	ldw	r2,-68(fp)
 40509ec:	10800017 	ldw	r2,0(r2)
 40509f0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 40509f4:	00001906 	br	4050a5c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 40509f8:	e0bff017 	ldw	r2,-64(fp)
 40509fc:	10800003 	ldbu	r2,0(r2)
 4050a00:	10803fcc 	andi	r2,r2,255
 4050a04:	10c000a0 	cmpeqi	r3,r2,2
 4050a08:	1800091e 	bne	r3,zero,4050a30 <OSEventPendMulti+0xe4>
 4050a0c:	10c000e0 	cmpeqi	r3,r2,3
 4050a10:	1800091e 	bne	r3,zero,4050a38 <OSEventPendMulti+0xec>
 4050a14:	10800060 	cmpeqi	r2,r2,1
 4050a18:	1000091e 	bne	r2,zero,4050a40 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 4050a1c:	e0800217 	ldw	r2,8(fp)
 4050a20:	00c00044 	movi	r3,1
 4050a24:	10c00005 	stb	r3,0(r2)
                 return (0);
 4050a28:	0005883a 	mov	r2,zero
 4050a2c:	00014606 	br	4050f48 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 4050a30:	0001883a 	nop
 4050a34:	00000306 	br	4050a44 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 4050a38:	0001883a 	nop
 4050a3c:	00000106 	br	4050a44 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 4050a40:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 4050a44:	e0bfef17 	ldw	r2,-68(fp)
 4050a48:	10800104 	addi	r2,r2,4
 4050a4c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 4050a50:	e0bfef17 	ldw	r2,-68(fp)
 4050a54:	10800017 	ldw	r2,0(r2)
 4050a58:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 4050a5c:	e0bff017 	ldw	r2,-64(fp)
 4050a60:	103fe51e 	bne	r2,zero,40509f8 <__flash_rwdata_start+0xffff62c8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 4050a64:	d0a06003 	ldbu	r2,-32384(gp)
 4050a68:	10803fcc 	andi	r2,r2,255
 4050a6c:	10000526 	beq	r2,zero,4050a84 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 4050a70:	e0800217 	ldw	r2,8(fp)
 4050a74:	00c00084 	movi	r3,2
 4050a78:	10c00005 	stb	r3,0(r2)
        return (0);
 4050a7c:	0005883a 	mov	r2,zero
 4050a80:	00013106 	br	4050f48 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 4050a84:	d0a05203 	ldbu	r2,-32440(gp)
 4050a88:	10803fcc 	andi	r2,r2,255
 4050a8c:	10000526 	beq	r2,zero,4050aa4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 4050a90:	e0800217 	ldw	r2,8(fp)
 4050a94:	00c00344 	movi	r3,13
 4050a98:	10c00005 	stb	r3,0(r2)
        return (0);
 4050a9c:	0005883a 	mov	r2,zero
 4050aa0:	00012906 	br	4050f48 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4050aa4:	0005303a 	rdctl	r2,status
 4050aa8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4050aac:	e0fffb17 	ldw	r3,-20(fp)
 4050ab0:	00bfff84 	movi	r2,-2
 4050ab4:	1884703a 	and	r2,r3,r2
 4050ab8:	1001703a 	wrctl	status,r2
  
  return context;
 4050abc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4050ac0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 4050ac4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 4050ac8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 4050acc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 4050ad0:	e0bffc17 	ldw	r2,-16(fp)
 4050ad4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 4050ad8:	e0bfef17 	ldw	r2,-68(fp)
 4050adc:	10800017 	ldw	r2,0(r2)
 4050ae0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 4050ae4:	00008106 	br	4050cec <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 4050ae8:	e0bff017 	ldw	r2,-64(fp)
 4050aec:	10800003 	ldbu	r2,0(r2)
 4050af0:	10803fcc 	andi	r2,r2,255
 4050af4:	10c000a0 	cmpeqi	r3,r2,2
 4050af8:	18003c1e 	bne	r3,zero,4050bec <OSEventPendMulti+0x2a0>
 4050afc:	10c000e0 	cmpeqi	r3,r2,3
 4050b00:	1800031e 	bne	r3,zero,4050b10 <OSEventPendMulti+0x1c4>
 4050b04:	10800060 	cmpeqi	r2,r2,1
 4050b08:	10001e1e 	bne	r2,zero,4050b84 <OSEventPendMulti+0x238>
 4050b0c:	00006606 	br	4050ca8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 4050b10:	e0bff017 	ldw	r2,-64(fp)
 4050b14:	1080020b 	ldhu	r2,8(r2)
 4050b18:	10bfffcc 	andi	r2,r2,65535
 4050b1c:	10001526 	beq	r2,zero,4050b74 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 4050b20:	e0bff017 	ldw	r2,-64(fp)
 4050b24:	1080020b 	ldhu	r2,8(r2)
 4050b28:	10bfffc4 	addi	r2,r2,-1
 4050b2c:	1007883a 	mov	r3,r2
 4050b30:	e0bff017 	ldw	r2,-64(fp)
 4050b34:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 4050b38:	e0bffd17 	ldw	r2,-12(fp)
 4050b3c:	10c00104 	addi	r3,r2,4
 4050b40:	e0fffd15 	stw	r3,-12(fp)
 4050b44:	e0fff017 	ldw	r3,-64(fp)
 4050b48:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 4050b4c:	00800044 	movi	r2,1
 4050b50:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 4050b54:	e0bffe17 	ldw	r2,-8(fp)
 4050b58:	10c00104 	addi	r3,r2,4
 4050b5c:	e0fffe15 	stw	r3,-8(fp)
 4050b60:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 4050b64:	e0bff18b 	ldhu	r2,-58(fp)
 4050b68:	10800044 	addi	r2,r2,1
 4050b6c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 4050b70:	00005806 	br	4050cd4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 4050b74:	e0bff203 	ldbu	r2,-56(fp)
 4050b78:	10800054 	ori	r2,r2,1
 4050b7c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 4050b80:	00005406 	br	4050cd4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 4050b84:	e0bff017 	ldw	r2,-64(fp)
 4050b88:	10800117 	ldw	r2,4(r2)
 4050b8c:	10001326 	beq	r2,zero,4050bdc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 4050b90:	e0bffe17 	ldw	r2,-8(fp)
 4050b94:	10c00104 	addi	r3,r2,4
 4050b98:	e0fffe15 	stw	r3,-8(fp)
 4050b9c:	e0fff017 	ldw	r3,-64(fp)
 4050ba0:	18c00117 	ldw	r3,4(r3)
 4050ba4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 4050ba8:	e0bff017 	ldw	r2,-64(fp)
 4050bac:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 4050bb0:	e0bffd17 	ldw	r2,-12(fp)
 4050bb4:	10c00104 	addi	r3,r2,4
 4050bb8:	e0fffd15 	stw	r3,-12(fp)
 4050bbc:	e0fff017 	ldw	r3,-64(fp)
 4050bc0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 4050bc4:	00800044 	movi	r2,1
 4050bc8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 4050bcc:	e0bff18b 	ldhu	r2,-58(fp)
 4050bd0:	10800044 	addi	r2,r2,1
 4050bd4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 4050bd8:	00003e06 	br	4050cd4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 4050bdc:	e0bff203 	ldbu	r2,-56(fp)
 4050be0:	10800094 	ori	r2,r2,2
 4050be4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 4050be8:	00003a06 	br	4050cd4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 4050bec:	e0bff017 	ldw	r2,-64(fp)
 4050bf0:	10800117 	ldw	r2,4(r2)
 4050bf4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 4050bf8:	e0bff517 	ldw	r2,-44(fp)
 4050bfc:	1080058b 	ldhu	r2,22(r2)
 4050c00:	10bfffcc 	andi	r2,r2,65535
 4050c04:	10002426 	beq	r2,zero,4050c98 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 4050c08:	e0bffe17 	ldw	r2,-8(fp)
 4050c0c:	10c00104 	addi	r3,r2,4
 4050c10:	e0fffe15 	stw	r3,-8(fp)
 4050c14:	e0fff517 	ldw	r3,-44(fp)
 4050c18:	18c00417 	ldw	r3,16(r3)
 4050c1c:	19400104 	addi	r5,r3,4
 4050c20:	e13ff517 	ldw	r4,-44(fp)
 4050c24:	21400415 	stw	r5,16(r4)
 4050c28:	18c00017 	ldw	r3,0(r3)
 4050c2c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 4050c30:	e0bff517 	ldw	r2,-44(fp)
 4050c34:	10c00417 	ldw	r3,16(r2)
 4050c38:	e0bff517 	ldw	r2,-44(fp)
 4050c3c:	10800217 	ldw	r2,8(r2)
 4050c40:	1880041e 	bne	r3,r2,4050c54 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 4050c44:	e0bff517 	ldw	r2,-44(fp)
 4050c48:	10c00117 	ldw	r3,4(r2)
 4050c4c:	e0bff517 	ldw	r2,-44(fp)
 4050c50:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 4050c54:	e0bff517 	ldw	r2,-44(fp)
 4050c58:	1080058b 	ldhu	r2,22(r2)
 4050c5c:	10bfffc4 	addi	r2,r2,-1
 4050c60:	1007883a 	mov	r3,r2
 4050c64:	e0bff517 	ldw	r2,-44(fp)
 4050c68:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 4050c6c:	e0bffd17 	ldw	r2,-12(fp)
 4050c70:	10c00104 	addi	r3,r2,4
 4050c74:	e0fffd15 	stw	r3,-12(fp)
 4050c78:	e0fff017 	ldw	r3,-64(fp)
 4050c7c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 4050c80:	00800044 	movi	r2,1
 4050c84:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 4050c88:	e0bff18b 	ldhu	r2,-58(fp)
 4050c8c:	10800044 	addi	r2,r2,1
 4050c90:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 4050c94:	00000f06 	br	4050cd4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 4050c98:	e0bff203 	ldbu	r2,-56(fp)
 4050c9c:	10800114 	ori	r2,r2,4
 4050ca0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 4050ca4:	00000b06 	br	4050cd4 <OSEventPendMulti+0x388>
 4050ca8:	e0bff317 	ldw	r2,-52(fp)
 4050cac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4050cb0:	e0bff417 	ldw	r2,-48(fp)
 4050cb4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 4050cb8:	e0bffd17 	ldw	r2,-12(fp)
 4050cbc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 4050cc0:	e0800217 	ldw	r2,8(fp)
 4050cc4:	00c00044 	movi	r3,1
 4050cc8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 4050ccc:	e0bff18b 	ldhu	r2,-58(fp)
 4050cd0:	00009d06 	br	4050f48 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 4050cd4:	e0bfef17 	ldw	r2,-68(fp)
 4050cd8:	10800104 	addi	r2,r2,4
 4050cdc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 4050ce0:	e0bfef17 	ldw	r2,-68(fp)
 4050ce4:	10800017 	ldw	r2,0(r2)
 4050ce8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 4050cec:	e0bff017 	ldw	r2,-64(fp)
 4050cf0:	103f7d1e 	bne	r2,zero,4050ae8 <__flash_rwdata_start+0xffff63b8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 4050cf4:	e0bff103 	ldbu	r2,-60(fp)
 4050cf8:	10800058 	cmpnei	r2,r2,1
 4050cfc:	10000a1e 	bne	r2,zero,4050d28 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 4050d00:	e0bffd17 	ldw	r2,-12(fp)
 4050d04:	10000015 	stw	zero,0(r2)
 4050d08:	e0bff317 	ldw	r2,-52(fp)
 4050d0c:	e0bff615 	stw	r2,-40(fp)
 4050d10:	e0bff617 	ldw	r2,-40(fp)
 4050d14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 4050d18:	e0800217 	ldw	r2,8(fp)
 4050d1c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 4050d20:	e0bff18b 	ldhu	r2,-58(fp)
 4050d24:	00008806 	br	4050f48 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 4050d28:	d0a06117 	ldw	r2,-32380(gp)
 4050d2c:	d0e06117 	ldw	r3,-32380(gp)
 4050d30:	19000c03 	ldbu	r4,48(r3)
 4050d34:	e0fff203 	ldbu	r3,-56(fp)
 4050d38:	20c6b03a 	or	r3,r4,r3
 4050d3c:	1809883a 	mov	r4,r3
 4050d40:	00ffe004 	movi	r3,-128
 4050d44:	20c6b03a 	or	r3,r4,r3
 4050d48:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4050d4c:	d0a06117 	ldw	r2,-32380(gp)
 4050d50:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 4050d54:	d0a06117 	ldw	r2,-32380(gp)
 4050d58:	e0ffff0b 	ldhu	r3,-4(fp)
 4050d5c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 4050d60:	e13ffc17 	ldw	r4,-16(fp)
 4050d64:	40518880 	call	4051888 <OS_EventTaskWaitMulti>
 4050d68:	e0bff317 	ldw	r2,-52(fp)
 4050d6c:	e0bff915 	stw	r2,-28(fp)
 4050d70:	e0bff917 	ldw	r2,-28(fp)
 4050d74:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 4050d78:	405202c0 	call	405202c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4050d7c:	0005303a 	rdctl	r2,status
 4050d80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4050d84:	e0fff717 	ldw	r3,-36(fp)
 4050d88:	00bfff84 	movi	r2,-2
 4050d8c:	1884703a 	and	r2,r3,r2
 4050d90:	1001703a 	wrctl	status,r2
  
  return context;
 4050d94:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 4050d98:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 4050d9c:	d0a06117 	ldw	r2,-32380(gp)
 4050da0:	10800c43 	ldbu	r2,49(r2)
 4050da4:	10803fcc 	andi	r2,r2,255
 4050da8:	10000226 	beq	r2,zero,4050db4 <OSEventPendMulti+0x468>
 4050dac:	108000a0 	cmpeqi	r2,r2,2
 4050db0:	10001826 	beq	r2,zero,4050e14 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 4050db4:	d0a06117 	ldw	r2,-32380(gp)
 4050db8:	10800717 	ldw	r2,28(r2)
 4050dbc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 4050dc0:	e0bff017 	ldw	r2,-64(fp)
 4050dc4:	10000b26 	beq	r2,zero,4050df4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 4050dc8:	e0bffd17 	ldw	r2,-12(fp)
 4050dcc:	10c00104 	addi	r3,r2,4
 4050dd0:	e0fffd15 	stw	r3,-12(fp)
 4050dd4:	e0fff017 	ldw	r3,-64(fp)
 4050dd8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 4050ddc:	e0bffd17 	ldw	r2,-12(fp)
 4050de0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 4050de4:	e0bff18b 	ldhu	r2,-58(fp)
 4050de8:	10800044 	addi	r2,r2,1
 4050dec:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 4050df0:	00000d06 	br	4050e28 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 4050df4:	d0a06117 	ldw	r2,-32380(gp)
 4050df8:	00c00044 	movi	r3,1
 4050dfc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 4050e00:	d0a06117 	ldw	r2,-32380(gp)
 4050e04:	e17ffc17 	ldw	r5,-16(fp)
 4050e08:	1009883a 	mov	r4,r2
 4050e0c:	4051a900 	call	4051a90 <OS_EventTaskRemoveMulti>
             }
			 break;
 4050e10:	00000506 	br	4050e28 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 4050e14:	d0a06117 	ldw	r2,-32380(gp)
 4050e18:	e17ffc17 	ldw	r5,-16(fp)
 4050e1c:	1009883a 	mov	r4,r2
 4050e20:	4051a900 	call	4051a90 <OS_EventTaskRemoveMulti>
             break;
 4050e24:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 4050e28:	d0a06117 	ldw	r2,-32380(gp)
 4050e2c:	10800c43 	ldbu	r2,49(r2)
 4050e30:	10803fcc 	andi	r2,r2,255
 4050e34:	10000326 	beq	r2,zero,4050e44 <OSEventPendMulti+0x4f8>
 4050e38:	108000a0 	cmpeqi	r2,r2,2
 4050e3c:	1000231e 	bne	r2,zero,4050ecc <OSEventPendMulti+0x580>
 4050e40:	00002a06 	br	4050eec <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 4050e44:	e0bff017 	ldw	r2,-64(fp)
 4050e48:	10800003 	ldbu	r2,0(r2)
 4050e4c:	10803fcc 	andi	r2,r2,255
 4050e50:	0080100e 	bge	zero,r2,4050e94 <OSEventPendMulti+0x548>
 4050e54:	10c000d0 	cmplti	r3,r2,3
 4050e58:	1800071e 	bne	r3,zero,4050e78 <OSEventPendMulti+0x52c>
 4050e5c:	108000e0 	cmpeqi	r2,r2,3
 4050e60:	10000c26 	beq	r2,zero,4050e94 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 4050e64:	e0bffe17 	ldw	r2,-8(fp)
 4050e68:	10c00104 	addi	r3,r2,4
 4050e6c:	e0fffe15 	stw	r3,-8(fp)
 4050e70:	10000015 	stw	zero,0(r2)
                      break;
 4050e74:	00001206 	br	4050ec0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 4050e78:	e0bffe17 	ldw	r2,-8(fp)
 4050e7c:	10c00104 	addi	r3,r2,4
 4050e80:	e0fffe15 	stw	r3,-8(fp)
 4050e84:	d0e06117 	ldw	r3,-32380(gp)
 4050e88:	18c00917 	ldw	r3,36(r3)
 4050e8c:	10c00015 	stw	r3,0(r2)
                      break;
 4050e90:	00000b06 	br	4050ec0 <OSEventPendMulti+0x574>
 4050e94:	e0bff317 	ldw	r2,-52(fp)
 4050e98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4050e9c:	e0bff817 	ldw	r2,-32(fp)
 4050ea0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 4050ea4:	e0bffd17 	ldw	r2,-12(fp)
 4050ea8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 4050eac:	e0800217 	ldw	r2,8(fp)
 4050eb0:	00c00044 	movi	r3,1
 4050eb4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 4050eb8:	e0bff18b 	ldhu	r2,-58(fp)
 4050ebc:	00002206 	br	4050f48 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 4050ec0:	e0800217 	ldw	r2,8(fp)
 4050ec4:	10000005 	stb	zero,0(r2)
             break;
 4050ec8:	00001006 	br	4050f0c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 4050ecc:	e0bffe17 	ldw	r2,-8(fp)
 4050ed0:	10c00104 	addi	r3,r2,4
 4050ed4:	e0fffe15 	stw	r3,-8(fp)
 4050ed8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 4050edc:	e0800217 	ldw	r2,8(fp)
 4050ee0:	00c00384 	movi	r3,14
 4050ee4:	10c00005 	stb	r3,0(r2)
             break;
 4050ee8:	00000806 	br	4050f0c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 4050eec:	e0bffe17 	ldw	r2,-8(fp)
 4050ef0:	10c00104 	addi	r3,r2,4
 4050ef4:	e0fffe15 	stw	r3,-8(fp)
 4050ef8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 4050efc:	e0800217 	ldw	r2,8(fp)
 4050f00:	00c00284 	movi	r3,10
 4050f04:	10c00005 	stb	r3,0(r2)
             break;
 4050f08:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 4050f0c:	d0a06117 	ldw	r2,-32380(gp)
 4050f10:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 4050f14:	d0a06117 	ldw	r2,-32380(gp)
 4050f18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 4050f1c:	d0a06117 	ldw	r2,-32380(gp)
 4050f20:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4050f24:	d0a06117 	ldw	r2,-32380(gp)
 4050f28:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 4050f2c:	d0a06117 	ldw	r2,-32380(gp)
 4050f30:	10000915 	stw	zero,36(r2)
 4050f34:	e0bff317 	ldw	r2,-52(fp)
 4050f38:	e0bffa15 	stw	r2,-24(fp)
 4050f3c:	e0bffa17 	ldw	r2,-24(fp)
 4050f40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 4050f44:	e0bff18b 	ldhu	r2,-58(fp)
}
 4050f48:	e037883a 	mov	sp,fp
 4050f4c:	dfc00117 	ldw	ra,4(sp)
 4050f50:	df000017 	ldw	fp,0(sp)
 4050f54:	dec00204 	addi	sp,sp,8
 4050f58:	f800283a 	ret

04050f5c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 4050f5c:	defffe04 	addi	sp,sp,-8
 4050f60:	dfc00115 	stw	ra,4(sp)
 4050f64:	df000015 	stw	fp,0(sp)
 4050f68:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 4050f6c:	40599b00 	call	40599b0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 4050f70:	4051cd80 	call	4051cd8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 4050f74:	4051d200 	call	4051d20 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 4050f78:	4051e8c0 	call	4051e8c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 4050f7c:	4051bf80 	call	4051bf8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 4050f80:	4053d2c0 	call	4053d2c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 4050f84:	405462c0 	call	405462c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 4050f88:	40557540 	call	4055754 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 4050f8c:	4051d8c0 	call	4051d8c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 4050f90:	4051e0c0 	call	4051e0c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 4050f94:	40599d00 	call	40599d0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 4050f98:	40527000 	call	4052700 <OSDebugInit>
#endif
}
 4050f9c:	0001883a 	nop
 4050fa0:	e037883a 	mov	sp,fp
 4050fa4:	dfc00117 	ldw	ra,4(sp)
 4050fa8:	df000017 	ldw	fp,0(sp)
 4050fac:	dec00204 	addi	sp,sp,8
 4050fb0:	f800283a 	ret

04050fb4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 4050fb4:	deffff04 	addi	sp,sp,-4
 4050fb8:	df000015 	stw	fp,0(sp)
 4050fbc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 4050fc0:	d0a05243 	ldbu	r2,-32439(gp)
 4050fc4:	10803fcc 	andi	r2,r2,255
 4050fc8:	10800058 	cmpnei	r2,r2,1
 4050fcc:	1000071e 	bne	r2,zero,4050fec <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 4050fd0:	d0a06003 	ldbu	r2,-32384(gp)
 4050fd4:	10803fcc 	andi	r2,r2,255
 4050fd8:	10803fe0 	cmpeqi	r2,r2,255
 4050fdc:	1000031e 	bne	r2,zero,4050fec <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 4050fe0:	d0a06003 	ldbu	r2,-32384(gp)
 4050fe4:	10800044 	addi	r2,r2,1
 4050fe8:	d0a06005 	stb	r2,-32384(gp)
        }
    }
}
 4050fec:	0001883a 	nop
 4050ff0:	e037883a 	mov	sp,fp
 4050ff4:	df000017 	ldw	fp,0(sp)
 4050ff8:	dec00104 	addi	sp,sp,4
 4050ffc:	f800283a 	ret

04051000 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 4051000:	defffb04 	addi	sp,sp,-20
 4051004:	dfc00415 	stw	ra,16(sp)
 4051008:	df000315 	stw	fp,12(sp)
 405100c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4051010:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 4051014:	d0a05243 	ldbu	r2,-32439(gp)
 4051018:	10803fcc 	andi	r2,r2,255
 405101c:	10800058 	cmpnei	r2,r2,1
 4051020:	10002f1e 	bne	r2,zero,40510e0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4051024:	0005303a 	rdctl	r2,status
 4051028:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 405102c:	e0ffff17 	ldw	r3,-4(fp)
 4051030:	00bfff84 	movi	r2,-2
 4051034:	1884703a 	and	r2,r3,r2
 4051038:	1001703a 	wrctl	status,r2
  
  return context;
 405103c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4051040:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 4051044:	d0a06003 	ldbu	r2,-32384(gp)
 4051048:	10803fcc 	andi	r2,r2,255
 405104c:	10000326 	beq	r2,zero,405105c <OSIntExit+0x5c>
            OSIntNesting--;
 4051050:	d0a06003 	ldbu	r2,-32384(gp)
 4051054:	10bfffc4 	addi	r2,r2,-1
 4051058:	d0a06005 	stb	r2,-32384(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 405105c:	d0a06003 	ldbu	r2,-32384(gp)
 4051060:	10803fcc 	andi	r2,r2,255
 4051064:	10001a1e 	bne	r2,zero,40510d0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 4051068:	d0a05203 	ldbu	r2,-32440(gp)
 405106c:	10803fcc 	andi	r2,r2,255
 4051070:	1000171e 	bne	r2,zero,40510d0 <OSIntExit+0xd0>
                OS_SchedNew();
 4051074:	40520fc0 	call	40520fc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 4051078:	d0e05403 	ldbu	r3,-32432(gp)
 405107c:	d0a05443 	ldbu	r2,-32431(gp)
 4051080:	18c03fcc 	andi	r3,r3,255
 4051084:	10803fcc 	andi	r2,r2,255
 4051088:	18801126 	beq	r3,r2,40510d0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 405108c:	d0a05403 	ldbu	r2,-32432(gp)
 4051090:	10c03fcc 	andi	r3,r2,255
 4051094:	00808074 	movhi	r2,513
 4051098:	10958d04 	addi	r2,r2,22068
 405109c:	18c7883a 	add	r3,r3,r3
 40510a0:	18c7883a 	add	r3,r3,r3
 40510a4:	10c5883a 	add	r2,r2,r3
 40510a8:	10800017 	ldw	r2,0(r2)
 40510ac:	d0a05c15 	stw	r2,-32400(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 40510b0:	d0a05c17 	ldw	r2,-32400(gp)
 40510b4:	10c00e17 	ldw	r3,56(r2)
 40510b8:	18c00044 	addi	r3,r3,1
 40510bc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 40510c0:	d0a05717 	ldw	r2,-32420(gp)
 40510c4:	10800044 	addi	r2,r2,1
 40510c8:	d0a05715 	stw	r2,-32420(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 40510cc:	40596dc0 	call	40596dc <OSCtxSw>
 40510d0:	e0bffd17 	ldw	r2,-12(fp)
 40510d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40510d8:	e0bffe17 	ldw	r2,-8(fp)
 40510dc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 40510e0:	0001883a 	nop
 40510e4:	e037883a 	mov	sp,fp
 40510e8:	dfc00117 	ldw	ra,4(sp)
 40510ec:	df000017 	ldw	fp,0(sp)
 40510f0:	dec00204 	addi	sp,sp,8
 40510f4:	f800283a 	ret

040510f8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 40510f8:	defffc04 	addi	sp,sp,-16
 40510fc:	df000315 	stw	fp,12(sp)
 4051100:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4051104:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 4051108:	d0a05243 	ldbu	r2,-32439(gp)
 405110c:	10803fcc 	andi	r2,r2,255
 4051110:	10800058 	cmpnei	r2,r2,1
 4051114:	1000161e 	bne	r2,zero,4051170 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4051118:	0005303a 	rdctl	r2,status
 405111c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4051120:	e0ffff17 	ldw	r3,-4(fp)
 4051124:	00bfff84 	movi	r2,-2
 4051128:	1884703a 	and	r2,r3,r2
 405112c:	1001703a 	wrctl	status,r2
  
  return context;
 4051130:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4051134:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 4051138:	d0a06003 	ldbu	r2,-32384(gp)
 405113c:	10803fcc 	andi	r2,r2,255
 4051140:	1000071e 	bne	r2,zero,4051160 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 4051144:	d0a05203 	ldbu	r2,-32440(gp)
 4051148:	10803fcc 	andi	r2,r2,255
 405114c:	10803fe0 	cmpeqi	r2,r2,255
 4051150:	1000031e 	bne	r2,zero,4051160 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 4051154:	d0a05203 	ldbu	r2,-32440(gp)
 4051158:	10800044 	addi	r2,r2,1
 405115c:	d0a05205 	stb	r2,-32440(gp)
 4051160:	e0bffd17 	ldw	r2,-12(fp)
 4051164:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4051168:	e0bffe17 	ldw	r2,-8(fp)
 405116c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4051170:	0001883a 	nop
 4051174:	e037883a 	mov	sp,fp
 4051178:	df000017 	ldw	fp,0(sp)
 405117c:	dec00104 	addi	sp,sp,4
 4051180:	f800283a 	ret

04051184 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 4051184:	defff804 	addi	sp,sp,-32
 4051188:	dfc00715 	stw	ra,28(sp)
 405118c:	df000615 	stw	fp,24(sp)
 4051190:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4051194:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 4051198:	d0a05243 	ldbu	r2,-32439(gp)
 405119c:	10803fcc 	andi	r2,r2,255
 40511a0:	10800058 	cmpnei	r2,r2,1
 40511a4:	1000281e 	bne	r2,zero,4051248 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40511a8:	0005303a 	rdctl	r2,status
 40511ac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40511b0:	e0ffff17 	ldw	r3,-4(fp)
 40511b4:	00bfff84 	movi	r2,-2
 40511b8:	1884703a 	and	r2,r3,r2
 40511bc:	1001703a 	wrctl	status,r2
  
  return context;
 40511c0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 40511c4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 40511c8:	d0a05203 	ldbu	r2,-32440(gp)
 40511cc:	10803fcc 	andi	r2,r2,255
 40511d0:	10001926 	beq	r2,zero,4051238 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 40511d4:	d0a05203 	ldbu	r2,-32440(gp)
 40511d8:	10bfffc4 	addi	r2,r2,-1
 40511dc:	d0a05205 	stb	r2,-32440(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 40511e0:	d0a05203 	ldbu	r2,-32440(gp)
 40511e4:	10803fcc 	andi	r2,r2,255
 40511e8:	10000e1e 	bne	r2,zero,4051224 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 40511ec:	d0a06003 	ldbu	r2,-32384(gp)
 40511f0:	10803fcc 	andi	r2,r2,255
 40511f4:	1000061e 	bne	r2,zero,4051210 <OSSchedUnlock+0x8c>
 40511f8:	e0bffa17 	ldw	r2,-24(fp)
 40511fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4051200:	e0bffb17 	ldw	r2,-20(fp)
 4051204:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 4051208:	405202c0 	call	405202c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 405120c:	00000e06 	br	4051248 <OSSchedUnlock+0xc4>
 4051210:	e0bffa17 	ldw	r2,-24(fp)
 4051214:	e0bffc15 	stw	r2,-16(fp)
 4051218:	e0bffc17 	ldw	r2,-16(fp)
 405121c:	1001703a 	wrctl	status,r2
 4051220:	00000906 	br	4051248 <OSSchedUnlock+0xc4>
 4051224:	e0bffa17 	ldw	r2,-24(fp)
 4051228:	e0bffd15 	stw	r2,-12(fp)
 405122c:	e0bffd17 	ldw	r2,-12(fp)
 4051230:	1001703a 	wrctl	status,r2
 4051234:	00000406 	br	4051248 <OSSchedUnlock+0xc4>
 4051238:	e0bffa17 	ldw	r2,-24(fp)
 405123c:	e0bffe15 	stw	r2,-8(fp)
 4051240:	e0bffe17 	ldw	r2,-8(fp)
 4051244:	1001703a 	wrctl	status,r2
 4051248:	0001883a 	nop
 405124c:	e037883a 	mov	sp,fp
 4051250:	dfc00117 	ldw	ra,4(sp)
 4051254:	df000017 	ldw	fp,0(sp)
 4051258:	dec00204 	addi	sp,sp,8
 405125c:	f800283a 	ret

04051260 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 4051260:	defffe04 	addi	sp,sp,-8
 4051264:	dfc00115 	stw	ra,4(sp)
 4051268:	df000015 	stw	fp,0(sp)
 405126c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 4051270:	d0a05243 	ldbu	r2,-32439(gp)
 4051274:	10803fcc 	andi	r2,r2,255
 4051278:	10000f1e 	bne	r2,zero,40512b8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 405127c:	40520fc0 	call	40520fc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 4051280:	d0a05403 	ldbu	r2,-32432(gp)
 4051284:	d0a05445 	stb	r2,-32431(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 4051288:	d0a05403 	ldbu	r2,-32432(gp)
 405128c:	10c03fcc 	andi	r3,r2,255
 4051290:	00808074 	movhi	r2,513
 4051294:	10958d04 	addi	r2,r2,22068
 4051298:	18c7883a 	add	r3,r3,r3
 405129c:	18c7883a 	add	r3,r3,r3
 40512a0:	10c5883a 	add	r2,r2,r3
 40512a4:	10800017 	ldw	r2,0(r2)
 40512a8:	d0a05c15 	stw	r2,-32400(gp)
        OSTCBCur      = OSTCBHighRdy;
 40512ac:	d0a05c17 	ldw	r2,-32400(gp)
 40512b0:	d0a06115 	stw	r2,-32380(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 40512b4:	40597680 	call	4059768 <OSStartHighRdy>
    }
}
 40512b8:	0001883a 	nop
 40512bc:	e037883a 	mov	sp,fp
 40512c0:	dfc00117 	ldw	ra,4(sp)
 40512c4:	df000017 	ldw	fp,0(sp)
 40512c8:	dec00204 	addi	sp,sp,8
 40512cc:	f800283a 	ret

040512d0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 40512d0:	defff904 	addi	sp,sp,-28
 40512d4:	dfc00615 	stw	ra,24(sp)
 40512d8:	df000515 	stw	fp,20(sp)
 40512dc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40512e0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 40512e4:	01000084 	movi	r4,2
 40512e8:	40579c80 	call	40579c8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40512ec:	0005303a 	rdctl	r2,status
 40512f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40512f4:	e0fffc17 	ldw	r3,-16(fp)
 40512f8:	00bfff84 	movi	r2,-2
 40512fc:	1884703a 	and	r2,r3,r2
 4051300:	1001703a 	wrctl	status,r2
  
  return context;
 4051304:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 4051308:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 405130c:	d0205315 	stw	zero,-32436(gp)
 4051310:	e0bffb17 	ldw	r2,-20(fp)
 4051314:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4051318:	e0bffd17 	ldw	r2,-12(fp)
 405131c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 4051320:	01001904 	movi	r4,100
 4051324:	40579c80 	call	40579c8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4051328:	0005303a 	rdctl	r2,status
 405132c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4051330:	e0fffe17 	ldw	r3,-8(fp)
 4051334:	00bfff84 	movi	r2,-2
 4051338:	1884703a 	and	r2,r3,r2
 405133c:	1001703a 	wrctl	status,r2
  
  return context;
 4051340:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 4051344:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 4051348:	d0a05317 	ldw	r2,-32436(gp)
 405134c:	d0a05815 	stw	r2,-32416(gp)
    OSStatRdy    = OS_TRUE;
 4051350:	00800044 	movi	r2,1
 4051354:	d0a06405 	stb	r2,-32368(gp)
 4051358:	e0bffb17 	ldw	r2,-20(fp)
 405135c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4051360:	e0bfff17 	ldw	r2,-4(fp)
 4051364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4051368:	0001883a 	nop
 405136c:	e037883a 	mov	sp,fp
 4051370:	dfc00117 	ldw	ra,4(sp)
 4051374:	df000017 	ldw	fp,0(sp)
 4051378:	dec00204 	addi	sp,sp,8
 405137c:	f800283a 	ret

04051380 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 4051380:	defff704 	addi	sp,sp,-36
 4051384:	dfc00815 	stw	ra,32(sp)
 4051388:	df000715 	stw	fp,28(sp)
 405138c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4051390:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 4051394:	40599900 	call	4059990 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4051398:	0005303a 	rdctl	r2,status
 405139c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40513a0:	e0fffd17 	ldw	r3,-12(fp)
 40513a4:	00bfff84 	movi	r2,-2
 40513a8:	1884703a 	and	r2,r3,r2
 40513ac:	1001703a 	wrctl	status,r2
  
  return context;
 40513b0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 40513b4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 40513b8:	d0a06217 	ldw	r2,-32376(gp)
 40513bc:	10800044 	addi	r2,r2,1
 40513c0:	d0a06215 	stw	r2,-32376(gp)
 40513c4:	e0bffb17 	ldw	r2,-20(fp)
 40513c8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40513cc:	e0bfff17 	ldw	r2,-4(fp)
 40513d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 40513d4:	d0a05243 	ldbu	r2,-32439(gp)
 40513d8:	10803fcc 	andi	r2,r2,255
 40513dc:	10800058 	cmpnei	r2,r2,1
 40513e0:	10006a1e 	bne	r2,zero,405158c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 40513e4:	d0a05603 	ldbu	r2,-32424(gp)
 40513e8:	10803fcc 	andi	r2,r2,255
 40513ec:	10c00060 	cmpeqi	r3,r2,1
 40513f0:	1800061e 	bne	r3,zero,405140c <OSTimeTick+0x8c>
 40513f4:	10c000a0 	cmpeqi	r3,r2,2
 40513f8:	1800061e 	bne	r3,zero,4051414 <OSTimeTick+0x94>
 40513fc:	10000a1e 	bne	r2,zero,4051428 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 4051400:	00800044 	movi	r2,1
 4051404:	e0bffa05 	stb	r2,-24(fp)
                 break;
 4051408:	00000b06 	br	4051438 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 405140c:	e03ffa05 	stb	zero,-24(fp)
                 break;
 4051410:	00000906 	br	4051438 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 4051414:	00800044 	movi	r2,1
 4051418:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 405141c:	00800044 	movi	r2,1
 4051420:	d0a05605 	stb	r2,-32424(gp)
                 break;
 4051424:	00000406 	br	4051438 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 4051428:	00800044 	movi	r2,1
 405142c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 4051430:	d0205605 	stb	zero,-32424(gp)
                 break;
 4051434:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 4051438:	e0bffa03 	ldbu	r2,-24(fp)
 405143c:	10005226 	beq	r2,zero,4051588 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 4051440:	d0a05517 	ldw	r2,-32428(gp)
 4051444:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4051448:	00004906 	br	4051570 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405144c:	0005303a 	rdctl	r2,status
 4051450:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4051454:	e0fffc17 	ldw	r3,-16(fp)
 4051458:	00bfff84 	movi	r2,-2
 405145c:	1884703a 	and	r2,r3,r2
 4051460:	1001703a 	wrctl	status,r2
  
  return context;
 4051464:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 4051468:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 405146c:	e0bff917 	ldw	r2,-28(fp)
 4051470:	10800b8b 	ldhu	r2,46(r2)
 4051474:	10bfffcc 	andi	r2,r2,65535
 4051478:	10003626 	beq	r2,zero,4051554 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 405147c:	e0bff917 	ldw	r2,-28(fp)
 4051480:	10800b8b 	ldhu	r2,46(r2)
 4051484:	10bfffc4 	addi	r2,r2,-1
 4051488:	1007883a 	mov	r3,r2
 405148c:	e0bff917 	ldw	r2,-28(fp)
 4051490:	10c00b8d 	sth	r3,46(r2)
 4051494:	e0bff917 	ldw	r2,-28(fp)
 4051498:	10800b8b 	ldhu	r2,46(r2)
 405149c:	10bfffcc 	andi	r2,r2,65535
 40514a0:	10002c1e 	bne	r2,zero,4051554 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 40514a4:	e0bff917 	ldw	r2,-28(fp)
 40514a8:	10800c03 	ldbu	r2,48(r2)
 40514ac:	10803fcc 	andi	r2,r2,255
 40514b0:	10800dcc 	andi	r2,r2,55
 40514b4:	10000b26 	beq	r2,zero,40514e4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 40514b8:	e0bff917 	ldw	r2,-28(fp)
 40514bc:	10c00c03 	ldbu	r3,48(r2)
 40514c0:	00bff204 	movi	r2,-56
 40514c4:	1884703a 	and	r2,r3,r2
 40514c8:	1007883a 	mov	r3,r2
 40514cc:	e0bff917 	ldw	r2,-28(fp)
 40514d0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 40514d4:	e0bff917 	ldw	r2,-28(fp)
 40514d8:	00c00044 	movi	r3,1
 40514dc:	10c00c45 	stb	r3,49(r2)
 40514e0:	00000206 	br	40514ec <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 40514e4:	e0bff917 	ldw	r2,-28(fp)
 40514e8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 40514ec:	e0bff917 	ldw	r2,-28(fp)
 40514f0:	10800c03 	ldbu	r2,48(r2)
 40514f4:	10803fcc 	andi	r2,r2,255
 40514f8:	1080020c 	andi	r2,r2,8
 40514fc:	1000151e 	bne	r2,zero,4051554 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 4051500:	e0bff917 	ldw	r2,-28(fp)
 4051504:	10c00d83 	ldbu	r3,54(r2)
 4051508:	d0a05e03 	ldbu	r2,-32392(gp)
 405150c:	1884b03a 	or	r2,r3,r2
 4051510:	d0a05e05 	stb	r2,-32392(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4051514:	e0bff917 	ldw	r2,-28(fp)
 4051518:	10800d03 	ldbu	r2,52(r2)
 405151c:	10c03fcc 	andi	r3,r2,255
 4051520:	e0bff917 	ldw	r2,-28(fp)
 4051524:	10800d03 	ldbu	r2,52(r2)
 4051528:	11003fcc 	andi	r4,r2,255
 405152c:	d0a05e44 	addi	r2,gp,-32391
 4051530:	2085883a 	add	r2,r4,r2
 4051534:	11000003 	ldbu	r4,0(r2)
 4051538:	e0bff917 	ldw	r2,-28(fp)
 405153c:	10800d43 	ldbu	r2,53(r2)
 4051540:	2084b03a 	or	r2,r4,r2
 4051544:	1009883a 	mov	r4,r2
 4051548:	d0a05e44 	addi	r2,gp,-32391
 405154c:	1885883a 	add	r2,r3,r2
 4051550:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 4051554:	e0bff917 	ldw	r2,-28(fp)
 4051558:	10800517 	ldw	r2,20(r2)
 405155c:	e0bff915 	stw	r2,-28(fp)
 4051560:	e0bffb17 	ldw	r2,-20(fp)
 4051564:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4051568:	e0bffe17 	ldw	r2,-8(fp)
 405156c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4051570:	e0bff917 	ldw	r2,-28(fp)
 4051574:	10800c83 	ldbu	r2,50(r2)
 4051578:	10803fcc 	andi	r2,r2,255
 405157c:	10800518 	cmpnei	r2,r2,20
 4051580:	103fb21e 	bne	r2,zero,405144c <__flash_rwdata_start+0xffff6d1c>
 4051584:	00000106 	br	405158c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 4051588:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 405158c:	e037883a 	mov	sp,fp
 4051590:	dfc00117 	ldw	ra,4(sp)
 4051594:	df000017 	ldw	fp,0(sp)
 4051598:	dec00204 	addi	sp,sp,8
 405159c:	f800283a 	ret

040515a0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 40515a0:	deffff04 	addi	sp,sp,-4
 40515a4:	df000015 	stw	fp,0(sp)
 40515a8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 40515ac:	00804784 	movi	r2,286
}
 40515b0:	e037883a 	mov	sp,fp
 40515b4:	df000017 	ldw	fp,0(sp)
 40515b8:	dec00104 	addi	sp,sp,4
 40515bc:	f800283a 	ret

040515c0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 40515c0:	deffff04 	addi	sp,sp,-4
 40515c4:	df000015 	stw	fp,0(sp)
 40515c8:	d839883a 	mov	fp,sp
}
 40515cc:	0001883a 	nop
 40515d0:	e037883a 	mov	sp,fp
 40515d4:	df000017 	ldw	fp,0(sp)
 40515d8:	dec00104 	addi	sp,sp,4
 40515dc:	f800283a 	ret

040515e0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 40515e0:	defff804 	addi	sp,sp,-32
 40515e4:	dfc00715 	stw	ra,28(sp)
 40515e8:	df000615 	stw	fp,24(sp)
 40515ec:	df000604 	addi	fp,sp,24
 40515f0:	e13ffc15 	stw	r4,-16(fp)
 40515f4:	e17ffd15 	stw	r5,-12(fp)
 40515f8:	3007883a 	mov	r3,r6
 40515fc:	3805883a 	mov	r2,r7
 4051600:	e0fffe05 	stb	r3,-8(fp)
 4051604:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 4051608:	e0bffc17 	ldw	r2,-16(fp)
 405160c:	10800283 	ldbu	r2,10(r2)
 4051610:	10c03fcc 	andi	r3,r2,255
 4051614:	00808034 	movhi	r2,512
 4051618:	10814c04 	addi	r2,r2,1328
 405161c:	10c5883a 	add	r2,r2,r3
 4051620:	10800003 	ldbu	r2,0(r2)
 4051624:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 4051628:	e0bffa03 	ldbu	r2,-24(fp)
 405162c:	e0fffc17 	ldw	r3,-16(fp)
 4051630:	1885883a 	add	r2,r3,r2
 4051634:	108002c4 	addi	r2,r2,11
 4051638:	10800003 	ldbu	r2,0(r2)
 405163c:	10c03fcc 	andi	r3,r2,255
 4051640:	00808034 	movhi	r2,512
 4051644:	10814c04 	addi	r2,r2,1328
 4051648:	10c5883a 	add	r2,r2,r3
 405164c:	10800003 	ldbu	r2,0(r2)
 4051650:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 4051654:	e0bffa03 	ldbu	r2,-24(fp)
 4051658:	100490fa 	slli	r2,r2,3
 405165c:	1007883a 	mov	r3,r2
 4051660:	e0bffa43 	ldbu	r2,-23(fp)
 4051664:	1885883a 	add	r2,r3,r2
 4051668:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 405166c:	e0fffa83 	ldbu	r3,-22(fp)
 4051670:	00808074 	movhi	r2,513
 4051674:	10958d04 	addi	r2,r2,22068
 4051678:	18c7883a 	add	r3,r3,r3
 405167c:	18c7883a 	add	r3,r3,r3
 4051680:	10c5883a 	add	r2,r2,r3
 4051684:	10800017 	ldw	r2,0(r2)
 4051688:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 405168c:	e0bffb17 	ldw	r2,-20(fp)
 4051690:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 4051694:	e0bffb17 	ldw	r2,-20(fp)
 4051698:	e0fffd17 	ldw	r3,-12(fp)
 405169c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 40516a0:	e0bffb17 	ldw	r2,-20(fp)
 40516a4:	10800c03 	ldbu	r2,48(r2)
 40516a8:	1007883a 	mov	r3,r2
 40516ac:	e0bffe03 	ldbu	r2,-8(fp)
 40516b0:	0084303a 	nor	r2,zero,r2
 40516b4:	1884703a 	and	r2,r3,r2
 40516b8:	1007883a 	mov	r3,r2
 40516bc:	e0bffb17 	ldw	r2,-20(fp)
 40516c0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 40516c4:	e0bffb17 	ldw	r2,-20(fp)
 40516c8:	e0ffff03 	ldbu	r3,-4(fp)
 40516cc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 40516d0:	e0bffb17 	ldw	r2,-20(fp)
 40516d4:	10800c03 	ldbu	r2,48(r2)
 40516d8:	10803fcc 	andi	r2,r2,255
 40516dc:	1080020c 	andi	r2,r2,8
 40516e0:	1000111e 	bne	r2,zero,4051728 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 40516e4:	e0bffb17 	ldw	r2,-20(fp)
 40516e8:	10c00d83 	ldbu	r3,54(r2)
 40516ec:	d0a05e03 	ldbu	r2,-32392(gp)
 40516f0:	1884b03a 	or	r2,r3,r2
 40516f4:	d0a05e05 	stb	r2,-32392(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 40516f8:	e0fffa03 	ldbu	r3,-24(fp)
 40516fc:	e13ffa03 	ldbu	r4,-24(fp)
 4051700:	d0a05e44 	addi	r2,gp,-32391
 4051704:	2085883a 	add	r2,r4,r2
 4051708:	11000003 	ldbu	r4,0(r2)
 405170c:	e0bffb17 	ldw	r2,-20(fp)
 4051710:	10800d43 	ldbu	r2,53(r2)
 4051714:	2084b03a 	or	r2,r4,r2
 4051718:	1009883a 	mov	r4,r2
 405171c:	d0a05e44 	addi	r2,gp,-32391
 4051720:	1885883a 	add	r2,r3,r2
 4051724:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 4051728:	e17ffc17 	ldw	r5,-16(fp)
 405172c:	e13ffb17 	ldw	r4,-20(fp)
 4051730:	40519d80 	call	40519d8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 4051734:	e0bffb17 	ldw	r2,-20(fp)
 4051738:	10800817 	ldw	r2,32(r2)
 405173c:	10000826 	beq	r2,zero,4051760 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4051740:	e0bffb17 	ldw	r2,-20(fp)
 4051744:	10800817 	ldw	r2,32(r2)
 4051748:	100b883a 	mov	r5,r2
 405174c:	e13ffb17 	ldw	r4,-20(fp)
 4051750:	4051a900 	call	4051a90 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 4051754:	e0bffb17 	ldw	r2,-20(fp)
 4051758:	e0fffc17 	ldw	r3,-16(fp)
 405175c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 4051760:	e0bffa83 	ldbu	r2,-22(fp)
}
 4051764:	e037883a 	mov	sp,fp
 4051768:	dfc00117 	ldw	ra,4(sp)
 405176c:	df000017 	ldw	fp,0(sp)
 4051770:	dec00204 	addi	sp,sp,8
 4051774:	f800283a 	ret

04051778 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 4051778:	defffd04 	addi	sp,sp,-12
 405177c:	df000215 	stw	fp,8(sp)
 4051780:	df000204 	addi	fp,sp,8
 4051784:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 4051788:	d0a06117 	ldw	r2,-32380(gp)
 405178c:	e0ffff17 	ldw	r3,-4(fp)
 4051790:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 4051794:	d0a06117 	ldw	r2,-32380(gp)
 4051798:	10800d03 	ldbu	r2,52(r2)
 405179c:	10803fcc 	andi	r2,r2,255
 40517a0:	d0e06117 	ldw	r3,-32380(gp)
 40517a4:	18c00d03 	ldbu	r3,52(r3)
 40517a8:	18c03fcc 	andi	r3,r3,255
 40517ac:	e13fff17 	ldw	r4,-4(fp)
 40517b0:	20c7883a 	add	r3,r4,r3
 40517b4:	18c002c4 	addi	r3,r3,11
 40517b8:	19000003 	ldbu	r4,0(r3)
 40517bc:	d0e06117 	ldw	r3,-32380(gp)
 40517c0:	18c00d43 	ldbu	r3,53(r3)
 40517c4:	20c6b03a 	or	r3,r4,r3
 40517c8:	1809883a 	mov	r4,r3
 40517cc:	e0ffff17 	ldw	r3,-4(fp)
 40517d0:	1885883a 	add	r2,r3,r2
 40517d4:	108002c4 	addi	r2,r2,11
 40517d8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 40517dc:	e0bfff17 	ldw	r2,-4(fp)
 40517e0:	10c00283 	ldbu	r3,10(r2)
 40517e4:	d0a06117 	ldw	r2,-32380(gp)
 40517e8:	10800d83 	ldbu	r2,54(r2)
 40517ec:	1884b03a 	or	r2,r3,r2
 40517f0:	1007883a 	mov	r3,r2
 40517f4:	e0bfff17 	ldw	r2,-4(fp)
 40517f8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 40517fc:	d0a06117 	ldw	r2,-32380(gp)
 4051800:	10800d03 	ldbu	r2,52(r2)
 4051804:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4051808:	e0fffe03 	ldbu	r3,-8(fp)
 405180c:	e13ffe03 	ldbu	r4,-8(fp)
 4051810:	d0a05e44 	addi	r2,gp,-32391
 4051814:	2085883a 	add	r2,r4,r2
 4051818:	10800003 	ldbu	r2,0(r2)
 405181c:	1009883a 	mov	r4,r2
 4051820:	d0a06117 	ldw	r2,-32380(gp)
 4051824:	10800d43 	ldbu	r2,53(r2)
 4051828:	0084303a 	nor	r2,zero,r2
 405182c:	2084703a 	and	r2,r4,r2
 4051830:	1009883a 	mov	r4,r2
 4051834:	d0a05e44 	addi	r2,gp,-32391
 4051838:	1885883a 	add	r2,r3,r2
 405183c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4051840:	e0fffe03 	ldbu	r3,-8(fp)
 4051844:	d0a05e44 	addi	r2,gp,-32391
 4051848:	1885883a 	add	r2,r3,r2
 405184c:	10800003 	ldbu	r2,0(r2)
 4051850:	10803fcc 	andi	r2,r2,255
 4051854:	1000071e 	bne	r2,zero,4051874 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4051858:	d0a06117 	ldw	r2,-32380(gp)
 405185c:	10800d83 	ldbu	r2,54(r2)
 4051860:	0084303a 	nor	r2,zero,r2
 4051864:	1007883a 	mov	r3,r2
 4051868:	d0a05e03 	ldbu	r2,-32392(gp)
 405186c:	1884703a 	and	r2,r3,r2
 4051870:	d0a05e05 	stb	r2,-32392(gp)
    }
}
 4051874:	0001883a 	nop
 4051878:	e037883a 	mov	sp,fp
 405187c:	df000017 	ldw	fp,0(sp)
 4051880:	dec00104 	addi	sp,sp,4
 4051884:	f800283a 	ret

04051888 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 4051888:	defffb04 	addi	sp,sp,-20
 405188c:	df000415 	stw	fp,16(sp)
 4051890:	df000404 	addi	fp,sp,16
 4051894:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 4051898:	d0a06117 	ldw	r2,-32380(gp)
 405189c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 40518a0:	d0a06117 	ldw	r2,-32380(gp)
 40518a4:	e0ffff17 	ldw	r3,-4(fp)
 40518a8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 40518ac:	e0bfff17 	ldw	r2,-4(fp)
 40518b0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 40518b4:	e0bffc17 	ldw	r2,-16(fp)
 40518b8:	10800017 	ldw	r2,0(r2)
 40518bc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 40518c0:	00002006 	br	4051944 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 40518c4:	d0a06117 	ldw	r2,-32380(gp)
 40518c8:	10800d03 	ldbu	r2,52(r2)
 40518cc:	10803fcc 	andi	r2,r2,255
 40518d0:	d0e06117 	ldw	r3,-32380(gp)
 40518d4:	18c00d03 	ldbu	r3,52(r3)
 40518d8:	18c03fcc 	andi	r3,r3,255
 40518dc:	e13ffd17 	ldw	r4,-12(fp)
 40518e0:	20c7883a 	add	r3,r4,r3
 40518e4:	18c002c4 	addi	r3,r3,11
 40518e8:	19000003 	ldbu	r4,0(r3)
 40518ec:	d0e06117 	ldw	r3,-32380(gp)
 40518f0:	18c00d43 	ldbu	r3,53(r3)
 40518f4:	20c6b03a 	or	r3,r4,r3
 40518f8:	1809883a 	mov	r4,r3
 40518fc:	e0fffd17 	ldw	r3,-12(fp)
 4051900:	1885883a 	add	r2,r3,r2
 4051904:	108002c4 	addi	r2,r2,11
 4051908:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 405190c:	e0bffd17 	ldw	r2,-12(fp)
 4051910:	10c00283 	ldbu	r3,10(r2)
 4051914:	d0a06117 	ldw	r2,-32380(gp)
 4051918:	10800d83 	ldbu	r2,54(r2)
 405191c:	1884b03a 	or	r2,r3,r2
 4051920:	1007883a 	mov	r3,r2
 4051924:	e0bffd17 	ldw	r2,-12(fp)
 4051928:	10c00285 	stb	r3,10(r2)
        pevents++;
 405192c:	e0bffc17 	ldw	r2,-16(fp)
 4051930:	10800104 	addi	r2,r2,4
 4051934:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 4051938:	e0bffc17 	ldw	r2,-16(fp)
 405193c:	10800017 	ldw	r2,0(r2)
 4051940:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4051944:	e0bffd17 	ldw	r2,-12(fp)
 4051948:	103fde1e 	bne	r2,zero,40518c4 <__flash_rwdata_start+0xffff7194>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 405194c:	d0a06117 	ldw	r2,-32380(gp)
 4051950:	10800d03 	ldbu	r2,52(r2)
 4051954:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4051958:	e0fffe03 	ldbu	r3,-8(fp)
 405195c:	e13ffe03 	ldbu	r4,-8(fp)
 4051960:	d0a05e44 	addi	r2,gp,-32391
 4051964:	2085883a 	add	r2,r4,r2
 4051968:	10800003 	ldbu	r2,0(r2)
 405196c:	1009883a 	mov	r4,r2
 4051970:	d0a06117 	ldw	r2,-32380(gp)
 4051974:	10800d43 	ldbu	r2,53(r2)
 4051978:	0084303a 	nor	r2,zero,r2
 405197c:	2084703a 	and	r2,r4,r2
 4051980:	1009883a 	mov	r4,r2
 4051984:	d0a05e44 	addi	r2,gp,-32391
 4051988:	1885883a 	add	r2,r3,r2
 405198c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4051990:	e0fffe03 	ldbu	r3,-8(fp)
 4051994:	d0a05e44 	addi	r2,gp,-32391
 4051998:	1885883a 	add	r2,r3,r2
 405199c:	10800003 	ldbu	r2,0(r2)
 40519a0:	10803fcc 	andi	r2,r2,255
 40519a4:	1000071e 	bne	r2,zero,40519c4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 40519a8:	d0a06117 	ldw	r2,-32380(gp)
 40519ac:	10800d83 	ldbu	r2,54(r2)
 40519b0:	0084303a 	nor	r2,zero,r2
 40519b4:	1007883a 	mov	r3,r2
 40519b8:	d0a05e03 	ldbu	r2,-32392(gp)
 40519bc:	1884703a 	and	r2,r3,r2
 40519c0:	d0a05e05 	stb	r2,-32392(gp)
    }
}
 40519c4:	0001883a 	nop
 40519c8:	e037883a 	mov	sp,fp
 40519cc:	df000017 	ldw	fp,0(sp)
 40519d0:	dec00104 	addi	sp,sp,4
 40519d4:	f800283a 	ret

040519d8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 40519d8:	defffc04 	addi	sp,sp,-16
 40519dc:	df000315 	stw	fp,12(sp)
 40519e0:	df000304 	addi	fp,sp,12
 40519e4:	e13ffe15 	stw	r4,-8(fp)
 40519e8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 40519ec:	e0bffe17 	ldw	r2,-8(fp)
 40519f0:	10800d03 	ldbu	r2,52(r2)
 40519f4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 40519f8:	e0bffd03 	ldbu	r2,-12(fp)
 40519fc:	e0fffd03 	ldbu	r3,-12(fp)
 4051a00:	e13fff17 	ldw	r4,-4(fp)
 4051a04:	20c7883a 	add	r3,r4,r3
 4051a08:	18c002c4 	addi	r3,r3,11
 4051a0c:	18c00003 	ldbu	r3,0(r3)
 4051a10:	1809883a 	mov	r4,r3
 4051a14:	e0fffe17 	ldw	r3,-8(fp)
 4051a18:	18c00d43 	ldbu	r3,53(r3)
 4051a1c:	00c6303a 	nor	r3,zero,r3
 4051a20:	20c6703a 	and	r3,r4,r3
 4051a24:	1809883a 	mov	r4,r3
 4051a28:	e0ffff17 	ldw	r3,-4(fp)
 4051a2c:	1885883a 	add	r2,r3,r2
 4051a30:	108002c4 	addi	r2,r2,11
 4051a34:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 4051a38:	e0bffd03 	ldbu	r2,-12(fp)
 4051a3c:	e0ffff17 	ldw	r3,-4(fp)
 4051a40:	1885883a 	add	r2,r3,r2
 4051a44:	108002c4 	addi	r2,r2,11
 4051a48:	10800003 	ldbu	r2,0(r2)
 4051a4c:	10803fcc 	andi	r2,r2,255
 4051a50:	10000a1e 	bne	r2,zero,4051a7c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 4051a54:	e0bfff17 	ldw	r2,-4(fp)
 4051a58:	10800283 	ldbu	r2,10(r2)
 4051a5c:	1007883a 	mov	r3,r2
 4051a60:	e0bffe17 	ldw	r2,-8(fp)
 4051a64:	10800d83 	ldbu	r2,54(r2)
 4051a68:	0084303a 	nor	r2,zero,r2
 4051a6c:	1884703a 	and	r2,r3,r2
 4051a70:	1007883a 	mov	r3,r2
 4051a74:	e0bfff17 	ldw	r2,-4(fp)
 4051a78:	10c00285 	stb	r3,10(r2)
    }
}
 4051a7c:	0001883a 	nop
 4051a80:	e037883a 	mov	sp,fp
 4051a84:	df000017 	ldw	fp,0(sp)
 4051a88:	dec00104 	addi	sp,sp,4
 4051a8c:	f800283a 	ret

04051a90 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 4051a90:	defffa04 	addi	sp,sp,-24
 4051a94:	df000515 	stw	fp,20(sp)
 4051a98:	df000504 	addi	fp,sp,20
 4051a9c:	e13ffe15 	stw	r4,-8(fp)
 4051aa0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 4051aa4:	e0bffe17 	ldw	r2,-8(fp)
 4051aa8:	10800d03 	ldbu	r2,52(r2)
 4051aac:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 4051ab0:	e0bffe17 	ldw	r2,-8(fp)
 4051ab4:	10800d83 	ldbu	r2,54(r2)
 4051ab8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 4051abc:	e0bffe17 	ldw	r2,-8(fp)
 4051ac0:	10800d43 	ldbu	r2,53(r2)
 4051ac4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 4051ac8:	e0bfff17 	ldw	r2,-4(fp)
 4051acc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 4051ad0:	e0bffb17 	ldw	r2,-20(fp)
 4051ad4:	10800017 	ldw	r2,0(r2)
 4051ad8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 4051adc:	00002506 	br	4051b74 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 4051ae0:	e0bffd03 	ldbu	r2,-12(fp)
 4051ae4:	e0fffd03 	ldbu	r3,-12(fp)
 4051ae8:	e13ffc17 	ldw	r4,-16(fp)
 4051aec:	20c7883a 	add	r3,r4,r3
 4051af0:	18c002c4 	addi	r3,r3,11
 4051af4:	18c00003 	ldbu	r3,0(r3)
 4051af8:	1809883a 	mov	r4,r3
 4051afc:	e0fffd83 	ldbu	r3,-10(fp)
 4051b00:	00c6303a 	nor	r3,zero,r3
 4051b04:	20c6703a 	and	r3,r4,r3
 4051b08:	1809883a 	mov	r4,r3
 4051b0c:	e0fffc17 	ldw	r3,-16(fp)
 4051b10:	1885883a 	add	r2,r3,r2
 4051b14:	108002c4 	addi	r2,r2,11
 4051b18:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 4051b1c:	e0bffd03 	ldbu	r2,-12(fp)
 4051b20:	e0fffc17 	ldw	r3,-16(fp)
 4051b24:	1885883a 	add	r2,r3,r2
 4051b28:	108002c4 	addi	r2,r2,11
 4051b2c:	10800003 	ldbu	r2,0(r2)
 4051b30:	10803fcc 	andi	r2,r2,255
 4051b34:	1000091e 	bne	r2,zero,4051b5c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 4051b38:	e0bffc17 	ldw	r2,-16(fp)
 4051b3c:	10800283 	ldbu	r2,10(r2)
 4051b40:	1007883a 	mov	r3,r2
 4051b44:	e0bffd43 	ldbu	r2,-11(fp)
 4051b48:	0084303a 	nor	r2,zero,r2
 4051b4c:	1884703a 	and	r2,r3,r2
 4051b50:	1007883a 	mov	r3,r2
 4051b54:	e0bffc17 	ldw	r2,-16(fp)
 4051b58:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 4051b5c:	e0bffb17 	ldw	r2,-20(fp)
 4051b60:	10800104 	addi	r2,r2,4
 4051b64:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 4051b68:	e0bffb17 	ldw	r2,-20(fp)
 4051b6c:	10800017 	ldw	r2,0(r2)
 4051b70:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 4051b74:	e0bffc17 	ldw	r2,-16(fp)
 4051b78:	103fd91e 	bne	r2,zero,4051ae0 <__flash_rwdata_start+0xffff73b0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 4051b7c:	0001883a 	nop
 4051b80:	e037883a 	mov	sp,fp
 4051b84:	df000017 	ldw	fp,0(sp)
 4051b88:	dec00104 	addi	sp,sp,4
 4051b8c:	f800283a 	ret

04051b90 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 4051b90:	defffc04 	addi	sp,sp,-16
 4051b94:	df000315 	stw	fp,12(sp)
 4051b98:	df000304 	addi	fp,sp,12
 4051b9c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 4051ba0:	e0bfff17 	ldw	r2,-4(fp)
 4051ba4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 4051ba8:	e0bfff17 	ldw	r2,-4(fp)
 4051bac:	108002c4 	addi	r2,r2,11
 4051bb0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4051bb4:	e03ffe05 	stb	zero,-8(fp)
 4051bb8:	00000706 	br	4051bd8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 4051bbc:	e0bffd17 	ldw	r2,-12(fp)
 4051bc0:	10c00044 	addi	r3,r2,1
 4051bc4:	e0fffd15 	stw	r3,-12(fp)
 4051bc8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4051bcc:	e0bffe03 	ldbu	r2,-8(fp)
 4051bd0:	10800044 	addi	r2,r2,1
 4051bd4:	e0bffe05 	stb	r2,-8(fp)
 4051bd8:	e0bffe03 	ldbu	r2,-8(fp)
 4051bdc:	108000f0 	cmpltui	r2,r2,3
 4051be0:	103ff61e 	bne	r2,zero,4051bbc <__flash_rwdata_start+0xffff748c>
        *ptbl++ = 0;
    }
}
 4051be4:	0001883a 	nop
 4051be8:	e037883a 	mov	sp,fp
 4051bec:	df000017 	ldw	fp,0(sp)
 4051bf0:	dec00104 	addi	sp,sp,4
 4051bf4:	f800283a 	ret

04051bf8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 4051bf8:	defffb04 	addi	sp,sp,-20
 4051bfc:	dfc00415 	stw	ra,16(sp)
 4051c00:	df000315 	stw	fp,12(sp)
 4051c04:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 4051c08:	0142d004 	movi	r5,2880
 4051c0c:	01008074 	movhi	r4,513
 4051c10:	21117904 	addi	r4,r4,17892
 4051c14:	4051f700 	call	4051f70 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 4051c18:	00808074 	movhi	r2,513
 4051c1c:	10917904 	addi	r2,r2,17892
 4051c20:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 4051c24:	00808074 	movhi	r2,513
 4051c28:	10918504 	addi	r2,r2,17940
 4051c2c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4051c30:	e03ffd0d 	sth	zero,-12(fp)
 4051c34:	00001306 	br	4051c84 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4051c38:	e0bffe17 	ldw	r2,-8(fp)
 4051c3c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 4051c40:	e0bffe17 	ldw	r2,-8(fp)
 4051c44:	e0ffff17 	ldw	r3,-4(fp)
 4051c48:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 4051c4c:	e0bffe17 	ldw	r2,-8(fp)
 4051c50:	00c00fc4 	movi	r3,63
 4051c54:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 4051c58:	e0bffe17 	ldw	r2,-8(fp)
 4051c5c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 4051c60:	e0bffe17 	ldw	r2,-8(fp)
 4051c64:	10800c04 	addi	r2,r2,48
 4051c68:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 4051c6c:	e0bfff17 	ldw	r2,-4(fp)
 4051c70:	10800c04 	addi	r2,r2,48
 4051c74:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4051c78:	e0bffd0b 	ldhu	r2,-12(fp)
 4051c7c:	10800044 	addi	r2,r2,1
 4051c80:	e0bffd0d 	sth	r2,-12(fp)
 4051c84:	e0bffd0b 	ldhu	r2,-12(fp)
 4051c88:	10800ef0 	cmpltui	r2,r2,59
 4051c8c:	103fea1e 	bne	r2,zero,4051c38 <__flash_rwdata_start+0xffff7508>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 4051c90:	e0bffe17 	ldw	r2,-8(fp)
 4051c94:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 4051c98:	e0bffe17 	ldw	r2,-8(fp)
 4051c9c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 4051ca0:	e0bffe17 	ldw	r2,-8(fp)
 4051ca4:	00c00fc4 	movi	r3,63
 4051ca8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 4051cac:	e0bffe17 	ldw	r2,-8(fp)
 4051cb0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 4051cb4:	00808074 	movhi	r2,513
 4051cb8:	10917904 	addi	r2,r2,17892
 4051cbc:	d0a05f15 	stw	r2,-32388(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 4051cc0:	0001883a 	nop
 4051cc4:	e037883a 	mov	sp,fp
 4051cc8:	dfc00117 	ldw	ra,4(sp)
 4051ccc:	df000017 	ldw	fp,0(sp)
 4051cd0:	dec00204 	addi	sp,sp,8
 4051cd4:	f800283a 	ret

04051cd8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 4051cd8:	deffff04 	addi	sp,sp,-4
 4051cdc:	df000015 	stw	fp,0(sp)
 4051ce0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 4051ce4:	d0206215 	stw	zero,-32376(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 4051ce8:	d0206005 	stb	zero,-32384(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 4051cec:	d0205205 	stb	zero,-32440(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 4051cf0:	d0205a45 	stb	zero,-32407(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 4051cf4:	d0205245 	stb	zero,-32439(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 4051cf8:	d0205715 	stw	zero,-32420(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 4051cfc:	d0205315 	stw	zero,-32436(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 4051d00:	d0206515 	stw	zero,-32364(gp)
    OSIdleCtrMax  = 0L;
 4051d04:	d0205815 	stw	zero,-32416(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 4051d08:	d0206405 	stb	zero,-32368(gp)
#endif
}
 4051d0c:	0001883a 	nop
 4051d10:	e037883a 	mov	sp,fp
 4051d14:	df000017 	ldw	fp,0(sp)
 4051d18:	dec00104 	addi	sp,sp,4
 4051d1c:	f800283a 	ret

04051d20 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 4051d20:	defffd04 	addi	sp,sp,-12
 4051d24:	df000215 	stw	fp,8(sp)
 4051d28:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 4051d2c:	d0205e05 	stb	zero,-32392(gp)
    prdytbl       = &OSRdyTbl[0];
 4051d30:	d0a05e44 	addi	r2,gp,-32391
 4051d34:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4051d38:	e03ffe05 	stb	zero,-8(fp)
 4051d3c:	00000706 	br	4051d5c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 4051d40:	e0bfff17 	ldw	r2,-4(fp)
 4051d44:	10c00044 	addi	r3,r2,1
 4051d48:	e0ffff15 	stw	r3,-4(fp)
 4051d4c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4051d50:	e0bffe03 	ldbu	r2,-8(fp)
 4051d54:	10800044 	addi	r2,r2,1
 4051d58:	e0bffe05 	stb	r2,-8(fp)
 4051d5c:	e0bffe03 	ldbu	r2,-8(fp)
 4051d60:	108000f0 	cmpltui	r2,r2,3
 4051d64:	103ff61e 	bne	r2,zero,4051d40 <__flash_rwdata_start+0xffff7610>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 4051d68:	d0205445 	stb	zero,-32431(gp)
    OSPrioHighRdy = 0;
 4051d6c:	d0205405 	stb	zero,-32432(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 4051d70:	d0205c15 	stw	zero,-32400(gp)
    OSTCBCur      = (OS_TCB *)0;
 4051d74:	d0206115 	stw	zero,-32380(gp)
}
 4051d78:	0001883a 	nop
 4051d7c:	e037883a 	mov	sp,fp
 4051d80:	df000017 	ldw	fp,0(sp)
 4051d84:	dec00104 	addi	sp,sp,4
 4051d88:	f800283a 	ret

04051d8c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 4051d8c:	defff804 	addi	sp,sp,-32
 4051d90:	dfc00715 	stw	ra,28(sp)
 4051d94:	df000615 	stw	fp,24(sp)
 4051d98:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 4051d9c:	008000c4 	movi	r2,3
 4051da0:	d8800415 	stw	r2,16(sp)
 4051da4:	d8000315 	stw	zero,12(sp)
 4051da8:	00808004 	movi	r2,512
 4051dac:	d8800215 	stw	r2,8(sp)
 4051db0:	00808074 	movhi	r2,513
 4051db4:	108f7904 	addi	r2,r2,15844
 4051db8:	d8800115 	stw	r2,4(sp)
 4051dbc:	00bfffd4 	movui	r2,65535
 4051dc0:	d8800015 	stw	r2,0(sp)
 4051dc4:	01c00504 	movi	r7,20
 4051dc8:	01808074 	movhi	r6,513
 4051dcc:	31917804 	addi	r6,r6,17888
 4051dd0:	000b883a 	mov	r5,zero
 4051dd4:	01010174 	movhi	r4,1029
 4051dd8:	21088e04 	addi	r4,r4,8760
 4051ddc:	40568f80 	call	40568f8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 4051de0:	e1bfff04 	addi	r6,fp,-4
 4051de4:	01408034 	movhi	r5,512
 4051de8:	29418c04 	addi	r5,r5,1584
 4051dec:	01000504 	movi	r4,20
 4051df0:	40571080 	call	4057108 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 4051df4:	0001883a 	nop
 4051df8:	e037883a 	mov	sp,fp
 4051dfc:	dfc00117 	ldw	ra,4(sp)
 4051e00:	df000017 	ldw	fp,0(sp)
 4051e04:	dec00204 	addi	sp,sp,8
 4051e08:	f800283a 	ret

04051e0c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 4051e0c:	defff804 	addi	sp,sp,-32
 4051e10:	dfc00715 	stw	ra,28(sp)
 4051e14:	df000615 	stw	fp,24(sp)
 4051e18:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 4051e1c:	008000c4 	movi	r2,3
 4051e20:	d8800415 	stw	r2,16(sp)
 4051e24:	d8000315 	stw	zero,12(sp)
 4051e28:	00808004 	movi	r2,512
 4051e2c:	d8800215 	stw	r2,8(sp)
 4051e30:	00808074 	movhi	r2,513
 4051e34:	108d0104 	addi	r2,r2,13316
 4051e38:	d8800115 	stw	r2,4(sp)
 4051e3c:	00bfff94 	movui	r2,65534
 4051e40:	d8800015 	stw	r2,0(sp)
 4051e44:	01c004c4 	movi	r7,19
 4051e48:	01808074 	movhi	r6,513
 4051e4c:	318f0004 	addi	r6,r6,15360
 4051e50:	000b883a 	mov	r5,zero
 4051e54:	01010174 	movhi	r4,1029
 4051e58:	2108a504 	addi	r4,r4,8852
 4051e5c:	40568f80 	call	40568f8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 4051e60:	e1bfff04 	addi	r6,fp,-4
 4051e64:	01408034 	movhi	r5,512
 4051e68:	29419004 	addi	r5,r5,1600
 4051e6c:	010004c4 	movi	r4,19
 4051e70:	40571080 	call	4057108 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 4051e74:	0001883a 	nop
 4051e78:	e037883a 	mov	sp,fp
 4051e7c:	dfc00117 	ldw	ra,4(sp)
 4051e80:	df000017 	ldw	fp,0(sp)
 4051e84:	dec00204 	addi	sp,sp,8
 4051e88:	f800283a 	ret

04051e8c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 4051e8c:	defffb04 	addi	sp,sp,-20
 4051e90:	dfc00415 	stw	ra,16(sp)
 4051e94:	df000315 	stw	fp,12(sp)
 4051e98:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 4051e9c:	01414404 	movi	r5,1296
 4051ea0:	01008074 	movhi	r4,513
 4051ea4:	21144904 	addi	r4,r4,20772
 4051ea8:	4051f700 	call	4051f70 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 4051eac:	01401504 	movi	r5,84
 4051eb0:	01008074 	movhi	r4,513
 4051eb4:	21158d04 	addi	r4,r4,22068
 4051eb8:	4051f700 	call	4051f70 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 4051ebc:	00808074 	movhi	r2,513
 4051ec0:	10944904 	addi	r2,r2,20772
 4051ec4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 4051ec8:	00808074 	movhi	r2,513
 4051ecc:	10946404 	addi	r2,r2,20880
 4051ed0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 4051ed4:	e03ffd05 	stb	zero,-12(fp)
 4051ed8:	00001106 	br	4051f20 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 4051edc:	e0bffe17 	ldw	r2,-8(fp)
 4051ee0:	e0ffff17 	ldw	r3,-4(fp)
 4051ee4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 4051ee8:	e0bffe17 	ldw	r2,-8(fp)
 4051eec:	00c00fc4 	movi	r3,63
 4051ef0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4051ef4:	e0bffe17 	ldw	r2,-8(fp)
 4051ef8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 4051efc:	e0bffe17 	ldw	r2,-8(fp)
 4051f00:	10801b04 	addi	r2,r2,108
 4051f04:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 4051f08:	e0bfff17 	ldw	r2,-4(fp)
 4051f0c:	10801b04 	addi	r2,r2,108
 4051f10:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 4051f14:	e0bffd03 	ldbu	r2,-12(fp)
 4051f18:	10800044 	addi	r2,r2,1
 4051f1c:	e0bffd05 	stb	r2,-12(fp)
 4051f20:	e0bffd03 	ldbu	r2,-12(fp)
 4051f24:	108002f0 	cmpltui	r2,r2,11
 4051f28:	103fec1e 	bne	r2,zero,4051edc <__flash_rwdata_start+0xffff77ac>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 4051f2c:	e0bffe17 	ldw	r2,-8(fp)
 4051f30:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 4051f34:	e0bffe17 	ldw	r2,-8(fp)
 4051f38:	00c00fc4 	movi	r3,63
 4051f3c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4051f40:	e0bffe17 	ldw	r2,-8(fp)
 4051f44:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 4051f48:	d0205515 	stw	zero,-32428(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 4051f4c:	00808074 	movhi	r2,513
 4051f50:	10944904 	addi	r2,r2,20772
 4051f54:	d0a05915 	stw	r2,-32412(gp)
}
 4051f58:	0001883a 	nop
 4051f5c:	e037883a 	mov	sp,fp
 4051f60:	dfc00117 	ldw	ra,4(sp)
 4051f64:	df000017 	ldw	fp,0(sp)
 4051f68:	dec00204 	addi	sp,sp,8
 4051f6c:	f800283a 	ret

04051f70 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 4051f70:	defffd04 	addi	sp,sp,-12
 4051f74:	df000215 	stw	fp,8(sp)
 4051f78:	df000204 	addi	fp,sp,8
 4051f7c:	e13ffe15 	stw	r4,-8(fp)
 4051f80:	2805883a 	mov	r2,r5
 4051f84:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 4051f88:	00000706 	br	4051fa8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 4051f8c:	e0bffe17 	ldw	r2,-8(fp)
 4051f90:	10c00044 	addi	r3,r2,1
 4051f94:	e0fffe15 	stw	r3,-8(fp)
 4051f98:	10000005 	stb	zero,0(r2)
        size--;
 4051f9c:	e0bfff0b 	ldhu	r2,-4(fp)
 4051fa0:	10bfffc4 	addi	r2,r2,-1
 4051fa4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 4051fa8:	e0bfff0b 	ldhu	r2,-4(fp)
 4051fac:	103ff71e 	bne	r2,zero,4051f8c <__flash_rwdata_start+0xffff785c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 4051fb0:	0001883a 	nop
 4051fb4:	e037883a 	mov	sp,fp
 4051fb8:	df000017 	ldw	fp,0(sp)
 4051fbc:	dec00104 	addi	sp,sp,4
 4051fc0:	f800283a 	ret

04051fc4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 4051fc4:	defffc04 	addi	sp,sp,-16
 4051fc8:	df000315 	stw	fp,12(sp)
 4051fcc:	df000304 	addi	fp,sp,12
 4051fd0:	e13ffd15 	stw	r4,-12(fp)
 4051fd4:	e17ffe15 	stw	r5,-8(fp)
 4051fd8:	3005883a 	mov	r2,r6
 4051fdc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 4051fe0:	00000b06 	br	4052010 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 4051fe4:	e0bffd17 	ldw	r2,-12(fp)
 4051fe8:	10c00044 	addi	r3,r2,1
 4051fec:	e0fffd15 	stw	r3,-12(fp)
 4051ff0:	e0fffe17 	ldw	r3,-8(fp)
 4051ff4:	19000044 	addi	r4,r3,1
 4051ff8:	e13ffe15 	stw	r4,-8(fp)
 4051ffc:	18c00003 	ldbu	r3,0(r3)
 4052000:	10c00005 	stb	r3,0(r2)
        size--;
 4052004:	e0bfff0b 	ldhu	r2,-4(fp)
 4052008:	10bfffc4 	addi	r2,r2,-1
 405200c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 4052010:	e0bfff0b 	ldhu	r2,-4(fp)
 4052014:	103ff31e 	bne	r2,zero,4051fe4 <__flash_rwdata_start+0xffff78b4>
        *pdest++ = *psrc++;
        size--;
    }
}
 4052018:	0001883a 	nop
 405201c:	e037883a 	mov	sp,fp
 4052020:	df000017 	ldw	fp,0(sp)
 4052024:	dec00104 	addi	sp,sp,4
 4052028:	f800283a 	ret

0405202c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 405202c:	defffb04 	addi	sp,sp,-20
 4052030:	dfc00415 	stw	ra,16(sp)
 4052034:	df000315 	stw	fp,12(sp)
 4052038:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 405203c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4052040:	0005303a 	rdctl	r2,status
 4052044:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4052048:	e0ffff17 	ldw	r3,-4(fp)
 405204c:	00bfff84 	movi	r2,-2
 4052050:	1884703a 	and	r2,r3,r2
 4052054:	1001703a 	wrctl	status,r2
  
  return context;
 4052058:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 405205c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 4052060:	d0a06003 	ldbu	r2,-32384(gp)
 4052064:	10803fcc 	andi	r2,r2,255
 4052068:	10001a1e 	bne	r2,zero,40520d4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 405206c:	d0a05203 	ldbu	r2,-32440(gp)
 4052070:	10803fcc 	andi	r2,r2,255
 4052074:	1000171e 	bne	r2,zero,40520d4 <OS_Sched+0xa8>
            OS_SchedNew();
 4052078:	40520fc0 	call	40520fc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 405207c:	d0e05403 	ldbu	r3,-32432(gp)
 4052080:	d0a05443 	ldbu	r2,-32431(gp)
 4052084:	18c03fcc 	andi	r3,r3,255
 4052088:	10803fcc 	andi	r2,r2,255
 405208c:	18801126 	beq	r3,r2,40520d4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 4052090:	d0a05403 	ldbu	r2,-32432(gp)
 4052094:	10c03fcc 	andi	r3,r2,255
 4052098:	00808074 	movhi	r2,513
 405209c:	10958d04 	addi	r2,r2,22068
 40520a0:	18c7883a 	add	r3,r3,r3
 40520a4:	18c7883a 	add	r3,r3,r3
 40520a8:	10c5883a 	add	r2,r2,r3
 40520ac:	10800017 	ldw	r2,0(r2)
 40520b0:	d0a05c15 	stw	r2,-32400(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 40520b4:	d0a05c17 	ldw	r2,-32400(gp)
 40520b8:	10c00e17 	ldw	r3,56(r2)
 40520bc:	18c00044 	addi	r3,r3,1
 40520c0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 40520c4:	d0a05717 	ldw	r2,-32420(gp)
 40520c8:	10800044 	addi	r2,r2,1
 40520cc:	d0a05715 	stw	r2,-32420(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 40520d0:	40596dc0 	call	40596dc <OSCtxSw>
 40520d4:	e0bffd17 	ldw	r2,-12(fp)
 40520d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40520dc:	e0bffe17 	ldw	r2,-8(fp)
 40520e0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 40520e4:	0001883a 	nop
 40520e8:	e037883a 	mov	sp,fp
 40520ec:	dfc00117 	ldw	ra,4(sp)
 40520f0:	df000017 	ldw	fp,0(sp)
 40520f4:	dec00204 	addi	sp,sp,8
 40520f8:	f800283a 	ret

040520fc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 40520fc:	defffe04 	addi	sp,sp,-8
 4052100:	df000115 	stw	fp,4(sp)
 4052104:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 4052108:	d0a05e03 	ldbu	r2,-32392(gp)
 405210c:	10c03fcc 	andi	r3,r2,255
 4052110:	00808034 	movhi	r2,512
 4052114:	10814c04 	addi	r2,r2,1328
 4052118:	10c5883a 	add	r2,r2,r3
 405211c:	10800003 	ldbu	r2,0(r2)
 4052120:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 4052124:	e0bfff03 	ldbu	r2,-4(fp)
 4052128:	100490fa 	slli	r2,r2,3
 405212c:	1009883a 	mov	r4,r2
 4052130:	e0ffff03 	ldbu	r3,-4(fp)
 4052134:	d0a05e44 	addi	r2,gp,-32391
 4052138:	1885883a 	add	r2,r3,r2
 405213c:	10800003 	ldbu	r2,0(r2)
 4052140:	10c03fcc 	andi	r3,r2,255
 4052144:	00808034 	movhi	r2,512
 4052148:	10814c04 	addi	r2,r2,1328
 405214c:	10c5883a 	add	r2,r2,r3
 4052150:	10800003 	ldbu	r2,0(r2)
 4052154:	2085883a 	add	r2,r4,r2
 4052158:	d0a05405 	stb	r2,-32432(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 405215c:	0001883a 	nop
 4052160:	e037883a 	mov	sp,fp
 4052164:	df000017 	ldw	fp,0(sp)
 4052168:	dec00104 	addi	sp,sp,4
 405216c:	f800283a 	ret

04052170 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 4052170:	defffc04 	addi	sp,sp,-16
 4052174:	df000315 	stw	fp,12(sp)
 4052178:	df000304 	addi	fp,sp,12
 405217c:	e13ffe15 	stw	r4,-8(fp)
 4052180:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 4052184:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 4052188:	00000b06 	br	40521b8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 405218c:	e0bffe17 	ldw	r2,-8(fp)
 4052190:	10c00044 	addi	r3,r2,1
 4052194:	e0fffe15 	stw	r3,-8(fp)
 4052198:	e0ffff17 	ldw	r3,-4(fp)
 405219c:	19000044 	addi	r4,r3,1
 40521a0:	e13fff15 	stw	r4,-4(fp)
 40521a4:	18c00003 	ldbu	r3,0(r3)
 40521a8:	10c00005 	stb	r3,0(r2)
        len++;
 40521ac:	e0bffd03 	ldbu	r2,-12(fp)
 40521b0:	10800044 	addi	r2,r2,1
 40521b4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 40521b8:	e0bfff17 	ldw	r2,-4(fp)
 40521bc:	10800003 	ldbu	r2,0(r2)
 40521c0:	10803fcc 	andi	r2,r2,255
 40521c4:	103ff11e 	bne	r2,zero,405218c <__flash_rwdata_start+0xffff7a5c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 40521c8:	e0bffe17 	ldw	r2,-8(fp)
 40521cc:	10000005 	stb	zero,0(r2)
    return (len);
 40521d0:	e0bffd03 	ldbu	r2,-12(fp)
}
 40521d4:	e037883a 	mov	sp,fp
 40521d8:	df000017 	ldw	fp,0(sp)
 40521dc:	dec00104 	addi	sp,sp,4
 40521e0:	f800283a 	ret

040521e4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 40521e4:	defffd04 	addi	sp,sp,-12
 40521e8:	df000215 	stw	fp,8(sp)
 40521ec:	df000204 	addi	fp,sp,8
 40521f0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 40521f4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 40521f8:	00000606 	br	4052214 <OS_StrLen+0x30>
        psrc++;
 40521fc:	e0bfff17 	ldw	r2,-4(fp)
 4052200:	10800044 	addi	r2,r2,1
 4052204:	e0bfff15 	stw	r2,-4(fp)
        len++;
 4052208:	e0bffe03 	ldbu	r2,-8(fp)
 405220c:	10800044 	addi	r2,r2,1
 4052210:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 4052214:	e0bfff17 	ldw	r2,-4(fp)
 4052218:	10800003 	ldbu	r2,0(r2)
 405221c:	10803fcc 	andi	r2,r2,255
 4052220:	103ff61e 	bne	r2,zero,40521fc <__flash_rwdata_start+0xffff7acc>
        psrc++;
        len++;
    }
    return (len);
 4052224:	e0bffe03 	ldbu	r2,-8(fp)
}
 4052228:	e037883a 	mov	sp,fp
 405222c:	df000017 	ldw	fp,0(sp)
 4052230:	dec00104 	addi	sp,sp,4
 4052234:	f800283a 	ret

04052238 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 4052238:	defffa04 	addi	sp,sp,-24
 405223c:	dfc00515 	stw	ra,20(sp)
 4052240:	df000415 	stw	fp,16(sp)
 4052244:	df000404 	addi	fp,sp,16
 4052248:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 405224c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4052250:	0005303a 	rdctl	r2,status
 4052254:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4052258:	e0fffd17 	ldw	r3,-12(fp)
 405225c:	00bfff84 	movi	r2,-2
 4052260:	1884703a 	and	r2,r3,r2
 4052264:	1001703a 	wrctl	status,r2
  
  return context;
 4052268:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 405226c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 4052270:	d0a05317 	ldw	r2,-32436(gp)
 4052274:	10800044 	addi	r2,r2,1
 4052278:	d0a05315 	stw	r2,-32436(gp)
 405227c:	e0bffc17 	ldw	r2,-16(fp)
 4052280:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4052284:	e0bffe17 	ldw	r2,-8(fp)
 4052288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 405228c:	40599f00 	call	40599f0 <OSTaskIdleHook>
    }
 4052290:	003fef06 	br	4052250 <__flash_rwdata_start+0xffff7b20>

04052294 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 4052294:	defffa04 	addi	sp,sp,-24
 4052298:	dfc00515 	stw	ra,20(sp)
 405229c:	df000415 	stw	fp,16(sp)
 40522a0:	df000404 	addi	fp,sp,16
 40522a4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40522a8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 40522ac:	00000206 	br	40522b8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 40522b0:	01003204 	movi	r4,200
 40522b4:	40579c80 	call	40579c8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 40522b8:	d0a06403 	ldbu	r2,-32368(gp)
 40522bc:	10803fcc 	andi	r2,r2,255
 40522c0:	103ffb26 	beq	r2,zero,40522b0 <__flash_rwdata_start+0xffff7b80>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 40522c4:	d0a05817 	ldw	r2,-32416(gp)
 40522c8:	01401904 	movi	r5,100
 40522cc:	1009883a 	mov	r4,r2
 40522d0:	4042fb00 	call	4042fb0 <__udivsi3>
 40522d4:	d0a05815 	stw	r2,-32416(gp)
    if (OSIdleCtrMax == 0L) {
 40522d8:	d0a05817 	ldw	r2,-32416(gp)
 40522dc:	1000031e 	bne	r2,zero,40522ec <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 40522e0:	d0205a05 	stb	zero,-32408(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 40522e4:	01003fc4 	movi	r4,255
 40522e8:	40576500 	call	4057650 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40522ec:	0005303a 	rdctl	r2,status
 40522f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40522f4:	e0fffd17 	ldw	r3,-12(fp)
 40522f8:	00bfff84 	movi	r2,-2
 40522fc:	1884703a 	and	r2,r3,r2
 4052300:	1001703a 	wrctl	status,r2
  
  return context;
 4052304:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 4052308:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 405230c:	d0a05317 	ldw	r2,-32436(gp)
 4052310:	d0a06515 	stw	r2,-32364(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 4052314:	d0205315 	stw	zero,-32436(gp)
 4052318:	e0bffc17 	ldw	r2,-16(fp)
 405231c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4052320:	e0bffe17 	ldw	r2,-8(fp)
 4052324:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 4052328:	d0a06517 	ldw	r2,-32364(gp)
 405232c:	d0e05817 	ldw	r3,-32416(gp)
 4052330:	180b883a 	mov	r5,r3
 4052334:	1009883a 	mov	r4,r2
 4052338:	4042fb00 	call	4042fb0 <__udivsi3>
 405233c:	1007883a 	mov	r3,r2
 4052340:	00801904 	movi	r2,100
 4052344:	10c5c83a 	sub	r2,r2,r3
 4052348:	d0a05a05 	stb	r2,-32408(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 405234c:	40599700 	call	4059970 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 4052350:	40523600 	call	4052360 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 4052354:	01001904 	movi	r4,100
 4052358:	40579c80 	call	40579c8 <OSTimeDly>
    }
 405235c:	003fe306 	br	40522ec <__flash_rwdata_start+0xffff7bbc>

04052360 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 4052360:	defffa04 	addi	sp,sp,-24
 4052364:	dfc00515 	stw	ra,20(sp)
 4052368:	df000415 	stw	fp,16(sp)
 405236c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4052370:	e03ffc05 	stb	zero,-16(fp)
 4052374:	00002406 	br	4052408 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 4052378:	e0bffc03 	ldbu	r2,-16(fp)
 405237c:	e0fffe04 	addi	r3,fp,-8
 4052380:	180b883a 	mov	r5,r3
 4052384:	1009883a 	mov	r4,r2
 4052388:	40574900 	call	4057490 <OSTaskStkChk>
 405238c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 4052390:	e0bffc43 	ldbu	r2,-15(fp)
 4052394:	1000191e 	bne	r2,zero,40523fc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 4052398:	e0fffc03 	ldbu	r3,-16(fp)
 405239c:	00808074 	movhi	r2,513
 40523a0:	10958d04 	addi	r2,r2,22068
 40523a4:	18c7883a 	add	r3,r3,r3
 40523a8:	18c7883a 	add	r3,r3,r3
 40523ac:	10c5883a 	add	r2,r2,r3
 40523b0:	10800017 	ldw	r2,0(r2)
 40523b4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 40523b8:	e0bffd17 	ldw	r2,-12(fp)
 40523bc:	10000f26 	beq	r2,zero,40523fc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 40523c0:	e0bffd17 	ldw	r2,-12(fp)
 40523c4:	10800060 	cmpeqi	r2,r2,1
 40523c8:	10000c1e 	bne	r2,zero,40523fc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 40523cc:	e0bffd17 	ldw	r2,-12(fp)
 40523d0:	10c00217 	ldw	r3,8(r2)
 40523d4:	e0bffd17 	ldw	r2,-12(fp)
 40523d8:	10800317 	ldw	r2,12(r2)
 40523dc:	1085883a 	add	r2,r2,r2
 40523e0:	1085883a 	add	r2,r2,r2
 40523e4:	1887883a 	add	r3,r3,r2
 40523e8:	e0bffd17 	ldw	r2,-12(fp)
 40523ec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 40523f0:	e0ffff17 	ldw	r3,-4(fp)
 40523f4:	e0bffd17 	ldw	r2,-12(fp)
 40523f8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 40523fc:	e0bffc03 	ldbu	r2,-16(fp)
 4052400:	10800044 	addi	r2,r2,1
 4052404:	e0bffc05 	stb	r2,-16(fp)
 4052408:	e0bffc03 	ldbu	r2,-16(fp)
 405240c:	10800570 	cmpltui	r2,r2,21
 4052410:	103fd91e 	bne	r2,zero,4052378 <__flash_rwdata_start+0xffff7c48>
#endif
                }
            }
        }
    }
}
 4052414:	0001883a 	nop
 4052418:	e037883a 	mov	sp,fp
 405241c:	dfc00117 	ldw	ra,4(sp)
 4052420:	df000017 	ldw	fp,0(sp)
 4052424:	dec00204 	addi	sp,sp,8
 4052428:	f800283a 	ret

0405242c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 405242c:	defff204 	addi	sp,sp,-56
 4052430:	dfc00d15 	stw	ra,52(sp)
 4052434:	df000c15 	stw	fp,48(sp)
 4052438:	df000c04 	addi	fp,sp,48
 405243c:	e17ffc15 	stw	r5,-16(fp)
 4052440:	e1bffd15 	stw	r6,-12(fp)
 4052444:	3807883a 	mov	r3,r7
 4052448:	e0800417 	ldw	r2,16(fp)
 405244c:	e13ffb05 	stb	r4,-20(fp)
 4052450:	e0fffe0d 	sth	r3,-8(fp)
 4052454:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4052458:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405245c:	0005303a 	rdctl	r2,status
 4052460:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4052464:	e0fffa17 	ldw	r3,-24(fp)
 4052468:	00bfff84 	movi	r2,-2
 405246c:	1884703a 	and	r2,r3,r2
 4052470:	1001703a 	wrctl	status,r2
  
  return context;
 4052474:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 4052478:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 405247c:	d0a05917 	ldw	r2,-32412(gp)
 4052480:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 4052484:	e0bff617 	ldw	r2,-40(fp)
 4052488:	10009326 	beq	r2,zero,40526d8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 405248c:	e0bff617 	ldw	r2,-40(fp)
 4052490:	10800517 	ldw	r2,20(r2)
 4052494:	d0a05915 	stw	r2,-32412(gp)
 4052498:	e0bff417 	ldw	r2,-48(fp)
 405249c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40524a0:	e0bff817 	ldw	r2,-32(fp)
 40524a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 40524a8:	e0bff617 	ldw	r2,-40(fp)
 40524ac:	e0fffc17 	ldw	r3,-16(fp)
 40524b0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 40524b4:	e0bff617 	ldw	r2,-40(fp)
 40524b8:	e0fffb03 	ldbu	r3,-20(fp)
 40524bc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 40524c0:	e0bff617 	ldw	r2,-40(fp)
 40524c4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 40524c8:	e0bff617 	ldw	r2,-40(fp)
 40524cc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 40524d0:	e0bff617 	ldw	r2,-40(fp)
 40524d4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 40524d8:	e0bff617 	ldw	r2,-40(fp)
 40524dc:	e0c00317 	ldw	r3,12(fp)
 40524e0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 40524e4:	e0bff617 	ldw	r2,-40(fp)
 40524e8:	e0c00217 	ldw	r3,8(fp)
 40524ec:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 40524f0:	e0bff617 	ldw	r2,-40(fp)
 40524f4:	e0fffd17 	ldw	r3,-12(fp)
 40524f8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 40524fc:	e0bff617 	ldw	r2,-40(fp)
 4052500:	e0ffff0b 	ldhu	r3,-4(fp)
 4052504:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 4052508:	e0bff617 	ldw	r2,-40(fp)
 405250c:	e0fffe0b 	ldhu	r3,-8(fp)
 4052510:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 4052514:	e0bff617 	ldw	r2,-40(fp)
 4052518:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 405251c:	e0bffb03 	ldbu	r2,-20(fp)
 4052520:	1004d0fa 	srli	r2,r2,3
 4052524:	1007883a 	mov	r3,r2
 4052528:	e0bff617 	ldw	r2,-40(fp)
 405252c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 4052530:	e0bffb03 	ldbu	r2,-20(fp)
 4052534:	108001cc 	andi	r2,r2,7
 4052538:	1007883a 	mov	r3,r2
 405253c:	e0bff617 	ldw	r2,-40(fp)
 4052540:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 4052544:	e0bff617 	ldw	r2,-40(fp)
 4052548:	10800d03 	ldbu	r2,52(r2)
 405254c:	10803fcc 	andi	r2,r2,255
 4052550:	00c00044 	movi	r3,1
 4052554:	1884983a 	sll	r2,r3,r2
 4052558:	1007883a 	mov	r3,r2
 405255c:	e0bff617 	ldw	r2,-40(fp)
 4052560:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 4052564:	e0bff617 	ldw	r2,-40(fp)
 4052568:	10800cc3 	ldbu	r2,51(r2)
 405256c:	10803fcc 	andi	r2,r2,255
 4052570:	00c00044 	movi	r3,1
 4052574:	1884983a 	sll	r2,r3,r2
 4052578:	1007883a 	mov	r3,r2
 405257c:	e0bff617 	ldw	r2,-40(fp)
 4052580:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 4052584:	e0bff617 	ldw	r2,-40(fp)
 4052588:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 405258c:	e0bff617 	ldw	r2,-40(fp)
 4052590:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 4052594:	e0bff617 	ldw	r2,-40(fp)
 4052598:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 405259c:	e0bff617 	ldw	r2,-40(fp)
 40525a0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 40525a4:	e0bff617 	ldw	r2,-40(fp)
 40525a8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 40525ac:	e0bff617 	ldw	r2,-40(fp)
 40525b0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 40525b4:	e0bff617 	ldw	r2,-40(fp)
 40525b8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 40525bc:	e0bff617 	ldw	r2,-40(fp)
 40525c0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 40525c4:	e0bff617 	ldw	r2,-40(fp)
 40525c8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 40525cc:	e0bff617 	ldw	r2,-40(fp)
 40525d0:	00c00fc4 	movi	r3,63
 40525d4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 40525d8:	e0bff617 	ldw	r2,-40(fp)
 40525dc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 40525e0:	e13ff617 	ldw	r4,-40(fp)
 40525e4:	4059a100 	call	4059a10 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 40525e8:	e13ff617 	ldw	r4,-40(fp)
 40525ec:	40599080 	call	4059908 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40525f0:	0005303a 	rdctl	r2,status
 40525f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40525f8:	e0fff517 	ldw	r3,-44(fp)
 40525fc:	00bfff84 	movi	r2,-2
 4052600:	1884703a 	and	r2,r3,r2
 4052604:	1001703a 	wrctl	status,r2
  
  return context;
 4052608:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 405260c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 4052610:	e0fffb03 	ldbu	r3,-20(fp)
 4052614:	00808074 	movhi	r2,513
 4052618:	10958d04 	addi	r2,r2,22068
 405261c:	18c7883a 	add	r3,r3,r3
 4052620:	18c7883a 	add	r3,r3,r3
 4052624:	10c5883a 	add	r2,r2,r3
 4052628:	e0fff617 	ldw	r3,-40(fp)
 405262c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 4052630:	d0e05517 	ldw	r3,-32428(gp)
 4052634:	e0bff617 	ldw	r2,-40(fp)
 4052638:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 405263c:	e0bff617 	ldw	r2,-40(fp)
 4052640:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 4052644:	d0a05517 	ldw	r2,-32428(gp)
 4052648:	10000326 	beq	r2,zero,4052658 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 405264c:	d0a05517 	ldw	r2,-32428(gp)
 4052650:	e0fff617 	ldw	r3,-40(fp)
 4052654:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 4052658:	e0bff617 	ldw	r2,-40(fp)
 405265c:	d0a05515 	stw	r2,-32428(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 4052660:	e0bff617 	ldw	r2,-40(fp)
 4052664:	10c00d83 	ldbu	r3,54(r2)
 4052668:	d0a05e03 	ldbu	r2,-32392(gp)
 405266c:	1884b03a 	or	r2,r3,r2
 4052670:	d0a05e05 	stb	r2,-32392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4052674:	e0bff617 	ldw	r2,-40(fp)
 4052678:	10800d03 	ldbu	r2,52(r2)
 405267c:	10c03fcc 	andi	r3,r2,255
 4052680:	e0bff617 	ldw	r2,-40(fp)
 4052684:	10800d03 	ldbu	r2,52(r2)
 4052688:	11003fcc 	andi	r4,r2,255
 405268c:	d0a05e44 	addi	r2,gp,-32391
 4052690:	2085883a 	add	r2,r4,r2
 4052694:	11000003 	ldbu	r4,0(r2)
 4052698:	e0bff617 	ldw	r2,-40(fp)
 405269c:	10800d43 	ldbu	r2,53(r2)
 40526a0:	2084b03a 	or	r2,r4,r2
 40526a4:	1009883a 	mov	r4,r2
 40526a8:	d0a05e44 	addi	r2,gp,-32391
 40526ac:	1885883a 	add	r2,r3,r2
 40526b0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 40526b4:	d0a05a43 	ldbu	r2,-32407(gp)
 40526b8:	10800044 	addi	r2,r2,1
 40526bc:	d0a05a45 	stb	r2,-32407(gp)
 40526c0:	e0bff417 	ldw	r2,-48(fp)
 40526c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40526c8:	e0bff717 	ldw	r2,-36(fp)
 40526cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 40526d0:	0005883a 	mov	r2,zero
 40526d4:	00000506 	br	40526ec <OS_TCBInit+0x2c0>
 40526d8:	e0bff417 	ldw	r2,-48(fp)
 40526dc:	e0bff915 	stw	r2,-28(fp)
 40526e0:	e0bff917 	ldw	r2,-28(fp)
 40526e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 40526e8:	00801084 	movi	r2,66
}
 40526ec:	e037883a 	mov	sp,fp
 40526f0:	dfc00117 	ldw	ra,4(sp)
 40526f4:	df000017 	ldw	fp,0(sp)
 40526f8:	dec00204 	addi	sp,sp,8
 40526fc:	f800283a 	ret

04052700 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 4052700:	defffe04 	addi	sp,sp,-8
 4052704:	df000115 	stw	fp,4(sp)
 4052708:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 405270c:	d0a01004 	addi	r2,gp,-32704
 4052710:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 4052714:	d0a01104 	addi	r2,gp,-32700
 4052718:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 405271c:	d0a01284 	addi	r2,gp,-32694
 4052720:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 4052724:	d0a01304 	addi	r2,gp,-32692
 4052728:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 405272c:	d0a01204 	addi	r2,gp,-32696
 4052730:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 4052734:	d0a01384 	addi	r2,gp,-32690
 4052738:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 405273c:	d0a01404 	addi	r2,gp,-32688
 4052740:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 4052744:	d0a01484 	addi	r2,gp,-32686
 4052748:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 405274c:	d0a01504 	addi	r2,gp,-32684
 4052750:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 4052754:	d0a01584 	addi	r2,gp,-32682
 4052758:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 405275c:	d0a01604 	addi	r2,gp,-32680
 4052760:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 4052764:	d0a01684 	addi	r2,gp,-32678
 4052768:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 405276c:	d0a01704 	addi	r2,gp,-32676
 4052770:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 4052774:	d0a01784 	addi	r2,gp,-32674
 4052778:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 405277c:	d0a01804 	addi	r2,gp,-32672
 4052780:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 4052784:	d0a01884 	addi	r2,gp,-32670
 4052788:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 405278c:	d0a01904 	addi	r2,gp,-32668
 4052790:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 4052794:	d0a01984 	addi	r2,gp,-32666
 4052798:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 405279c:	d0a01a04 	addi	r2,gp,-32664
 40527a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 40527a4:	d0a01a84 	addi	r2,gp,-32662
 40527a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 40527ac:	d0a01b04 	addi	r2,gp,-32660
 40527b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 40527b4:	d0a01b84 	addi	r2,gp,-32658
 40527b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 40527bc:	d0a01c04 	addi	r2,gp,-32656
 40527c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 40527c4:	d0a01c84 	addi	r2,gp,-32654
 40527c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 40527cc:	d0a01d04 	addi	r2,gp,-32652
 40527d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 40527d4:	d0a01d84 	addi	r2,gp,-32650
 40527d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 40527dc:	d0a01e04 	addi	r2,gp,-32648
 40527e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 40527e4:	d0a01e84 	addi	r2,gp,-32646
 40527e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 40527ec:	d0a01f04 	addi	r2,gp,-32644
 40527f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 40527f4:	d0a01f84 	addi	r2,gp,-32642
 40527f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 40527fc:	d0a02004 	addi	r2,gp,-32640
 4052800:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 4052804:	d0a02084 	addi	r2,gp,-32638
 4052808:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 405280c:	d0a02104 	addi	r2,gp,-32636
 4052810:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 4052814:	d0a02184 	addi	r2,gp,-32634
 4052818:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 405281c:	d0a02204 	addi	r2,gp,-32632
 4052820:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 4052824:	d0a02284 	addi	r2,gp,-32630
 4052828:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 405282c:	d0a02304 	addi	r2,gp,-32628
 4052830:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 4052834:	d0a02384 	addi	r2,gp,-32626
 4052838:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 405283c:	d0a02404 	addi	r2,gp,-32624
 4052840:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 4052844:	d0a02484 	addi	r2,gp,-32622
 4052848:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 405284c:	d0a02504 	addi	r2,gp,-32620
 4052850:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 4052854:	d0a02584 	addi	r2,gp,-32618
 4052858:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 405285c:	d0a02604 	addi	r2,gp,-32616
 4052860:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 4052864:	d0a02684 	addi	r2,gp,-32614
 4052868:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 405286c:	d0a02704 	addi	r2,gp,-32612
 4052870:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 4052874:	d0a02c04 	addi	r2,gp,-32592
 4052878:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 405287c:	0001883a 	nop
 4052880:	e037883a 	mov	sp,fp
 4052884:	df000017 	ldw	fp,0(sp)
 4052888:	dec00104 	addi	sp,sp,4
 405288c:	f800283a 	ret

04052890 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 4052890:	defff204 	addi	sp,sp,-56
 4052894:	df000d15 	stw	fp,52(sp)
 4052898:	df000d04 	addi	fp,sp,52
 405289c:	e13ffc15 	stw	r4,-16(fp)
 40528a0:	2807883a 	mov	r3,r5
 40528a4:	3005883a 	mov	r2,r6
 40528a8:	e1ffff15 	stw	r7,-4(fp)
 40528ac:	e0fffd0d 	sth	r3,-12(fp)
 40528b0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 40528b4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40528b8:	e0bfff17 	ldw	r2,-4(fp)
 40528bc:	1000021e 	bne	r2,zero,40528c8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 40528c0:	0005883a 	mov	r2,zero
 40528c4:	0000b006 	br	4052b88 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 40528c8:	e0bffc17 	ldw	r2,-16(fp)
 40528cc:	1000051e 	bne	r2,zero,40528e4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40528d0:	e0bfff17 	ldw	r2,-4(fp)
 40528d4:	00c01b84 	movi	r3,110
 40528d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40528dc:	0005883a 	mov	r2,zero
 40528e0:	0000a906 	br	4052b88 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 40528e4:	e0bffc17 	ldw	r2,-16(fp)
 40528e8:	10800003 	ldbu	r2,0(r2)
 40528ec:	10803fcc 	andi	r2,r2,255
 40528f0:	10800160 	cmpeqi	r2,r2,5
 40528f4:	1000051e 	bne	r2,zero,405290c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 40528f8:	e0bfff17 	ldw	r2,-4(fp)
 40528fc:	00c00044 	movi	r3,1
 4052900:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4052904:	0005883a 	mov	r2,zero
 4052908:	00009f06 	br	4052b88 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 405290c:	e0fffe03 	ldbu	r3,-8(fp)
 4052910:	00bfe004 	movi	r2,-128
 4052914:	1884703a 	and	r2,r3,r2
 4052918:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 405291c:	e0bff503 	ldbu	r2,-44(fp)
 4052920:	10000626 	beq	r2,zero,405293c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 4052924:	e0bffe03 	ldbu	r2,-8(fp)
 4052928:	10801fcc 	andi	r2,r2,127
 405292c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4052930:	00800044 	movi	r2,1
 4052934:	e0bff385 	stb	r2,-50(fp)
 4052938:	00000106 	br	4052940 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 405293c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 4052940:	e0bfff17 	ldw	r2,-4(fp)
 4052944:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4052948:	0005303a 	rdctl	r2,status
 405294c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4052950:	e0fffb17 	ldw	r3,-20(fp)
 4052954:	00bfff84 	movi	r2,-2
 4052958:	1884703a 	and	r2,r3,r2
 405295c:	1001703a 	wrctl	status,r2
  
  return context;
 4052960:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 4052964:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 4052968:	e0bffe03 	ldbu	r2,-8(fp)
 405296c:	10c00060 	cmpeqi	r3,r2,1
 4052970:	18005f1e 	bne	r3,zero,4052af0 <OSFlagAccept+0x260>
 4052974:	10c00088 	cmpgei	r3,r2,2
 4052978:	1800021e 	bne	r3,zero,4052984 <OSFlagAccept+0xf4>
 405297c:	10003f26 	beq	r2,zero,4052a7c <OSFlagAccept+0x1ec>
 4052980:	00007706 	br	4052b60 <OSFlagAccept+0x2d0>
 4052984:	10c000a0 	cmpeqi	r3,r2,2
 4052988:	1800031e 	bne	r3,zero,4052998 <OSFlagAccept+0x108>
 405298c:	108000e0 	cmpeqi	r2,r2,3
 4052990:	10001e1e 	bne	r2,zero,4052a0c <OSFlagAccept+0x17c>
 4052994:	00007206 	br	4052b60 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 4052998:	e0bffc17 	ldw	r2,-16(fp)
 405299c:	10c0020b 	ldhu	r3,8(r2)
 40529a0:	e0bffd0b 	ldhu	r2,-12(fp)
 40529a4:	1884703a 	and	r2,r3,r2
 40529a8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 40529ac:	e0fff30b 	ldhu	r3,-52(fp)
 40529b0:	e0bffd0b 	ldhu	r2,-12(fp)
 40529b4:	18800d1e 	bne	r3,r2,40529ec <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40529b8:	e0bff383 	ldbu	r2,-50(fp)
 40529bc:	10800058 	cmpnei	r2,r2,1
 40529c0:	10000d1e 	bne	r2,zero,40529f8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 40529c4:	e0bffc17 	ldw	r2,-16(fp)
 40529c8:	1080020b 	ldhu	r2,8(r2)
 40529cc:	1007883a 	mov	r3,r2
 40529d0:	e0bff30b 	ldhu	r2,-52(fp)
 40529d4:	0084303a 	nor	r2,zero,r2
 40529d8:	1884703a 	and	r2,r3,r2
 40529dc:	1007883a 	mov	r3,r2
 40529e0:	e0bffc17 	ldw	r2,-16(fp)
 40529e4:	10c0020d 	sth	r3,8(r2)
 40529e8:	00000306 	br	40529f8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 40529ec:	e0bfff17 	ldw	r2,-4(fp)
 40529f0:	00c01c04 	movi	r3,112
 40529f4:	10c00005 	stb	r3,0(r2)
 40529f8:	e0bff417 	ldw	r2,-48(fp)
 40529fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4052a00:	e0bff617 	ldw	r2,-40(fp)
 4052a04:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4052a08:	00005e06 	br	4052b84 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 4052a0c:	e0bffc17 	ldw	r2,-16(fp)
 4052a10:	10c0020b 	ldhu	r3,8(r2)
 4052a14:	e0bffd0b 	ldhu	r2,-12(fp)
 4052a18:	1884703a 	and	r2,r3,r2
 4052a1c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4052a20:	e0bff30b 	ldhu	r2,-52(fp)
 4052a24:	10000d26 	beq	r2,zero,4052a5c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4052a28:	e0bff383 	ldbu	r2,-50(fp)
 4052a2c:	10800058 	cmpnei	r2,r2,1
 4052a30:	10000d1e 	bne	r2,zero,4052a68 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4052a34:	e0bffc17 	ldw	r2,-16(fp)
 4052a38:	1080020b 	ldhu	r2,8(r2)
 4052a3c:	1007883a 	mov	r3,r2
 4052a40:	e0bff30b 	ldhu	r2,-52(fp)
 4052a44:	0084303a 	nor	r2,zero,r2
 4052a48:	1884703a 	and	r2,r3,r2
 4052a4c:	1007883a 	mov	r3,r2
 4052a50:	e0bffc17 	ldw	r2,-16(fp)
 4052a54:	10c0020d 	sth	r3,8(r2)
 4052a58:	00000306 	br	4052a68 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4052a5c:	e0bfff17 	ldw	r2,-4(fp)
 4052a60:	00c01c04 	movi	r3,112
 4052a64:	10c00005 	stb	r3,0(r2)
 4052a68:	e0bff417 	ldw	r2,-48(fp)
 4052a6c:	e0bff715 	stw	r2,-36(fp)
 4052a70:	e0bff717 	ldw	r2,-36(fp)
 4052a74:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4052a78:	00004206 	br	4052b84 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4052a7c:	e0bffc17 	ldw	r2,-16(fp)
 4052a80:	1080020b 	ldhu	r2,8(r2)
 4052a84:	0084303a 	nor	r2,zero,r2
 4052a88:	1007883a 	mov	r3,r2
 4052a8c:	e0bffd0b 	ldhu	r2,-12(fp)
 4052a90:	1884703a 	and	r2,r3,r2
 4052a94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4052a98:	e0fff30b 	ldhu	r3,-52(fp)
 4052a9c:	e0bffd0b 	ldhu	r2,-12(fp)
 4052aa0:	18800b1e 	bne	r3,r2,4052ad0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4052aa4:	e0bff383 	ldbu	r2,-50(fp)
 4052aa8:	10800058 	cmpnei	r2,r2,1
 4052aac:	10000b1e 	bne	r2,zero,4052adc <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4052ab0:	e0bffc17 	ldw	r2,-16(fp)
 4052ab4:	10c0020b 	ldhu	r3,8(r2)
 4052ab8:	e0bff30b 	ldhu	r2,-52(fp)
 4052abc:	1884b03a 	or	r2,r3,r2
 4052ac0:	1007883a 	mov	r3,r2
 4052ac4:	e0bffc17 	ldw	r2,-16(fp)
 4052ac8:	10c0020d 	sth	r3,8(r2)
 4052acc:	00000306 	br	4052adc <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4052ad0:	e0bfff17 	ldw	r2,-4(fp)
 4052ad4:	00c01c04 	movi	r3,112
 4052ad8:	10c00005 	stb	r3,0(r2)
 4052adc:	e0bff417 	ldw	r2,-48(fp)
 4052ae0:	e0bff815 	stw	r2,-32(fp)
 4052ae4:	e0bff817 	ldw	r2,-32(fp)
 4052ae8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4052aec:	00002506 	br	4052b84 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4052af0:	e0bffc17 	ldw	r2,-16(fp)
 4052af4:	1080020b 	ldhu	r2,8(r2)
 4052af8:	0084303a 	nor	r2,zero,r2
 4052afc:	1007883a 	mov	r3,r2
 4052b00:	e0bffd0b 	ldhu	r2,-12(fp)
 4052b04:	1884703a 	and	r2,r3,r2
 4052b08:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4052b0c:	e0bff30b 	ldhu	r2,-52(fp)
 4052b10:	10000b26 	beq	r2,zero,4052b40 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4052b14:	e0bff383 	ldbu	r2,-50(fp)
 4052b18:	10800058 	cmpnei	r2,r2,1
 4052b1c:	10000b1e 	bne	r2,zero,4052b4c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4052b20:	e0bffc17 	ldw	r2,-16(fp)
 4052b24:	10c0020b 	ldhu	r3,8(r2)
 4052b28:	e0bff30b 	ldhu	r2,-52(fp)
 4052b2c:	1884b03a 	or	r2,r3,r2
 4052b30:	1007883a 	mov	r3,r2
 4052b34:	e0bffc17 	ldw	r2,-16(fp)
 4052b38:	10c0020d 	sth	r3,8(r2)
 4052b3c:	00000306 	br	4052b4c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4052b40:	e0bfff17 	ldw	r2,-4(fp)
 4052b44:	00c01c04 	movi	r3,112
 4052b48:	10c00005 	stb	r3,0(r2)
 4052b4c:	e0bff417 	ldw	r2,-48(fp)
 4052b50:	e0bff915 	stw	r2,-28(fp)
 4052b54:	e0bff917 	ldw	r2,-28(fp)
 4052b58:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4052b5c:	00000906 	br	4052b84 <OSFlagAccept+0x2f4>
 4052b60:	e0bff417 	ldw	r2,-48(fp)
 4052b64:	e0bffa15 	stw	r2,-24(fp)
 4052b68:	e0bffa17 	ldw	r2,-24(fp)
 4052b6c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4052b70:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 4052b74:	e0bfff17 	ldw	r2,-4(fp)
 4052b78:	00c01bc4 	movi	r3,111
 4052b7c:	10c00005 	stb	r3,0(r2)
             break;
 4052b80:	0001883a 	nop
    }
    return (flags_rdy);
 4052b84:	e0bff30b 	ldhu	r2,-52(fp)
}
 4052b88:	e037883a 	mov	sp,fp
 4052b8c:	df000017 	ldw	fp,0(sp)
 4052b90:	dec00104 	addi	sp,sp,4
 4052b94:	f800283a 	ret

04052b98 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 4052b98:	defff804 	addi	sp,sp,-32
 4052b9c:	df000715 	stw	fp,28(sp)
 4052ba0:	df000704 	addi	fp,sp,28
 4052ba4:	2005883a 	mov	r2,r4
 4052ba8:	e17fff15 	stw	r5,-4(fp)
 4052bac:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 4052bb0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 4052bb4:	e0bfff17 	ldw	r2,-4(fp)
 4052bb8:	1000021e 	bne	r2,zero,4052bc4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 4052bbc:	0005883a 	mov	r2,zero
 4052bc0:	00003306 	br	4052c90 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 4052bc4:	d0a06003 	ldbu	r2,-32384(gp)
 4052bc8:	10803fcc 	andi	r2,r2,255
 4052bcc:	10000526 	beq	r2,zero,4052be4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 4052bd0:	e0bfff17 	ldw	r2,-4(fp)
 4052bd4:	00c00404 	movi	r3,16
 4052bd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 4052bdc:	0005883a 	mov	r2,zero
 4052be0:	00002b06 	br	4052c90 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4052be4:	0005303a 	rdctl	r2,status
 4052be8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4052bec:	e0fffd17 	ldw	r3,-12(fp)
 4052bf0:	00bfff84 	movi	r2,-2
 4052bf4:	1884703a 	and	r2,r3,r2
 4052bf8:	1001703a 	wrctl	status,r2
  
  return context;
 4052bfc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4052c00:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 4052c04:	d0a06317 	ldw	r2,-32372(gp)
 4052c08:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 4052c0c:	e0bffb17 	ldw	r2,-20(fp)
 4052c10:	10001726 	beq	r2,zero,4052c70 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 4052c14:	d0a06317 	ldw	r2,-32372(gp)
 4052c18:	10800117 	ldw	r2,4(r2)
 4052c1c:	d0a06315 	stw	r2,-32372(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 4052c20:	e0bffb17 	ldw	r2,-20(fp)
 4052c24:	00c00144 	movi	r3,5
 4052c28:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 4052c2c:	e0bffb17 	ldw	r2,-20(fp)
 4052c30:	e0fffe0b 	ldhu	r3,-8(fp)
 4052c34:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 4052c38:	e0bffb17 	ldw	r2,-20(fp)
 4052c3c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 4052c40:	e0bffb17 	ldw	r2,-20(fp)
 4052c44:	00c00fc4 	movi	r3,63
 4052c48:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4052c4c:	e0bffb17 	ldw	r2,-20(fp)
 4052c50:	100002c5 	stb	zero,11(r2)
 4052c54:	e0bff917 	ldw	r2,-28(fp)
 4052c58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4052c5c:	e0bffa17 	ldw	r2,-24(fp)
 4052c60:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 4052c64:	e0bfff17 	ldw	r2,-4(fp)
 4052c68:	10000005 	stb	zero,0(r2)
 4052c6c:	00000706 	br	4052c8c <OSFlagCreate+0xf4>
 4052c70:	e0bff917 	ldw	r2,-28(fp)
 4052c74:	e0bffc15 	stw	r2,-16(fp)
 4052c78:	e0bffc17 	ldw	r2,-16(fp)
 4052c7c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 4052c80:	e0bfff17 	ldw	r2,-4(fp)
 4052c84:	00c01c84 	movi	r3,114
 4052c88:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 4052c8c:	e0bffb17 	ldw	r2,-20(fp)
}
 4052c90:	e037883a 	mov	sp,fp
 4052c94:	df000017 	ldw	fp,0(sp)
 4052c98:	dec00104 	addi	sp,sp,4
 4052c9c:	f800283a 	ret

04052ca0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 4052ca0:	defff204 	addi	sp,sp,-56
 4052ca4:	dfc00d15 	stw	ra,52(sp)
 4052ca8:	df000c15 	stw	fp,48(sp)
 4052cac:	df000c04 	addi	fp,sp,48
 4052cb0:	e13ffd15 	stw	r4,-12(fp)
 4052cb4:	2805883a 	mov	r2,r5
 4052cb8:	e1bfff15 	stw	r6,-4(fp)
 4052cbc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4052cc0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4052cc4:	e0bfff17 	ldw	r2,-4(fp)
 4052cc8:	1000021e 	bne	r2,zero,4052cd4 <OSFlagDel+0x34>
        return (pgrp);
 4052ccc:	e0bffd17 	ldw	r2,-12(fp)
 4052cd0:	00008006 	br	4052ed4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4052cd4:	e0bffd17 	ldw	r2,-12(fp)
 4052cd8:	1000051e 	bne	r2,zero,4052cf0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4052cdc:	e0bfff17 	ldw	r2,-4(fp)
 4052ce0:	00c01b84 	movi	r3,110
 4052ce4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4052ce8:	e0bffd17 	ldw	r2,-12(fp)
 4052cec:	00007906 	br	4052ed4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4052cf0:	d0a06003 	ldbu	r2,-32384(gp)
 4052cf4:	10803fcc 	andi	r2,r2,255
 4052cf8:	10000526 	beq	r2,zero,4052d10 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4052cfc:	e0bfff17 	ldw	r2,-4(fp)
 4052d00:	00c003c4 	movi	r3,15
 4052d04:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4052d08:	e0bffd17 	ldw	r2,-12(fp)
 4052d0c:	00007106 	br	4052ed4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 4052d10:	e0bffd17 	ldw	r2,-12(fp)
 4052d14:	10800003 	ldbu	r2,0(r2)
 4052d18:	10803fcc 	andi	r2,r2,255
 4052d1c:	10800160 	cmpeqi	r2,r2,5
 4052d20:	1000051e 	bne	r2,zero,4052d38 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 4052d24:	e0bfff17 	ldw	r2,-4(fp)
 4052d28:	00c00044 	movi	r3,1
 4052d2c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4052d30:	e0bffd17 	ldw	r2,-12(fp)
 4052d34:	00006706 	br	4052ed4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4052d38:	0005303a 	rdctl	r2,status
 4052d3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4052d40:	e0fffc17 	ldw	r3,-16(fp)
 4052d44:	00bfff84 	movi	r2,-2
 4052d48:	1884703a 	and	r2,r3,r2
 4052d4c:	1001703a 	wrctl	status,r2
  
  return context;
 4052d50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4052d54:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 4052d58:	e0bffd17 	ldw	r2,-12(fp)
 4052d5c:	10800117 	ldw	r2,4(r2)
 4052d60:	10000326 	beq	r2,zero,4052d70 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4052d64:	00800044 	movi	r2,1
 4052d68:	e0bff405 	stb	r2,-48(fp)
 4052d6c:	00000106 	br	4052d74 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4052d70:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 4052d74:	e0bffe03 	ldbu	r2,-8(fp)
 4052d78:	10000326 	beq	r2,zero,4052d88 <OSFlagDel+0xe8>
 4052d7c:	10800060 	cmpeqi	r2,r2,1
 4052d80:	1000231e 	bne	r2,zero,4052e10 <OSFlagDel+0x170>
 4052d84:	00004806 	br	4052ea8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 4052d88:	e0bff403 	ldbu	r2,-48(fp)
 4052d8c:	1000161e 	bne	r2,zero,4052de8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 4052d90:	e0bffd17 	ldw	r2,-12(fp)
 4052d94:	00c00fc4 	movi	r3,63
 4052d98:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4052d9c:	e0bffd17 	ldw	r2,-12(fp)
 4052da0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4052da4:	e0bffd17 	ldw	r2,-12(fp)
 4052da8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 4052dac:	d0e06317 	ldw	r3,-32372(gp)
 4052db0:	e0bffd17 	ldw	r2,-12(fp)
 4052db4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 4052db8:	e0bffd17 	ldw	r2,-12(fp)
 4052dbc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 4052dc0:	e0bffd17 	ldw	r2,-12(fp)
 4052dc4:	d0a06315 	stw	r2,-32372(gp)
 4052dc8:	e0bff717 	ldw	r2,-36(fp)
 4052dcc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4052dd0:	e0bff817 	ldw	r2,-32(fp)
 4052dd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 4052dd8:	e0bfff17 	ldw	r2,-4(fp)
 4052ddc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 4052de0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 4052de4:	00003a06 	br	4052ed0 <OSFlagDel+0x230>
 4052de8:	e0bff717 	ldw	r2,-36(fp)
 4052dec:	e0bff915 	stw	r2,-28(fp)
 4052df0:	e0bff917 	ldw	r2,-28(fp)
 4052df4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 4052df8:	e0bfff17 	ldw	r2,-4(fp)
 4052dfc:	00c01244 	movi	r3,73
 4052e00:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 4052e04:	e0bffd17 	ldw	r2,-12(fp)
 4052e08:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4052e0c:	00003006 	br	4052ed0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4052e10:	e0bffd17 	ldw	r2,-12(fp)
 4052e14:	10800117 	ldw	r2,4(r2)
 4052e18:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4052e1c:	00000606 	br	4052e38 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 4052e20:	000b883a 	mov	r5,zero
 4052e24:	e13ff517 	ldw	r4,-44(fp)
 4052e28:	4053e0c0 	call	4053e0c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4052e2c:	e0bff517 	ldw	r2,-44(fp)
 4052e30:	10800017 	ldw	r2,0(r2)
 4052e34:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4052e38:	e0bff517 	ldw	r2,-44(fp)
 4052e3c:	103ff81e 	bne	r2,zero,4052e20 <__flash_rwdata_start+0xffff86f0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 4052e40:	e0bffd17 	ldw	r2,-12(fp)
 4052e44:	00c00fc4 	movi	r3,63
 4052e48:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4052e4c:	e0bffd17 	ldw	r2,-12(fp)
 4052e50:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4052e54:	e0bffd17 	ldw	r2,-12(fp)
 4052e58:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 4052e5c:	d0e06317 	ldw	r3,-32372(gp)
 4052e60:	e0bffd17 	ldw	r2,-12(fp)
 4052e64:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 4052e68:	e0bffd17 	ldw	r2,-12(fp)
 4052e6c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 4052e70:	e0bffd17 	ldw	r2,-12(fp)
 4052e74:	d0a06315 	stw	r2,-32372(gp)
 4052e78:	e0bff717 	ldw	r2,-36(fp)
 4052e7c:	e0bffa15 	stw	r2,-24(fp)
 4052e80:	e0bffa17 	ldw	r2,-24(fp)
 4052e84:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4052e88:	e0bff403 	ldbu	r2,-48(fp)
 4052e8c:	10800058 	cmpnei	r2,r2,1
 4052e90:	1000011e 	bne	r2,zero,4052e98 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4052e94:	405202c0 	call	405202c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 4052e98:	e0bfff17 	ldw	r2,-4(fp)
 4052e9c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 4052ea0:	e03ff615 	stw	zero,-40(fp)
             break;
 4052ea4:	00000a06 	br	4052ed0 <OSFlagDel+0x230>
 4052ea8:	e0bff717 	ldw	r2,-36(fp)
 4052eac:	e0bffb15 	stw	r2,-20(fp)
 4052eb0:	e0bffb17 	ldw	r2,-20(fp)
 4052eb4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 4052eb8:	e0bfff17 	ldw	r2,-4(fp)
 4052ebc:	00c001c4 	movi	r3,7
 4052ec0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 4052ec4:	e0bffd17 	ldw	r2,-12(fp)
 4052ec8:	e0bff615 	stw	r2,-40(fp)
             break;
 4052ecc:	0001883a 	nop
    }
    return (pgrp_return);
 4052ed0:	e0bff617 	ldw	r2,-40(fp)
}
 4052ed4:	e037883a 	mov	sp,fp
 4052ed8:	dfc00117 	ldw	ra,4(sp)
 4052edc:	df000017 	ldw	fp,0(sp)
 4052ee0:	dec00204 	addi	sp,sp,8
 4052ee4:	f800283a 	ret

04052ee8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4052ee8:	defff604 	addi	sp,sp,-40
 4052eec:	dfc00915 	stw	ra,36(sp)
 4052ef0:	df000815 	stw	fp,32(sp)
 4052ef4:	df000804 	addi	fp,sp,32
 4052ef8:	e13ffd15 	stw	r4,-12(fp)
 4052efc:	e17ffe15 	stw	r5,-8(fp)
 4052f00:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4052f04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4052f08:	e0bfff17 	ldw	r2,-4(fp)
 4052f0c:	1000021e 	bne	r2,zero,4052f18 <OSFlagNameGet+0x30>
        return (0);
 4052f10:	0005883a 	mov	r2,zero
 4052f14:	00003906 	br	4052ffc <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 4052f18:	e0bffd17 	ldw	r2,-12(fp)
 4052f1c:	1000051e 	bne	r2,zero,4052f34 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4052f20:	e0bfff17 	ldw	r2,-4(fp)
 4052f24:	00c01b84 	movi	r3,110
 4052f28:	10c00005 	stb	r3,0(r2)
        return (0);
 4052f2c:	0005883a 	mov	r2,zero
 4052f30:	00003206 	br	4052ffc <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4052f34:	e0bffe17 	ldw	r2,-8(fp)
 4052f38:	1000051e 	bne	r2,zero,4052f50 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4052f3c:	e0bfff17 	ldw	r2,-4(fp)
 4052f40:	00c00304 	movi	r3,12
 4052f44:	10c00005 	stb	r3,0(r2)
        return (0);
 4052f48:	0005883a 	mov	r2,zero
 4052f4c:	00002b06 	br	4052ffc <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4052f50:	d0a06003 	ldbu	r2,-32384(gp)
 4052f54:	10803fcc 	andi	r2,r2,255
 4052f58:	10000526 	beq	r2,zero,4052f70 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 4052f5c:	e0bfff17 	ldw	r2,-4(fp)
 4052f60:	00c00444 	movi	r3,17
 4052f64:	10c00005 	stb	r3,0(r2)
        return (0);
 4052f68:	0005883a 	mov	r2,zero
 4052f6c:	00002306 	br	4052ffc <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4052f70:	0005303a 	rdctl	r2,status
 4052f74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4052f78:	e0fffc17 	ldw	r3,-16(fp)
 4052f7c:	00bfff84 	movi	r2,-2
 4052f80:	1884703a 	and	r2,r3,r2
 4052f84:	1001703a 	wrctl	status,r2
  
  return context;
 4052f88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4052f8c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4052f90:	e0bffd17 	ldw	r2,-12(fp)
 4052f94:	10800003 	ldbu	r2,0(r2)
 4052f98:	10803fcc 	andi	r2,r2,255
 4052f9c:	10800160 	cmpeqi	r2,r2,5
 4052fa0:	1000091e 	bne	r2,zero,4052fc8 <OSFlagNameGet+0xe0>
 4052fa4:	e0bff817 	ldw	r2,-32(fp)
 4052fa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4052fac:	e0bff917 	ldw	r2,-28(fp)
 4052fb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 4052fb4:	e0bfff17 	ldw	r2,-4(fp)
 4052fb8:	00c00044 	movi	r3,1
 4052fbc:	10c00005 	stb	r3,0(r2)
        return (0);
 4052fc0:	0005883a 	mov	r2,zero
 4052fc4:	00000d06 	br	4052ffc <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 4052fc8:	e0bffd17 	ldw	r2,-12(fp)
 4052fcc:	10800284 	addi	r2,r2,10
 4052fd0:	100b883a 	mov	r5,r2
 4052fd4:	e13ffe17 	ldw	r4,-8(fp)
 4052fd8:	40521700 	call	4052170 <OS_StrCopy>
 4052fdc:	e0bffb05 	stb	r2,-20(fp)
 4052fe0:	e0bff817 	ldw	r2,-32(fp)
 4052fe4:	e0bffa15 	stw	r2,-24(fp)
 4052fe8:	e0bffa17 	ldw	r2,-24(fp)
 4052fec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4052ff0:	e0bfff17 	ldw	r2,-4(fp)
 4052ff4:	10000005 	stb	zero,0(r2)
    return (len);
 4052ff8:	e0bffb03 	ldbu	r2,-20(fp)
}
 4052ffc:	e037883a 	mov	sp,fp
 4053000:	dfc00117 	ldw	ra,4(sp)
 4053004:	df000017 	ldw	fp,0(sp)
 4053008:	dec00204 	addi	sp,sp,8
 405300c:	f800283a 	ret

04053010 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4053010:	defff504 	addi	sp,sp,-44
 4053014:	dfc00a15 	stw	ra,40(sp)
 4053018:	df000915 	stw	fp,36(sp)
 405301c:	df000904 	addi	fp,sp,36
 4053020:	e13ffd15 	stw	r4,-12(fp)
 4053024:	e17ffe15 	stw	r5,-8(fp)
 4053028:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 405302c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4053030:	e0bfff17 	ldw	r2,-4(fp)
 4053034:	10004326 	beq	r2,zero,4053144 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 4053038:	e0bffd17 	ldw	r2,-12(fp)
 405303c:	1000041e 	bne	r2,zero,4053050 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4053040:	e0bfff17 	ldw	r2,-4(fp)
 4053044:	00c01b84 	movi	r3,110
 4053048:	10c00005 	stb	r3,0(r2)
        return;
 405304c:	00003e06 	br	4053148 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4053050:	e0bffe17 	ldw	r2,-8(fp)
 4053054:	1000041e 	bne	r2,zero,4053068 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4053058:	e0bfff17 	ldw	r2,-4(fp)
 405305c:	00c00304 	movi	r3,12
 4053060:	10c00005 	stb	r3,0(r2)
        return;
 4053064:	00003806 	br	4053148 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4053068:	d0a06003 	ldbu	r2,-32384(gp)
 405306c:	10803fcc 	andi	r2,r2,255
 4053070:	10000426 	beq	r2,zero,4053084 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4053074:	e0bfff17 	ldw	r2,-4(fp)
 4053078:	00c00484 	movi	r3,18
 405307c:	10c00005 	stb	r3,0(r2)
        return;
 4053080:	00003106 	br	4053148 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4053084:	0005303a 	rdctl	r2,status
 4053088:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 405308c:	e0fffc17 	ldw	r3,-16(fp)
 4053090:	00bfff84 	movi	r2,-2
 4053094:	1884703a 	and	r2,r3,r2
 4053098:	1001703a 	wrctl	status,r2
  
  return context;
 405309c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40530a0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 40530a4:	e0bffd17 	ldw	r2,-12(fp)
 40530a8:	10800003 	ldbu	r2,0(r2)
 40530ac:	10803fcc 	andi	r2,r2,255
 40530b0:	10800160 	cmpeqi	r2,r2,5
 40530b4:	1000081e 	bne	r2,zero,40530d8 <OSFlagNameSet+0xc8>
 40530b8:	e0bff717 	ldw	r2,-36(fp)
 40530bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40530c0:	e0bff817 	ldw	r2,-32(fp)
 40530c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 40530c8:	e0bfff17 	ldw	r2,-4(fp)
 40530cc:	00c00044 	movi	r3,1
 40530d0:	10c00005 	stb	r3,0(r2)
        return;
 40530d4:	00001c06 	br	4053148 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 40530d8:	e13ffe17 	ldw	r4,-8(fp)
 40530dc:	40521e40 	call	40521e4 <OS_StrLen>
 40530e0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 40530e4:	e0bffa03 	ldbu	r2,-24(fp)
 40530e8:	10800830 	cmpltui	r2,r2,32
 40530ec:	1000081e 	bne	r2,zero,4053110 <OSFlagNameSet+0x100>
 40530f0:	e0bff717 	ldw	r2,-36(fp)
 40530f4:	e0bff915 	stw	r2,-28(fp)
 40530f8:	e0bff917 	ldw	r2,-28(fp)
 40530fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 4053100:	e0bfff17 	ldw	r2,-4(fp)
 4053104:	00c01cc4 	movi	r3,115
 4053108:	10c00005 	stb	r3,0(r2)
        return;
 405310c:	00000e06 	br	4053148 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 4053110:	e0bffd17 	ldw	r2,-12(fp)
 4053114:	10800284 	addi	r2,r2,10
 4053118:	e17ffe17 	ldw	r5,-8(fp)
 405311c:	1009883a 	mov	r4,r2
 4053120:	40521700 	call	4052170 <OS_StrCopy>
 4053124:	e0bff717 	ldw	r2,-36(fp)
 4053128:	e0bffb15 	stw	r2,-20(fp)
 405312c:	e0bffb17 	ldw	r2,-20(fp)
 4053130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4053134:	e0bfff17 	ldw	r2,-4(fp)
 4053138:	10000005 	stb	zero,0(r2)
    return;
 405313c:	0001883a 	nop
 4053140:	00000106 	br	4053148 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4053144:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 4053148:	e037883a 	mov	sp,fp
 405314c:	dfc00117 	ldw	ra,4(sp)
 4053150:	df000017 	ldw	fp,0(sp)
 4053154:	dec00204 	addi	sp,sp,8
 4053158:	f800283a 	ret

0405315c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 405315c:	deffe104 	addi	sp,sp,-124
 4053160:	dfc01e15 	stw	ra,120(sp)
 4053164:	df001d15 	stw	fp,116(sp)
 4053168:	df001d04 	addi	fp,sp,116
 405316c:	e13ffc15 	stw	r4,-16(fp)
 4053170:	2809883a 	mov	r4,r5
 4053174:	3007883a 	mov	r3,r6
 4053178:	3805883a 	mov	r2,r7
 405317c:	e13ffd0d 	sth	r4,-12(fp)
 4053180:	e0fffe05 	stb	r3,-8(fp)
 4053184:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4053188:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 405318c:	e0800217 	ldw	r2,8(fp)
 4053190:	1000021e 	bne	r2,zero,405319c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 4053194:	0005883a 	mov	r2,zero
 4053198:	00015906 	br	4053700 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 405319c:	e0bffc17 	ldw	r2,-16(fp)
 40531a0:	1000051e 	bne	r2,zero,40531b8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40531a4:	e0800217 	ldw	r2,8(fp)
 40531a8:	00c01b84 	movi	r3,110
 40531ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40531b0:	0005883a 	mov	r2,zero
 40531b4:	00015206 	br	4053700 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40531b8:	d0a06003 	ldbu	r2,-32384(gp)
 40531bc:	10803fcc 	andi	r2,r2,255
 40531c0:	10000526 	beq	r2,zero,40531d8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 40531c4:	e0800217 	ldw	r2,8(fp)
 40531c8:	00c00084 	movi	r3,2
 40531cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40531d0:	0005883a 	mov	r2,zero
 40531d4:	00014a06 	br	4053700 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 40531d8:	d0a05203 	ldbu	r2,-32440(gp)
 40531dc:	10803fcc 	andi	r2,r2,255
 40531e0:	10000526 	beq	r2,zero,40531f8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 40531e4:	e0800217 	ldw	r2,8(fp)
 40531e8:	00c00344 	movi	r3,13
 40531ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40531f0:	0005883a 	mov	r2,zero
 40531f4:	00014206 	br	4053700 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 40531f8:	e0bffc17 	ldw	r2,-16(fp)
 40531fc:	10800003 	ldbu	r2,0(r2)
 4053200:	10803fcc 	andi	r2,r2,255
 4053204:	10800160 	cmpeqi	r2,r2,5
 4053208:	1000051e 	bne	r2,zero,4053220 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 405320c:	e0800217 	ldw	r2,8(fp)
 4053210:	00c00044 	movi	r3,1
 4053214:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4053218:	0005883a 	mov	r2,zero
 405321c:	00013806 	br	4053700 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4053220:	e0fffe03 	ldbu	r3,-8(fp)
 4053224:	00bfe004 	movi	r2,-128
 4053228:	1884703a 	and	r2,r3,r2
 405322c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 4053230:	e0bfe603 	ldbu	r2,-104(fp)
 4053234:	10000626 	beq	r2,zero,4053250 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 4053238:	e0bffe03 	ldbu	r2,-8(fp)
 405323c:	10801fcc 	andi	r2,r2,127
 4053240:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4053244:	00800044 	movi	r2,1
 4053248:	e0bfe405 	stb	r2,-112(fp)
 405324c:	00000106 	br	4053254 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 4053250:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4053254:	0005303a 	rdctl	r2,status
 4053258:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 405325c:	e0fff617 	ldw	r3,-40(fp)
 4053260:	00bfff84 	movi	r2,-2
 4053264:	1884703a 	and	r2,r3,r2
 4053268:	1001703a 	wrctl	status,r2
  
  return context;
 405326c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4053270:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 4053274:	e0bffe03 	ldbu	r2,-8(fp)
 4053278:	10c00060 	cmpeqi	r3,r2,1
 405327c:	1800921e 	bne	r3,zero,40534c8 <OSFlagPend+0x36c>
 4053280:	10c00088 	cmpgei	r3,r2,2
 4053284:	1800021e 	bne	r3,zero,4053290 <OSFlagPend+0x134>
 4053288:	10006126 	beq	r2,zero,4053410 <OSFlagPend+0x2b4>
 405328c:	0000bb06 	br	405357c <OSFlagPend+0x420>
 4053290:	10c000a0 	cmpeqi	r3,r2,2
 4053294:	1800031e 	bne	r3,zero,40532a4 <OSFlagPend+0x148>
 4053298:	108000e0 	cmpeqi	r2,r2,3
 405329c:	10002f1e 	bne	r2,zero,405335c <OSFlagPend+0x200>
 40532a0:	0000b606 	br	405357c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 40532a4:	e0bffc17 	ldw	r2,-16(fp)
 40532a8:	10c0020b 	ldhu	r3,8(r2)
 40532ac:	e0bffd0b 	ldhu	r2,-12(fp)
 40532b0:	1884703a 	and	r2,r3,r2
 40532b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 40532b8:	e0ffe80b 	ldhu	r3,-96(fp)
 40532bc:	e0bffd0b 	ldhu	r2,-12(fp)
 40532c0:	1880171e 	bne	r3,r2,4053320 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40532c4:	e0bfe403 	ldbu	r2,-112(fp)
 40532c8:	10800058 	cmpnei	r2,r2,1
 40532cc:	1000091e 	bne	r2,zero,40532f4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 40532d0:	e0bffc17 	ldw	r2,-16(fp)
 40532d4:	1080020b 	ldhu	r2,8(r2)
 40532d8:	1007883a 	mov	r3,r2
 40532dc:	e0bfe80b 	ldhu	r2,-96(fp)
 40532e0:	0084303a 	nor	r2,zero,r2
 40532e4:	1884703a 	and	r2,r3,r2
 40532e8:	1007883a 	mov	r3,r2
 40532ec:	e0bffc17 	ldw	r2,-16(fp)
 40532f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 40532f4:	d0a06117 	ldw	r2,-32380(gp)
 40532f8:	e0ffe80b 	ldhu	r3,-96(fp)
 40532fc:	10c00b0d 	sth	r3,44(r2)
 4053300:	e0bfe517 	ldw	r2,-108(fp)
 4053304:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4053308:	e0bfe717 	ldw	r2,-100(fp)
 405330c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4053310:	e0800217 	ldw	r2,8(fp)
 4053314:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4053318:	e0bfe80b 	ldhu	r2,-96(fp)
 405331c:	0000f806 	br	4053700 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4053320:	e13ffd0b 	ldhu	r4,-12(fp)
 4053324:	e17ffe03 	ldbu	r5,-8(fp)
 4053328:	e0bfff0b 	ldhu	r2,-4(fp)
 405332c:	e0fff704 	addi	r3,fp,-36
 4053330:	d8800015 	stw	r2,0(sp)
 4053334:	280f883a 	mov	r7,r5
 4053338:	200d883a 	mov	r6,r4
 405333c:	180b883a 	mov	r5,r3
 4053340:	e13ffc17 	ldw	r4,-16(fp)
 4053344:	4053bcc0 	call	4053bcc <OS_FlagBlock>
 4053348:	e0bfe517 	ldw	r2,-108(fp)
 405334c:	e0bfe915 	stw	r2,-92(fp)
 4053350:	e0bfe917 	ldw	r2,-92(fp)
 4053354:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4053358:	00009206 	br	40535a4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 405335c:	e0bffc17 	ldw	r2,-16(fp)
 4053360:	10c0020b 	ldhu	r3,8(r2)
 4053364:	e0bffd0b 	ldhu	r2,-12(fp)
 4053368:	1884703a 	and	r2,r3,r2
 405336c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4053370:	e0bfe80b 	ldhu	r2,-96(fp)
 4053374:	10001726 	beq	r2,zero,40533d4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4053378:	e0bfe403 	ldbu	r2,-112(fp)
 405337c:	10800058 	cmpnei	r2,r2,1
 4053380:	1000091e 	bne	r2,zero,40533a8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4053384:	e0bffc17 	ldw	r2,-16(fp)
 4053388:	1080020b 	ldhu	r2,8(r2)
 405338c:	1007883a 	mov	r3,r2
 4053390:	e0bfe80b 	ldhu	r2,-96(fp)
 4053394:	0084303a 	nor	r2,zero,r2
 4053398:	1884703a 	and	r2,r3,r2
 405339c:	1007883a 	mov	r3,r2
 40533a0:	e0bffc17 	ldw	r2,-16(fp)
 40533a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 40533a8:	d0a06117 	ldw	r2,-32380(gp)
 40533ac:	e0ffe80b 	ldhu	r3,-96(fp)
 40533b0:	10c00b0d 	sth	r3,44(r2)
 40533b4:	e0bfe517 	ldw	r2,-108(fp)
 40533b8:	e0bfea15 	stw	r2,-88(fp)
 40533bc:	e0bfea17 	ldw	r2,-88(fp)
 40533c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 40533c4:	e0800217 	ldw	r2,8(fp)
 40533c8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 40533cc:	e0bfe80b 	ldhu	r2,-96(fp)
 40533d0:	0000cb06 	br	4053700 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 40533d4:	e13ffd0b 	ldhu	r4,-12(fp)
 40533d8:	e17ffe03 	ldbu	r5,-8(fp)
 40533dc:	e0bfff0b 	ldhu	r2,-4(fp)
 40533e0:	e0fff704 	addi	r3,fp,-36
 40533e4:	d8800015 	stw	r2,0(sp)
 40533e8:	280f883a 	mov	r7,r5
 40533ec:	200d883a 	mov	r6,r4
 40533f0:	180b883a 	mov	r5,r3
 40533f4:	e13ffc17 	ldw	r4,-16(fp)
 40533f8:	4053bcc0 	call	4053bcc <OS_FlagBlock>
 40533fc:	e0bfe517 	ldw	r2,-108(fp)
 4053400:	e0bfeb15 	stw	r2,-84(fp)
 4053404:	e0bfeb17 	ldw	r2,-84(fp)
 4053408:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 405340c:	00006506 	br	40535a4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4053410:	e0bffc17 	ldw	r2,-16(fp)
 4053414:	1080020b 	ldhu	r2,8(r2)
 4053418:	0084303a 	nor	r2,zero,r2
 405341c:	1007883a 	mov	r3,r2
 4053420:	e0bffd0b 	ldhu	r2,-12(fp)
 4053424:	1884703a 	and	r2,r3,r2
 4053428:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 405342c:	e0ffe80b 	ldhu	r3,-96(fp)
 4053430:	e0bffd0b 	ldhu	r2,-12(fp)
 4053434:	1880151e 	bne	r3,r2,405348c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4053438:	e0bfe403 	ldbu	r2,-112(fp)
 405343c:	10800058 	cmpnei	r2,r2,1
 4053440:	1000071e 	bne	r2,zero,4053460 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4053444:	e0bffc17 	ldw	r2,-16(fp)
 4053448:	10c0020b 	ldhu	r3,8(r2)
 405344c:	e0bfe80b 	ldhu	r2,-96(fp)
 4053450:	1884b03a 	or	r2,r3,r2
 4053454:	1007883a 	mov	r3,r2
 4053458:	e0bffc17 	ldw	r2,-16(fp)
 405345c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4053460:	d0a06117 	ldw	r2,-32380(gp)
 4053464:	e0ffe80b 	ldhu	r3,-96(fp)
 4053468:	10c00b0d 	sth	r3,44(r2)
 405346c:	e0bfe517 	ldw	r2,-108(fp)
 4053470:	e0bfec15 	stw	r2,-80(fp)
 4053474:	e0bfec17 	ldw	r2,-80(fp)
 4053478:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 405347c:	e0800217 	ldw	r2,8(fp)
 4053480:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4053484:	e0bfe80b 	ldhu	r2,-96(fp)
 4053488:	00009d06 	br	4053700 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 405348c:	e13ffd0b 	ldhu	r4,-12(fp)
 4053490:	e17ffe03 	ldbu	r5,-8(fp)
 4053494:	e0bfff0b 	ldhu	r2,-4(fp)
 4053498:	e0fff704 	addi	r3,fp,-36
 405349c:	d8800015 	stw	r2,0(sp)
 40534a0:	280f883a 	mov	r7,r5
 40534a4:	200d883a 	mov	r6,r4
 40534a8:	180b883a 	mov	r5,r3
 40534ac:	e13ffc17 	ldw	r4,-16(fp)
 40534b0:	4053bcc0 	call	4053bcc <OS_FlagBlock>
 40534b4:	e0bfe517 	ldw	r2,-108(fp)
 40534b8:	e0bfed15 	stw	r2,-76(fp)
 40534bc:	e0bfed17 	ldw	r2,-76(fp)
 40534c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 40534c4:	00003706 	br	40535a4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 40534c8:	e0bffc17 	ldw	r2,-16(fp)
 40534cc:	1080020b 	ldhu	r2,8(r2)
 40534d0:	0084303a 	nor	r2,zero,r2
 40534d4:	1007883a 	mov	r3,r2
 40534d8:	e0bffd0b 	ldhu	r2,-12(fp)
 40534dc:	1884703a 	and	r2,r3,r2
 40534e0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 40534e4:	e0bfe80b 	ldhu	r2,-96(fp)
 40534e8:	10001526 	beq	r2,zero,4053540 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40534ec:	e0bfe403 	ldbu	r2,-112(fp)
 40534f0:	10800058 	cmpnei	r2,r2,1
 40534f4:	1000071e 	bne	r2,zero,4053514 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 40534f8:	e0bffc17 	ldw	r2,-16(fp)
 40534fc:	10c0020b 	ldhu	r3,8(r2)
 4053500:	e0bfe80b 	ldhu	r2,-96(fp)
 4053504:	1884b03a 	or	r2,r3,r2
 4053508:	1007883a 	mov	r3,r2
 405350c:	e0bffc17 	ldw	r2,-16(fp)
 4053510:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4053514:	d0a06117 	ldw	r2,-32380(gp)
 4053518:	e0ffe80b 	ldhu	r3,-96(fp)
 405351c:	10c00b0d 	sth	r3,44(r2)
 4053520:	e0bfe517 	ldw	r2,-108(fp)
 4053524:	e0bfee15 	stw	r2,-72(fp)
 4053528:	e0bfee17 	ldw	r2,-72(fp)
 405352c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4053530:	e0800217 	ldw	r2,8(fp)
 4053534:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4053538:	e0bfe80b 	ldhu	r2,-96(fp)
 405353c:	00007006 	br	4053700 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4053540:	e13ffd0b 	ldhu	r4,-12(fp)
 4053544:	e17ffe03 	ldbu	r5,-8(fp)
 4053548:	e0bfff0b 	ldhu	r2,-4(fp)
 405354c:	e0fff704 	addi	r3,fp,-36
 4053550:	d8800015 	stw	r2,0(sp)
 4053554:	280f883a 	mov	r7,r5
 4053558:	200d883a 	mov	r6,r4
 405355c:	180b883a 	mov	r5,r3
 4053560:	e13ffc17 	ldw	r4,-16(fp)
 4053564:	4053bcc0 	call	4053bcc <OS_FlagBlock>
 4053568:	e0bfe517 	ldw	r2,-108(fp)
 405356c:	e0bfef15 	stw	r2,-68(fp)
 4053570:	e0bfef17 	ldw	r2,-68(fp)
 4053574:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4053578:	00000a06 	br	40535a4 <OSFlagPend+0x448>
 405357c:	e0bfe517 	ldw	r2,-108(fp)
 4053580:	e0bff015 	stw	r2,-64(fp)
 4053584:	e0bff017 	ldw	r2,-64(fp)
 4053588:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 405358c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 4053590:	e0800217 	ldw	r2,8(fp)
 4053594:	00c01bc4 	movi	r3,111
 4053598:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 405359c:	e0bfe80b 	ldhu	r2,-96(fp)
 40535a0:	00005706 	br	4053700 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 40535a4:	405202c0 	call	405202c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40535a8:	0005303a 	rdctl	r2,status
 40535ac:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40535b0:	e0fff117 	ldw	r3,-60(fp)
 40535b4:	00bfff84 	movi	r2,-2
 40535b8:	1884703a 	and	r2,r3,r2
 40535bc:	1001703a 	wrctl	status,r2
  
  return context;
 40535c0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 40535c4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 40535c8:	d0a06117 	ldw	r2,-32380(gp)
 40535cc:	10800c43 	ldbu	r2,49(r2)
 40535d0:	10803fcc 	andi	r2,r2,255
 40535d4:	10001c26 	beq	r2,zero,4053648 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 40535d8:	d0a06117 	ldw	r2,-32380(gp)
 40535dc:	10800c43 	ldbu	r2,49(r2)
 40535e0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 40535e4:	d0a06117 	ldw	r2,-32380(gp)
 40535e8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 40535ec:	e0bff704 	addi	r2,fp,-36
 40535f0:	1009883a 	mov	r4,r2
 40535f4:	4053f000 	call	4053f00 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 40535f8:	d0a06117 	ldw	r2,-32380(gp)
 40535fc:	10000c05 	stb	zero,48(r2)
 4053600:	e0bfe517 	ldw	r2,-108(fp)
 4053604:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4053608:	e0bff217 	ldw	r2,-56(fp)
 405360c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 4053610:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 4053614:	e0bff303 	ldbu	r2,-52(fp)
 4053618:	108000a0 	cmpeqi	r2,r2,2
 405361c:	10000426 	beq	r2,zero,4053630 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 4053620:	e0800217 	ldw	r2,8(fp)
 4053624:	00c00384 	movi	r3,14
 4053628:	10c00005 	stb	r3,0(r2)
                 break;
 405362c:	00000406 	br	4053640 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 4053630:	e0800217 	ldw	r2,8(fp)
 4053634:	00c00284 	movi	r3,10
 4053638:	10c00005 	stb	r3,0(r2)
                 break;
 405363c:	0001883a 	nop
        }
        return (flags_rdy);
 4053640:	e0bfe80b 	ldhu	r2,-96(fp)
 4053644:	00002e06 	br	4053700 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 4053648:	d0a06117 	ldw	r2,-32380(gp)
 405364c:	10800b0b 	ldhu	r2,44(r2)
 4053650:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 4053654:	e0bfe403 	ldbu	r2,-112(fp)
 4053658:	10800058 	cmpnei	r2,r2,1
 405365c:	1000211e 	bne	r2,zero,40536e4 <OSFlagPend+0x588>
        switch (wait_type) {
 4053660:	e0bffe03 	ldbu	r2,-8(fp)
 4053664:	10001616 	blt	r2,zero,40536c0 <OSFlagPend+0x564>
 4053668:	10c00090 	cmplti	r3,r2,2
 405366c:	18000c1e 	bne	r3,zero,40536a0 <OSFlagPend+0x544>
 4053670:	10800108 	cmpgei	r2,r2,4
 4053674:	1000121e 	bne	r2,zero,40536c0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 4053678:	e0bffc17 	ldw	r2,-16(fp)
 405367c:	1080020b 	ldhu	r2,8(r2)
 4053680:	1007883a 	mov	r3,r2
 4053684:	e0bfe80b 	ldhu	r2,-96(fp)
 4053688:	0084303a 	nor	r2,zero,r2
 405368c:	1884703a 	and	r2,r3,r2
 4053690:	1007883a 	mov	r3,r2
 4053694:	e0bffc17 	ldw	r2,-16(fp)
 4053698:	10c0020d 	sth	r3,8(r2)
                 break;
 405369c:	00001106 	br	40536e4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 40536a0:	e0bffc17 	ldw	r2,-16(fp)
 40536a4:	10c0020b 	ldhu	r3,8(r2)
 40536a8:	e0bfe80b 	ldhu	r2,-96(fp)
 40536ac:	1884b03a 	or	r2,r3,r2
 40536b0:	1007883a 	mov	r3,r2
 40536b4:	e0bffc17 	ldw	r2,-16(fp)
 40536b8:	10c0020d 	sth	r3,8(r2)
                 break;
 40536bc:	00000906 	br	40536e4 <OSFlagPend+0x588>
 40536c0:	e0bfe517 	ldw	r2,-108(fp)
 40536c4:	e0bff415 	stw	r2,-48(fp)
 40536c8:	e0bff417 	ldw	r2,-48(fp)
 40536cc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 40536d0:	e0800217 	ldw	r2,8(fp)
 40536d4:	00c01bc4 	movi	r3,111
 40536d8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 40536dc:	0005883a 	mov	r2,zero
 40536e0:	00000706 	br	4053700 <OSFlagPend+0x5a4>
 40536e4:	e0bfe517 	ldw	r2,-108(fp)
 40536e8:	e0bff515 	stw	r2,-44(fp)
 40536ec:	e0bff517 	ldw	r2,-44(fp)
 40536f0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 40536f4:	e0800217 	ldw	r2,8(fp)
 40536f8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 40536fc:	e0bfe80b 	ldhu	r2,-96(fp)
}
 4053700:	e037883a 	mov	sp,fp
 4053704:	dfc00117 	ldw	ra,4(sp)
 4053708:	df000017 	ldw	fp,0(sp)
 405370c:	dec00204 	addi	sp,sp,8
 4053710:	f800283a 	ret

04053714 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 4053714:	defffb04 	addi	sp,sp,-20
 4053718:	df000415 	stw	fp,16(sp)
 405371c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4053720:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4053724:	0005303a 	rdctl	r2,status
 4053728:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 405372c:	e0fffe17 	ldw	r3,-8(fp)
 4053730:	00bfff84 	movi	r2,-2
 4053734:	1884703a 	and	r2,r3,r2
 4053738:	1001703a 	wrctl	status,r2
  
  return context;
 405373c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 4053740:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 4053744:	d0a06117 	ldw	r2,-32380(gp)
 4053748:	10800b0b 	ldhu	r2,44(r2)
 405374c:	e0bffd0d 	sth	r2,-12(fp)
 4053750:	e0bffc17 	ldw	r2,-16(fp)
 4053754:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4053758:	e0bfff17 	ldw	r2,-4(fp)
 405375c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 4053760:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4053764:	e037883a 	mov	sp,fp
 4053768:	df000017 	ldw	fp,0(sp)
 405376c:	dec00104 	addi	sp,sp,4
 4053770:	f800283a 	ret

04053774 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 4053774:	deffef04 	addi	sp,sp,-68
 4053778:	dfc01015 	stw	ra,64(sp)
 405377c:	df000f15 	stw	fp,60(sp)
 4053780:	df000f04 	addi	fp,sp,60
 4053784:	e13ffc15 	stw	r4,-16(fp)
 4053788:	2807883a 	mov	r3,r5
 405378c:	3005883a 	mov	r2,r6
 4053790:	e1ffff15 	stw	r7,-4(fp)
 4053794:	e0fffd0d 	sth	r3,-12(fp)
 4053798:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 405379c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 40537a0:	e0bfff17 	ldw	r2,-4(fp)
 40537a4:	1000021e 	bne	r2,zero,40537b0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 40537a8:	0005883a 	mov	r2,zero
 40537ac:	0000d106 	br	4053af4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 40537b0:	e0bffc17 	ldw	r2,-16(fp)
 40537b4:	1000051e 	bne	r2,zero,40537cc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40537b8:	e0bfff17 	ldw	r2,-4(fp)
 40537bc:	00c01b84 	movi	r3,110
 40537c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40537c4:	0005883a 	mov	r2,zero
 40537c8:	0000ca06 	br	4053af4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 40537cc:	e0bffc17 	ldw	r2,-16(fp)
 40537d0:	10800003 	ldbu	r2,0(r2)
 40537d4:	10803fcc 	andi	r2,r2,255
 40537d8:	10800160 	cmpeqi	r2,r2,5
 40537dc:	1000051e 	bne	r2,zero,40537f4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 40537e0:	e0bfff17 	ldw	r2,-4(fp)
 40537e4:	00c00044 	movi	r3,1
 40537e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40537ec:	0005883a 	mov	r2,zero
 40537f0:	0000c006 	br	4053af4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40537f4:	0005303a 	rdctl	r2,status
 40537f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40537fc:	e0fffb17 	ldw	r3,-20(fp)
 4053800:	00bfff84 	movi	r2,-2
 4053804:	1884703a 	and	r2,r3,r2
 4053808:	1001703a 	wrctl	status,r2
  
  return context;
 405380c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4053810:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 4053814:	e0bffe03 	ldbu	r2,-8(fp)
 4053818:	10000326 	beq	r2,zero,4053828 <OSFlagPost+0xb4>
 405381c:	10800060 	cmpeqi	r2,r2,1
 4053820:	10000b1e 	bne	r2,zero,4053850 <OSFlagPost+0xdc>
 4053824:	00001206 	br	4053870 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 4053828:	e0bffc17 	ldw	r2,-16(fp)
 405382c:	1080020b 	ldhu	r2,8(r2)
 4053830:	1007883a 	mov	r3,r2
 4053834:	e0bffd0b 	ldhu	r2,-12(fp)
 4053838:	0084303a 	nor	r2,zero,r2
 405383c:	1884703a 	and	r2,r3,r2
 4053840:	1007883a 	mov	r3,r2
 4053844:	e0bffc17 	ldw	r2,-16(fp)
 4053848:	10c0020d 	sth	r3,8(r2)
             break;
 405384c:	00001106 	br	4053894 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 4053850:	e0bffc17 	ldw	r2,-16(fp)
 4053854:	10c0020b 	ldhu	r3,8(r2)
 4053858:	e0bffd0b 	ldhu	r2,-12(fp)
 405385c:	1884b03a 	or	r2,r3,r2
 4053860:	1007883a 	mov	r3,r2
 4053864:	e0bffc17 	ldw	r2,-16(fp)
 4053868:	10c0020d 	sth	r3,8(r2)
             break;
 405386c:	00000906 	br	4053894 <OSFlagPost+0x120>
 4053870:	e0bff317 	ldw	r2,-52(fp)
 4053874:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4053878:	e0bff417 	ldw	r2,-48(fp)
 405387c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 4053880:	e0bfff17 	ldw	r2,-4(fp)
 4053884:	00c01c44 	movi	r3,113
 4053888:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 405388c:	0005883a 	mov	r2,zero
 4053890:	00009806 	br	4053af4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 4053894:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4053898:	e0bffc17 	ldw	r2,-16(fp)
 405389c:	10800117 	ldw	r2,4(r2)
 40538a0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 40538a4:	00007706 	br	4053a84 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 40538a8:	e0bff117 	ldw	r2,-60(fp)
 40538ac:	10800483 	ldbu	r2,18(r2)
 40538b0:	10803fcc 	andi	r2,r2,255
 40538b4:	10c00060 	cmpeqi	r3,r2,1
 40538b8:	18004a1e 	bne	r3,zero,40539e4 <OSFlagPost+0x270>
 40538bc:	10c00088 	cmpgei	r3,r2,2
 40538c0:	1800021e 	bne	r3,zero,40538cc <OSFlagPost+0x158>
 40538c4:	10002f26 	beq	r2,zero,4053984 <OSFlagPost+0x210>
 40538c8:	00005b06 	br	4053a38 <OSFlagPost+0x2c4>
 40538cc:	10c000a0 	cmpeqi	r3,r2,2
 40538d0:	1800031e 	bne	r3,zero,40538e0 <OSFlagPost+0x16c>
 40538d4:	108000e0 	cmpeqi	r2,r2,3
 40538d8:	1000171e 	bne	r2,zero,4053938 <OSFlagPost+0x1c4>
 40538dc:	00005606 	br	4053a38 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40538e0:	e0bffc17 	ldw	r2,-16(fp)
 40538e4:	10c0020b 	ldhu	r3,8(r2)
 40538e8:	e0bff117 	ldw	r2,-60(fp)
 40538ec:	1080040b 	ldhu	r2,16(r2)
 40538f0:	1884703a 	and	r2,r3,r2
 40538f4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 40538f8:	e0bff117 	ldw	r2,-60(fp)
 40538fc:	1080040b 	ldhu	r2,16(r2)
 4053900:	10ffffcc 	andi	r3,r2,65535
 4053904:	e0bff60b 	ldhu	r2,-40(fp)
 4053908:	1880541e 	bne	r3,r2,4053a5c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 405390c:	e0bff60b 	ldhu	r2,-40(fp)
 4053910:	100b883a 	mov	r5,r2
 4053914:	e13ff117 	ldw	r4,-60(fp)
 4053918:	4053e0c0 	call	4053e0c <OS_FlagTaskRdy>
 405391c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4053920:	e0bff683 	ldbu	r2,-38(fp)
 4053924:	10800058 	cmpnei	r2,r2,1
 4053928:	10004c1e 	bne	r2,zero,4053a5c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 405392c:	00800044 	movi	r2,1
 4053930:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4053934:	00004906 	br	4053a5c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4053938:	e0bffc17 	ldw	r2,-16(fp)
 405393c:	10c0020b 	ldhu	r3,8(r2)
 4053940:	e0bff117 	ldw	r2,-60(fp)
 4053944:	1080040b 	ldhu	r2,16(r2)
 4053948:	1884703a 	and	r2,r3,r2
 405394c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4053950:	e0bff60b 	ldhu	r2,-40(fp)
 4053954:	10004326 	beq	r2,zero,4053a64 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4053958:	e0bff60b 	ldhu	r2,-40(fp)
 405395c:	100b883a 	mov	r5,r2
 4053960:	e13ff117 	ldw	r4,-60(fp)
 4053964:	4053e0c0 	call	4053e0c <OS_FlagTaskRdy>
 4053968:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 405396c:	e0bff683 	ldbu	r2,-38(fp)
 4053970:	10800058 	cmpnei	r2,r2,1
 4053974:	10003b1e 	bne	r2,zero,4053a64 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4053978:	00800044 	movi	r2,1
 405397c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4053980:	00003806 	br	4053a64 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4053984:	e0bffc17 	ldw	r2,-16(fp)
 4053988:	1080020b 	ldhu	r2,8(r2)
 405398c:	0084303a 	nor	r2,zero,r2
 4053990:	1007883a 	mov	r3,r2
 4053994:	e0bff117 	ldw	r2,-60(fp)
 4053998:	1080040b 	ldhu	r2,16(r2)
 405399c:	1884703a 	and	r2,r3,r2
 40539a0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 40539a4:	e0bff117 	ldw	r2,-60(fp)
 40539a8:	1080040b 	ldhu	r2,16(r2)
 40539ac:	10ffffcc 	andi	r3,r2,65535
 40539b0:	e0bff60b 	ldhu	r2,-40(fp)
 40539b4:	18802d1e 	bne	r3,r2,4053a6c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40539b8:	e0bff60b 	ldhu	r2,-40(fp)
 40539bc:	100b883a 	mov	r5,r2
 40539c0:	e13ff117 	ldw	r4,-60(fp)
 40539c4:	4053e0c0 	call	4053e0c <OS_FlagTaskRdy>
 40539c8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 40539cc:	e0bff683 	ldbu	r2,-38(fp)
 40539d0:	10800058 	cmpnei	r2,r2,1
 40539d4:	1000251e 	bne	r2,zero,4053a6c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 40539d8:	00800044 	movi	r2,1
 40539dc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 40539e0:	00002206 	br	4053a6c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40539e4:	e0bffc17 	ldw	r2,-16(fp)
 40539e8:	1080020b 	ldhu	r2,8(r2)
 40539ec:	0084303a 	nor	r2,zero,r2
 40539f0:	1007883a 	mov	r3,r2
 40539f4:	e0bff117 	ldw	r2,-60(fp)
 40539f8:	1080040b 	ldhu	r2,16(r2)
 40539fc:	1884703a 	and	r2,r3,r2
 4053a00:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4053a04:	e0bff60b 	ldhu	r2,-40(fp)
 4053a08:	10001a26 	beq	r2,zero,4053a74 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4053a0c:	e0bff60b 	ldhu	r2,-40(fp)
 4053a10:	100b883a 	mov	r5,r2
 4053a14:	e13ff117 	ldw	r4,-60(fp)
 4053a18:	4053e0c0 	call	4053e0c <OS_FlagTaskRdy>
 4053a1c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4053a20:	e0bff683 	ldbu	r2,-38(fp)
 4053a24:	10800058 	cmpnei	r2,r2,1
 4053a28:	1000121e 	bne	r2,zero,4053a74 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4053a2c:	00800044 	movi	r2,1
 4053a30:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4053a34:	00000f06 	br	4053a74 <OSFlagPost+0x300>
 4053a38:	e0bff317 	ldw	r2,-52(fp)
 4053a3c:	e0bff515 	stw	r2,-44(fp)
 4053a40:	e0bff517 	ldw	r2,-44(fp)
 4053a44:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4053a48:	e0bfff17 	ldw	r2,-4(fp)
 4053a4c:	00c01bc4 	movi	r3,111
 4053a50:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4053a54:	0005883a 	mov	r2,zero
 4053a58:	00002606 	br	4053af4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4053a5c:	0001883a 	nop
 4053a60:	00000506 	br	4053a78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4053a64:	0001883a 	nop
 4053a68:	00000306 	br	4053a78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4053a6c:	0001883a 	nop
 4053a70:	00000106 	br	4053a78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4053a74:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 4053a78:	e0bff117 	ldw	r2,-60(fp)
 4053a7c:	10800017 	ldw	r2,0(r2)
 4053a80:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4053a84:	e0bff117 	ldw	r2,-60(fp)
 4053a88:	103f871e 	bne	r2,zero,40538a8 <__flash_rwdata_start+0xffff9178>
 4053a8c:	e0bff317 	ldw	r2,-52(fp)
 4053a90:	e0bff715 	stw	r2,-36(fp)
 4053a94:	e0bff717 	ldw	r2,-36(fp)
 4053a98:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 4053a9c:	e0bff203 	ldbu	r2,-56(fp)
 4053aa0:	10800058 	cmpnei	r2,r2,1
 4053aa4:	1000011e 	bne	r2,zero,4053aac <OSFlagPost+0x338>
        OS_Sched();
 4053aa8:	405202c0 	call	405202c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4053aac:	0005303a 	rdctl	r2,status
 4053ab0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4053ab4:	e0fffa17 	ldw	r3,-24(fp)
 4053ab8:	00bfff84 	movi	r2,-2
 4053abc:	1884703a 	and	r2,r3,r2
 4053ac0:	1001703a 	wrctl	status,r2
  
  return context;
 4053ac4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4053ac8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 4053acc:	e0bffc17 	ldw	r2,-16(fp)
 4053ad0:	1080020b 	ldhu	r2,8(r2)
 4053ad4:	e0bff90d 	sth	r2,-28(fp)
 4053ad8:	e0bff317 	ldw	r2,-52(fp)
 4053adc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4053ae0:	e0bff817 	ldw	r2,-32(fp)
 4053ae4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 4053ae8:	e0bfff17 	ldw	r2,-4(fp)
 4053aec:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 4053af0:	e0bff90b 	ldhu	r2,-28(fp)
}
 4053af4:	e037883a 	mov	sp,fp
 4053af8:	dfc00117 	ldw	ra,4(sp)
 4053afc:	df000017 	ldw	fp,0(sp)
 4053b00:	dec00204 	addi	sp,sp,8
 4053b04:	f800283a 	ret

04053b08 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 4053b08:	defff904 	addi	sp,sp,-28
 4053b0c:	df000615 	stw	fp,24(sp)
 4053b10:	df000604 	addi	fp,sp,24
 4053b14:	e13ffe15 	stw	r4,-8(fp)
 4053b18:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 4053b1c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 4053b20:	e0bfff17 	ldw	r2,-4(fp)
 4053b24:	1000021e 	bne	r2,zero,4053b30 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 4053b28:	0005883a 	mov	r2,zero
 4053b2c:	00002306 	br	4053bbc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 4053b30:	e0bffe17 	ldw	r2,-8(fp)
 4053b34:	1000051e 	bne	r2,zero,4053b4c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4053b38:	e0bfff17 	ldw	r2,-4(fp)
 4053b3c:	00c01b84 	movi	r3,110
 4053b40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4053b44:	0005883a 	mov	r2,zero
 4053b48:	00001c06 	br	4053bbc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 4053b4c:	e0bffe17 	ldw	r2,-8(fp)
 4053b50:	10800003 	ldbu	r2,0(r2)
 4053b54:	10803fcc 	andi	r2,r2,255
 4053b58:	10800160 	cmpeqi	r2,r2,5
 4053b5c:	1000051e 	bne	r2,zero,4053b74 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4053b60:	e0bfff17 	ldw	r2,-4(fp)
 4053b64:	00c00044 	movi	r3,1
 4053b68:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4053b6c:	0005883a 	mov	r2,zero
 4053b70:	00001206 	br	4053bbc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4053b74:	0005303a 	rdctl	r2,status
 4053b78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4053b7c:	e0fffc17 	ldw	r3,-16(fp)
 4053b80:	00bfff84 	movi	r2,-2
 4053b84:	1884703a 	and	r2,r3,r2
 4053b88:	1001703a 	wrctl	status,r2
  
  return context;
 4053b8c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4053b90:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 4053b94:	e0bffe17 	ldw	r2,-8(fp)
 4053b98:	1080020b 	ldhu	r2,8(r2)
 4053b9c:	e0bffb0d 	sth	r2,-20(fp)
 4053ba0:	e0bffa17 	ldw	r2,-24(fp)
 4053ba4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4053ba8:	e0bffd17 	ldw	r2,-12(fp)
 4053bac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4053bb0:	e0bfff17 	ldw	r2,-4(fp)
 4053bb4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 4053bb8:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4053bbc:	e037883a 	mov	sp,fp
 4053bc0:	df000017 	ldw	fp,0(sp)
 4053bc4:	dec00104 	addi	sp,sp,4
 4053bc8:	f800283a 	ret

04053bcc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 4053bcc:	defff804 	addi	sp,sp,-32
 4053bd0:	df000715 	stw	fp,28(sp)
 4053bd4:	df000704 	addi	fp,sp,28
 4053bd8:	e13ffb15 	stw	r4,-20(fp)
 4053bdc:	e17ffc15 	stw	r5,-16(fp)
 4053be0:	3009883a 	mov	r4,r6
 4053be4:	3807883a 	mov	r3,r7
 4053be8:	e0800117 	ldw	r2,4(fp)
 4053bec:	e13ffd0d 	sth	r4,-12(fp)
 4053bf0:	e0fffe05 	stb	r3,-8(fp)
 4053bf4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 4053bf8:	d0a06117 	ldw	r2,-32380(gp)
 4053bfc:	d0e06117 	ldw	r3,-32380(gp)
 4053c00:	18c00c03 	ldbu	r3,48(r3)
 4053c04:	18c00814 	ori	r3,r3,32
 4053c08:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 4053c0c:	d0a06117 	ldw	r2,-32380(gp)
 4053c10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 4053c14:	d0a06117 	ldw	r2,-32380(gp)
 4053c18:	e0ffff0b 	ldhu	r3,-4(fp)
 4053c1c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 4053c20:	d0a06117 	ldw	r2,-32380(gp)
 4053c24:	e0fffc17 	ldw	r3,-16(fp)
 4053c28:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 4053c2c:	e0bffc17 	ldw	r2,-16(fp)
 4053c30:	e0fffd0b 	ldhu	r3,-12(fp)
 4053c34:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 4053c38:	e0bffc17 	ldw	r2,-16(fp)
 4053c3c:	e0fffe03 	ldbu	r3,-8(fp)
 4053c40:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 4053c44:	d0e06117 	ldw	r3,-32380(gp)
 4053c48:	e0bffc17 	ldw	r2,-16(fp)
 4053c4c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 4053c50:	e0bffb17 	ldw	r2,-20(fp)
 4053c54:	10c00117 	ldw	r3,4(r2)
 4053c58:	e0bffc17 	ldw	r2,-16(fp)
 4053c5c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 4053c60:	e0bffc17 	ldw	r2,-16(fp)
 4053c64:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 4053c68:	e0bffc17 	ldw	r2,-16(fp)
 4053c6c:	e0fffb17 	ldw	r3,-20(fp)
 4053c70:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4053c74:	e0bffb17 	ldw	r2,-20(fp)
 4053c78:	10800117 	ldw	r2,4(r2)
 4053c7c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 4053c80:	e0bff917 	ldw	r2,-28(fp)
 4053c84:	10000326 	beq	r2,zero,4053c94 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 4053c88:	e0bff917 	ldw	r2,-28(fp)
 4053c8c:	e0fffc17 	ldw	r3,-16(fp)
 4053c90:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 4053c94:	e0bffb17 	ldw	r2,-20(fp)
 4053c98:	e0fffc17 	ldw	r3,-16(fp)
 4053c9c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 4053ca0:	d0a06117 	ldw	r2,-32380(gp)
 4053ca4:	10800d03 	ldbu	r2,52(r2)
 4053ca8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 4053cac:	e0fffa03 	ldbu	r3,-24(fp)
 4053cb0:	e13ffa03 	ldbu	r4,-24(fp)
 4053cb4:	d0a05e44 	addi	r2,gp,-32391
 4053cb8:	2085883a 	add	r2,r4,r2
 4053cbc:	10800003 	ldbu	r2,0(r2)
 4053cc0:	1009883a 	mov	r4,r2
 4053cc4:	d0a06117 	ldw	r2,-32380(gp)
 4053cc8:	10800d43 	ldbu	r2,53(r2)
 4053ccc:	0084303a 	nor	r2,zero,r2
 4053cd0:	2084703a 	and	r2,r4,r2
 4053cd4:	1009883a 	mov	r4,r2
 4053cd8:	d0a05e44 	addi	r2,gp,-32391
 4053cdc:	1885883a 	add	r2,r3,r2
 4053ce0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 4053ce4:	e0fffa03 	ldbu	r3,-24(fp)
 4053ce8:	d0a05e44 	addi	r2,gp,-32391
 4053cec:	1885883a 	add	r2,r3,r2
 4053cf0:	10800003 	ldbu	r2,0(r2)
 4053cf4:	10803fcc 	andi	r2,r2,255
 4053cf8:	1000071e 	bne	r2,zero,4053d18 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4053cfc:	d0a06117 	ldw	r2,-32380(gp)
 4053d00:	10800d83 	ldbu	r2,54(r2)
 4053d04:	0084303a 	nor	r2,zero,r2
 4053d08:	1007883a 	mov	r3,r2
 4053d0c:	d0a05e03 	ldbu	r2,-32392(gp)
 4053d10:	1884703a 	and	r2,r3,r2
 4053d14:	d0a05e05 	stb	r2,-32392(gp)
    }
}
 4053d18:	0001883a 	nop
 4053d1c:	e037883a 	mov	sp,fp
 4053d20:	df000017 	ldw	fp,0(sp)
 4053d24:	dec00104 	addi	sp,sp,4
 4053d28:	f800283a 	ret

04053d2c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 4053d2c:	defffb04 	addi	sp,sp,-20
 4053d30:	dfc00415 	stw	ra,16(sp)
 4053d34:	df000315 	stw	fp,12(sp)
 4053d38:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 4053d3c:	0140dc04 	movi	r5,880
 4053d40:	01008074 	movhi	r4,513
 4053d44:	21091904 	addi	r4,r4,9316
 4053d48:	4051f700 	call	4051f70 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 4053d4c:	00808074 	movhi	r2,513
 4053d50:	10891904 	addi	r2,r2,9316
 4053d54:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 4053d58:	00808074 	movhi	r2,513
 4053d5c:	10892404 	addi	r2,r2,9360
 4053d60:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 4053d64:	e03ffd0d 	sth	zero,-12(fp)
 4053d68:	00001306 	br	4053db8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4053d6c:	e0bffe17 	ldw	r2,-8(fp)
 4053d70:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 4053d74:	e0bffe17 	ldw	r2,-8(fp)
 4053d78:	e0ffff17 	ldw	r3,-4(fp)
 4053d7c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 4053d80:	e0bffe17 	ldw	r2,-8(fp)
 4053d84:	00c00fc4 	movi	r3,63
 4053d88:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4053d8c:	e0bffe17 	ldw	r2,-8(fp)
 4053d90:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 4053d94:	e0bffe17 	ldw	r2,-8(fp)
 4053d98:	10800b04 	addi	r2,r2,44
 4053d9c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 4053da0:	e0bfff17 	ldw	r2,-4(fp)
 4053da4:	10800b04 	addi	r2,r2,44
 4053da8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 4053dac:	e0bffd0b 	ldhu	r2,-12(fp)
 4053db0:	10800044 	addi	r2,r2,1
 4053db4:	e0bffd0d 	sth	r2,-12(fp)
 4053db8:	e0bffd0b 	ldhu	r2,-12(fp)
 4053dbc:	108004f0 	cmpltui	r2,r2,19
 4053dc0:	103fea1e 	bne	r2,zero,4053d6c <__flash_rwdata_start+0xffff963c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4053dc4:	e0bffe17 	ldw	r2,-8(fp)
 4053dc8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 4053dcc:	e0bffe17 	ldw	r2,-8(fp)
 4053dd0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 4053dd4:	e0bffe17 	ldw	r2,-8(fp)
 4053dd8:	00c00fc4 	movi	r3,63
 4053ddc:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4053de0:	e0bffe17 	ldw	r2,-8(fp)
 4053de4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 4053de8:	00808074 	movhi	r2,513
 4053dec:	10891904 	addi	r2,r2,9316
 4053df0:	d0a06315 	stw	r2,-32372(gp)
#endif
}
 4053df4:	0001883a 	nop
 4053df8:	e037883a 	mov	sp,fp
 4053dfc:	dfc00117 	ldw	ra,4(sp)
 4053e00:	df000017 	ldw	fp,0(sp)
 4053e04:	dec00204 	addi	sp,sp,8
 4053e08:	f800283a 	ret

04053e0c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 4053e0c:	defffa04 	addi	sp,sp,-24
 4053e10:	dfc00515 	stw	ra,20(sp)
 4053e14:	df000415 	stw	fp,16(sp)
 4053e18:	df000404 	addi	fp,sp,16
 4053e1c:	e13ffe15 	stw	r4,-8(fp)
 4053e20:	2805883a 	mov	r2,r5
 4053e24:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 4053e28:	e0bffe17 	ldw	r2,-8(fp)
 4053e2c:	10800217 	ldw	r2,8(r2)
 4053e30:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 4053e34:	e0bffd17 	ldw	r2,-12(fp)
 4053e38:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 4053e3c:	e0bffd17 	ldw	r2,-12(fp)
 4053e40:	e0ffff0b 	ldhu	r3,-4(fp)
 4053e44:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 4053e48:	e0bffd17 	ldw	r2,-12(fp)
 4053e4c:	10c00c03 	ldbu	r3,48(r2)
 4053e50:	00bff7c4 	movi	r2,-33
 4053e54:	1884703a 	and	r2,r3,r2
 4053e58:	1007883a 	mov	r3,r2
 4053e5c:	e0bffd17 	ldw	r2,-12(fp)
 4053e60:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 4053e64:	e0bffd17 	ldw	r2,-12(fp)
 4053e68:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 4053e6c:	e0bffd17 	ldw	r2,-12(fp)
 4053e70:	10800c03 	ldbu	r2,48(r2)
 4053e74:	10803fcc 	andi	r2,r2,255
 4053e78:	1000181e 	bne	r2,zero,4053edc <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 4053e7c:	e0bffd17 	ldw	r2,-12(fp)
 4053e80:	10c00d83 	ldbu	r3,54(r2)
 4053e84:	d0a05e03 	ldbu	r2,-32392(gp)
 4053e88:	1884b03a 	or	r2,r3,r2
 4053e8c:	d0a05e05 	stb	r2,-32392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4053e90:	e0bffd17 	ldw	r2,-12(fp)
 4053e94:	10800d03 	ldbu	r2,52(r2)
 4053e98:	10c03fcc 	andi	r3,r2,255
 4053e9c:	e0bffd17 	ldw	r2,-12(fp)
 4053ea0:	10800d03 	ldbu	r2,52(r2)
 4053ea4:	11003fcc 	andi	r4,r2,255
 4053ea8:	d0a05e44 	addi	r2,gp,-32391
 4053eac:	2085883a 	add	r2,r4,r2
 4053eb0:	11000003 	ldbu	r4,0(r2)
 4053eb4:	e0bffd17 	ldw	r2,-12(fp)
 4053eb8:	10800d43 	ldbu	r2,53(r2)
 4053ebc:	2084b03a 	or	r2,r4,r2
 4053ec0:	1009883a 	mov	r4,r2
 4053ec4:	d0a05e44 	addi	r2,gp,-32391
 4053ec8:	1885883a 	add	r2,r3,r2
 4053ecc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 4053ed0:	00800044 	movi	r2,1
 4053ed4:	e0bffc05 	stb	r2,-16(fp)
 4053ed8:	00000106 	br	4053ee0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 4053edc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 4053ee0:	e13ffe17 	ldw	r4,-8(fp)
 4053ee4:	4053f000 	call	4053f00 <OS_FlagUnlink>
    return (sched);
 4053ee8:	e0bffc03 	ldbu	r2,-16(fp)
}
 4053eec:	e037883a 	mov	sp,fp
 4053ef0:	dfc00117 	ldw	ra,4(sp)
 4053ef4:	df000017 	ldw	fp,0(sp)
 4053ef8:	dec00204 	addi	sp,sp,8
 4053efc:	f800283a 	ret

04053f00 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 4053f00:	defffa04 	addi	sp,sp,-24
 4053f04:	df000515 	stw	fp,20(sp)
 4053f08:	df000504 	addi	fp,sp,20
 4053f0c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 4053f10:	e0bfff17 	ldw	r2,-4(fp)
 4053f14:	10800117 	ldw	r2,4(r2)
 4053f18:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4053f1c:	e0bfff17 	ldw	r2,-4(fp)
 4053f20:	10800017 	ldw	r2,0(r2)
 4053f24:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 4053f28:	e0bffb17 	ldw	r2,-20(fp)
 4053f2c:	10000b1e 	bne	r2,zero,4053f5c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 4053f30:	e0bfff17 	ldw	r2,-4(fp)
 4053f34:	10800317 	ldw	r2,12(r2)
 4053f38:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 4053f3c:	e0bffd17 	ldw	r2,-12(fp)
 4053f40:	e0fffc17 	ldw	r3,-16(fp)
 4053f44:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 4053f48:	e0bffc17 	ldw	r2,-16(fp)
 4053f4c:	10000b26 	beq	r2,zero,4053f7c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 4053f50:	e0bffc17 	ldw	r2,-16(fp)
 4053f54:	10000115 	stw	zero,4(r2)
 4053f58:	00000806 	br	4053f7c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 4053f5c:	e0bffb17 	ldw	r2,-20(fp)
 4053f60:	e0fffc17 	ldw	r3,-16(fp)
 4053f64:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 4053f68:	e0bffc17 	ldw	r2,-16(fp)
 4053f6c:	10000326 	beq	r2,zero,4053f7c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 4053f70:	e0bffc17 	ldw	r2,-16(fp)
 4053f74:	e0fffb17 	ldw	r3,-20(fp)
 4053f78:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 4053f7c:	e0bfff17 	ldw	r2,-4(fp)
 4053f80:	10800217 	ldw	r2,8(r2)
 4053f84:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 4053f88:	e0bffe17 	ldw	r2,-8(fp)
 4053f8c:	10000a15 	stw	zero,40(r2)
#endif
}
 4053f90:	0001883a 	nop
 4053f94:	e037883a 	mov	sp,fp
 4053f98:	df000017 	ldw	fp,0(sp)
 4053f9c:	dec00104 	addi	sp,sp,4
 4053fa0:	f800283a 	ret

04053fa4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 4053fa4:	defff404 	addi	sp,sp,-48
 4053fa8:	df000b15 	stw	fp,44(sp)
 4053fac:	df000b04 	addi	fp,sp,44
 4053fb0:	e13ffc15 	stw	r4,-16(fp)
 4053fb4:	e17ffd15 	stw	r5,-12(fp)
 4053fb8:	e1bffe15 	stw	r6,-8(fp)
 4053fbc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4053fc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4053fc4:	e0bfff17 	ldw	r2,-4(fp)
 4053fc8:	1000021e 	bne	r2,zero,4053fd4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 4053fcc:	0005883a 	mov	r2,zero
 4053fd0:	00006506 	br	4054168 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 4053fd4:	e0bffc17 	ldw	r2,-16(fp)
 4053fd8:	1000051e 	bne	r2,zero,4053ff0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4053fdc:	e0bfff17 	ldw	r2,-4(fp)
 4053fe0:	00c01884 	movi	r3,98
 4053fe4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4053fe8:	0005883a 	mov	r2,zero
 4053fec:	00005e06 	br	4054168 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 4053ff0:	e0bffc17 	ldw	r2,-16(fp)
 4053ff4:	108000cc 	andi	r2,r2,3
 4053ff8:	10000526 	beq	r2,zero,4054010 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4053ffc:	e0bfff17 	ldw	r2,-4(fp)
 4054000:	00c01884 	movi	r3,98
 4054004:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4054008:	0005883a 	mov	r2,zero
 405400c:	00005606 	br	4054168 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 4054010:	e0bffd17 	ldw	r2,-12(fp)
 4054014:	108000a8 	cmpgeui	r2,r2,2
 4054018:	1000051e 	bne	r2,zero,4054030 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 405401c:	e0bfff17 	ldw	r2,-4(fp)
 4054020:	00c016c4 	movi	r3,91
 4054024:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4054028:	0005883a 	mov	r2,zero
 405402c:	00004e06 	br	4054168 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 4054030:	e0bffe17 	ldw	r2,-8(fp)
 4054034:	10800128 	cmpgeui	r2,r2,4
 4054038:	1000051e 	bne	r2,zero,4054050 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 405403c:	e0bfff17 	ldw	r2,-4(fp)
 4054040:	00c01704 	movi	r3,92
 4054044:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4054048:	0005883a 	mov	r2,zero
 405404c:	00004606 	br	4054168 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4054050:	0005303a 	rdctl	r2,status
 4054054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4054058:	e0fffb17 	ldw	r3,-20(fp)
 405405c:	00bfff84 	movi	r2,-2
 4054060:	1884703a 	and	r2,r3,r2
 4054064:	1001703a 	wrctl	status,r2
  
  return context;
 4054068:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 405406c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 4054070:	d0a05b17 	ldw	r2,-32404(gp)
 4054074:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 4054078:	d0a05b17 	ldw	r2,-32404(gp)
 405407c:	10000326 	beq	r2,zero,405408c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 4054080:	d0a05b17 	ldw	r2,-32404(gp)
 4054084:	10800117 	ldw	r2,4(r2)
 4054088:	d0a05b15 	stw	r2,-32404(gp)
 405408c:	e0bff817 	ldw	r2,-32(fp)
 4054090:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4054094:	e0bff917 	ldw	r2,-28(fp)
 4054098:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 405409c:	e0bffa17 	ldw	r2,-24(fp)
 40540a0:	1000051e 	bne	r2,zero,40540b8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 40540a4:	e0bfff17 	ldw	r2,-4(fp)
 40540a8:	00c01684 	movi	r3,90
 40540ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40540b0:	0005883a 	mov	r2,zero
 40540b4:	00002c06 	br	4054168 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 40540b8:	e0bffc17 	ldw	r2,-16(fp)
 40540bc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 40540c0:	e0fffc17 	ldw	r3,-16(fp)
 40540c4:	e0bffe17 	ldw	r2,-8(fp)
 40540c8:	1885883a 	add	r2,r3,r2
 40540cc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 40540d0:	e03ff715 	stw	zero,-36(fp)
 40540d4:	00000c06 	br	4054108 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 40540d8:	e0bff617 	ldw	r2,-40(fp)
 40540dc:	e0fff517 	ldw	r3,-44(fp)
 40540e0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 40540e4:	e0bff517 	ldw	r2,-44(fp)
 40540e8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 40540ec:	e0fff517 	ldw	r3,-44(fp)
 40540f0:	e0bffe17 	ldw	r2,-8(fp)
 40540f4:	1885883a 	add	r2,r3,r2
 40540f8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 40540fc:	e0bff717 	ldw	r2,-36(fp)
 4054100:	10800044 	addi	r2,r2,1
 4054104:	e0bff715 	stw	r2,-36(fp)
 4054108:	e0bffd17 	ldw	r2,-12(fp)
 405410c:	10bfffc4 	addi	r2,r2,-1
 4054110:	e0fff717 	ldw	r3,-36(fp)
 4054114:	18bff036 	bltu	r3,r2,40540d8 <__flash_rwdata_start+0xffff99a8>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 4054118:	e0bff617 	ldw	r2,-40(fp)
 405411c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 4054120:	e0bffa17 	ldw	r2,-24(fp)
 4054124:	e0fffc17 	ldw	r3,-16(fp)
 4054128:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 405412c:	e0bffa17 	ldw	r2,-24(fp)
 4054130:	e0fffc17 	ldw	r3,-16(fp)
 4054134:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 4054138:	e0bffa17 	ldw	r2,-24(fp)
 405413c:	e0fffd17 	ldw	r3,-12(fp)
 4054140:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 4054144:	e0bffa17 	ldw	r2,-24(fp)
 4054148:	e0fffd17 	ldw	r3,-12(fp)
 405414c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 4054150:	e0bffa17 	ldw	r2,-24(fp)
 4054154:	e0fffe17 	ldw	r3,-8(fp)
 4054158:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 405415c:	e0bfff17 	ldw	r2,-4(fp)
 4054160:	10000005 	stb	zero,0(r2)
    return (pmem);
 4054164:	e0bffa17 	ldw	r2,-24(fp)
}
 4054168:	e037883a 	mov	sp,fp
 405416c:	df000017 	ldw	fp,0(sp)
 4054170:	dec00104 	addi	sp,sp,4
 4054174:	f800283a 	ret

04054178 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 4054178:	defff804 	addi	sp,sp,-32
 405417c:	df000715 	stw	fp,28(sp)
 4054180:	df000704 	addi	fp,sp,28
 4054184:	e13ffe15 	stw	r4,-8(fp)
 4054188:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 405418c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4054190:	e0bfff17 	ldw	r2,-4(fp)
 4054194:	1000021e 	bne	r2,zero,40541a0 <OSMemGet+0x28>
        return ((void *)0);
 4054198:	0005883a 	mov	r2,zero
 405419c:	00002e06 	br	4054258 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 40541a0:	e0bffe17 	ldw	r2,-8(fp)
 40541a4:	1000051e 	bne	r2,zero,40541bc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 40541a8:	e0bfff17 	ldw	r2,-4(fp)
 40541ac:	00c01804 	movi	r3,96
 40541b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40541b4:	0005883a 	mov	r2,zero
 40541b8:	00002706 	br	4054258 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40541bc:	0005303a 	rdctl	r2,status
 40541c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40541c4:	e0fffd17 	ldw	r3,-12(fp)
 40541c8:	00bfff84 	movi	r2,-2
 40541cc:	1884703a 	and	r2,r3,r2
 40541d0:	1001703a 	wrctl	status,r2
  
  return context;
 40541d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40541d8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 40541dc:	e0bffe17 	ldw	r2,-8(fp)
 40541e0:	10800417 	ldw	r2,16(r2)
 40541e4:	10001426 	beq	r2,zero,4054238 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 40541e8:	e0bffe17 	ldw	r2,-8(fp)
 40541ec:	10800117 	ldw	r2,4(r2)
 40541f0:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 40541f4:	e0bffb17 	ldw	r2,-20(fp)
 40541f8:	10c00017 	ldw	r3,0(r2)
 40541fc:	e0bffe17 	ldw	r2,-8(fp)
 4054200:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 4054204:	e0bffe17 	ldw	r2,-8(fp)
 4054208:	10800417 	ldw	r2,16(r2)
 405420c:	10ffffc4 	addi	r3,r2,-1
 4054210:	e0bffe17 	ldw	r2,-8(fp)
 4054214:	10c00415 	stw	r3,16(r2)
 4054218:	e0bff917 	ldw	r2,-28(fp)
 405421c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4054220:	e0bffa17 	ldw	r2,-24(fp)
 4054224:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 4054228:	e0bfff17 	ldw	r2,-4(fp)
 405422c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 4054230:	e0bffb17 	ldw	r2,-20(fp)
 4054234:	00000806 	br	4054258 <OSMemGet+0xe0>
 4054238:	e0bff917 	ldw	r2,-28(fp)
 405423c:	e0bffc15 	stw	r2,-16(fp)
 4054240:	e0bffc17 	ldw	r2,-16(fp)
 4054244:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 4054248:	e0bfff17 	ldw	r2,-4(fp)
 405424c:	00c01744 	movi	r3,93
 4054250:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 4054254:	0005883a 	mov	r2,zero
}
 4054258:	e037883a 	mov	sp,fp
 405425c:	df000017 	ldw	fp,0(sp)
 4054260:	dec00104 	addi	sp,sp,4
 4054264:	f800283a 	ret

04054268 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4054268:	defff704 	addi	sp,sp,-36
 405426c:	dfc00815 	stw	ra,32(sp)
 4054270:	df000715 	stw	fp,28(sp)
 4054274:	df000704 	addi	fp,sp,28
 4054278:	e13ffd15 	stw	r4,-12(fp)
 405427c:	e17ffe15 	stw	r5,-8(fp)
 4054280:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4054284:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4054288:	e0bfff17 	ldw	r2,-4(fp)
 405428c:	1000021e 	bne	r2,zero,4054298 <OSMemNameGet+0x30>
        return (0);
 4054290:	0005883a 	mov	r2,zero
 4054294:	00002b06 	br	4054344 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4054298:	e0bffd17 	ldw	r2,-12(fp)
 405429c:	1000051e 	bne	r2,zero,40542b4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 40542a0:	e0bfff17 	ldw	r2,-4(fp)
 40542a4:	00c01804 	movi	r3,96
 40542a8:	10c00005 	stb	r3,0(r2)
        return (0);
 40542ac:	0005883a 	mov	r2,zero
 40542b0:	00002406 	br	4054344 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 40542b4:	e0bffe17 	ldw	r2,-8(fp)
 40542b8:	1000051e 	bne	r2,zero,40542d0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 40542bc:	e0bfff17 	ldw	r2,-4(fp)
 40542c0:	00c00304 	movi	r3,12
 40542c4:	10c00005 	stb	r3,0(r2)
        return (0);
 40542c8:	0005883a 	mov	r2,zero
 40542cc:	00001d06 	br	4054344 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40542d0:	d0a06003 	ldbu	r2,-32384(gp)
 40542d4:	10803fcc 	andi	r2,r2,255
 40542d8:	10000526 	beq	r2,zero,40542f0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 40542dc:	e0bfff17 	ldw	r2,-4(fp)
 40542e0:	00c00444 	movi	r3,17
 40542e4:	10c00005 	stb	r3,0(r2)
        return (0);
 40542e8:	0005883a 	mov	r2,zero
 40542ec:	00001506 	br	4054344 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40542f0:	0005303a 	rdctl	r2,status
 40542f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40542f8:	e0fffb17 	ldw	r3,-20(fp)
 40542fc:	00bfff84 	movi	r2,-2
 4054300:	1884703a 	and	r2,r3,r2
 4054304:	1001703a 	wrctl	status,r2
  
  return context;
 4054308:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 405430c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 4054310:	e0bffd17 	ldw	r2,-12(fp)
 4054314:	10800504 	addi	r2,r2,20
 4054318:	100b883a 	mov	r5,r2
 405431c:	e13ffe17 	ldw	r4,-8(fp)
 4054320:	40521700 	call	4052170 <OS_StrCopy>
 4054324:	e0bffa05 	stb	r2,-24(fp)
 4054328:	e0bff917 	ldw	r2,-28(fp)
 405432c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4054330:	e0bffc17 	ldw	r2,-16(fp)
 4054334:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4054338:	e0bfff17 	ldw	r2,-4(fp)
 405433c:	10000005 	stb	zero,0(r2)
    return (len);
 4054340:	e0bffa03 	ldbu	r2,-24(fp)
}
 4054344:	e037883a 	mov	sp,fp
 4054348:	dfc00117 	ldw	ra,4(sp)
 405434c:	df000017 	ldw	fp,0(sp)
 4054350:	dec00204 	addi	sp,sp,8
 4054354:	f800283a 	ret

04054358 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4054358:	defff604 	addi	sp,sp,-40
 405435c:	dfc00915 	stw	ra,36(sp)
 4054360:	df000815 	stw	fp,32(sp)
 4054364:	df000804 	addi	fp,sp,32
 4054368:	e13ffd15 	stw	r4,-12(fp)
 405436c:	e17ffe15 	stw	r5,-8(fp)
 4054370:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4054374:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4054378:	e0bfff17 	ldw	r2,-4(fp)
 405437c:	10003526 	beq	r2,zero,4054454 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4054380:	e0bffd17 	ldw	r2,-12(fp)
 4054384:	1000041e 	bne	r2,zero,4054398 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4054388:	e0bfff17 	ldw	r2,-4(fp)
 405438c:	00c01804 	movi	r3,96
 4054390:	10c00005 	stb	r3,0(r2)
        return;
 4054394:	00003006 	br	4054458 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4054398:	e0bffe17 	ldw	r2,-8(fp)
 405439c:	1000041e 	bne	r2,zero,40543b0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 40543a0:	e0bfff17 	ldw	r2,-4(fp)
 40543a4:	00c00304 	movi	r3,12
 40543a8:	10c00005 	stb	r3,0(r2)
        return;
 40543ac:	00002a06 	br	4054458 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40543b0:	d0a06003 	ldbu	r2,-32384(gp)
 40543b4:	10803fcc 	andi	r2,r2,255
 40543b8:	10000426 	beq	r2,zero,40543cc <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 40543bc:	e0bfff17 	ldw	r2,-4(fp)
 40543c0:	00c00484 	movi	r3,18
 40543c4:	10c00005 	stb	r3,0(r2)
        return;
 40543c8:	00002306 	br	4054458 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40543cc:	0005303a 	rdctl	r2,status
 40543d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40543d4:	e0fffc17 	ldw	r3,-16(fp)
 40543d8:	00bfff84 	movi	r2,-2
 40543dc:	1884703a 	and	r2,r3,r2
 40543e0:	1001703a 	wrctl	status,r2
  
  return context;
 40543e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40543e8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 40543ec:	e13ffe17 	ldw	r4,-8(fp)
 40543f0:	40521e40 	call	40521e4 <OS_StrLen>
 40543f4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 40543f8:	e0bffa03 	ldbu	r2,-24(fp)
 40543fc:	10800830 	cmpltui	r2,r2,32
 4054400:	1000081e 	bne	r2,zero,4054424 <OSMemNameSet+0xcc>
 4054404:	e0bff817 	ldw	r2,-32(fp)
 4054408:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 405440c:	e0bff917 	ldw	r2,-28(fp)
 4054410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 4054414:	e0bfff17 	ldw	r2,-4(fp)
 4054418:	00c018c4 	movi	r3,99
 405441c:	10c00005 	stb	r3,0(r2)
        return;
 4054420:	00000d06 	br	4054458 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 4054424:	e0bffd17 	ldw	r2,-12(fp)
 4054428:	10800504 	addi	r2,r2,20
 405442c:	e17ffe17 	ldw	r5,-8(fp)
 4054430:	1009883a 	mov	r4,r2
 4054434:	40521700 	call	4052170 <OS_StrCopy>
 4054438:	e0bff817 	ldw	r2,-32(fp)
 405443c:	e0bffb15 	stw	r2,-20(fp)
 4054440:	e0bffb17 	ldw	r2,-20(fp)
 4054444:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4054448:	e0bfff17 	ldw	r2,-4(fp)
 405444c:	10000005 	stb	zero,0(r2)
 4054450:	00000106 	br	4054458 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4054454:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4054458:	e037883a 	mov	sp,fp
 405445c:	dfc00117 	ldw	ra,4(sp)
 4054460:	df000017 	ldw	fp,0(sp)
 4054464:	dec00204 	addi	sp,sp,8
 4054468:	f800283a 	ret

0405446c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 405446c:	defff904 	addi	sp,sp,-28
 4054470:	df000615 	stw	fp,24(sp)
 4054474:	df000604 	addi	fp,sp,24
 4054478:	e13ffe15 	stw	r4,-8(fp)
 405447c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4054480:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4054484:	e0bffe17 	ldw	r2,-8(fp)
 4054488:	1000021e 	bne	r2,zero,4054494 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 405448c:	00801804 	movi	r2,96
 4054490:	00002806 	br	4054534 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 4054494:	e0bfff17 	ldw	r2,-4(fp)
 4054498:	1000021e 	bne	r2,zero,40544a4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 405449c:	008017c4 	movi	r2,95
 40544a0:	00002406 	br	4054534 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40544a4:	0005303a 	rdctl	r2,status
 40544a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40544ac:	e0fffd17 	ldw	r3,-12(fp)
 40544b0:	00bfff84 	movi	r2,-2
 40544b4:	1884703a 	and	r2,r3,r2
 40544b8:	1001703a 	wrctl	status,r2
  
  return context;
 40544bc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40544c0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 40544c4:	e0bffe17 	ldw	r2,-8(fp)
 40544c8:	10c00417 	ldw	r3,16(r2)
 40544cc:	e0bffe17 	ldw	r2,-8(fp)
 40544d0:	10800317 	ldw	r2,12(r2)
 40544d4:	18800636 	bltu	r3,r2,40544f0 <OSMemPut+0x84>
 40544d8:	e0bffa17 	ldw	r2,-24(fp)
 40544dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40544e0:	e0bffb17 	ldw	r2,-20(fp)
 40544e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 40544e8:	00801784 	movi	r2,94
 40544ec:	00001106 	br	4054534 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 40544f0:	e0bffe17 	ldw	r2,-8(fp)
 40544f4:	10c00117 	ldw	r3,4(r2)
 40544f8:	e0bfff17 	ldw	r2,-4(fp)
 40544fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 4054500:	e0bffe17 	ldw	r2,-8(fp)
 4054504:	e0ffff17 	ldw	r3,-4(fp)
 4054508:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 405450c:	e0bffe17 	ldw	r2,-8(fp)
 4054510:	10800417 	ldw	r2,16(r2)
 4054514:	10c00044 	addi	r3,r2,1
 4054518:	e0bffe17 	ldw	r2,-8(fp)
 405451c:	10c00415 	stw	r3,16(r2)
 4054520:	e0bffa17 	ldw	r2,-24(fp)
 4054524:	e0bffc15 	stw	r2,-16(fp)
 4054528:	e0bffc17 	ldw	r2,-16(fp)
 405452c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 4054530:	0005883a 	mov	r2,zero
}
 4054534:	e037883a 	mov	sp,fp
 4054538:	df000017 	ldw	fp,0(sp)
 405453c:	dec00104 	addi	sp,sp,4
 4054540:	f800283a 	ret

04054544 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 4054544:	defffa04 	addi	sp,sp,-24
 4054548:	df000515 	stw	fp,20(sp)
 405454c:	df000504 	addi	fp,sp,20
 4054550:	e13ffe15 	stw	r4,-8(fp)
 4054554:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4054558:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 405455c:	e0bffe17 	ldw	r2,-8(fp)
 4054560:	1000021e 	bne	r2,zero,405456c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4054564:	00801804 	movi	r2,96
 4054568:	00002c06 	br	405461c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 405456c:	e0bfff17 	ldw	r2,-4(fp)
 4054570:	1000021e 	bne	r2,zero,405457c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 4054574:	00801844 	movi	r2,97
 4054578:	00002806 	br	405461c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405457c:	0005303a 	rdctl	r2,status
 4054580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4054584:	e0fffc17 	ldw	r3,-16(fp)
 4054588:	00bfff84 	movi	r2,-2
 405458c:	1884703a 	and	r2,r3,r2
 4054590:	1001703a 	wrctl	status,r2
  
  return context;
 4054594:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4054598:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 405459c:	e0bffe17 	ldw	r2,-8(fp)
 40545a0:	10c00017 	ldw	r3,0(r2)
 40545a4:	e0bfff17 	ldw	r2,-4(fp)
 40545a8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 40545ac:	e0bffe17 	ldw	r2,-8(fp)
 40545b0:	10c00117 	ldw	r3,4(r2)
 40545b4:	e0bfff17 	ldw	r2,-4(fp)
 40545b8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 40545bc:	e0bffe17 	ldw	r2,-8(fp)
 40545c0:	10c00217 	ldw	r3,8(r2)
 40545c4:	e0bfff17 	ldw	r2,-4(fp)
 40545c8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 40545cc:	e0bffe17 	ldw	r2,-8(fp)
 40545d0:	10c00317 	ldw	r3,12(r2)
 40545d4:	e0bfff17 	ldw	r2,-4(fp)
 40545d8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 40545dc:	e0bffe17 	ldw	r2,-8(fp)
 40545e0:	10c00417 	ldw	r3,16(r2)
 40545e4:	e0bfff17 	ldw	r2,-4(fp)
 40545e8:	10c00415 	stw	r3,16(r2)
 40545ec:	e0bffb17 	ldw	r2,-20(fp)
 40545f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40545f4:	e0bffd17 	ldw	r2,-12(fp)
 40545f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 40545fc:	e0bfff17 	ldw	r2,-4(fp)
 4054600:	10c00317 	ldw	r3,12(r2)
 4054604:	e0bfff17 	ldw	r2,-4(fp)
 4054608:	10800417 	ldw	r2,16(r2)
 405460c:	1887c83a 	sub	r3,r3,r2
 4054610:	e0bfff17 	ldw	r2,-4(fp)
 4054614:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 4054618:	0005883a 	mov	r2,zero
}
 405461c:	e037883a 	mov	sp,fp
 4054620:	df000017 	ldw	fp,0(sp)
 4054624:	dec00104 	addi	sp,sp,4
 4054628:	f800283a 	ret

0405462c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 405462c:	defffc04 	addi	sp,sp,-16
 4054630:	dfc00315 	stw	ra,12(sp)
 4054634:	df000215 	stw	fp,8(sp)
 4054638:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 405463c:	01430c04 	movi	r5,3120
 4054640:	01008074 	movhi	r4,513
 4054644:	2109f504 	addi	r4,r4,10196
 4054648:	4051f700 	call	4051f70 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 405464c:	00808074 	movhi	r2,513
 4054650:	1089f504 	addi	r2,r2,10196
 4054654:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4054658:	e03fff0d 	sth	zero,-4(fp)
 405465c:	00001306 	br	40546ac <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 4054660:	e0bfff0b 	ldhu	r2,-4(fp)
 4054664:	10800044 	addi	r2,r2,1
 4054668:	10c00d24 	muli	r3,r2,52
 405466c:	00808074 	movhi	r2,513
 4054670:	1089f504 	addi	r2,r2,10196
 4054674:	1887883a 	add	r3,r3,r2
 4054678:	e0bffe17 	ldw	r2,-8(fp)
 405467c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 4054680:	e0bffe17 	ldw	r2,-8(fp)
 4054684:	00c00fc4 	movi	r3,63
 4054688:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 405468c:	e0bffe17 	ldw	r2,-8(fp)
 4054690:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 4054694:	e0bffe17 	ldw	r2,-8(fp)
 4054698:	10800d04 	addi	r2,r2,52
 405469c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 40546a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40546a4:	10800044 	addi	r2,r2,1
 40546a8:	e0bfff0d 	sth	r2,-4(fp)
 40546ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40546b0:	10800ef0 	cmpltui	r2,r2,59
 40546b4:	103fea1e 	bne	r2,zero,4054660 <__flash_rwdata_start+0xffff9f30>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 40546b8:	e0bffe17 	ldw	r2,-8(fp)
 40546bc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 40546c0:	e0bffe17 	ldw	r2,-8(fp)
 40546c4:	00c00fc4 	movi	r3,63
 40546c8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 40546cc:	e0bffe17 	ldw	r2,-8(fp)
 40546d0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 40546d4:	00808074 	movhi	r2,513
 40546d8:	1089f504 	addi	r2,r2,10196
 40546dc:	d0a05b15 	stw	r2,-32404(gp)
#endif
}
 40546e0:	0001883a 	nop
 40546e4:	e037883a 	mov	sp,fp
 40546e8:	dfc00117 	ldw	ra,4(sp)
 40546ec:	df000017 	ldw	fp,0(sp)
 40546f0:	dec00204 	addi	sp,sp,8
 40546f4:	f800283a 	ret

040546f8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 40546f8:	defff804 	addi	sp,sp,-32
 40546fc:	df000715 	stw	fp,28(sp)
 4054700:	df000704 	addi	fp,sp,28
 4054704:	e13ffe15 	stw	r4,-8(fp)
 4054708:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 405470c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4054710:	e0bfff17 	ldw	r2,-4(fp)
 4054714:	1000021e 	bne	r2,zero,4054720 <OSQAccept+0x28>
        return ((void *)0);
 4054718:	0005883a 	mov	r2,zero
 405471c:	00004206 	br	4054828 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4054720:	e0bffe17 	ldw	r2,-8(fp)
 4054724:	1000051e 	bne	r2,zero,405473c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4054728:	e0bfff17 	ldw	r2,-4(fp)
 405472c:	00c00104 	movi	r3,4
 4054730:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4054734:	0005883a 	mov	r2,zero
 4054738:	00003b06 	br	4054828 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 405473c:	e0bffe17 	ldw	r2,-8(fp)
 4054740:	10800003 	ldbu	r2,0(r2)
 4054744:	10803fcc 	andi	r2,r2,255
 4054748:	108000a0 	cmpeqi	r2,r2,2
 405474c:	1000051e 	bne	r2,zero,4054764 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4054750:	e0bfff17 	ldw	r2,-4(fp)
 4054754:	00c00044 	movi	r3,1
 4054758:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 405475c:	0005883a 	mov	r2,zero
 4054760:	00003106 	br	4054828 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4054764:	0005303a 	rdctl	r2,status
 4054768:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 405476c:	e0fffd17 	ldw	r3,-12(fp)
 4054770:	00bfff84 	movi	r2,-2
 4054774:	1884703a 	and	r2,r3,r2
 4054778:	1001703a 	wrctl	status,r2
  
  return context;
 405477c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4054780:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4054784:	e0bffe17 	ldw	r2,-8(fp)
 4054788:	10800117 	ldw	r2,4(r2)
 405478c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4054790:	e0bffc17 	ldw	r2,-16(fp)
 4054794:	1080058b 	ldhu	r2,22(r2)
 4054798:	10bfffcc 	andi	r2,r2,65535
 405479c:	10001926 	beq	r2,zero,4054804 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 40547a0:	e0bffc17 	ldw	r2,-16(fp)
 40547a4:	10800417 	ldw	r2,16(r2)
 40547a8:	11000104 	addi	r4,r2,4
 40547ac:	e0fffc17 	ldw	r3,-16(fp)
 40547b0:	19000415 	stw	r4,16(r3)
 40547b4:	10800017 	ldw	r2,0(r2)
 40547b8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 40547bc:	e0bffc17 	ldw	r2,-16(fp)
 40547c0:	1080058b 	ldhu	r2,22(r2)
 40547c4:	10bfffc4 	addi	r2,r2,-1
 40547c8:	1007883a 	mov	r3,r2
 40547cc:	e0bffc17 	ldw	r2,-16(fp)
 40547d0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 40547d4:	e0bffc17 	ldw	r2,-16(fp)
 40547d8:	10c00417 	ldw	r3,16(r2)
 40547dc:	e0bffc17 	ldw	r2,-16(fp)
 40547e0:	10800217 	ldw	r2,8(r2)
 40547e4:	1880041e 	bne	r3,r2,40547f8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 40547e8:	e0bffc17 	ldw	r2,-16(fp)
 40547ec:	10c00117 	ldw	r3,4(r2)
 40547f0:	e0bffc17 	ldw	r2,-16(fp)
 40547f4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 40547f8:	e0bfff17 	ldw	r2,-4(fp)
 40547fc:	10000005 	stb	zero,0(r2)
 4054800:	00000406 	br	4054814 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4054804:	e0bfff17 	ldw	r2,-4(fp)
 4054808:	00c007c4 	movi	r3,31
 405480c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 4054810:	e03ff915 	stw	zero,-28(fp)
 4054814:	e0bffa17 	ldw	r2,-24(fp)
 4054818:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 405481c:	e0bffb17 	ldw	r2,-20(fp)
 4054820:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 4054824:	e0bff917 	ldw	r2,-28(fp)
}
 4054828:	e037883a 	mov	sp,fp
 405482c:	df000017 	ldw	fp,0(sp)
 4054830:	dec00104 	addi	sp,sp,4
 4054834:	f800283a 	ret

04054838 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 4054838:	defff404 	addi	sp,sp,-48
 405483c:	dfc00b15 	stw	ra,44(sp)
 4054840:	df000a15 	stw	fp,40(sp)
 4054844:	df000a04 	addi	fp,sp,40
 4054848:	e13ffe15 	stw	r4,-8(fp)
 405484c:	2805883a 	mov	r2,r5
 4054850:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4054854:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4054858:	d0a06003 	ldbu	r2,-32384(gp)
 405485c:	10803fcc 	andi	r2,r2,255
 4054860:	10000226 	beq	r2,zero,405486c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 4054864:	0005883a 	mov	r2,zero
 4054868:	00005906 	br	40549d0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405486c:	0005303a 	rdctl	r2,status
 4054870:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4054874:	e0fffd17 	ldw	r3,-12(fp)
 4054878:	00bfff84 	movi	r2,-2
 405487c:	1884703a 	and	r2,r3,r2
 4054880:	1001703a 	wrctl	status,r2
  
  return context;
 4054884:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4054888:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 405488c:	d0a05f17 	ldw	r2,-32388(gp)
 4054890:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4054894:	d0a05f17 	ldw	r2,-32388(gp)
 4054898:	10000326 	beq	r2,zero,40548a8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 405489c:	d0a05f17 	ldw	r2,-32388(gp)
 40548a0:	10800117 	ldw	r2,4(r2)
 40548a4:	d0a05f15 	stw	r2,-32388(gp)
 40548a8:	e0bff717 	ldw	r2,-36(fp)
 40548ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40548b0:	e0bff817 	ldw	r2,-32(fp)
 40548b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 40548b8:	e0bff617 	ldw	r2,-40(fp)
 40548bc:	10004326 	beq	r2,zero,40549cc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40548c0:	0005303a 	rdctl	r2,status
 40548c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40548c8:	e0fff917 	ldw	r3,-28(fp)
 40548cc:	00bfff84 	movi	r2,-2
 40548d0:	1884703a 	and	r2,r3,r2
 40548d4:	1001703a 	wrctl	status,r2
  
  return context;
 40548d8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 40548dc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 40548e0:	d0a05d17 	ldw	r2,-32396(gp)
 40548e4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 40548e8:	e0bffb17 	ldw	r2,-20(fp)
 40548ec:	10002d26 	beq	r2,zero,40549a4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 40548f0:	d0a05d17 	ldw	r2,-32396(gp)
 40548f4:	10800017 	ldw	r2,0(r2)
 40548f8:	d0a05d15 	stw	r2,-32396(gp)
 40548fc:	e0bff717 	ldw	r2,-36(fp)
 4054900:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4054904:	e0bffa17 	ldw	r2,-24(fp)
 4054908:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 405490c:	e0bffb17 	ldw	r2,-20(fp)
 4054910:	e0fffe17 	ldw	r3,-8(fp)
 4054914:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 4054918:	e0bfff0b 	ldhu	r2,-4(fp)
 405491c:	1085883a 	add	r2,r2,r2
 4054920:	1085883a 	add	r2,r2,r2
 4054924:	1007883a 	mov	r3,r2
 4054928:	e0bffe17 	ldw	r2,-8(fp)
 405492c:	10c7883a 	add	r3,r2,r3
 4054930:	e0bffb17 	ldw	r2,-20(fp)
 4054934:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 4054938:	e0bffb17 	ldw	r2,-20(fp)
 405493c:	e0fffe17 	ldw	r3,-8(fp)
 4054940:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 4054944:	e0bffb17 	ldw	r2,-20(fp)
 4054948:	e0fffe17 	ldw	r3,-8(fp)
 405494c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 4054950:	e0bffb17 	ldw	r2,-20(fp)
 4054954:	e0ffff0b 	ldhu	r3,-4(fp)
 4054958:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 405495c:	e0bffb17 	ldw	r2,-20(fp)
 4054960:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 4054964:	e0bff617 	ldw	r2,-40(fp)
 4054968:	00c00084 	movi	r3,2
 405496c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 4054970:	e0bff617 	ldw	r2,-40(fp)
 4054974:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 4054978:	e0bff617 	ldw	r2,-40(fp)
 405497c:	e0fffb17 	ldw	r3,-20(fp)
 4054980:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 4054984:	e0bff617 	ldw	r2,-40(fp)
 4054988:	00c00fc4 	movi	r3,63
 405498c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 4054990:	e0bff617 	ldw	r2,-40(fp)
 4054994:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 4054998:	e13ff617 	ldw	r4,-40(fp)
 405499c:	4051b900 	call	4051b90 <OS_EventWaitListInit>
 40549a0:	00000a06 	br	40549cc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 40549a4:	d0e05f17 	ldw	r3,-32388(gp)
 40549a8:	e0bff617 	ldw	r2,-40(fp)
 40549ac:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 40549b0:	e0bff617 	ldw	r2,-40(fp)
 40549b4:	d0a05f15 	stw	r2,-32388(gp)
 40549b8:	e0bff717 	ldw	r2,-36(fp)
 40549bc:	e0bffc15 	stw	r2,-16(fp)
 40549c0:	e0bffc17 	ldw	r2,-16(fp)
 40549c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 40549c8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 40549cc:	e0bff617 	ldw	r2,-40(fp)
}
 40549d0:	e037883a 	mov	sp,fp
 40549d4:	dfc00117 	ldw	ra,4(sp)
 40549d8:	df000017 	ldw	fp,0(sp)
 40549dc:	dec00204 	addi	sp,sp,8
 40549e0:	f800283a 	ret

040549e4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 40549e4:	defff204 	addi	sp,sp,-56
 40549e8:	dfc00d15 	stw	ra,52(sp)
 40549ec:	df000c15 	stw	fp,48(sp)
 40549f0:	df000c04 	addi	fp,sp,48
 40549f4:	e13ffd15 	stw	r4,-12(fp)
 40549f8:	2805883a 	mov	r2,r5
 40549fc:	e1bfff15 	stw	r6,-4(fp)
 4054a00:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4054a04:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4054a08:	e0bfff17 	ldw	r2,-4(fp)
 4054a0c:	1000021e 	bne	r2,zero,4054a18 <OSQDel+0x34>
        return (pevent);
 4054a10:	e0bffd17 	ldw	r2,-12(fp)
 4054a14:	00008e06 	br	4054c50 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4054a18:	e0bffd17 	ldw	r2,-12(fp)
 4054a1c:	1000051e 	bne	r2,zero,4054a34 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4054a20:	e0bfff17 	ldw	r2,-4(fp)
 4054a24:	00c00104 	movi	r3,4
 4054a28:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4054a2c:	e0bffd17 	ldw	r2,-12(fp)
 4054a30:	00008706 	br	4054c50 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4054a34:	e0bffd17 	ldw	r2,-12(fp)
 4054a38:	10800003 	ldbu	r2,0(r2)
 4054a3c:	10803fcc 	andi	r2,r2,255
 4054a40:	108000a0 	cmpeqi	r2,r2,2
 4054a44:	1000051e 	bne	r2,zero,4054a5c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4054a48:	e0bfff17 	ldw	r2,-4(fp)
 4054a4c:	00c00044 	movi	r3,1
 4054a50:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4054a54:	e0bffd17 	ldw	r2,-12(fp)
 4054a58:	00007d06 	br	4054c50 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4054a5c:	d0a06003 	ldbu	r2,-32384(gp)
 4054a60:	10803fcc 	andi	r2,r2,255
 4054a64:	10000526 	beq	r2,zero,4054a7c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4054a68:	e0bfff17 	ldw	r2,-4(fp)
 4054a6c:	00c003c4 	movi	r3,15
 4054a70:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4054a74:	e0bffd17 	ldw	r2,-12(fp)
 4054a78:	00007506 	br	4054c50 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4054a7c:	0005303a 	rdctl	r2,status
 4054a80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4054a84:	e0fffc17 	ldw	r3,-16(fp)
 4054a88:	00bfff84 	movi	r2,-2
 4054a8c:	1884703a 	and	r2,r3,r2
 4054a90:	1001703a 	wrctl	status,r2
  
  return context;
 4054a94:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4054a98:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 4054a9c:	e0bffd17 	ldw	r2,-12(fp)
 4054aa0:	10800283 	ldbu	r2,10(r2)
 4054aa4:	10803fcc 	andi	r2,r2,255
 4054aa8:	10000326 	beq	r2,zero,4054ab8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4054aac:	00800044 	movi	r2,1
 4054ab0:	e0bff405 	stb	r2,-48(fp)
 4054ab4:	00000106 	br	4054abc <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4054ab8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 4054abc:	e0bffe03 	ldbu	r2,-8(fp)
 4054ac0:	10000326 	beq	r2,zero,4054ad0 <OSQDel+0xec>
 4054ac4:	10800060 	cmpeqi	r2,r2,1
 4054ac8:	1000301e 	bne	r2,zero,4054b8c <OSQDel+0x1a8>
 4054acc:	00005506 	br	4054c24 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 4054ad0:	e0bff403 	ldbu	r2,-48(fp)
 4054ad4:	10001e1e 	bne	r2,zero,4054b50 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4054ad8:	e0bffd17 	ldw	r2,-12(fp)
 4054adc:	00c00fc4 	movi	r3,63
 4054ae0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4054ae4:	e0bffd17 	ldw	r2,-12(fp)
 4054ae8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 4054aec:	e0bffd17 	ldw	r2,-12(fp)
 4054af0:	10800117 	ldw	r2,4(r2)
 4054af4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 4054af8:	d0e05d17 	ldw	r3,-32396(gp)
 4054afc:	e0bff817 	ldw	r2,-32(fp)
 4054b00:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 4054b04:	e0bff817 	ldw	r2,-32(fp)
 4054b08:	d0a05d15 	stw	r2,-32396(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4054b0c:	e0bffd17 	ldw	r2,-12(fp)
 4054b10:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4054b14:	d0e05f17 	ldw	r3,-32388(gp)
 4054b18:	e0bffd17 	ldw	r2,-12(fp)
 4054b1c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4054b20:	e0bffd17 	ldw	r2,-12(fp)
 4054b24:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4054b28:	e0bffd17 	ldw	r2,-12(fp)
 4054b2c:	d0a05f15 	stw	r2,-32388(gp)
 4054b30:	e0bff617 	ldw	r2,-40(fp)
 4054b34:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4054b38:	e0bff717 	ldw	r2,-36(fp)
 4054b3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4054b40:	e0bfff17 	ldw	r2,-4(fp)
 4054b44:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 4054b48:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 4054b4c:	00003f06 	br	4054c4c <OSQDel+0x268>
 4054b50:	e0bff617 	ldw	r2,-40(fp)
 4054b54:	e0bff915 	stw	r2,-28(fp)
 4054b58:	e0bff917 	ldw	r2,-28(fp)
 4054b5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4054b60:	e0bfff17 	ldw	r2,-4(fp)
 4054b64:	00c01244 	movi	r3,73
 4054b68:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 4054b6c:	e0bffd17 	ldw	r2,-12(fp)
 4054b70:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 4054b74:	00003506 	br	4054c4c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 4054b78:	000f883a 	mov	r7,zero
 4054b7c:	01800104 	movi	r6,4
 4054b80:	000b883a 	mov	r5,zero
 4054b84:	e13ffd17 	ldw	r4,-12(fp)
 4054b88:	40515e00 	call	40515e0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 4054b8c:	e0bffd17 	ldw	r2,-12(fp)
 4054b90:	10800283 	ldbu	r2,10(r2)
 4054b94:	10803fcc 	andi	r2,r2,255
 4054b98:	103ff71e 	bne	r2,zero,4054b78 <__flash_rwdata_start+0xffffa448>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4054b9c:	e0bffd17 	ldw	r2,-12(fp)
 4054ba0:	00c00fc4 	movi	r3,63
 4054ba4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4054ba8:	e0bffd17 	ldw	r2,-12(fp)
 4054bac:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 4054bb0:	e0bffd17 	ldw	r2,-12(fp)
 4054bb4:	10800117 	ldw	r2,4(r2)
 4054bb8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 4054bbc:	d0e05d17 	ldw	r3,-32396(gp)
 4054bc0:	e0bff817 	ldw	r2,-32(fp)
 4054bc4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 4054bc8:	e0bff817 	ldw	r2,-32(fp)
 4054bcc:	d0a05d15 	stw	r2,-32396(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4054bd0:	e0bffd17 	ldw	r2,-12(fp)
 4054bd4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4054bd8:	d0e05f17 	ldw	r3,-32388(gp)
 4054bdc:	e0bffd17 	ldw	r2,-12(fp)
 4054be0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4054be4:	e0bffd17 	ldw	r2,-12(fp)
 4054be8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4054bec:	e0bffd17 	ldw	r2,-12(fp)
 4054bf0:	d0a05f15 	stw	r2,-32388(gp)
 4054bf4:	e0bff617 	ldw	r2,-40(fp)
 4054bf8:	e0bffa15 	stw	r2,-24(fp)
 4054bfc:	e0bffa17 	ldw	r2,-24(fp)
 4054c00:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4054c04:	e0bff403 	ldbu	r2,-48(fp)
 4054c08:	10800058 	cmpnei	r2,r2,1
 4054c0c:	1000011e 	bne	r2,zero,4054c14 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4054c10:	405202c0 	call	405202c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4054c14:	e0bfff17 	ldw	r2,-4(fp)
 4054c18:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 4054c1c:	e03ff515 	stw	zero,-44(fp)
             break;
 4054c20:	00000a06 	br	4054c4c <OSQDel+0x268>
 4054c24:	e0bff617 	ldw	r2,-40(fp)
 4054c28:	e0bffb15 	stw	r2,-20(fp)
 4054c2c:	e0bffb17 	ldw	r2,-20(fp)
 4054c30:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4054c34:	e0bfff17 	ldw	r2,-4(fp)
 4054c38:	00c001c4 	movi	r3,7
 4054c3c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4054c40:	e0bffd17 	ldw	r2,-12(fp)
 4054c44:	e0bff515 	stw	r2,-44(fp)
             break;
 4054c48:	0001883a 	nop
    }
    return (pevent_return);
 4054c4c:	e0bff517 	ldw	r2,-44(fp)
}
 4054c50:	e037883a 	mov	sp,fp
 4054c54:	dfc00117 	ldw	ra,4(sp)
 4054c58:	df000017 	ldw	fp,0(sp)
 4054c5c:	dec00204 	addi	sp,sp,8
 4054c60:	f800283a 	ret

04054c64 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 4054c64:	defffa04 	addi	sp,sp,-24
 4054c68:	df000515 	stw	fp,20(sp)
 4054c6c:	df000504 	addi	fp,sp,20
 4054c70:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4054c74:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4054c78:	e0bfff17 	ldw	r2,-4(fp)
 4054c7c:	1000021e 	bne	r2,zero,4054c88 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 4054c80:	00800104 	movi	r2,4
 4054c84:	00002106 	br	4054d0c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4054c88:	e0bfff17 	ldw	r2,-4(fp)
 4054c8c:	10800003 	ldbu	r2,0(r2)
 4054c90:	10803fcc 	andi	r2,r2,255
 4054c94:	108000a0 	cmpeqi	r2,r2,2
 4054c98:	1000021e 	bne	r2,zero,4054ca4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 4054c9c:	00800044 	movi	r2,1
 4054ca0:	00001a06 	br	4054d0c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4054ca4:	0005303a 	rdctl	r2,status
 4054ca8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4054cac:	e0fffd17 	ldw	r3,-12(fp)
 4054cb0:	00bfff84 	movi	r2,-2
 4054cb4:	1884703a 	and	r2,r3,r2
 4054cb8:	1001703a 	wrctl	status,r2
  
  return context;
 4054cbc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4054cc0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 4054cc4:	e0bfff17 	ldw	r2,-4(fp)
 4054cc8:	10800117 	ldw	r2,4(r2)
 4054ccc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 4054cd0:	e0bffc17 	ldw	r2,-16(fp)
 4054cd4:	10c00117 	ldw	r3,4(r2)
 4054cd8:	e0bffc17 	ldw	r2,-16(fp)
 4054cdc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 4054ce0:	e0bffc17 	ldw	r2,-16(fp)
 4054ce4:	10c00117 	ldw	r3,4(r2)
 4054ce8:	e0bffc17 	ldw	r2,-16(fp)
 4054cec:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 4054cf0:	e0bffc17 	ldw	r2,-16(fp)
 4054cf4:	1000058d 	sth	zero,22(r2)
 4054cf8:	e0bffb17 	ldw	r2,-20(fp)
 4054cfc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4054d00:	e0bffe17 	ldw	r2,-8(fp)
 4054d04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4054d08:	0005883a 	mov	r2,zero
}
 4054d0c:	e037883a 	mov	sp,fp
 4054d10:	df000017 	ldw	fp,0(sp)
 4054d14:	dec00104 	addi	sp,sp,4
 4054d18:	f800283a 	ret

04054d1c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4054d1c:	defff304 	addi	sp,sp,-52
 4054d20:	dfc00c15 	stw	ra,48(sp)
 4054d24:	df000b15 	stw	fp,44(sp)
 4054d28:	df000b04 	addi	fp,sp,44
 4054d2c:	e13ffd15 	stw	r4,-12(fp)
 4054d30:	2805883a 	mov	r2,r5
 4054d34:	e1bfff15 	stw	r6,-4(fp)
 4054d38:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4054d3c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4054d40:	e0bfff17 	ldw	r2,-4(fp)
 4054d44:	1000021e 	bne	r2,zero,4054d50 <OSQPend+0x34>
        return ((void *)0);
 4054d48:	0005883a 	mov	r2,zero
 4054d4c:	00009106 	br	4054f94 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4054d50:	e0bffd17 	ldw	r2,-12(fp)
 4054d54:	1000051e 	bne	r2,zero,4054d6c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4054d58:	e0bfff17 	ldw	r2,-4(fp)
 4054d5c:	00c00104 	movi	r3,4
 4054d60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4054d64:	0005883a 	mov	r2,zero
 4054d68:	00008a06 	br	4054f94 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4054d6c:	e0bffd17 	ldw	r2,-12(fp)
 4054d70:	10800003 	ldbu	r2,0(r2)
 4054d74:	10803fcc 	andi	r2,r2,255
 4054d78:	108000a0 	cmpeqi	r2,r2,2
 4054d7c:	1000051e 	bne	r2,zero,4054d94 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4054d80:	e0bfff17 	ldw	r2,-4(fp)
 4054d84:	00c00044 	movi	r3,1
 4054d88:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4054d8c:	0005883a 	mov	r2,zero
 4054d90:	00008006 	br	4054f94 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4054d94:	d0a06003 	ldbu	r2,-32384(gp)
 4054d98:	10803fcc 	andi	r2,r2,255
 4054d9c:	10000526 	beq	r2,zero,4054db4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 4054da0:	e0bfff17 	ldw	r2,-4(fp)
 4054da4:	00c00084 	movi	r3,2
 4054da8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4054dac:	0005883a 	mov	r2,zero
 4054db0:	00007806 	br	4054f94 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 4054db4:	d0a05203 	ldbu	r2,-32440(gp)
 4054db8:	10803fcc 	andi	r2,r2,255
 4054dbc:	10000526 	beq	r2,zero,4054dd4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 4054dc0:	e0bfff17 	ldw	r2,-4(fp)
 4054dc4:	00c00344 	movi	r3,13
 4054dc8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4054dcc:	0005883a 	mov	r2,zero
 4054dd0:	00007006 	br	4054f94 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4054dd4:	0005303a 	rdctl	r2,status
 4054dd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4054ddc:	e0fffc17 	ldw	r3,-16(fp)
 4054de0:	00bfff84 	movi	r2,-2
 4054de4:	1884703a 	and	r2,r3,r2
 4054de8:	1001703a 	wrctl	status,r2
  
  return context;
 4054dec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4054df0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4054df4:	e0bffd17 	ldw	r2,-12(fp)
 4054df8:	10800117 	ldw	r2,4(r2)
 4054dfc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4054e00:	e0bff817 	ldw	r2,-32(fp)
 4054e04:	1080058b 	ldhu	r2,22(r2)
 4054e08:	10bfffcc 	andi	r2,r2,65535
 4054e0c:	10001e26 	beq	r2,zero,4054e88 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4054e10:	e0bff817 	ldw	r2,-32(fp)
 4054e14:	10800417 	ldw	r2,16(r2)
 4054e18:	11000104 	addi	r4,r2,4
 4054e1c:	e0fff817 	ldw	r3,-32(fp)
 4054e20:	19000415 	stw	r4,16(r3)
 4054e24:	10800017 	ldw	r2,0(r2)
 4054e28:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4054e2c:	e0bff817 	ldw	r2,-32(fp)
 4054e30:	1080058b 	ldhu	r2,22(r2)
 4054e34:	10bfffc4 	addi	r2,r2,-1
 4054e38:	1007883a 	mov	r3,r2
 4054e3c:	e0bff817 	ldw	r2,-32(fp)
 4054e40:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4054e44:	e0bff817 	ldw	r2,-32(fp)
 4054e48:	10c00417 	ldw	r3,16(r2)
 4054e4c:	e0bff817 	ldw	r2,-32(fp)
 4054e50:	10800217 	ldw	r2,8(r2)
 4054e54:	1880041e 	bne	r3,r2,4054e68 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 4054e58:	e0bff817 	ldw	r2,-32(fp)
 4054e5c:	10c00117 	ldw	r3,4(r2)
 4054e60:	e0bff817 	ldw	r2,-32(fp)
 4054e64:	10c00415 	stw	r3,16(r2)
 4054e68:	e0bff617 	ldw	r2,-40(fp)
 4054e6c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4054e70:	e0bff717 	ldw	r2,-36(fp)
 4054e74:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4054e78:	e0bfff17 	ldw	r2,-4(fp)
 4054e7c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 4054e80:	e0bff517 	ldw	r2,-44(fp)
 4054e84:	00004306 	br	4054f94 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 4054e88:	d0a06117 	ldw	r2,-32380(gp)
 4054e8c:	d0e06117 	ldw	r3,-32380(gp)
 4054e90:	18c00c03 	ldbu	r3,48(r3)
 4054e94:	18c00114 	ori	r3,r3,4
 4054e98:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4054e9c:	d0a06117 	ldw	r2,-32380(gp)
 4054ea0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 4054ea4:	d0a06117 	ldw	r2,-32380(gp)
 4054ea8:	e0fffe0b 	ldhu	r3,-8(fp)
 4054eac:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 4054eb0:	e13ffd17 	ldw	r4,-12(fp)
 4054eb4:	40517780 	call	4051778 <OS_EventTaskWait>
 4054eb8:	e0bff617 	ldw	r2,-40(fp)
 4054ebc:	e0bffb15 	stw	r2,-20(fp)
 4054ec0:	e0bffb17 	ldw	r2,-20(fp)
 4054ec4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 4054ec8:	405202c0 	call	405202c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4054ecc:	0005303a 	rdctl	r2,status
 4054ed0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4054ed4:	e0fff917 	ldw	r3,-28(fp)
 4054ed8:	00bfff84 	movi	r2,-2
 4054edc:	1884703a 	and	r2,r3,r2
 4054ee0:	1001703a 	wrctl	status,r2
  
  return context;
 4054ee4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 4054ee8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4054eec:	d0a06117 	ldw	r2,-32380(gp)
 4054ef0:	10800c43 	ldbu	r2,49(r2)
 4054ef4:	10803fcc 	andi	r2,r2,255
 4054ef8:	10000326 	beq	r2,zero,4054f08 <OSQPend+0x1ec>
 4054efc:	108000a0 	cmpeqi	r2,r2,2
 4054f00:	1000071e 	bne	r2,zero,4054f20 <OSQPend+0x204>
 4054f04:	00000b06 	br	4054f34 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 4054f08:	d0a06117 	ldw	r2,-32380(gp)
 4054f0c:	10800917 	ldw	r2,36(r2)
 4054f10:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 4054f14:	e0bfff17 	ldw	r2,-4(fp)
 4054f18:	10000005 	stb	zero,0(r2)
             break;
 4054f1c:	00000e06 	br	4054f58 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 4054f20:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4054f24:	e0bfff17 	ldw	r2,-4(fp)
 4054f28:	00c00384 	movi	r3,14
 4054f2c:	10c00005 	stb	r3,0(r2)
             break;
 4054f30:	00000906 	br	4054f58 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 4054f34:	d0a06117 	ldw	r2,-32380(gp)
 4054f38:	e17ffd17 	ldw	r5,-12(fp)
 4054f3c:	1009883a 	mov	r4,r2
 4054f40:	40519d80 	call	40519d8 <OS_EventTaskRemove>
             pmsg = (void *)0;
 4054f44:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4054f48:	e0bfff17 	ldw	r2,-4(fp)
 4054f4c:	00c00284 	movi	r3,10
 4054f50:	10c00005 	stb	r3,0(r2)
             break;
 4054f54:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4054f58:	d0a06117 	ldw	r2,-32380(gp)
 4054f5c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4054f60:	d0a06117 	ldw	r2,-32380(gp)
 4054f64:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4054f68:	d0a06117 	ldw	r2,-32380(gp)
 4054f6c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4054f70:	d0a06117 	ldw	r2,-32380(gp)
 4054f74:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 4054f78:	d0a06117 	ldw	r2,-32380(gp)
 4054f7c:	10000915 	stw	zero,36(r2)
 4054f80:	e0bff617 	ldw	r2,-40(fp)
 4054f84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4054f88:	e0bffa17 	ldw	r2,-24(fp)
 4054f8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4054f90:	e0bff517 	ldw	r2,-44(fp)
}
 4054f94:	e037883a 	mov	sp,fp
 4054f98:	dfc00117 	ldw	ra,4(sp)
 4054f9c:	df000017 	ldw	fp,0(sp)
 4054fa0:	dec00204 	addi	sp,sp,8
 4054fa4:	f800283a 	ret

04054fa8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4054fa8:	defff604 	addi	sp,sp,-40
 4054fac:	dfc00915 	stw	ra,36(sp)
 4054fb0:	df000815 	stw	fp,32(sp)
 4054fb4:	df000804 	addi	fp,sp,32
 4054fb8:	e13ffd15 	stw	r4,-12(fp)
 4054fbc:	2805883a 	mov	r2,r5
 4054fc0:	e1bfff15 	stw	r6,-4(fp)
 4054fc4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4054fc8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4054fcc:	e0bfff17 	ldw	r2,-4(fp)
 4054fd0:	1000021e 	bne	r2,zero,4054fdc <OSQPendAbort+0x34>
        return (0);
 4054fd4:	0005883a 	mov	r2,zero
 4054fd8:	00004906 	br	4055100 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4054fdc:	e0bffd17 	ldw	r2,-12(fp)
 4054fe0:	1000051e 	bne	r2,zero,4054ff8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4054fe4:	e0bfff17 	ldw	r2,-4(fp)
 4054fe8:	00c00104 	movi	r3,4
 4054fec:	10c00005 	stb	r3,0(r2)
        return (0);
 4054ff0:	0005883a 	mov	r2,zero
 4054ff4:	00004206 	br	4055100 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4054ff8:	e0bffd17 	ldw	r2,-12(fp)
 4054ffc:	10800003 	ldbu	r2,0(r2)
 4055000:	10803fcc 	andi	r2,r2,255
 4055004:	108000a0 	cmpeqi	r2,r2,2
 4055008:	1000051e 	bne	r2,zero,4055020 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 405500c:	e0bfff17 	ldw	r2,-4(fp)
 4055010:	00c00044 	movi	r3,1
 4055014:	10c00005 	stb	r3,0(r2)
        return (0);
 4055018:	0005883a 	mov	r2,zero
 405501c:	00003806 	br	4055100 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4055020:	0005303a 	rdctl	r2,status
 4055024:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055028:	e0fffc17 	ldw	r3,-16(fp)
 405502c:	00bfff84 	movi	r2,-2
 4055030:	1884703a 	and	r2,r3,r2
 4055034:	1001703a 	wrctl	status,r2
  
  return context;
 4055038:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 405503c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 4055040:	e0bffd17 	ldw	r2,-12(fp)
 4055044:	10800283 	ldbu	r2,10(r2)
 4055048:	10803fcc 	andi	r2,r2,255
 405504c:	10002526 	beq	r2,zero,40550e4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 4055050:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 4055054:	e0bffe03 	ldbu	r2,-8(fp)
 4055058:	10800060 	cmpeqi	r2,r2,1
 405505c:	10000e26 	beq	r2,zero,4055098 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4055060:	00000806 	br	4055084 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4055064:	01c00084 	movi	r7,2
 4055068:	01800104 	movi	r6,4
 405506c:	000b883a 	mov	r5,zero
 4055070:	e13ffd17 	ldw	r4,-12(fp)
 4055074:	40515e00 	call	40515e0 <OS_EventTaskRdy>
                     nbr_tasks++;
 4055078:	e0bff803 	ldbu	r2,-32(fp)
 405507c:	10800044 	addi	r2,r2,1
 4055080:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4055084:	e0bffd17 	ldw	r2,-12(fp)
 4055088:	10800283 	ldbu	r2,10(r2)
 405508c:	10803fcc 	andi	r2,r2,255
 4055090:	103ff41e 	bne	r2,zero,4055064 <__flash_rwdata_start+0xffffa934>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4055094:	00000906 	br	40550bc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4055098:	01c00084 	movi	r7,2
 405509c:	01800104 	movi	r6,4
 40550a0:	000b883a 	mov	r5,zero
 40550a4:	e13ffd17 	ldw	r4,-12(fp)
 40550a8:	40515e00 	call	40515e0 <OS_EventTaskRdy>
                 nbr_tasks++;
 40550ac:	e0bff803 	ldbu	r2,-32(fp)
 40550b0:	10800044 	addi	r2,r2,1
 40550b4:	e0bff805 	stb	r2,-32(fp)
                 break;
 40550b8:	0001883a 	nop
 40550bc:	e0bff917 	ldw	r2,-28(fp)
 40550c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40550c4:	e0bffa17 	ldw	r2,-24(fp)
 40550c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 40550cc:	405202c0 	call	405202c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 40550d0:	e0bfff17 	ldw	r2,-4(fp)
 40550d4:	00c00384 	movi	r3,14
 40550d8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 40550dc:	e0bff803 	ldbu	r2,-32(fp)
 40550e0:	00000706 	br	4055100 <OSQPendAbort+0x158>
 40550e4:	e0bff917 	ldw	r2,-28(fp)
 40550e8:	e0bffb15 	stw	r2,-20(fp)
 40550ec:	e0bffb17 	ldw	r2,-20(fp)
 40550f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40550f4:	e0bfff17 	ldw	r2,-4(fp)
 40550f8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 40550fc:	0005883a 	mov	r2,zero
}
 4055100:	e037883a 	mov	sp,fp
 4055104:	dfc00117 	ldw	ra,4(sp)
 4055108:	df000017 	ldw	fp,0(sp)
 405510c:	dec00204 	addi	sp,sp,8
 4055110:	f800283a 	ret

04055114 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 4055114:	defff604 	addi	sp,sp,-40
 4055118:	dfc00915 	stw	ra,36(sp)
 405511c:	df000815 	stw	fp,32(sp)
 4055120:	df000804 	addi	fp,sp,32
 4055124:	e13ffe15 	stw	r4,-8(fp)
 4055128:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 405512c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4055130:	e0bffe17 	ldw	r2,-8(fp)
 4055134:	1000021e 	bne	r2,zero,4055140 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 4055138:	00800104 	movi	r2,4
 405513c:	00004a06 	br	4055268 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4055140:	e0bffe17 	ldw	r2,-8(fp)
 4055144:	10800003 	ldbu	r2,0(r2)
 4055148:	10803fcc 	andi	r2,r2,255
 405514c:	108000a0 	cmpeqi	r2,r2,2
 4055150:	1000021e 	bne	r2,zero,405515c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 4055154:	00800044 	movi	r2,1
 4055158:	00004306 	br	4055268 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405515c:	0005303a 	rdctl	r2,status
 4055160:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055164:	e0fffd17 	ldw	r3,-12(fp)
 4055168:	00bfff84 	movi	r2,-2
 405516c:	1884703a 	and	r2,r3,r2
 4055170:	1001703a 	wrctl	status,r2
  
  return context;
 4055174:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4055178:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 405517c:	e0bffe17 	ldw	r2,-8(fp)
 4055180:	10800283 	ldbu	r2,10(r2)
 4055184:	10803fcc 	andi	r2,r2,255
 4055188:	10000c26 	beq	r2,zero,40551bc <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 405518c:	000f883a 	mov	r7,zero
 4055190:	01800104 	movi	r6,4
 4055194:	e17fff17 	ldw	r5,-4(fp)
 4055198:	e13ffe17 	ldw	r4,-8(fp)
 405519c:	40515e00 	call	40515e0 <OS_EventTaskRdy>
 40551a0:	e0bff817 	ldw	r2,-32(fp)
 40551a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40551a8:	e0bff917 	ldw	r2,-28(fp)
 40551ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 40551b0:	405202c0 	call	405202c <OS_Sched>
        return (OS_ERR_NONE);
 40551b4:	0005883a 	mov	r2,zero
 40551b8:	00002b06 	br	4055268 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 40551bc:	e0bffe17 	ldw	r2,-8(fp)
 40551c0:	10800117 	ldw	r2,4(r2)
 40551c4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 40551c8:	e0bffb17 	ldw	r2,-20(fp)
 40551cc:	10c0058b 	ldhu	r3,22(r2)
 40551d0:	e0bffb17 	ldw	r2,-20(fp)
 40551d4:	1080050b 	ldhu	r2,20(r2)
 40551d8:	18ffffcc 	andi	r3,r3,65535
 40551dc:	10bfffcc 	andi	r2,r2,65535
 40551e0:	18800636 	bltu	r3,r2,40551fc <OSQPost+0xe8>
 40551e4:	e0bff817 	ldw	r2,-32(fp)
 40551e8:	e0bffa15 	stw	r2,-24(fp)
 40551ec:	e0bffa17 	ldw	r2,-24(fp)
 40551f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 40551f4:	00800784 	movi	r2,30
 40551f8:	00001b06 	br	4055268 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 40551fc:	e0bffb17 	ldw	r2,-20(fp)
 4055200:	10800317 	ldw	r2,12(r2)
 4055204:	11000104 	addi	r4,r2,4
 4055208:	e0fffb17 	ldw	r3,-20(fp)
 405520c:	19000315 	stw	r4,12(r3)
 4055210:	e0ffff17 	ldw	r3,-4(fp)
 4055214:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 4055218:	e0bffb17 	ldw	r2,-20(fp)
 405521c:	1080058b 	ldhu	r2,22(r2)
 4055220:	10800044 	addi	r2,r2,1
 4055224:	1007883a 	mov	r3,r2
 4055228:	e0bffb17 	ldw	r2,-20(fp)
 405522c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4055230:	e0bffb17 	ldw	r2,-20(fp)
 4055234:	10c00317 	ldw	r3,12(r2)
 4055238:	e0bffb17 	ldw	r2,-20(fp)
 405523c:	10800217 	ldw	r2,8(r2)
 4055240:	1880041e 	bne	r3,r2,4055254 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 4055244:	e0bffb17 	ldw	r2,-20(fp)
 4055248:	10c00117 	ldw	r3,4(r2)
 405524c:	e0bffb17 	ldw	r2,-20(fp)
 4055250:	10c00315 	stw	r3,12(r2)
 4055254:	e0bff817 	ldw	r2,-32(fp)
 4055258:	e0bffc15 	stw	r2,-16(fp)
 405525c:	e0bffc17 	ldw	r2,-16(fp)
 4055260:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4055264:	0005883a 	mov	r2,zero
}
 4055268:	e037883a 	mov	sp,fp
 405526c:	dfc00117 	ldw	ra,4(sp)
 4055270:	df000017 	ldw	fp,0(sp)
 4055274:	dec00204 	addi	sp,sp,8
 4055278:	f800283a 	ret

0405527c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 405527c:	defff604 	addi	sp,sp,-40
 4055280:	dfc00915 	stw	ra,36(sp)
 4055284:	df000815 	stw	fp,32(sp)
 4055288:	df000804 	addi	fp,sp,32
 405528c:	e13ffe15 	stw	r4,-8(fp)
 4055290:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4055294:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4055298:	e0bffe17 	ldw	r2,-8(fp)
 405529c:	1000021e 	bne	r2,zero,40552a8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 40552a0:	00800104 	movi	r2,4
 40552a4:	00004c06 	br	40553d8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 40552a8:	e0bffe17 	ldw	r2,-8(fp)
 40552ac:	10800003 	ldbu	r2,0(r2)
 40552b0:	10803fcc 	andi	r2,r2,255
 40552b4:	108000a0 	cmpeqi	r2,r2,2
 40552b8:	1000021e 	bne	r2,zero,40552c4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 40552bc:	00800044 	movi	r2,1
 40552c0:	00004506 	br	40553d8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40552c4:	0005303a 	rdctl	r2,status
 40552c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40552cc:	e0fffd17 	ldw	r3,-12(fp)
 40552d0:	00bfff84 	movi	r2,-2
 40552d4:	1884703a 	and	r2,r3,r2
 40552d8:	1001703a 	wrctl	status,r2
  
  return context;
 40552dc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40552e0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 40552e4:	e0bffe17 	ldw	r2,-8(fp)
 40552e8:	10800283 	ldbu	r2,10(r2)
 40552ec:	10803fcc 	andi	r2,r2,255
 40552f0:	10000c26 	beq	r2,zero,4055324 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40552f4:	000f883a 	mov	r7,zero
 40552f8:	01800104 	movi	r6,4
 40552fc:	e17fff17 	ldw	r5,-4(fp)
 4055300:	e13ffe17 	ldw	r4,-8(fp)
 4055304:	40515e00 	call	40515e0 <OS_EventTaskRdy>
 4055308:	e0bff817 	ldw	r2,-32(fp)
 405530c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055310:	e0bff917 	ldw	r2,-28(fp)
 4055314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 4055318:	405202c0 	call	405202c <OS_Sched>
        return (OS_ERR_NONE);
 405531c:	0005883a 	mov	r2,zero
 4055320:	00002d06 	br	40553d8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4055324:	e0bffe17 	ldw	r2,-8(fp)
 4055328:	10800117 	ldw	r2,4(r2)
 405532c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4055330:	e0bffb17 	ldw	r2,-20(fp)
 4055334:	10c0058b 	ldhu	r3,22(r2)
 4055338:	e0bffb17 	ldw	r2,-20(fp)
 405533c:	1080050b 	ldhu	r2,20(r2)
 4055340:	18ffffcc 	andi	r3,r3,65535
 4055344:	10bfffcc 	andi	r2,r2,65535
 4055348:	18800636 	bltu	r3,r2,4055364 <OSQPostFront+0xe8>
 405534c:	e0bff817 	ldw	r2,-32(fp)
 4055350:	e0bffa15 	stw	r2,-24(fp)
 4055354:	e0bffa17 	ldw	r2,-24(fp)
 4055358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 405535c:	00800784 	movi	r2,30
 4055360:	00001d06 	br	40553d8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 4055364:	e0bffb17 	ldw	r2,-20(fp)
 4055368:	10c00417 	ldw	r3,16(r2)
 405536c:	e0bffb17 	ldw	r2,-20(fp)
 4055370:	10800117 	ldw	r2,4(r2)
 4055374:	1880041e 	bne	r3,r2,4055388 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 4055378:	e0bffb17 	ldw	r2,-20(fp)
 405537c:	10c00217 	ldw	r3,8(r2)
 4055380:	e0bffb17 	ldw	r2,-20(fp)
 4055384:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 4055388:	e0bffb17 	ldw	r2,-20(fp)
 405538c:	10800417 	ldw	r2,16(r2)
 4055390:	10ffff04 	addi	r3,r2,-4
 4055394:	e0bffb17 	ldw	r2,-20(fp)
 4055398:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 405539c:	e0bffb17 	ldw	r2,-20(fp)
 40553a0:	10800417 	ldw	r2,16(r2)
 40553a4:	e0ffff17 	ldw	r3,-4(fp)
 40553a8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 40553ac:	e0bffb17 	ldw	r2,-20(fp)
 40553b0:	1080058b 	ldhu	r2,22(r2)
 40553b4:	10800044 	addi	r2,r2,1
 40553b8:	1007883a 	mov	r3,r2
 40553bc:	e0bffb17 	ldw	r2,-20(fp)
 40553c0:	10c0058d 	sth	r3,22(r2)
 40553c4:	e0bff817 	ldw	r2,-32(fp)
 40553c8:	e0bffc15 	stw	r2,-16(fp)
 40553cc:	e0bffc17 	ldw	r2,-16(fp)
 40553d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40553d4:	0005883a 	mov	r2,zero
}
 40553d8:	e037883a 	mov	sp,fp
 40553dc:	dfc00117 	ldw	ra,4(sp)
 40553e0:	df000017 	ldw	fp,0(sp)
 40553e4:	dec00204 	addi	sp,sp,8
 40553e8:	f800283a 	ret

040553ec <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 40553ec:	defff504 	addi	sp,sp,-44
 40553f0:	dfc00a15 	stw	ra,40(sp)
 40553f4:	df000915 	stw	fp,36(sp)
 40553f8:	df000904 	addi	fp,sp,36
 40553fc:	e13ffd15 	stw	r4,-12(fp)
 4055400:	e17ffe15 	stw	r5,-8(fp)
 4055404:	3005883a 	mov	r2,r6
 4055408:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 405540c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4055410:	e0bffd17 	ldw	r2,-12(fp)
 4055414:	1000021e 	bne	r2,zero,4055420 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 4055418:	00800104 	movi	r2,4
 405541c:	00007106 	br	40555e4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4055420:	e0bffd17 	ldw	r2,-12(fp)
 4055424:	10800003 	ldbu	r2,0(r2)
 4055428:	10803fcc 	andi	r2,r2,255
 405542c:	108000a0 	cmpeqi	r2,r2,2
 4055430:	1000021e 	bne	r2,zero,405543c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 4055434:	00800044 	movi	r2,1
 4055438:	00006a06 	br	40555e4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405543c:	0005303a 	rdctl	r2,status
 4055440:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055444:	e0fffc17 	ldw	r3,-16(fp)
 4055448:	00bfff84 	movi	r2,-2
 405544c:	1884703a 	and	r2,r3,r2
 4055450:	1001703a 	wrctl	status,r2
  
  return context;
 4055454:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4055458:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 405545c:	e0bffd17 	ldw	r2,-12(fp)
 4055460:	10800283 	ldbu	r2,10(r2)
 4055464:	10803fcc 	andi	r2,r2,255
 4055468:	10001d26 	beq	r2,zero,40554e0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 405546c:	e0bfff03 	ldbu	r2,-4(fp)
 4055470:	1080004c 	andi	r2,r2,1
 4055474:	10000b26 	beq	r2,zero,40554a4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4055478:	00000506 	br	4055490 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 405547c:	000f883a 	mov	r7,zero
 4055480:	01800104 	movi	r6,4
 4055484:	e17ffe17 	ldw	r5,-8(fp)
 4055488:	e13ffd17 	ldw	r4,-12(fp)
 405548c:	40515e00 	call	40515e0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4055490:	e0bffd17 	ldw	r2,-12(fp)
 4055494:	10800283 	ldbu	r2,10(r2)
 4055498:	10803fcc 	andi	r2,r2,255
 405549c:	103ff71e 	bne	r2,zero,405547c <__flash_rwdata_start+0xffffad4c>
 40554a0:	00000506 	br	40554b8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40554a4:	000f883a 	mov	r7,zero
 40554a8:	01800104 	movi	r6,4
 40554ac:	e17ffe17 	ldw	r5,-8(fp)
 40554b0:	e13ffd17 	ldw	r4,-12(fp)
 40554b4:	40515e00 	call	40515e0 <OS_EventTaskRdy>
 40554b8:	e0bff717 	ldw	r2,-36(fp)
 40554bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40554c0:	e0bff817 	ldw	r2,-32(fp)
 40554c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 40554c8:	e0bfff03 	ldbu	r2,-4(fp)
 40554cc:	1080010c 	andi	r2,r2,4
 40554d0:	1000011e 	bne	r2,zero,40554d8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 40554d4:	405202c0 	call	405202c <OS_Sched>
        }
        return (OS_ERR_NONE);
 40554d8:	0005883a 	mov	r2,zero
 40554dc:	00004106 	br	40555e4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 40554e0:	e0bffd17 	ldw	r2,-12(fp)
 40554e4:	10800117 	ldw	r2,4(r2)
 40554e8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 40554ec:	e0bffa17 	ldw	r2,-24(fp)
 40554f0:	10c0058b 	ldhu	r3,22(r2)
 40554f4:	e0bffa17 	ldw	r2,-24(fp)
 40554f8:	1080050b 	ldhu	r2,20(r2)
 40554fc:	18ffffcc 	andi	r3,r3,65535
 4055500:	10bfffcc 	andi	r2,r2,65535
 4055504:	18800636 	bltu	r3,r2,4055520 <OSQPostOpt+0x134>
 4055508:	e0bff717 	ldw	r2,-36(fp)
 405550c:	e0bff915 	stw	r2,-28(fp)
 4055510:	e0bff917 	ldw	r2,-28(fp)
 4055514:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4055518:	00800784 	movi	r2,30
 405551c:	00003106 	br	40555e4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4055520:	e0bfff03 	ldbu	r2,-4(fp)
 4055524:	1080008c 	andi	r2,r2,2
 4055528:	10001326 	beq	r2,zero,4055578 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 405552c:	e0bffa17 	ldw	r2,-24(fp)
 4055530:	10c00417 	ldw	r3,16(r2)
 4055534:	e0bffa17 	ldw	r2,-24(fp)
 4055538:	10800117 	ldw	r2,4(r2)
 405553c:	1880041e 	bne	r3,r2,4055550 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4055540:	e0bffa17 	ldw	r2,-24(fp)
 4055544:	10c00217 	ldw	r3,8(r2)
 4055548:	e0bffa17 	ldw	r2,-24(fp)
 405554c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 4055550:	e0bffa17 	ldw	r2,-24(fp)
 4055554:	10800417 	ldw	r2,16(r2)
 4055558:	10ffff04 	addi	r3,r2,-4
 405555c:	e0bffa17 	ldw	r2,-24(fp)
 4055560:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 4055564:	e0bffa17 	ldw	r2,-24(fp)
 4055568:	10800417 	ldw	r2,16(r2)
 405556c:	e0fffe17 	ldw	r3,-8(fp)
 4055570:	10c00015 	stw	r3,0(r2)
 4055574:	00001006 	br	40555b8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 4055578:	e0bffa17 	ldw	r2,-24(fp)
 405557c:	10800317 	ldw	r2,12(r2)
 4055580:	11000104 	addi	r4,r2,4
 4055584:	e0fffa17 	ldw	r3,-24(fp)
 4055588:	19000315 	stw	r4,12(r3)
 405558c:	e0fffe17 	ldw	r3,-8(fp)
 4055590:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 4055594:	e0bffa17 	ldw	r2,-24(fp)
 4055598:	10c00317 	ldw	r3,12(r2)
 405559c:	e0bffa17 	ldw	r2,-24(fp)
 40555a0:	10800217 	ldw	r2,8(r2)
 40555a4:	1880041e 	bne	r3,r2,40555b8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 40555a8:	e0bffa17 	ldw	r2,-24(fp)
 40555ac:	10c00117 	ldw	r3,4(r2)
 40555b0:	e0bffa17 	ldw	r2,-24(fp)
 40555b4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 40555b8:	e0bffa17 	ldw	r2,-24(fp)
 40555bc:	1080058b 	ldhu	r2,22(r2)
 40555c0:	10800044 	addi	r2,r2,1
 40555c4:	1007883a 	mov	r3,r2
 40555c8:	e0bffa17 	ldw	r2,-24(fp)
 40555cc:	10c0058d 	sth	r3,22(r2)
 40555d0:	e0bff717 	ldw	r2,-36(fp)
 40555d4:	e0bffb15 	stw	r2,-20(fp)
 40555d8:	e0bffb17 	ldw	r2,-20(fp)
 40555dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40555e0:	0005883a 	mov	r2,zero
}
 40555e4:	e037883a 	mov	sp,fp
 40555e8:	dfc00117 	ldw	ra,4(sp)
 40555ec:	df000017 	ldw	fp,0(sp)
 40555f0:	dec00204 	addi	sp,sp,8
 40555f4:	f800283a 	ret

040555f8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 40555f8:	defff604 	addi	sp,sp,-40
 40555fc:	df000915 	stw	fp,36(sp)
 4055600:	df000904 	addi	fp,sp,36
 4055604:	e13ffe15 	stw	r4,-8(fp)
 4055608:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 405560c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4055610:	e0bffe17 	ldw	r2,-8(fp)
 4055614:	1000021e 	bne	r2,zero,4055620 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4055618:	00800104 	movi	r2,4
 405561c:	00004906 	br	4055744 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4055620:	e0bfff17 	ldw	r2,-4(fp)
 4055624:	1000021e 	bne	r2,zero,4055630 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4055628:	00800244 	movi	r2,9
 405562c:	00004506 	br	4055744 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4055630:	e0bffe17 	ldw	r2,-8(fp)
 4055634:	10800003 	ldbu	r2,0(r2)
 4055638:	10803fcc 	andi	r2,r2,255
 405563c:	108000a0 	cmpeqi	r2,r2,2
 4055640:	1000021e 	bne	r2,zero,405564c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4055644:	00800044 	movi	r2,1
 4055648:	00003e06 	br	4055744 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405564c:	0005303a 	rdctl	r2,status
 4055650:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055654:	e0fffd17 	ldw	r3,-12(fp)
 4055658:	00bfff84 	movi	r2,-2
 405565c:	1884703a 	and	r2,r3,r2
 4055660:	1001703a 	wrctl	status,r2
  
  return context;
 4055664:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4055668:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 405566c:	e0bffe17 	ldw	r2,-8(fp)
 4055670:	10c00283 	ldbu	r3,10(r2)
 4055674:	e0bfff17 	ldw	r2,-4(fp)
 4055678:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 405567c:	e0bffe17 	ldw	r2,-8(fp)
 4055680:	108002c4 	addi	r2,r2,11
 4055684:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 4055688:	e0bfff17 	ldw	r2,-4(fp)
 405568c:	10800204 	addi	r2,r2,8
 4055690:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4055694:	e03ff705 	stb	zero,-36(fp)
 4055698:	00000b06 	br	40556c8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 405569c:	e0bff917 	ldw	r2,-28(fp)
 40556a0:	10c00044 	addi	r3,r2,1
 40556a4:	e0fff915 	stw	r3,-28(fp)
 40556a8:	e0fff817 	ldw	r3,-32(fp)
 40556ac:	19000044 	addi	r4,r3,1
 40556b0:	e13ff815 	stw	r4,-32(fp)
 40556b4:	18c00003 	ldbu	r3,0(r3)
 40556b8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40556bc:	e0bff703 	ldbu	r2,-36(fp)
 40556c0:	10800044 	addi	r2,r2,1
 40556c4:	e0bff705 	stb	r2,-36(fp)
 40556c8:	e0bff703 	ldbu	r2,-36(fp)
 40556cc:	108000f0 	cmpltui	r2,r2,3
 40556d0:	103ff21e 	bne	r2,zero,405569c <__flash_rwdata_start+0xffffaf6c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 40556d4:	e0bffe17 	ldw	r2,-8(fp)
 40556d8:	10800117 	ldw	r2,4(r2)
 40556dc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 40556e0:	e0bffc17 	ldw	r2,-16(fp)
 40556e4:	1080058b 	ldhu	r2,22(r2)
 40556e8:	10bfffcc 	andi	r2,r2,65535
 40556ec:	10000626 	beq	r2,zero,4055708 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 40556f0:	e0bffc17 	ldw	r2,-16(fp)
 40556f4:	10800417 	ldw	r2,16(r2)
 40556f8:	10c00017 	ldw	r3,0(r2)
 40556fc:	e0bfff17 	ldw	r2,-4(fp)
 4055700:	10c00015 	stw	r3,0(r2)
 4055704:	00000206 	br	4055710 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 4055708:	e0bfff17 	ldw	r2,-4(fp)
 405570c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4055710:	e0bffc17 	ldw	r2,-16(fp)
 4055714:	10c0058b 	ldhu	r3,22(r2)
 4055718:	e0bfff17 	ldw	r2,-4(fp)
 405571c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4055720:	e0bffc17 	ldw	r2,-16(fp)
 4055724:	10c0050b 	ldhu	r3,20(r2)
 4055728:	e0bfff17 	ldw	r2,-4(fp)
 405572c:	10c0018d 	sth	r3,6(r2)
 4055730:	e0bffa17 	ldw	r2,-24(fp)
 4055734:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055738:	e0bffb17 	ldw	r2,-20(fp)
 405573c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4055740:	0005883a 	mov	r2,zero
}
 4055744:	e037883a 	mov	sp,fp
 4055748:	df000017 	ldw	fp,0(sp)
 405574c:	dec00104 	addi	sp,sp,4
 4055750:	f800283a 	ret

04055754 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 4055754:	defffb04 	addi	sp,sp,-20
 4055758:	dfc00415 	stw	ra,16(sp)
 405575c:	df000315 	stw	fp,12(sp)
 4055760:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 4055764:	01407804 	movi	r5,480
 4055768:	01008074 	movhi	r4,513
 405576c:	210f0104 	addi	r4,r4,15364
 4055770:	4051f700 	call	4051f70 <OS_MemClr>
    pq1 = &OSQTbl[0];
 4055774:	00808074 	movhi	r2,513
 4055778:	108f0104 	addi	r2,r2,15364
 405577c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 4055780:	00808074 	movhi	r2,513
 4055784:	108f0704 	addi	r2,r2,15388
 4055788:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 405578c:	e03ffd0d 	sth	zero,-12(fp)
 4055790:	00000c06 	br	40557c4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4055794:	e0bffe17 	ldw	r2,-8(fp)
 4055798:	e0ffff17 	ldw	r3,-4(fp)
 405579c:	10c00015 	stw	r3,0(r2)
        pq1++;
 40557a0:	e0bffe17 	ldw	r2,-8(fp)
 40557a4:	10800604 	addi	r2,r2,24
 40557a8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 40557ac:	e0bfff17 	ldw	r2,-4(fp)
 40557b0:	10800604 	addi	r2,r2,24
 40557b4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 40557b8:	e0bffd0b 	ldhu	r2,-12(fp)
 40557bc:	10800044 	addi	r2,r2,1
 40557c0:	e0bffd0d 	sth	r2,-12(fp)
 40557c4:	e0bffd0b 	ldhu	r2,-12(fp)
 40557c8:	108004f0 	cmpltui	r2,r2,19
 40557cc:	103ff11e 	bne	r2,zero,4055794 <__flash_rwdata_start+0xffffb064>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 40557d0:	e0bffe17 	ldw	r2,-8(fp)
 40557d4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 40557d8:	00808074 	movhi	r2,513
 40557dc:	108f0104 	addi	r2,r2,15364
 40557e0:	d0a05d15 	stw	r2,-32396(gp)
#endif
}
 40557e4:	0001883a 	nop
 40557e8:	e037883a 	mov	sp,fp
 40557ec:	dfc00117 	ldw	ra,4(sp)
 40557f0:	df000017 	ldw	fp,0(sp)
 40557f4:	dec00204 	addi	sp,sp,8
 40557f8:	f800283a 	ret

040557fc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 40557fc:	defffa04 	addi	sp,sp,-24
 4055800:	df000515 	stw	fp,20(sp)
 4055804:	df000504 	addi	fp,sp,20
 4055808:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 405580c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4055810:	e0bfff17 	ldw	r2,-4(fp)
 4055814:	1000021e 	bne	r2,zero,4055820 <OSSemAccept+0x24>
        return (0);
 4055818:	0005883a 	mov	r2,zero
 405581c:	00001f06 	br	405589c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4055820:	e0bfff17 	ldw	r2,-4(fp)
 4055824:	10800003 	ldbu	r2,0(r2)
 4055828:	10803fcc 	andi	r2,r2,255
 405582c:	108000e0 	cmpeqi	r2,r2,3
 4055830:	1000021e 	bne	r2,zero,405583c <OSSemAccept+0x40>
        return (0);
 4055834:	0005883a 	mov	r2,zero
 4055838:	00001806 	br	405589c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405583c:	0005303a 	rdctl	r2,status
 4055840:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055844:	e0fffe17 	ldw	r3,-8(fp)
 4055848:	00bfff84 	movi	r2,-2
 405584c:	1884703a 	and	r2,r3,r2
 4055850:	1001703a 	wrctl	status,r2
  
  return context;
 4055854:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4055858:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 405585c:	e0bfff17 	ldw	r2,-4(fp)
 4055860:	1080020b 	ldhu	r2,8(r2)
 4055864:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 4055868:	e0bffd0b 	ldhu	r2,-12(fp)
 405586c:	10000626 	beq	r2,zero,4055888 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 4055870:	e0bfff17 	ldw	r2,-4(fp)
 4055874:	1080020b 	ldhu	r2,8(r2)
 4055878:	10bfffc4 	addi	r2,r2,-1
 405587c:	1007883a 	mov	r3,r2
 4055880:	e0bfff17 	ldw	r2,-4(fp)
 4055884:	10c0020d 	sth	r3,8(r2)
 4055888:	e0bffb17 	ldw	r2,-20(fp)
 405588c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055890:	e0bffc17 	ldw	r2,-16(fp)
 4055894:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4055898:	e0bffd0b 	ldhu	r2,-12(fp)
}
 405589c:	e037883a 	mov	sp,fp
 40558a0:	df000017 	ldw	fp,0(sp)
 40558a4:	dec00104 	addi	sp,sp,4
 40558a8:	f800283a 	ret

040558ac <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 40558ac:	defff904 	addi	sp,sp,-28
 40558b0:	dfc00615 	stw	ra,24(sp)
 40558b4:	df000515 	stw	fp,20(sp)
 40558b8:	df000504 	addi	fp,sp,20
 40558bc:	2005883a 	mov	r2,r4
 40558c0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40558c4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40558c8:	d0a06003 	ldbu	r2,-32384(gp)
 40558cc:	10803fcc 	andi	r2,r2,255
 40558d0:	10000226 	beq	r2,zero,40558dc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 40558d4:	0005883a 	mov	r2,zero
 40558d8:	00002506 	br	4055970 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40558dc:	0005303a 	rdctl	r2,status
 40558e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40558e4:	e0fffe17 	ldw	r3,-8(fp)
 40558e8:	00bfff84 	movi	r2,-2
 40558ec:	1884703a 	and	r2,r3,r2
 40558f0:	1001703a 	wrctl	status,r2
  
  return context;
 40558f4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 40558f8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 40558fc:	d0a05f17 	ldw	r2,-32388(gp)
 4055900:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 4055904:	d0a05f17 	ldw	r2,-32388(gp)
 4055908:	10000326 	beq	r2,zero,4055918 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 405590c:	d0a05f17 	ldw	r2,-32388(gp)
 4055910:	10800117 	ldw	r2,4(r2)
 4055914:	d0a05f15 	stw	r2,-32388(gp)
 4055918:	e0bffb17 	ldw	r2,-20(fp)
 405591c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055920:	e0bffc17 	ldw	r2,-16(fp)
 4055924:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 4055928:	e0bffd17 	ldw	r2,-12(fp)
 405592c:	10000f26 	beq	r2,zero,405596c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 4055930:	e0bffd17 	ldw	r2,-12(fp)
 4055934:	00c000c4 	movi	r3,3
 4055938:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 405593c:	e0bffd17 	ldw	r2,-12(fp)
 4055940:	e0ffff0b 	ldhu	r3,-4(fp)
 4055944:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 4055948:	e0bffd17 	ldw	r2,-12(fp)
 405594c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 4055950:	e0bffd17 	ldw	r2,-12(fp)
 4055954:	00c00fc4 	movi	r3,63
 4055958:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 405595c:	e0bffd17 	ldw	r2,-12(fp)
 4055960:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4055964:	e13ffd17 	ldw	r4,-12(fp)
 4055968:	4051b900 	call	4051b90 <OS_EventWaitListInit>
    }
    return (pevent);
 405596c:	e0bffd17 	ldw	r2,-12(fp)
}
 4055970:	e037883a 	mov	sp,fp
 4055974:	dfc00117 	ldw	ra,4(sp)
 4055978:	df000017 	ldw	fp,0(sp)
 405597c:	dec00204 	addi	sp,sp,8
 4055980:	f800283a 	ret

04055984 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4055984:	defff304 	addi	sp,sp,-52
 4055988:	dfc00c15 	stw	ra,48(sp)
 405598c:	df000b15 	stw	fp,44(sp)
 4055990:	df000b04 	addi	fp,sp,44
 4055994:	e13ffd15 	stw	r4,-12(fp)
 4055998:	2805883a 	mov	r2,r5
 405599c:	e1bfff15 	stw	r6,-4(fp)
 40559a0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40559a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40559a8:	e0bfff17 	ldw	r2,-4(fp)
 40559ac:	1000021e 	bne	r2,zero,40559b8 <OSSemDel+0x34>
        return (pevent);
 40559b0:	e0bffd17 	ldw	r2,-12(fp)
 40559b4:	00007e06 	br	4055bb0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40559b8:	e0bffd17 	ldw	r2,-12(fp)
 40559bc:	1000051e 	bne	r2,zero,40559d4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 40559c0:	e0bfff17 	ldw	r2,-4(fp)
 40559c4:	00c00104 	movi	r3,4
 40559c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 40559cc:	e0bffd17 	ldw	r2,-12(fp)
 40559d0:	00007706 	br	4055bb0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 40559d4:	e0bffd17 	ldw	r2,-12(fp)
 40559d8:	10800003 	ldbu	r2,0(r2)
 40559dc:	10803fcc 	andi	r2,r2,255
 40559e0:	108000e0 	cmpeqi	r2,r2,3
 40559e4:	1000051e 	bne	r2,zero,40559fc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 40559e8:	e0bfff17 	ldw	r2,-4(fp)
 40559ec:	00c00044 	movi	r3,1
 40559f0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 40559f4:	e0bffd17 	ldw	r2,-12(fp)
 40559f8:	00006d06 	br	4055bb0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40559fc:	d0a06003 	ldbu	r2,-32384(gp)
 4055a00:	10803fcc 	andi	r2,r2,255
 4055a04:	10000526 	beq	r2,zero,4055a1c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 4055a08:	e0bfff17 	ldw	r2,-4(fp)
 4055a0c:	00c003c4 	movi	r3,15
 4055a10:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4055a14:	e0bffd17 	ldw	r2,-12(fp)
 4055a18:	00006506 	br	4055bb0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4055a1c:	0005303a 	rdctl	r2,status
 4055a20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055a24:	e0fffc17 	ldw	r3,-16(fp)
 4055a28:	00bfff84 	movi	r2,-2
 4055a2c:	1884703a 	and	r2,r3,r2
 4055a30:	1001703a 	wrctl	status,r2
  
  return context;
 4055a34:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4055a38:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4055a3c:	e0bffd17 	ldw	r2,-12(fp)
 4055a40:	10800283 	ldbu	r2,10(r2)
 4055a44:	10803fcc 	andi	r2,r2,255
 4055a48:	10000326 	beq	r2,zero,4055a58 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4055a4c:	00800044 	movi	r2,1
 4055a50:	e0bff505 	stb	r2,-44(fp)
 4055a54:	00000106 	br	4055a5c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4055a58:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 4055a5c:	e0bffe03 	ldbu	r2,-8(fp)
 4055a60:	10000326 	beq	r2,zero,4055a70 <OSSemDel+0xec>
 4055a64:	10800060 	cmpeqi	r2,r2,1
 4055a68:	1000281e 	bne	r2,zero,4055b0c <OSSemDel+0x188>
 4055a6c:	00004506 	br	4055b84 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4055a70:	e0bff503 	ldbu	r2,-44(fp)
 4055a74:	1000161e 	bne	r2,zero,4055ad0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4055a78:	e0bffd17 	ldw	r2,-12(fp)
 4055a7c:	00c00fc4 	movi	r3,63
 4055a80:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4055a84:	e0bffd17 	ldw	r2,-12(fp)
 4055a88:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4055a8c:	e0bffd17 	ldw	r2,-12(fp)
 4055a90:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4055a94:	d0e05f17 	ldw	r3,-32388(gp)
 4055a98:	e0bffd17 	ldw	r2,-12(fp)
 4055a9c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4055aa0:	e0bffd17 	ldw	r2,-12(fp)
 4055aa4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4055aa8:	e0bffd17 	ldw	r2,-12(fp)
 4055aac:	d0a05f15 	stw	r2,-32388(gp)
 4055ab0:	e0bff717 	ldw	r2,-36(fp)
 4055ab4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055ab8:	e0bff817 	ldw	r2,-32(fp)
 4055abc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4055ac0:	e0bfff17 	ldw	r2,-4(fp)
 4055ac4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 4055ac8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 4055acc:	00003706 	br	4055bac <OSSemDel+0x228>
 4055ad0:	e0bff717 	ldw	r2,-36(fp)
 4055ad4:	e0bff915 	stw	r2,-28(fp)
 4055ad8:	e0bff917 	ldw	r2,-28(fp)
 4055adc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4055ae0:	e0bfff17 	ldw	r2,-4(fp)
 4055ae4:	00c01244 	movi	r3,73
 4055ae8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 4055aec:	e0bffd17 	ldw	r2,-12(fp)
 4055af0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4055af4:	00002d06 	br	4055bac <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4055af8:	000f883a 	mov	r7,zero
 4055afc:	01800044 	movi	r6,1
 4055b00:	000b883a 	mov	r5,zero
 4055b04:	e13ffd17 	ldw	r4,-12(fp)
 4055b08:	40515e00 	call	40515e0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4055b0c:	e0bffd17 	ldw	r2,-12(fp)
 4055b10:	10800283 	ldbu	r2,10(r2)
 4055b14:	10803fcc 	andi	r2,r2,255
 4055b18:	103ff71e 	bne	r2,zero,4055af8 <__flash_rwdata_start+0xffffb3c8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4055b1c:	e0bffd17 	ldw	r2,-12(fp)
 4055b20:	00c00fc4 	movi	r3,63
 4055b24:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4055b28:	e0bffd17 	ldw	r2,-12(fp)
 4055b2c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4055b30:	e0bffd17 	ldw	r2,-12(fp)
 4055b34:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4055b38:	d0e05f17 	ldw	r3,-32388(gp)
 4055b3c:	e0bffd17 	ldw	r2,-12(fp)
 4055b40:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4055b44:	e0bffd17 	ldw	r2,-12(fp)
 4055b48:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4055b4c:	e0bffd17 	ldw	r2,-12(fp)
 4055b50:	d0a05f15 	stw	r2,-32388(gp)
 4055b54:	e0bff717 	ldw	r2,-36(fp)
 4055b58:	e0bffa15 	stw	r2,-24(fp)
 4055b5c:	e0bffa17 	ldw	r2,-24(fp)
 4055b60:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4055b64:	e0bff503 	ldbu	r2,-44(fp)
 4055b68:	10800058 	cmpnei	r2,r2,1
 4055b6c:	1000011e 	bne	r2,zero,4055b74 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4055b70:	405202c0 	call	405202c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4055b74:	e0bfff17 	ldw	r2,-4(fp)
 4055b78:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 4055b7c:	e03ff615 	stw	zero,-40(fp)
             break;
 4055b80:	00000a06 	br	4055bac <OSSemDel+0x228>
 4055b84:	e0bff717 	ldw	r2,-36(fp)
 4055b88:	e0bffb15 	stw	r2,-20(fp)
 4055b8c:	e0bffb17 	ldw	r2,-20(fp)
 4055b90:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4055b94:	e0bfff17 	ldw	r2,-4(fp)
 4055b98:	00c001c4 	movi	r3,7
 4055b9c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4055ba0:	e0bffd17 	ldw	r2,-12(fp)
 4055ba4:	e0bff615 	stw	r2,-40(fp)
             break;
 4055ba8:	0001883a 	nop
    }
    return (pevent_return);
 4055bac:	e0bff617 	ldw	r2,-40(fp)
}
 4055bb0:	e037883a 	mov	sp,fp
 4055bb4:	dfc00117 	ldw	ra,4(sp)
 4055bb8:	df000017 	ldw	fp,0(sp)
 4055bbc:	dec00204 	addi	sp,sp,8
 4055bc0:	f800283a 	ret

04055bc4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4055bc4:	defff504 	addi	sp,sp,-44
 4055bc8:	dfc00a15 	stw	ra,40(sp)
 4055bcc:	df000915 	stw	fp,36(sp)
 4055bd0:	df000904 	addi	fp,sp,36
 4055bd4:	e13ffd15 	stw	r4,-12(fp)
 4055bd8:	2805883a 	mov	r2,r5
 4055bdc:	e1bfff15 	stw	r6,-4(fp)
 4055be0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4055be4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4055be8:	e0bfff17 	ldw	r2,-4(fp)
 4055bec:	10007226 	beq	r2,zero,4055db8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4055bf0:	e0bffd17 	ldw	r2,-12(fp)
 4055bf4:	1000041e 	bne	r2,zero,4055c08 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4055bf8:	e0bfff17 	ldw	r2,-4(fp)
 4055bfc:	00c00104 	movi	r3,4
 4055c00:	10c00005 	stb	r3,0(r2)
        return;
 4055c04:	00006d06 	br	4055dbc <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4055c08:	e0bffd17 	ldw	r2,-12(fp)
 4055c0c:	10800003 	ldbu	r2,0(r2)
 4055c10:	10803fcc 	andi	r2,r2,255
 4055c14:	108000e0 	cmpeqi	r2,r2,3
 4055c18:	1000041e 	bne	r2,zero,4055c2c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 4055c1c:	e0bfff17 	ldw	r2,-4(fp)
 4055c20:	00c00044 	movi	r3,1
 4055c24:	10c00005 	stb	r3,0(r2)
        return;
 4055c28:	00006406 	br	4055dbc <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 4055c2c:	d0a06003 	ldbu	r2,-32384(gp)
 4055c30:	10803fcc 	andi	r2,r2,255
 4055c34:	10000426 	beq	r2,zero,4055c48 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4055c38:	e0bfff17 	ldw	r2,-4(fp)
 4055c3c:	00c00084 	movi	r3,2
 4055c40:	10c00005 	stb	r3,0(r2)
        return;
 4055c44:	00005d06 	br	4055dbc <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4055c48:	d0a05203 	ldbu	r2,-32440(gp)
 4055c4c:	10803fcc 	andi	r2,r2,255
 4055c50:	10000426 	beq	r2,zero,4055c64 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 4055c54:	e0bfff17 	ldw	r2,-4(fp)
 4055c58:	00c00344 	movi	r3,13
 4055c5c:	10c00005 	stb	r3,0(r2)
        return;
 4055c60:	00005606 	br	4055dbc <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4055c64:	0005303a 	rdctl	r2,status
 4055c68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055c6c:	e0fffc17 	ldw	r3,-16(fp)
 4055c70:	00bfff84 	movi	r2,-2
 4055c74:	1884703a 	and	r2,r3,r2
 4055c78:	1001703a 	wrctl	status,r2
  
  return context;
 4055c7c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4055c80:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 4055c84:	e0bffd17 	ldw	r2,-12(fp)
 4055c88:	1080020b 	ldhu	r2,8(r2)
 4055c8c:	10bfffcc 	andi	r2,r2,65535
 4055c90:	10000d26 	beq	r2,zero,4055cc8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 4055c94:	e0bffd17 	ldw	r2,-12(fp)
 4055c98:	1080020b 	ldhu	r2,8(r2)
 4055c9c:	10bfffc4 	addi	r2,r2,-1
 4055ca0:	1007883a 	mov	r3,r2
 4055ca4:	e0bffd17 	ldw	r2,-12(fp)
 4055ca8:	10c0020d 	sth	r3,8(r2)
 4055cac:	e0bff717 	ldw	r2,-36(fp)
 4055cb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055cb4:	e0bff817 	ldw	r2,-32(fp)
 4055cb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4055cbc:	e0bfff17 	ldw	r2,-4(fp)
 4055cc0:	10000005 	stb	zero,0(r2)
        return;
 4055cc4:	00003d06 	br	4055dbc <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 4055cc8:	d0a06117 	ldw	r2,-32380(gp)
 4055ccc:	d0e06117 	ldw	r3,-32380(gp)
 4055cd0:	18c00c03 	ldbu	r3,48(r3)
 4055cd4:	18c00054 	ori	r3,r3,1
 4055cd8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4055cdc:	d0a06117 	ldw	r2,-32380(gp)
 4055ce0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 4055ce4:	d0a06117 	ldw	r2,-32380(gp)
 4055ce8:	e0fffe0b 	ldhu	r3,-8(fp)
 4055cec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 4055cf0:	e13ffd17 	ldw	r4,-12(fp)
 4055cf4:	40517780 	call	4051778 <OS_EventTaskWait>
 4055cf8:	e0bff717 	ldw	r2,-36(fp)
 4055cfc:	e0bffb15 	stw	r2,-20(fp)
 4055d00:	e0bffb17 	ldw	r2,-20(fp)
 4055d04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 4055d08:	405202c0 	call	405202c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4055d0c:	0005303a 	rdctl	r2,status
 4055d10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055d14:	e0fff917 	ldw	r3,-28(fp)
 4055d18:	00bfff84 	movi	r2,-2
 4055d1c:	1884703a 	and	r2,r3,r2
 4055d20:	1001703a 	wrctl	status,r2
  
  return context;
 4055d24:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 4055d28:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4055d2c:	d0a06117 	ldw	r2,-32380(gp)
 4055d30:	10800c43 	ldbu	r2,49(r2)
 4055d34:	10803fcc 	andi	r2,r2,255
 4055d38:	10000326 	beq	r2,zero,4055d48 <OSSemPend+0x184>
 4055d3c:	108000a0 	cmpeqi	r2,r2,2
 4055d40:	1000041e 	bne	r2,zero,4055d54 <OSSemPend+0x190>
 4055d44:	00000706 	br	4055d64 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 4055d48:	e0bfff17 	ldw	r2,-4(fp)
 4055d4c:	10000005 	stb	zero,0(r2)
             break;
 4055d50:	00000c06 	br	4055d84 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4055d54:	e0bfff17 	ldw	r2,-4(fp)
 4055d58:	00c00384 	movi	r3,14
 4055d5c:	10c00005 	stb	r3,0(r2)
             break;
 4055d60:	00000806 	br	4055d84 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 4055d64:	d0a06117 	ldw	r2,-32380(gp)
 4055d68:	e17ffd17 	ldw	r5,-12(fp)
 4055d6c:	1009883a 	mov	r4,r2
 4055d70:	40519d80 	call	40519d8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4055d74:	e0bfff17 	ldw	r2,-4(fp)
 4055d78:	00c00284 	movi	r3,10
 4055d7c:	10c00005 	stb	r3,0(r2)
             break;
 4055d80:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4055d84:	d0a06117 	ldw	r2,-32380(gp)
 4055d88:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4055d8c:	d0a06117 	ldw	r2,-32380(gp)
 4055d90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4055d94:	d0a06117 	ldw	r2,-32380(gp)
 4055d98:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4055d9c:	d0a06117 	ldw	r2,-32380(gp)
 4055da0:	10000815 	stw	zero,32(r2)
 4055da4:	e0bff717 	ldw	r2,-36(fp)
 4055da8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055dac:	e0bffa17 	ldw	r2,-24(fp)
 4055db0:	1001703a 	wrctl	status,r2
 4055db4:	00000106 	br	4055dbc <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 4055db8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 4055dbc:	e037883a 	mov	sp,fp
 4055dc0:	dfc00117 	ldw	ra,4(sp)
 4055dc4:	df000017 	ldw	fp,0(sp)
 4055dc8:	dec00204 	addi	sp,sp,8
 4055dcc:	f800283a 	ret

04055dd0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4055dd0:	defff604 	addi	sp,sp,-40
 4055dd4:	dfc00915 	stw	ra,36(sp)
 4055dd8:	df000815 	stw	fp,32(sp)
 4055ddc:	df000804 	addi	fp,sp,32
 4055de0:	e13ffd15 	stw	r4,-12(fp)
 4055de4:	2805883a 	mov	r2,r5
 4055de8:	e1bfff15 	stw	r6,-4(fp)
 4055dec:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4055df0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4055df4:	e0bfff17 	ldw	r2,-4(fp)
 4055df8:	1000021e 	bne	r2,zero,4055e04 <OSSemPendAbort+0x34>
        return (0);
 4055dfc:	0005883a 	mov	r2,zero
 4055e00:	00004906 	br	4055f28 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4055e04:	e0bffd17 	ldw	r2,-12(fp)
 4055e08:	1000051e 	bne	r2,zero,4055e20 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4055e0c:	e0bfff17 	ldw	r2,-4(fp)
 4055e10:	00c00104 	movi	r3,4
 4055e14:	10c00005 	stb	r3,0(r2)
        return (0);
 4055e18:	0005883a 	mov	r2,zero
 4055e1c:	00004206 	br	4055f28 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4055e20:	e0bffd17 	ldw	r2,-12(fp)
 4055e24:	10800003 	ldbu	r2,0(r2)
 4055e28:	10803fcc 	andi	r2,r2,255
 4055e2c:	108000e0 	cmpeqi	r2,r2,3
 4055e30:	1000051e 	bne	r2,zero,4055e48 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4055e34:	e0bfff17 	ldw	r2,-4(fp)
 4055e38:	00c00044 	movi	r3,1
 4055e3c:	10c00005 	stb	r3,0(r2)
        return (0);
 4055e40:	0005883a 	mov	r2,zero
 4055e44:	00003806 	br	4055f28 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4055e48:	0005303a 	rdctl	r2,status
 4055e4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055e50:	e0fffc17 	ldw	r3,-16(fp)
 4055e54:	00bfff84 	movi	r2,-2
 4055e58:	1884703a 	and	r2,r3,r2
 4055e5c:	1001703a 	wrctl	status,r2
  
  return context;
 4055e60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4055e64:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 4055e68:	e0bffd17 	ldw	r2,-12(fp)
 4055e6c:	10800283 	ldbu	r2,10(r2)
 4055e70:	10803fcc 	andi	r2,r2,255
 4055e74:	10002526 	beq	r2,zero,4055f0c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 4055e78:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 4055e7c:	e0bffe03 	ldbu	r2,-8(fp)
 4055e80:	10800060 	cmpeqi	r2,r2,1
 4055e84:	10000e26 	beq	r2,zero,4055ec0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4055e88:	00000806 	br	4055eac <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4055e8c:	01c00084 	movi	r7,2
 4055e90:	01800044 	movi	r6,1
 4055e94:	000b883a 	mov	r5,zero
 4055e98:	e13ffd17 	ldw	r4,-12(fp)
 4055e9c:	40515e00 	call	40515e0 <OS_EventTaskRdy>
                     nbr_tasks++;
 4055ea0:	e0bff803 	ldbu	r2,-32(fp)
 4055ea4:	10800044 	addi	r2,r2,1
 4055ea8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 4055eac:	e0bffd17 	ldw	r2,-12(fp)
 4055eb0:	10800283 	ldbu	r2,10(r2)
 4055eb4:	10803fcc 	andi	r2,r2,255
 4055eb8:	103ff41e 	bne	r2,zero,4055e8c <__flash_rwdata_start+0xffffb75c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4055ebc:	00000906 	br	4055ee4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4055ec0:	01c00084 	movi	r7,2
 4055ec4:	01800044 	movi	r6,1
 4055ec8:	000b883a 	mov	r5,zero
 4055ecc:	e13ffd17 	ldw	r4,-12(fp)
 4055ed0:	40515e00 	call	40515e0 <OS_EventTaskRdy>
                 nbr_tasks++;
 4055ed4:	e0bff803 	ldbu	r2,-32(fp)
 4055ed8:	10800044 	addi	r2,r2,1
 4055edc:	e0bff805 	stb	r2,-32(fp)
                 break;
 4055ee0:	0001883a 	nop
 4055ee4:	e0bff917 	ldw	r2,-28(fp)
 4055ee8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055eec:	e0bffa17 	ldw	r2,-24(fp)
 4055ef0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4055ef4:	405202c0 	call	405202c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4055ef8:	e0bfff17 	ldw	r2,-4(fp)
 4055efc:	00c00384 	movi	r3,14
 4055f00:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 4055f04:	e0bff803 	ldbu	r2,-32(fp)
 4055f08:	00000706 	br	4055f28 <OSSemPendAbort+0x158>
 4055f0c:	e0bff917 	ldw	r2,-28(fp)
 4055f10:	e0bffb15 	stw	r2,-20(fp)
 4055f14:	e0bffb17 	ldw	r2,-20(fp)
 4055f18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4055f1c:	e0bfff17 	ldw	r2,-4(fp)
 4055f20:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 4055f24:	0005883a 	mov	r2,zero
}
 4055f28:	e037883a 	mov	sp,fp
 4055f2c:	dfc00117 	ldw	ra,4(sp)
 4055f30:	df000017 	ldw	fp,0(sp)
 4055f34:	dec00204 	addi	sp,sp,8
 4055f38:	f800283a 	ret

04055f3c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 4055f3c:	defff804 	addi	sp,sp,-32
 4055f40:	dfc00715 	stw	ra,28(sp)
 4055f44:	df000615 	stw	fp,24(sp)
 4055f48:	df000604 	addi	fp,sp,24
 4055f4c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4055f50:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4055f54:	e0bfff17 	ldw	r2,-4(fp)
 4055f58:	1000021e 	bne	r2,zero,4055f64 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 4055f5c:	00800104 	movi	r2,4
 4055f60:	00003506 	br	4056038 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4055f64:	e0bfff17 	ldw	r2,-4(fp)
 4055f68:	10800003 	ldbu	r2,0(r2)
 4055f6c:	10803fcc 	andi	r2,r2,255
 4055f70:	108000e0 	cmpeqi	r2,r2,3
 4055f74:	1000021e 	bne	r2,zero,4055f80 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 4055f78:	00800044 	movi	r2,1
 4055f7c:	00002e06 	br	4056038 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4055f80:	0005303a 	rdctl	r2,status
 4055f84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4055f88:	e0fffe17 	ldw	r3,-8(fp)
 4055f8c:	00bfff84 	movi	r2,-2
 4055f90:	1884703a 	and	r2,r3,r2
 4055f94:	1001703a 	wrctl	status,r2
  
  return context;
 4055f98:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4055f9c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4055fa0:	e0bfff17 	ldw	r2,-4(fp)
 4055fa4:	10800283 	ldbu	r2,10(r2)
 4055fa8:	10803fcc 	andi	r2,r2,255
 4055fac:	10000c26 	beq	r2,zero,4055fe0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4055fb0:	000f883a 	mov	r7,zero
 4055fb4:	01800044 	movi	r6,1
 4055fb8:	000b883a 	mov	r5,zero
 4055fbc:	e13fff17 	ldw	r4,-4(fp)
 4055fc0:	40515e00 	call	40515e0 <OS_EventTaskRdy>
 4055fc4:	e0bffa17 	ldw	r2,-24(fp)
 4055fc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4055fcc:	e0bffb17 	ldw	r2,-20(fp)
 4055fd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4055fd4:	405202c0 	call	405202c <OS_Sched>
        return (OS_ERR_NONE);
 4055fd8:	0005883a 	mov	r2,zero
 4055fdc:	00001606 	br	4056038 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4055fe0:	e0bfff17 	ldw	r2,-4(fp)
 4055fe4:	1080020b 	ldhu	r2,8(r2)
 4055fe8:	10ffffcc 	andi	r3,r2,65535
 4055fec:	00bfffd4 	movui	r2,65535
 4055ff0:	18800c26 	beq	r3,r2,4056024 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4055ff4:	e0bfff17 	ldw	r2,-4(fp)
 4055ff8:	1080020b 	ldhu	r2,8(r2)
 4055ffc:	10800044 	addi	r2,r2,1
 4056000:	1007883a 	mov	r3,r2
 4056004:	e0bfff17 	ldw	r2,-4(fp)
 4056008:	10c0020d 	sth	r3,8(r2)
 405600c:	e0bffa17 	ldw	r2,-24(fp)
 4056010:	e0bffc15 	stw	r2,-16(fp)
 4056014:	e0bffc17 	ldw	r2,-16(fp)
 4056018:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 405601c:	0005883a 	mov	r2,zero
 4056020:	00000506 	br	4056038 <OSSemPost+0xfc>
 4056024:	e0bffa17 	ldw	r2,-24(fp)
 4056028:	e0bffd15 	stw	r2,-12(fp)
 405602c:	e0bffd17 	ldw	r2,-12(fp)
 4056030:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 4056034:	00800c84 	movi	r2,50
}
 4056038:	e037883a 	mov	sp,fp
 405603c:	dfc00117 	ldw	ra,4(sp)
 4056040:	df000017 	ldw	fp,0(sp)
 4056044:	dec00204 	addi	sp,sp,8
 4056048:	f800283a 	ret

0405604c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 405604c:	defff704 	addi	sp,sp,-36
 4056050:	df000815 	stw	fp,32(sp)
 4056054:	df000804 	addi	fp,sp,32
 4056058:	e13ffe15 	stw	r4,-8(fp)
 405605c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4056060:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4056064:	e0bffe17 	ldw	r2,-8(fp)
 4056068:	1000021e 	bne	r2,zero,4056074 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 405606c:	00800104 	movi	r2,4
 4056070:	00003606 	br	405614c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 4056074:	e0bfff17 	ldw	r2,-4(fp)
 4056078:	1000021e 	bne	r2,zero,4056084 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 405607c:	00800244 	movi	r2,9
 4056080:	00003206 	br	405614c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4056084:	e0bffe17 	ldw	r2,-8(fp)
 4056088:	10800003 	ldbu	r2,0(r2)
 405608c:	10803fcc 	andi	r2,r2,255
 4056090:	108000e0 	cmpeqi	r2,r2,3
 4056094:	1000021e 	bne	r2,zero,40560a0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4056098:	00800044 	movi	r2,1
 405609c:	00002b06 	br	405614c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40560a0:	0005303a 	rdctl	r2,status
 40560a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40560a8:	e0fffd17 	ldw	r3,-12(fp)
 40560ac:	00bfff84 	movi	r2,-2
 40560b0:	1884703a 	and	r2,r3,r2
 40560b4:	1001703a 	wrctl	status,r2
  
  return context;
 40560b8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40560bc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 40560c0:	e0bffe17 	ldw	r2,-8(fp)
 40560c4:	10c00283 	ldbu	r3,10(r2)
 40560c8:	e0bfff17 	ldw	r2,-4(fp)
 40560cc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 40560d0:	e0bffe17 	ldw	r2,-8(fp)
 40560d4:	108002c4 	addi	r2,r2,11
 40560d8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 40560dc:	e0bfff17 	ldw	r2,-4(fp)
 40560e0:	10800084 	addi	r2,r2,2
 40560e4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40560e8:	e03ffa05 	stb	zero,-24(fp)
 40560ec:	00000b06 	br	405611c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 40560f0:	e0bff917 	ldw	r2,-28(fp)
 40560f4:	10c00044 	addi	r3,r2,1
 40560f8:	e0fff915 	stw	r3,-28(fp)
 40560fc:	e0fff817 	ldw	r3,-32(fp)
 4056100:	19000044 	addi	r4,r3,1
 4056104:	e13ff815 	stw	r4,-32(fp)
 4056108:	18c00003 	ldbu	r3,0(r3)
 405610c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4056110:	e0bffa03 	ldbu	r2,-24(fp)
 4056114:	10800044 	addi	r2,r2,1
 4056118:	e0bffa05 	stb	r2,-24(fp)
 405611c:	e0bffa03 	ldbu	r2,-24(fp)
 4056120:	108000f0 	cmpltui	r2,r2,3
 4056124:	103ff21e 	bne	r2,zero,40560f0 <__flash_rwdata_start+0xffffb9c0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 4056128:	e0bffe17 	ldw	r2,-8(fp)
 405612c:	10c0020b 	ldhu	r3,8(r2)
 4056130:	e0bfff17 	ldw	r2,-4(fp)
 4056134:	10c0000d 	sth	r3,0(r2)
 4056138:	e0bffb17 	ldw	r2,-20(fp)
 405613c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4056140:	e0bffc17 	ldw	r2,-16(fp)
 4056144:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4056148:	0005883a 	mov	r2,zero
}
 405614c:	e037883a 	mov	sp,fp
 4056150:	df000017 	ldw	fp,0(sp)
 4056154:	dec00104 	addi	sp,sp,4
 4056158:	f800283a 	ret

0405615c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 405615c:	defff904 	addi	sp,sp,-28
 4056160:	df000615 	stw	fp,24(sp)
 4056164:	df000604 	addi	fp,sp,24
 4056168:	e13ffd15 	stw	r4,-12(fp)
 405616c:	2805883a 	mov	r2,r5
 4056170:	e1bfff15 	stw	r6,-4(fp)
 4056174:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4056178:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 405617c:	e0bfff17 	ldw	r2,-4(fp)
 4056180:	10003126 	beq	r2,zero,4056248 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4056184:	e0bffd17 	ldw	r2,-12(fp)
 4056188:	1000041e 	bne	r2,zero,405619c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 405618c:	e0bfff17 	ldw	r2,-4(fp)
 4056190:	00c00104 	movi	r3,4
 4056194:	10c00005 	stb	r3,0(r2)
        return;
 4056198:	00002c06 	br	405624c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 405619c:	e0bffd17 	ldw	r2,-12(fp)
 40561a0:	10800003 	ldbu	r2,0(r2)
 40561a4:	10803fcc 	andi	r2,r2,255
 40561a8:	108000e0 	cmpeqi	r2,r2,3
 40561ac:	1000041e 	bne	r2,zero,40561c0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 40561b0:	e0bfff17 	ldw	r2,-4(fp)
 40561b4:	00c00044 	movi	r3,1
 40561b8:	10c00005 	stb	r3,0(r2)
        return;
 40561bc:	00002306 	br	405624c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40561c0:	0005303a 	rdctl	r2,status
 40561c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40561c8:	e0fffc17 	ldw	r3,-16(fp)
 40561cc:	00bfff84 	movi	r2,-2
 40561d0:	1884703a 	and	r2,r3,r2
 40561d4:	1001703a 	wrctl	status,r2
  
  return context;
 40561d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40561dc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 40561e0:	e0bfff17 	ldw	r2,-4(fp)
 40561e4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 40561e8:	e0bffd17 	ldw	r2,-12(fp)
 40561ec:	1080020b 	ldhu	r2,8(r2)
 40561f0:	10bfffcc 	andi	r2,r2,65535
 40561f4:	10000426 	beq	r2,zero,4056208 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 40561f8:	e0bffd17 	ldw	r2,-12(fp)
 40561fc:	e0fffe0b 	ldhu	r3,-8(fp)
 4056200:	10c0020d 	sth	r3,8(r2)
 4056204:	00000b06 	br	4056234 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 4056208:	e0bffd17 	ldw	r2,-12(fp)
 405620c:	10800283 	ldbu	r2,10(r2)
 4056210:	10803fcc 	andi	r2,r2,255
 4056214:	1000041e 	bne	r2,zero,4056228 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 4056218:	e0bffd17 	ldw	r2,-12(fp)
 405621c:	e0fffe0b 	ldhu	r3,-8(fp)
 4056220:	10c0020d 	sth	r3,8(r2)
 4056224:	00000306 	br	4056234 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 4056228:	e0bfff17 	ldw	r2,-4(fp)
 405622c:	00c01244 	movi	r3,73
 4056230:	10c00005 	stb	r3,0(r2)
 4056234:	e0bffa17 	ldw	r2,-24(fp)
 4056238:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 405623c:	e0bffb17 	ldw	r2,-20(fp)
 4056240:	1001703a 	wrctl	status,r2
 4056244:	00000106 	br	405624c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 4056248:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 405624c:	e037883a 	mov	sp,fp
 4056250:	df000017 	ldw	fp,0(sp)
 4056254:	dec00104 	addi	sp,sp,4
 4056258:	f800283a 	ret

0405625c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 405625c:	defff104 	addi	sp,sp,-60
 4056260:	dfc00e15 	stw	ra,56(sp)
 4056264:	df000d15 	stw	fp,52(sp)
 4056268:	df000d04 	addi	fp,sp,52
 405626c:	2007883a 	mov	r3,r4
 4056270:	2805883a 	mov	r2,r5
 4056274:	e0fffe05 	stb	r3,-8(fp)
 4056278:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 405627c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 4056280:	e0bffe03 	ldbu	r2,-8(fp)
 4056284:	10800530 	cmpltui	r2,r2,20
 4056288:	1000051e 	bne	r2,zero,40562a0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 405628c:	e0bffe03 	ldbu	r2,-8(fp)
 4056290:	10803fe0 	cmpeqi	r2,r2,255
 4056294:	1000021e 	bne	r2,zero,40562a0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 4056298:	00800a84 	movi	r2,42
 405629c:	00012606 	br	4056738 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 40562a0:	e0bfff03 	ldbu	r2,-4(fp)
 40562a4:	10800530 	cmpltui	r2,r2,20
 40562a8:	1000021e 	bne	r2,zero,40562b4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 40562ac:	00800a84 	movi	r2,42
 40562b0:	00012106 	br	4056738 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40562b4:	0005303a 	rdctl	r2,status
 40562b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40562bc:	e0fffd17 	ldw	r3,-12(fp)
 40562c0:	00bfff84 	movi	r2,-2
 40562c4:	1884703a 	and	r2,r3,r2
 40562c8:	1001703a 	wrctl	status,r2
  
  return context;
 40562cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40562d0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 40562d4:	e0ffff03 	ldbu	r3,-4(fp)
 40562d8:	00808074 	movhi	r2,513
 40562dc:	10958d04 	addi	r2,r2,22068
 40562e0:	18c7883a 	add	r3,r3,r3
 40562e4:	18c7883a 	add	r3,r3,r3
 40562e8:	10c5883a 	add	r2,r2,r3
 40562ec:	10800017 	ldw	r2,0(r2)
 40562f0:	10000626 	beq	r2,zero,405630c <OSTaskChangePrio+0xb0>
 40562f4:	e0bff517 	ldw	r2,-44(fp)
 40562f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40562fc:	e0bff617 	ldw	r2,-40(fp)
 4056300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 4056304:	00800a04 	movi	r2,40
 4056308:	00010b06 	br	4056738 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 405630c:	e0bffe03 	ldbu	r2,-8(fp)
 4056310:	10803fd8 	cmpnei	r2,r2,255
 4056314:	1000031e 	bne	r2,zero,4056324 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 4056318:	d0a06117 	ldw	r2,-32380(gp)
 405631c:	10800c83 	ldbu	r2,50(r2)
 4056320:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 4056324:	e0fffe03 	ldbu	r3,-8(fp)
 4056328:	00808074 	movhi	r2,513
 405632c:	10958d04 	addi	r2,r2,22068
 4056330:	18c7883a 	add	r3,r3,r3
 4056334:	18c7883a 	add	r3,r3,r3
 4056338:	10c5883a 	add	r2,r2,r3
 405633c:	10800017 	ldw	r2,0(r2)
 4056340:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 4056344:	e0bff817 	ldw	r2,-32(fp)
 4056348:	1000061e 	bne	r2,zero,4056364 <OSTaskChangePrio+0x108>
 405634c:	e0bff517 	ldw	r2,-44(fp)
 4056350:	e0bff715 	stw	r2,-36(fp)
 4056354:	e0bff717 	ldw	r2,-36(fp)
 4056358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 405635c:	00800a44 	movi	r2,41
 4056360:	0000f506 	br	4056738 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 4056364:	e0bff817 	ldw	r2,-32(fp)
 4056368:	10800058 	cmpnei	r2,r2,1
 405636c:	1000061e 	bne	r2,zero,4056388 <OSTaskChangePrio+0x12c>
 4056370:	e0bff517 	ldw	r2,-44(fp)
 4056374:	e0bff915 	stw	r2,-28(fp)
 4056378:	e0bff917 	ldw	r2,-28(fp)
 405637c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 4056380:	008010c4 	movi	r2,67
 4056384:	0000ec06 	br	4056738 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 4056388:	e0bfff03 	ldbu	r2,-4(fp)
 405638c:	1004d0fa 	srli	r2,r2,3
 4056390:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 4056394:	e0bfff03 	ldbu	r2,-4(fp)
 4056398:	108001cc 	andi	r2,r2,7
 405639c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 40563a0:	e0bffb03 	ldbu	r2,-20(fp)
 40563a4:	00c00044 	movi	r3,1
 40563a8:	1884983a 	sll	r2,r3,r2
 40563ac:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 40563b0:	e0bffb43 	ldbu	r2,-19(fp)
 40563b4:	00c00044 	movi	r3,1
 40563b8:	1884983a 	sll	r2,r3,r2
 40563bc:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 40563c0:	e0fffe03 	ldbu	r3,-8(fp)
 40563c4:	00808074 	movhi	r2,513
 40563c8:	10958d04 	addi	r2,r2,22068
 40563cc:	18c7883a 	add	r3,r3,r3
 40563d0:	18c7883a 	add	r3,r3,r3
 40563d4:	10c5883a 	add	r2,r2,r3
 40563d8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 40563dc:	e0ffff03 	ldbu	r3,-4(fp)
 40563e0:	00808074 	movhi	r2,513
 40563e4:	10958d04 	addi	r2,r2,22068
 40563e8:	18c7883a 	add	r3,r3,r3
 40563ec:	18c7883a 	add	r3,r3,r3
 40563f0:	10c5883a 	add	r2,r2,r3
 40563f4:	e0fff817 	ldw	r3,-32(fp)
 40563f8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 40563fc:	e0bff817 	ldw	r2,-32(fp)
 4056400:	10800d03 	ldbu	r2,52(r2)
 4056404:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 4056408:	e0bff817 	ldw	r2,-32(fp)
 405640c:	10800d83 	ldbu	r2,54(r2)
 4056410:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 4056414:	e0bff817 	ldw	r2,-32(fp)
 4056418:	10800d43 	ldbu	r2,53(r2)
 405641c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4056420:	e0fffc03 	ldbu	r3,-16(fp)
 4056424:	d0a05e44 	addi	r2,gp,-32391
 4056428:	1885883a 	add	r2,r3,r2
 405642c:	10c00003 	ldbu	r3,0(r2)
 4056430:	e0bffc83 	ldbu	r2,-14(fp)
 4056434:	1884703a 	and	r2,r3,r2
 4056438:	10803fcc 	andi	r2,r2,255
 405643c:	10002826 	beq	r2,zero,40564e0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 4056440:	e0fffc03 	ldbu	r3,-16(fp)
 4056444:	e13ffc03 	ldbu	r4,-16(fp)
 4056448:	d0a05e44 	addi	r2,gp,-32391
 405644c:	2085883a 	add	r2,r4,r2
 4056450:	10800003 	ldbu	r2,0(r2)
 4056454:	1009883a 	mov	r4,r2
 4056458:	e0bffc83 	ldbu	r2,-14(fp)
 405645c:	0084303a 	nor	r2,zero,r2
 4056460:	2084703a 	and	r2,r4,r2
 4056464:	1009883a 	mov	r4,r2
 4056468:	d0a05e44 	addi	r2,gp,-32391
 405646c:	1885883a 	add	r2,r3,r2
 4056470:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 4056474:	e0fffc03 	ldbu	r3,-16(fp)
 4056478:	d0a05e44 	addi	r2,gp,-32391
 405647c:	1885883a 	add	r2,r3,r2
 4056480:	10800003 	ldbu	r2,0(r2)
 4056484:	10803fcc 	andi	r2,r2,255
 4056488:	1000061e 	bne	r2,zero,40564a4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 405648c:	e0bffc43 	ldbu	r2,-15(fp)
 4056490:	0084303a 	nor	r2,zero,r2
 4056494:	1007883a 	mov	r3,r2
 4056498:	d0a05e03 	ldbu	r2,-32392(gp)
 405649c:	1884703a 	and	r2,r3,r2
 40564a0:	d0a05e05 	stb	r2,-32392(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 40564a4:	d0e05e03 	ldbu	r3,-32392(gp)
 40564a8:	e0bffb83 	ldbu	r2,-18(fp)
 40564ac:	1884b03a 	or	r2,r3,r2
 40564b0:	d0a05e05 	stb	r2,-32392(gp)
         OSRdyTbl[y_new] |= bitx_new;
 40564b4:	e0fffb03 	ldbu	r3,-20(fp)
 40564b8:	e13ffb03 	ldbu	r4,-20(fp)
 40564bc:	d0a05e44 	addi	r2,gp,-32391
 40564c0:	2085883a 	add	r2,r4,r2
 40564c4:	11000003 	ldbu	r4,0(r2)
 40564c8:	e0bffbc3 	ldbu	r2,-17(fp)
 40564cc:	2084b03a 	or	r2,r4,r2
 40564d0:	1009883a 	mov	r4,r2
 40564d4:	d0a05e44 	addi	r2,gp,-32391
 40564d8:	1885883a 	add	r2,r3,r2
 40564dc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 40564e0:	e0bff817 	ldw	r2,-32(fp)
 40564e4:	10800717 	ldw	r2,28(r2)
 40564e8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 40564ec:	e0bff317 	ldw	r2,-52(fp)
 40564f0:	10003326 	beq	r2,zero,40565c0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 40564f4:	e0bffc03 	ldbu	r2,-16(fp)
 40564f8:	e0fffc03 	ldbu	r3,-16(fp)
 40564fc:	e13ff317 	ldw	r4,-52(fp)
 4056500:	20c7883a 	add	r3,r4,r3
 4056504:	18c002c4 	addi	r3,r3,11
 4056508:	18c00003 	ldbu	r3,0(r3)
 405650c:	1809883a 	mov	r4,r3
 4056510:	e0fffc83 	ldbu	r3,-14(fp)
 4056514:	00c6303a 	nor	r3,zero,r3
 4056518:	20c6703a 	and	r3,r4,r3
 405651c:	1809883a 	mov	r4,r3
 4056520:	e0fff317 	ldw	r3,-52(fp)
 4056524:	1885883a 	add	r2,r3,r2
 4056528:	108002c4 	addi	r2,r2,11
 405652c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 4056530:	e0bffc03 	ldbu	r2,-16(fp)
 4056534:	e0fff317 	ldw	r3,-52(fp)
 4056538:	1885883a 	add	r2,r3,r2
 405653c:	108002c4 	addi	r2,r2,11
 4056540:	10800003 	ldbu	r2,0(r2)
 4056544:	10803fcc 	andi	r2,r2,255
 4056548:	1000091e 	bne	r2,zero,4056570 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 405654c:	e0bff317 	ldw	r2,-52(fp)
 4056550:	10800283 	ldbu	r2,10(r2)
 4056554:	1007883a 	mov	r3,r2
 4056558:	e0bffc43 	ldbu	r2,-15(fp)
 405655c:	0084303a 	nor	r2,zero,r2
 4056560:	1884703a 	and	r2,r3,r2
 4056564:	1007883a 	mov	r3,r2
 4056568:	e0bff317 	ldw	r2,-52(fp)
 405656c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 4056570:	e0bff317 	ldw	r2,-52(fp)
 4056574:	10c00283 	ldbu	r3,10(r2)
 4056578:	e0bffb83 	ldbu	r2,-18(fp)
 405657c:	1884b03a 	or	r2,r3,r2
 4056580:	1007883a 	mov	r3,r2
 4056584:	e0bff317 	ldw	r2,-52(fp)
 4056588:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 405658c:	e0bffb03 	ldbu	r2,-20(fp)
 4056590:	e0fffb03 	ldbu	r3,-20(fp)
 4056594:	e13ff317 	ldw	r4,-52(fp)
 4056598:	20c7883a 	add	r3,r4,r3
 405659c:	18c002c4 	addi	r3,r3,11
 40565a0:	19000003 	ldbu	r4,0(r3)
 40565a4:	e0fffbc3 	ldbu	r3,-17(fp)
 40565a8:	20c6b03a 	or	r3,r4,r3
 40565ac:	1809883a 	mov	r4,r3
 40565b0:	e0fff317 	ldw	r3,-52(fp)
 40565b4:	1885883a 	add	r2,r3,r2
 40565b8:	108002c4 	addi	r2,r2,11
 40565bc:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 40565c0:	e0bff817 	ldw	r2,-32(fp)
 40565c4:	10800817 	ldw	r2,32(r2)
 40565c8:	10004226 	beq	r2,zero,40566d4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 40565cc:	e0bff817 	ldw	r2,-32(fp)
 40565d0:	10800817 	ldw	r2,32(r2)
 40565d4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 40565d8:	e0bff417 	ldw	r2,-48(fp)
 40565dc:	10800017 	ldw	r2,0(r2)
 40565e0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 40565e4:	00003906 	br	40566cc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 40565e8:	e0bffc03 	ldbu	r2,-16(fp)
 40565ec:	e0fffc03 	ldbu	r3,-16(fp)
 40565f0:	e13ff317 	ldw	r4,-52(fp)
 40565f4:	20c7883a 	add	r3,r4,r3
 40565f8:	18c002c4 	addi	r3,r3,11
 40565fc:	18c00003 	ldbu	r3,0(r3)
 4056600:	1809883a 	mov	r4,r3
 4056604:	e0fffc83 	ldbu	r3,-14(fp)
 4056608:	00c6303a 	nor	r3,zero,r3
 405660c:	20c6703a 	and	r3,r4,r3
 4056610:	1809883a 	mov	r4,r3
 4056614:	e0fff317 	ldw	r3,-52(fp)
 4056618:	1885883a 	add	r2,r3,r2
 405661c:	108002c4 	addi	r2,r2,11
 4056620:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 4056624:	e0bffc03 	ldbu	r2,-16(fp)
 4056628:	e0fff317 	ldw	r3,-52(fp)
 405662c:	1885883a 	add	r2,r3,r2
 4056630:	108002c4 	addi	r2,r2,11
 4056634:	10800003 	ldbu	r2,0(r2)
 4056638:	10803fcc 	andi	r2,r2,255
 405663c:	1000091e 	bne	r2,zero,4056664 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 4056640:	e0bff317 	ldw	r2,-52(fp)
 4056644:	10800283 	ldbu	r2,10(r2)
 4056648:	1007883a 	mov	r3,r2
 405664c:	e0bffc43 	ldbu	r2,-15(fp)
 4056650:	0084303a 	nor	r2,zero,r2
 4056654:	1884703a 	and	r2,r3,r2
 4056658:	1007883a 	mov	r3,r2
 405665c:	e0bff317 	ldw	r2,-52(fp)
 4056660:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 4056664:	e0bff317 	ldw	r2,-52(fp)
 4056668:	10c00283 	ldbu	r3,10(r2)
 405666c:	e0bffb83 	ldbu	r2,-18(fp)
 4056670:	1884b03a 	or	r2,r3,r2
 4056674:	1007883a 	mov	r3,r2
 4056678:	e0bff317 	ldw	r2,-52(fp)
 405667c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 4056680:	e0bffb03 	ldbu	r2,-20(fp)
 4056684:	e0fffb03 	ldbu	r3,-20(fp)
 4056688:	e13ff317 	ldw	r4,-52(fp)
 405668c:	20c7883a 	add	r3,r4,r3
 4056690:	18c002c4 	addi	r3,r3,11
 4056694:	19000003 	ldbu	r4,0(r3)
 4056698:	e0fffbc3 	ldbu	r3,-17(fp)
 405669c:	20c6b03a 	or	r3,r4,r3
 40566a0:	1809883a 	mov	r4,r3
 40566a4:	e0fff317 	ldw	r3,-52(fp)
 40566a8:	1885883a 	add	r2,r3,r2
 40566ac:	108002c4 	addi	r2,r2,11
 40566b0:	11000005 	stb	r4,0(r2)
            pevents++;
 40566b4:	e0bff417 	ldw	r2,-48(fp)
 40566b8:	10800104 	addi	r2,r2,4
 40566bc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 40566c0:	e0bff417 	ldw	r2,-48(fp)
 40566c4:	10800017 	ldw	r2,0(r2)
 40566c8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 40566cc:	e0bff317 	ldw	r2,-52(fp)
 40566d0:	103fc51e 	bne	r2,zero,40565e8 <__flash_rwdata_start+0xffffbeb8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 40566d4:	e0bff817 	ldw	r2,-32(fp)
 40566d8:	e0ffff03 	ldbu	r3,-4(fp)
 40566dc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 40566e0:	e0bff817 	ldw	r2,-32(fp)
 40566e4:	e0fffb03 	ldbu	r3,-20(fp)
 40566e8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 40566ec:	e0bff817 	ldw	r2,-32(fp)
 40566f0:	e0fffb43 	ldbu	r3,-19(fp)
 40566f4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 40566f8:	e0bff817 	ldw	r2,-32(fp)
 40566fc:	e0fffb83 	ldbu	r3,-18(fp)
 4056700:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 4056704:	e0bff817 	ldw	r2,-32(fp)
 4056708:	e0fffbc3 	ldbu	r3,-17(fp)
 405670c:	10c00d45 	stb	r3,53(r2)
 4056710:	e0bff517 	ldw	r2,-44(fp)
 4056714:	e0bffa15 	stw	r2,-24(fp)
 4056718:	e0bffa17 	ldw	r2,-24(fp)
 405671c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4056720:	d0a05243 	ldbu	r2,-32439(gp)
 4056724:	10803fcc 	andi	r2,r2,255
 4056728:	10800058 	cmpnei	r2,r2,1
 405672c:	1000011e 	bne	r2,zero,4056734 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 4056730:	405202c0 	call	405202c <OS_Sched>
    }
    return (OS_ERR_NONE);
 4056734:	0005883a 	mov	r2,zero
}
 4056738:	e037883a 	mov	sp,fp
 405673c:	dfc00117 	ldw	ra,4(sp)
 4056740:	df000017 	ldw	fp,0(sp)
 4056744:	dec00204 	addi	sp,sp,8
 4056748:	f800283a 	ret

0405674c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 405674c:	deffee04 	addi	sp,sp,-72
 4056750:	dfc01115 	stw	ra,68(sp)
 4056754:	df001015 	stw	fp,64(sp)
 4056758:	df001004 	addi	fp,sp,64
 405675c:	e13ffc15 	stw	r4,-16(fp)
 4056760:	e17ffd15 	stw	r5,-12(fp)
 4056764:	e1bffe15 	stw	r6,-8(fp)
 4056768:	3805883a 	mov	r2,r7
 405676c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 4056770:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4056774:	e0bfff03 	ldbu	r2,-4(fp)
 4056778:	10800570 	cmpltui	r2,r2,21
 405677c:	1000021e 	bne	r2,zero,4056788 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 4056780:	00800a84 	movi	r2,42
 4056784:	00005706 	br	40568e4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4056788:	0005303a 	rdctl	r2,status
 405678c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4056790:	e0fffb17 	ldw	r3,-20(fp)
 4056794:	00bfff84 	movi	r2,-2
 4056798:	1884703a 	and	r2,r3,r2
 405679c:	1001703a 	wrctl	status,r2
  
  return context;
 40567a0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40567a4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 40567a8:	d0a06003 	ldbu	r2,-32384(gp)
 40567ac:	10803fcc 	andi	r2,r2,255
 40567b0:	10000626 	beq	r2,zero,40567cc <OSTaskCreate+0x80>
 40567b4:	e0bff317 	ldw	r2,-52(fp)
 40567b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40567bc:	e0bff417 	ldw	r2,-48(fp)
 40567c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 40567c4:	00800f04 	movi	r2,60
 40567c8:	00004606 	br	40568e4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 40567cc:	e0ffff03 	ldbu	r3,-4(fp)
 40567d0:	00808074 	movhi	r2,513
 40567d4:	10958d04 	addi	r2,r2,22068
 40567d8:	18c7883a 	add	r3,r3,r3
 40567dc:	18c7883a 	add	r3,r3,r3
 40567e0:	10c5883a 	add	r2,r2,r3
 40567e4:	10800017 	ldw	r2,0(r2)
 40567e8:	1000391e 	bne	r2,zero,40568d0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 40567ec:	e0ffff03 	ldbu	r3,-4(fp)
 40567f0:	00808074 	movhi	r2,513
 40567f4:	10958d04 	addi	r2,r2,22068
 40567f8:	18c7883a 	add	r3,r3,r3
 40567fc:	18c7883a 	add	r3,r3,r3
 4056800:	10c5883a 	add	r2,r2,r3
 4056804:	00c00044 	movi	r3,1
 4056808:	10c00015 	stw	r3,0(r2)
 405680c:	e0bff317 	ldw	r2,-52(fp)
 4056810:	e0bff515 	stw	r2,-44(fp)
 4056814:	e0bff517 	ldw	r2,-44(fp)
 4056818:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 405681c:	000f883a 	mov	r7,zero
 4056820:	e1bffe17 	ldw	r6,-8(fp)
 4056824:	e17ffd17 	ldw	r5,-12(fp)
 4056828:	e13ffc17 	ldw	r4,-16(fp)
 405682c:	40597ac0 	call	40597ac <OSTaskStkInit>
 4056830:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 4056834:	e0bfff03 	ldbu	r2,-4(fp)
 4056838:	d8000215 	stw	zero,8(sp)
 405683c:	d8000115 	stw	zero,4(sp)
 4056840:	d8000015 	stw	zero,0(sp)
 4056844:	000f883a 	mov	r7,zero
 4056848:	000d883a 	mov	r6,zero
 405684c:	e17ff717 	ldw	r5,-36(fp)
 4056850:	1009883a 	mov	r4,r2
 4056854:	405242c0 	call	405242c <OS_TCBInit>
 4056858:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 405685c:	e0bff803 	ldbu	r2,-32(fp)
 4056860:	1000061e 	bne	r2,zero,405687c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 4056864:	d0a05243 	ldbu	r2,-32439(gp)
 4056868:	10803fcc 	andi	r2,r2,255
 405686c:	10800058 	cmpnei	r2,r2,1
 4056870:	1000151e 	bne	r2,zero,40568c8 <OSTaskCreate+0x17c>
                OS_Sched();
 4056874:	405202c0 	call	405202c <OS_Sched>
 4056878:	00001306 	br	40568c8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405687c:	0005303a 	rdctl	r2,status
 4056880:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4056884:	e0fffa17 	ldw	r3,-24(fp)
 4056888:	00bfff84 	movi	r2,-2
 405688c:	1884703a 	and	r2,r3,r2
 4056890:	1001703a 	wrctl	status,r2
  
  return context;
 4056894:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4056898:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 405689c:	e0ffff03 	ldbu	r3,-4(fp)
 40568a0:	00808074 	movhi	r2,513
 40568a4:	10958d04 	addi	r2,r2,22068
 40568a8:	18c7883a 	add	r3,r3,r3
 40568ac:	18c7883a 	add	r3,r3,r3
 40568b0:	10c5883a 	add	r2,r2,r3
 40568b4:	10000015 	stw	zero,0(r2)
 40568b8:	e0bff317 	ldw	r2,-52(fp)
 40568bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40568c0:	e0bff617 	ldw	r2,-40(fp)
 40568c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 40568c8:	e0bff803 	ldbu	r2,-32(fp)
 40568cc:	00000506 	br	40568e4 <OSTaskCreate+0x198>
 40568d0:	e0bff317 	ldw	r2,-52(fp)
 40568d4:	e0bff915 	stw	r2,-28(fp)
 40568d8:	e0bff917 	ldw	r2,-28(fp)
 40568dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 40568e0:	00800a04 	movi	r2,40
}
 40568e4:	e037883a 	mov	sp,fp
 40568e8:	dfc00117 	ldw	ra,4(sp)
 40568ec:	df000017 	ldw	fp,0(sp)
 40568f0:	dec00204 	addi	sp,sp,8
 40568f4:	f800283a 	ret

040568f8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 40568f8:	deffec04 	addi	sp,sp,-80
 40568fc:	dfc01315 	stw	ra,76(sp)
 4056900:	df001215 	stw	fp,72(sp)
 4056904:	df001204 	addi	fp,sp,72
 4056908:	e13ffa15 	stw	r4,-24(fp)
 405690c:	e17ffb15 	stw	r5,-20(fp)
 4056910:	e1bffc15 	stw	r6,-16(fp)
 4056914:	3809883a 	mov	r4,r7
 4056918:	e0c00217 	ldw	r3,8(fp)
 405691c:	e0800617 	ldw	r2,24(fp)
 4056920:	e13ffd05 	stb	r4,-12(fp)
 4056924:	e0fffe0d 	sth	r3,-8(fp)
 4056928:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 405692c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4056930:	e0bffd03 	ldbu	r2,-12(fp)
 4056934:	10800570 	cmpltui	r2,r2,21
 4056938:	1000021e 	bne	r2,zero,4056944 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 405693c:	00800a84 	movi	r2,42
 4056940:	00006106 	br	4056ac8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4056944:	0005303a 	rdctl	r2,status
 4056948:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 405694c:	e0fff917 	ldw	r3,-28(fp)
 4056950:	00bfff84 	movi	r2,-2
 4056954:	1884703a 	and	r2,r3,r2
 4056958:	1001703a 	wrctl	status,r2
  
  return context;
 405695c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4056960:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4056964:	d0a06003 	ldbu	r2,-32384(gp)
 4056968:	10803fcc 	andi	r2,r2,255
 405696c:	10000626 	beq	r2,zero,4056988 <OSTaskCreateExt+0x90>
 4056970:	e0bff117 	ldw	r2,-60(fp)
 4056974:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4056978:	e0bff217 	ldw	r2,-56(fp)
 405697c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4056980:	00800f04 	movi	r2,60
 4056984:	00005006 	br	4056ac8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4056988:	e0fffd03 	ldbu	r3,-12(fp)
 405698c:	00808074 	movhi	r2,513
 4056990:	10958d04 	addi	r2,r2,22068
 4056994:	18c7883a 	add	r3,r3,r3
 4056998:	18c7883a 	add	r3,r3,r3
 405699c:	10c5883a 	add	r2,r2,r3
 40569a0:	10800017 	ldw	r2,0(r2)
 40569a4:	1000431e 	bne	r2,zero,4056ab4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 40569a8:	e0fffd03 	ldbu	r3,-12(fp)
 40569ac:	00808074 	movhi	r2,513
 40569b0:	10958d04 	addi	r2,r2,22068
 40569b4:	18c7883a 	add	r3,r3,r3
 40569b8:	18c7883a 	add	r3,r3,r3
 40569bc:	10c5883a 	add	r2,r2,r3
 40569c0:	00c00044 	movi	r3,1
 40569c4:	10c00015 	stw	r3,0(r2)
 40569c8:	e0bff117 	ldw	r2,-60(fp)
 40569cc:	e0bff315 	stw	r2,-52(fp)
 40569d0:	e0bff317 	ldw	r2,-52(fp)
 40569d4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 40569d8:	e0bfff0b 	ldhu	r2,-4(fp)
 40569dc:	100d883a 	mov	r6,r2
 40569e0:	e1400417 	ldw	r5,16(fp)
 40569e4:	e1000317 	ldw	r4,12(fp)
 40569e8:	40579580 	call	4057958 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 40569ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40569f0:	100f883a 	mov	r7,r2
 40569f4:	e1bffc17 	ldw	r6,-16(fp)
 40569f8:	e17ffb17 	ldw	r5,-20(fp)
 40569fc:	e13ffa17 	ldw	r4,-24(fp)
 4056a00:	40597ac0 	call	40597ac <OSTaskStkInit>
 4056a04:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 4056a08:	e0fffd03 	ldbu	r3,-12(fp)
 4056a0c:	e13ffe0b 	ldhu	r4,-8(fp)
 4056a10:	e0bfff0b 	ldhu	r2,-4(fp)
 4056a14:	d8800215 	stw	r2,8(sp)
 4056a18:	e0800517 	ldw	r2,20(fp)
 4056a1c:	d8800115 	stw	r2,4(sp)
 4056a20:	e0800417 	ldw	r2,16(fp)
 4056a24:	d8800015 	stw	r2,0(sp)
 4056a28:	200f883a 	mov	r7,r4
 4056a2c:	e1800317 	ldw	r6,12(fp)
 4056a30:	e17ff517 	ldw	r5,-44(fp)
 4056a34:	1809883a 	mov	r4,r3
 4056a38:	405242c0 	call	405242c <OS_TCBInit>
 4056a3c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 4056a40:	e0bff603 	ldbu	r2,-40(fp)
 4056a44:	1000061e 	bne	r2,zero,4056a60 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 4056a48:	d0a05243 	ldbu	r2,-32439(gp)
 4056a4c:	10803fcc 	andi	r2,r2,255
 4056a50:	10800058 	cmpnei	r2,r2,1
 4056a54:	1000151e 	bne	r2,zero,4056aac <OSTaskCreateExt+0x1b4>
                OS_Sched();
 4056a58:	405202c0 	call	405202c <OS_Sched>
 4056a5c:	00001306 	br	4056aac <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4056a60:	0005303a 	rdctl	r2,status
 4056a64:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4056a68:	e0fff817 	ldw	r3,-32(fp)
 4056a6c:	00bfff84 	movi	r2,-2
 4056a70:	1884703a 	and	r2,r3,r2
 4056a74:	1001703a 	wrctl	status,r2
  
  return context;
 4056a78:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4056a7c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 4056a80:	e0fffd03 	ldbu	r3,-12(fp)
 4056a84:	00808074 	movhi	r2,513
 4056a88:	10958d04 	addi	r2,r2,22068
 4056a8c:	18c7883a 	add	r3,r3,r3
 4056a90:	18c7883a 	add	r3,r3,r3
 4056a94:	10c5883a 	add	r2,r2,r3
 4056a98:	10000015 	stw	zero,0(r2)
 4056a9c:	e0bff117 	ldw	r2,-60(fp)
 4056aa0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4056aa4:	e0bff417 	ldw	r2,-48(fp)
 4056aa8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4056aac:	e0bff603 	ldbu	r2,-40(fp)
 4056ab0:	00000506 	br	4056ac8 <OSTaskCreateExt+0x1d0>
 4056ab4:	e0bff117 	ldw	r2,-60(fp)
 4056ab8:	e0bff715 	stw	r2,-36(fp)
 4056abc:	e0bff717 	ldw	r2,-36(fp)
 4056ac0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 4056ac4:	00800a04 	movi	r2,40
}
 4056ac8:	e037883a 	mov	sp,fp
 4056acc:	dfc00117 	ldw	ra,4(sp)
 4056ad0:	df000017 	ldw	fp,0(sp)
 4056ad4:	dec00204 	addi	sp,sp,8
 4056ad8:	f800283a 	ret

04056adc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 4056adc:	defff404 	addi	sp,sp,-48
 4056ae0:	dfc00b15 	stw	ra,44(sp)
 4056ae4:	df000a15 	stw	fp,40(sp)
 4056ae8:	df000a04 	addi	fp,sp,40
 4056aec:	2005883a 	mov	r2,r4
 4056af0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 4056af4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 4056af8:	d0a06003 	ldbu	r2,-32384(gp)
 4056afc:	10803fcc 	andi	r2,r2,255
 4056b00:	10000226 	beq	r2,zero,4056b0c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 4056b04:	00801004 	movi	r2,64
 4056b08:	0000c006 	br	4056e0c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 4056b0c:	e0bfff03 	ldbu	r2,-4(fp)
 4056b10:	10800518 	cmpnei	r2,r2,20
 4056b14:	1000021e 	bne	r2,zero,4056b20 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 4056b18:	00800f84 	movi	r2,62
 4056b1c:	0000bb06 	br	4056e0c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 4056b20:	e0bfff03 	ldbu	r2,-4(fp)
 4056b24:	10800530 	cmpltui	r2,r2,20
 4056b28:	1000051e 	bne	r2,zero,4056b40 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 4056b2c:	e0bfff03 	ldbu	r2,-4(fp)
 4056b30:	10803fe0 	cmpeqi	r2,r2,255
 4056b34:	1000021e 	bne	r2,zero,4056b40 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 4056b38:	00800a84 	movi	r2,42
 4056b3c:	0000b306 	br	4056e0c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4056b40:	0005303a 	rdctl	r2,status
 4056b44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4056b48:	e0fffe17 	ldw	r3,-8(fp)
 4056b4c:	00bfff84 	movi	r2,-2
 4056b50:	1884703a 	and	r2,r3,r2
 4056b54:	1001703a 	wrctl	status,r2
  
  return context;
 4056b58:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4056b5c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 4056b60:	e0bfff03 	ldbu	r2,-4(fp)
 4056b64:	10803fd8 	cmpnei	r2,r2,255
 4056b68:	1000031e 	bne	r2,zero,4056b78 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 4056b6c:	d0a06117 	ldw	r2,-32380(gp)
 4056b70:	10800c83 	ldbu	r2,50(r2)
 4056b74:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4056b78:	e0ffff03 	ldbu	r3,-4(fp)
 4056b7c:	00808074 	movhi	r2,513
 4056b80:	10958d04 	addi	r2,r2,22068
 4056b84:	18c7883a 	add	r3,r3,r3
 4056b88:	18c7883a 	add	r3,r3,r3
 4056b8c:	10c5883a 	add	r2,r2,r3
 4056b90:	10800017 	ldw	r2,0(r2)
 4056b94:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 4056b98:	e0bff817 	ldw	r2,-32(fp)
 4056b9c:	1000061e 	bne	r2,zero,4056bb8 <OSTaskDel+0xdc>
 4056ba0:	e0bff617 	ldw	r2,-40(fp)
 4056ba4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4056ba8:	e0bff717 	ldw	r2,-36(fp)
 4056bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4056bb0:	008010c4 	movi	r2,67
 4056bb4:	00009506 	br	4056e0c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 4056bb8:	e0bff817 	ldw	r2,-32(fp)
 4056bbc:	10800058 	cmpnei	r2,r2,1
 4056bc0:	1000061e 	bne	r2,zero,4056bdc <OSTaskDel+0x100>
 4056bc4:	e0bff617 	ldw	r2,-40(fp)
 4056bc8:	e0bff915 	stw	r2,-28(fp)
 4056bcc:	e0bff917 	ldw	r2,-28(fp)
 4056bd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 4056bd4:	00800f44 	movi	r2,61
 4056bd8:	00008c06 	br	4056e0c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 4056bdc:	e0bff817 	ldw	r2,-32(fp)
 4056be0:	10800d03 	ldbu	r2,52(r2)
 4056be4:	10c03fcc 	andi	r3,r2,255
 4056be8:	e0bff817 	ldw	r2,-32(fp)
 4056bec:	10800d03 	ldbu	r2,52(r2)
 4056bf0:	11003fcc 	andi	r4,r2,255
 4056bf4:	d0a05e44 	addi	r2,gp,-32391
 4056bf8:	2085883a 	add	r2,r4,r2
 4056bfc:	10800003 	ldbu	r2,0(r2)
 4056c00:	1009883a 	mov	r4,r2
 4056c04:	e0bff817 	ldw	r2,-32(fp)
 4056c08:	10800d43 	ldbu	r2,53(r2)
 4056c0c:	0084303a 	nor	r2,zero,r2
 4056c10:	2084703a 	and	r2,r4,r2
 4056c14:	1009883a 	mov	r4,r2
 4056c18:	d0a05e44 	addi	r2,gp,-32391
 4056c1c:	1885883a 	add	r2,r3,r2
 4056c20:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 4056c24:	e0bff817 	ldw	r2,-32(fp)
 4056c28:	10800d03 	ldbu	r2,52(r2)
 4056c2c:	10c03fcc 	andi	r3,r2,255
 4056c30:	d0a05e44 	addi	r2,gp,-32391
 4056c34:	1885883a 	add	r2,r3,r2
 4056c38:	10800003 	ldbu	r2,0(r2)
 4056c3c:	10803fcc 	andi	r2,r2,255
 4056c40:	1000071e 	bne	r2,zero,4056c60 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 4056c44:	e0bff817 	ldw	r2,-32(fp)
 4056c48:	10800d83 	ldbu	r2,54(r2)
 4056c4c:	0084303a 	nor	r2,zero,r2
 4056c50:	1007883a 	mov	r3,r2
 4056c54:	d0a05e03 	ldbu	r2,-32392(gp)
 4056c58:	1884703a 	and	r2,r3,r2
 4056c5c:	d0a05e05 	stb	r2,-32392(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 4056c60:	e0bff817 	ldw	r2,-32(fp)
 4056c64:	10800717 	ldw	r2,28(r2)
 4056c68:	10000526 	beq	r2,zero,4056c80 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 4056c6c:	e0bff817 	ldw	r2,-32(fp)
 4056c70:	10800717 	ldw	r2,28(r2)
 4056c74:	100b883a 	mov	r5,r2
 4056c78:	e13ff817 	ldw	r4,-32(fp)
 4056c7c:	40519d80 	call	40519d8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 4056c80:	e0bff817 	ldw	r2,-32(fp)
 4056c84:	10800817 	ldw	r2,32(r2)
 4056c88:	10000526 	beq	r2,zero,4056ca0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4056c8c:	e0bff817 	ldw	r2,-32(fp)
 4056c90:	10800817 	ldw	r2,32(r2)
 4056c94:	100b883a 	mov	r5,r2
 4056c98:	e13ff817 	ldw	r4,-32(fp)
 4056c9c:	4051a900 	call	4051a90 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 4056ca0:	e0bff817 	ldw	r2,-32(fp)
 4056ca4:	10800a17 	ldw	r2,40(r2)
 4056ca8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 4056cac:	e0bffb17 	ldw	r2,-20(fp)
 4056cb0:	10000226 	beq	r2,zero,4056cbc <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 4056cb4:	e13ffb17 	ldw	r4,-20(fp)
 4056cb8:	4053f000 	call	4053f00 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 4056cbc:	e0bff817 	ldw	r2,-32(fp)
 4056cc0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 4056cc4:	e0bff817 	ldw	r2,-32(fp)
 4056cc8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 4056ccc:	e0bff817 	ldw	r2,-32(fp)
 4056cd0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 4056cd4:	d0a05203 	ldbu	r2,-32440(gp)
 4056cd8:	10803fcc 	andi	r2,r2,255
 4056cdc:	10803fe0 	cmpeqi	r2,r2,255
 4056ce0:	1000031e 	bne	r2,zero,4056cf0 <OSTaskDel+0x214>
        OSLockNesting++;
 4056ce4:	d0a05203 	ldbu	r2,-32440(gp)
 4056ce8:	10800044 	addi	r2,r2,1
 4056cec:	d0a05205 	stb	r2,-32440(gp)
 4056cf0:	e0bff617 	ldw	r2,-40(fp)
 4056cf4:	e0bffd15 	stw	r2,-12(fp)
 4056cf8:	e0bffd17 	ldw	r2,-12(fp)
 4056cfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 4056d00:	40515c00 	call	40515c0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4056d04:	0005303a 	rdctl	r2,status
 4056d08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4056d0c:	e0fffa17 	ldw	r3,-24(fp)
 4056d10:	00bfff84 	movi	r2,-2
 4056d14:	1884703a 	and	r2,r3,r2
 4056d18:	1001703a 	wrctl	status,r2
  
  return context;
 4056d1c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 4056d20:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 4056d24:	d0a05203 	ldbu	r2,-32440(gp)
 4056d28:	10803fcc 	andi	r2,r2,255
 4056d2c:	10000326 	beq	r2,zero,4056d3c <OSTaskDel+0x260>
        OSLockNesting--;
 4056d30:	d0a05203 	ldbu	r2,-32440(gp)
 4056d34:	10bfffc4 	addi	r2,r2,-1
 4056d38:	d0a05205 	stb	r2,-32440(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 4056d3c:	e13ff817 	ldw	r4,-32(fp)
 4056d40:	405992c0 	call	405992c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 4056d44:	d0a05a43 	ldbu	r2,-32407(gp)
 4056d48:	10bfffc4 	addi	r2,r2,-1
 4056d4c:	d0a05a45 	stb	r2,-32407(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 4056d50:	e0ffff03 	ldbu	r3,-4(fp)
 4056d54:	00808074 	movhi	r2,513
 4056d58:	10958d04 	addi	r2,r2,22068
 4056d5c:	18c7883a 	add	r3,r3,r3
 4056d60:	18c7883a 	add	r3,r3,r3
 4056d64:	10c5883a 	add	r2,r2,r3
 4056d68:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 4056d6c:	e0bff817 	ldw	r2,-32(fp)
 4056d70:	10800617 	ldw	r2,24(r2)
 4056d74:	1000071e 	bne	r2,zero,4056d94 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 4056d78:	e0bff817 	ldw	r2,-32(fp)
 4056d7c:	10800517 	ldw	r2,20(r2)
 4056d80:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 4056d84:	e0bff817 	ldw	r2,-32(fp)
 4056d88:	10800517 	ldw	r2,20(r2)
 4056d8c:	d0a05515 	stw	r2,-32428(gp)
 4056d90:	00000a06 	br	4056dbc <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 4056d94:	e0bff817 	ldw	r2,-32(fp)
 4056d98:	10800617 	ldw	r2,24(r2)
 4056d9c:	e0fff817 	ldw	r3,-32(fp)
 4056da0:	18c00517 	ldw	r3,20(r3)
 4056da4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 4056da8:	e0bff817 	ldw	r2,-32(fp)
 4056dac:	10800517 	ldw	r2,20(r2)
 4056db0:	e0fff817 	ldw	r3,-32(fp)
 4056db4:	18c00617 	ldw	r3,24(r3)
 4056db8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 4056dbc:	d0e05917 	ldw	r3,-32412(gp)
 4056dc0:	e0bff817 	ldw	r2,-32(fp)
 4056dc4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 4056dc8:	e0bff817 	ldw	r2,-32(fp)
 4056dcc:	d0a05915 	stw	r2,-32412(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 4056dd0:	e0bff817 	ldw	r2,-32(fp)
 4056dd4:	00c00fc4 	movi	r3,63
 4056dd8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4056ddc:	e0bff817 	ldw	r2,-32(fp)
 4056de0:	10001345 	stb	zero,77(r2)
 4056de4:	e0bff617 	ldw	r2,-40(fp)
 4056de8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4056dec:	e0bffc17 	ldw	r2,-16(fp)
 4056df0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4056df4:	d0a05243 	ldbu	r2,-32439(gp)
 4056df8:	10803fcc 	andi	r2,r2,255
 4056dfc:	10800058 	cmpnei	r2,r2,1
 4056e00:	1000011e 	bne	r2,zero,4056e08 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 4056e04:	405202c0 	call	405202c <OS_Sched>
    }
    return (OS_ERR_NONE);
 4056e08:	0005883a 	mov	r2,zero
}
 4056e0c:	e037883a 	mov	sp,fp
 4056e10:	dfc00117 	ldw	ra,4(sp)
 4056e14:	df000017 	ldw	fp,0(sp)
 4056e18:	dec00204 	addi	sp,sp,8
 4056e1c:	f800283a 	ret

04056e20 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 4056e20:	defff504 	addi	sp,sp,-44
 4056e24:	df000a15 	stw	fp,40(sp)
 4056e28:	df000a04 	addi	fp,sp,40
 4056e2c:	2005883a 	mov	r2,r4
 4056e30:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4056e34:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 4056e38:	e0bfff03 	ldbu	r2,-4(fp)
 4056e3c:	10800518 	cmpnei	r2,r2,20
 4056e40:	1000021e 	bne	r2,zero,4056e4c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 4056e44:	00800f84 	movi	r2,62
 4056e48:	00004506 	br	4056f60 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4056e4c:	e0bfff03 	ldbu	r2,-4(fp)
 4056e50:	10800530 	cmpltui	r2,r2,20
 4056e54:	1000051e 	bne	r2,zero,4056e6c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 4056e58:	e0bfff03 	ldbu	r2,-4(fp)
 4056e5c:	10803fe0 	cmpeqi	r2,r2,255
 4056e60:	1000021e 	bne	r2,zero,4056e6c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 4056e64:	00800a84 	movi	r2,42
 4056e68:	00003d06 	br	4056f60 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 4056e6c:	e0bfff03 	ldbu	r2,-4(fp)
 4056e70:	10803fd8 	cmpnei	r2,r2,255
 4056e74:	1000111e 	bne	r2,zero,4056ebc <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4056e78:	0005303a 	rdctl	r2,status
 4056e7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4056e80:	e0fff917 	ldw	r3,-28(fp)
 4056e84:	00bfff84 	movi	r2,-2
 4056e88:	1884703a 	and	r2,r3,r2
 4056e8c:	1001703a 	wrctl	status,r2
  
  return context;
 4056e90:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 4056e94:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 4056e98:	d0a06117 	ldw	r2,-32380(gp)
 4056e9c:	10800dc3 	ldbu	r2,55(r2)
 4056ea0:	e0bff805 	stb	r2,-32(fp)
 4056ea4:	e0bff617 	ldw	r2,-40(fp)
 4056ea8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4056eac:	e0bffe17 	ldw	r2,-8(fp)
 4056eb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 4056eb4:	e0bff803 	ldbu	r2,-32(fp)
 4056eb8:	00002906 	br	4056f60 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4056ebc:	0005303a 	rdctl	r2,status
 4056ec0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4056ec4:	e0fff717 	ldw	r3,-36(fp)
 4056ec8:	00bfff84 	movi	r2,-2
 4056ecc:	1884703a 	and	r2,r3,r2
 4056ed0:	1001703a 	wrctl	status,r2
  
  return context;
 4056ed4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 4056ed8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 4056edc:	e0ffff03 	ldbu	r3,-4(fp)
 4056ee0:	00808074 	movhi	r2,513
 4056ee4:	10958d04 	addi	r2,r2,22068
 4056ee8:	18c7883a 	add	r3,r3,r3
 4056eec:	18c7883a 	add	r3,r3,r3
 4056ef0:	10c5883a 	add	r2,r2,r3
 4056ef4:	10800017 	ldw	r2,0(r2)
 4056ef8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 4056efc:	e0bffb17 	ldw	r2,-20(fp)
 4056f00:	1000061e 	bne	r2,zero,4056f1c <OSTaskDelReq+0xfc>
 4056f04:	e0bff617 	ldw	r2,-40(fp)
 4056f08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4056f0c:	e0bffa17 	ldw	r2,-24(fp)
 4056f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 4056f14:	008010c4 	movi	r2,67
 4056f18:	00001106 	br	4056f60 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 4056f1c:	e0bffb17 	ldw	r2,-20(fp)
 4056f20:	10800058 	cmpnei	r2,r2,1
 4056f24:	1000061e 	bne	r2,zero,4056f40 <OSTaskDelReq+0x120>
 4056f28:	e0bff617 	ldw	r2,-40(fp)
 4056f2c:	e0bffc15 	stw	r2,-16(fp)
 4056f30:	e0bffc17 	ldw	r2,-16(fp)
 4056f34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 4056f38:	00800f44 	movi	r2,61
 4056f3c:	00000806 	br	4056f60 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 4056f40:	e0bffb17 	ldw	r2,-20(fp)
 4056f44:	00c00fc4 	movi	r3,63
 4056f48:	10c00dc5 	stb	r3,55(r2)
 4056f4c:	e0bff617 	ldw	r2,-40(fp)
 4056f50:	e0bffd15 	stw	r2,-12(fp)
 4056f54:	e0bffd17 	ldw	r2,-12(fp)
 4056f58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4056f5c:	0005883a 	mov	r2,zero
}
 4056f60:	e037883a 	mov	sp,fp
 4056f64:	df000017 	ldw	fp,0(sp)
 4056f68:	dec00104 	addi	sp,sp,4
 4056f6c:	f800283a 	ret

04056f70 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4056f70:	defff404 	addi	sp,sp,-48
 4056f74:	dfc00b15 	stw	ra,44(sp)
 4056f78:	df000a15 	stw	fp,40(sp)
 4056f7c:	df000a04 	addi	fp,sp,40
 4056f80:	2005883a 	mov	r2,r4
 4056f84:	e17ffe15 	stw	r5,-8(fp)
 4056f88:	e1bfff15 	stw	r6,-4(fp)
 4056f8c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 4056f90:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 4056f94:	e0bfff17 	ldw	r2,-4(fp)
 4056f98:	1000021e 	bne	r2,zero,4056fa4 <OSTaskNameGet+0x34>
        return (0);
 4056f9c:	0005883a 	mov	r2,zero
 4056fa0:	00005406 	br	40570f4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 4056fa4:	e0bffd03 	ldbu	r2,-12(fp)
 4056fa8:	10800570 	cmpltui	r2,r2,21
 4056fac:	1000081e 	bne	r2,zero,4056fd0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 4056fb0:	e0bffd03 	ldbu	r2,-12(fp)
 4056fb4:	10803fe0 	cmpeqi	r2,r2,255
 4056fb8:	1000051e 	bne	r2,zero,4056fd0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 4056fbc:	e0bfff17 	ldw	r2,-4(fp)
 4056fc0:	00c00a84 	movi	r3,42
 4056fc4:	10c00005 	stb	r3,0(r2)
            return (0);
 4056fc8:	0005883a 	mov	r2,zero
 4056fcc:	00004906 	br	40570f4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 4056fd0:	e0bffe17 	ldw	r2,-8(fp)
 4056fd4:	1000051e 	bne	r2,zero,4056fec <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 4056fd8:	e0bfff17 	ldw	r2,-4(fp)
 4056fdc:	00c00304 	movi	r3,12
 4056fe0:	10c00005 	stb	r3,0(r2)
        return (0);
 4056fe4:	0005883a 	mov	r2,zero
 4056fe8:	00004206 	br	40570f4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 4056fec:	d0a06003 	ldbu	r2,-32384(gp)
 4056ff0:	10803fcc 	andi	r2,r2,255
 4056ff4:	10000526 	beq	r2,zero,405700c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 4056ff8:	e0bfff17 	ldw	r2,-4(fp)
 4056ffc:	00c00444 	movi	r3,17
 4057000:	10c00005 	stb	r3,0(r2)
        return (0);
 4057004:	0005883a 	mov	r2,zero
 4057008:	00003a06 	br	40570f4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405700c:	0005303a 	rdctl	r2,status
 4057010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4057014:	e0fffc17 	ldw	r3,-16(fp)
 4057018:	00bfff84 	movi	r2,-2
 405701c:	1884703a 	and	r2,r3,r2
 4057020:	1001703a 	wrctl	status,r2
  
  return context;
 4057024:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4057028:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 405702c:	e0bffd03 	ldbu	r2,-12(fp)
 4057030:	10803fd8 	cmpnei	r2,r2,255
 4057034:	1000031e 	bne	r2,zero,4057044 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 4057038:	d0a06117 	ldw	r2,-32380(gp)
 405703c:	10800c83 	ldbu	r2,50(r2)
 4057040:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4057044:	e0fffd03 	ldbu	r3,-12(fp)
 4057048:	00808074 	movhi	r2,513
 405704c:	10958d04 	addi	r2,r2,22068
 4057050:	18c7883a 	add	r3,r3,r3
 4057054:	18c7883a 	add	r3,r3,r3
 4057058:	10c5883a 	add	r2,r2,r3
 405705c:	10800017 	ldw	r2,0(r2)
 4057060:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 4057064:	e0bff817 	ldw	r2,-32(fp)
 4057068:	1000091e 	bne	r2,zero,4057090 <OSTaskNameGet+0x120>
 405706c:	e0bff617 	ldw	r2,-40(fp)
 4057070:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4057074:	e0bff717 	ldw	r2,-36(fp)
 4057078:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 405707c:	e0bfff17 	ldw	r2,-4(fp)
 4057080:	00c010c4 	movi	r3,67
 4057084:	10c00005 	stb	r3,0(r2)
        return (0);
 4057088:	0005883a 	mov	r2,zero
 405708c:	00001906 	br	40570f4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 4057090:	e0bff817 	ldw	r2,-32(fp)
 4057094:	10800058 	cmpnei	r2,r2,1
 4057098:	1000091e 	bne	r2,zero,40570c0 <OSTaskNameGet+0x150>
 405709c:	e0bff617 	ldw	r2,-40(fp)
 40570a0:	e0bff915 	stw	r2,-28(fp)
 40570a4:	e0bff917 	ldw	r2,-28(fp)
 40570a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 40570ac:	e0bfff17 	ldw	r2,-4(fp)
 40570b0:	00c010c4 	movi	r3,67
 40570b4:	10c00005 	stb	r3,0(r2)
        return (0);
 40570b8:	0005883a 	mov	r2,zero
 40570bc:	00000d06 	br	40570f4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 40570c0:	e0bff817 	ldw	r2,-32(fp)
 40570c4:	10801304 	addi	r2,r2,76
 40570c8:	100b883a 	mov	r5,r2
 40570cc:	e13ffe17 	ldw	r4,-8(fp)
 40570d0:	40521700 	call	4052170 <OS_StrCopy>
 40570d4:	e0bffb05 	stb	r2,-20(fp)
 40570d8:	e0bff617 	ldw	r2,-40(fp)
 40570dc:	e0bffa15 	stw	r2,-24(fp)
 40570e0:	e0bffa17 	ldw	r2,-24(fp)
 40570e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40570e8:	e0bfff17 	ldw	r2,-4(fp)
 40570ec:	10000005 	stb	zero,0(r2)
    return (len);
 40570f0:	e0bffb03 	ldbu	r2,-20(fp)
}
 40570f4:	e037883a 	mov	sp,fp
 40570f8:	dfc00117 	ldw	ra,4(sp)
 40570fc:	df000017 	ldw	fp,0(sp)
 4057100:	dec00204 	addi	sp,sp,8
 4057104:	f800283a 	ret

04057108 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4057108:	defff304 	addi	sp,sp,-52
 405710c:	dfc00c15 	stw	ra,48(sp)
 4057110:	df000b15 	stw	fp,44(sp)
 4057114:	df000b04 	addi	fp,sp,44
 4057118:	2005883a 	mov	r2,r4
 405711c:	e17ffe15 	stw	r5,-8(fp)
 4057120:	e1bfff15 	stw	r6,-4(fp)
 4057124:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 4057128:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 405712c:	e0bfff17 	ldw	r2,-4(fp)
 4057130:	10005c26 	beq	r2,zero,40572a4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 4057134:	e0bffd03 	ldbu	r2,-12(fp)
 4057138:	10800570 	cmpltui	r2,r2,21
 405713c:	1000071e 	bne	r2,zero,405715c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 4057140:	e0bffd03 	ldbu	r2,-12(fp)
 4057144:	10803fe0 	cmpeqi	r2,r2,255
 4057148:	1000041e 	bne	r2,zero,405715c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 405714c:	e0bfff17 	ldw	r2,-4(fp)
 4057150:	00c00a84 	movi	r3,42
 4057154:	10c00005 	stb	r3,0(r2)
            return;
 4057158:	00005306 	br	40572a8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 405715c:	e0bffe17 	ldw	r2,-8(fp)
 4057160:	1000041e 	bne	r2,zero,4057174 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 4057164:	e0bfff17 	ldw	r2,-4(fp)
 4057168:	00c00304 	movi	r3,12
 405716c:	10c00005 	stb	r3,0(r2)
        return;
 4057170:	00004d06 	br	40572a8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 4057174:	d0a06003 	ldbu	r2,-32384(gp)
 4057178:	10803fcc 	andi	r2,r2,255
 405717c:	10000426 	beq	r2,zero,4057190 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 4057180:	e0bfff17 	ldw	r2,-4(fp)
 4057184:	00c00484 	movi	r3,18
 4057188:	10c00005 	stb	r3,0(r2)
        return;
 405718c:	00004606 	br	40572a8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4057190:	0005303a 	rdctl	r2,status
 4057194:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4057198:	e0fffc17 	ldw	r3,-16(fp)
 405719c:	00bfff84 	movi	r2,-2
 40571a0:	1884703a 	and	r2,r3,r2
 40571a4:	1001703a 	wrctl	status,r2
  
  return context;
 40571a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40571ac:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 40571b0:	e0bffd03 	ldbu	r2,-12(fp)
 40571b4:	10803fd8 	cmpnei	r2,r2,255
 40571b8:	1000031e 	bne	r2,zero,40571c8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 40571bc:	d0a06117 	ldw	r2,-32380(gp)
 40571c0:	10800c83 	ldbu	r2,50(r2)
 40571c4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 40571c8:	e0fffd03 	ldbu	r3,-12(fp)
 40571cc:	00808074 	movhi	r2,513
 40571d0:	10958d04 	addi	r2,r2,22068
 40571d4:	18c7883a 	add	r3,r3,r3
 40571d8:	18c7883a 	add	r3,r3,r3
 40571dc:	10c5883a 	add	r2,r2,r3
 40571e0:	10800017 	ldw	r2,0(r2)
 40571e4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 40571e8:	e0bff717 	ldw	r2,-36(fp)
 40571ec:	1000081e 	bne	r2,zero,4057210 <OSTaskNameSet+0x108>
 40571f0:	e0bff517 	ldw	r2,-44(fp)
 40571f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40571f8:	e0bff617 	ldw	r2,-40(fp)
 40571fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4057200:	e0bfff17 	ldw	r2,-4(fp)
 4057204:	00c010c4 	movi	r3,67
 4057208:	10c00005 	stb	r3,0(r2)
        return;
 405720c:	00002606 	br	40572a8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 4057210:	e0bff717 	ldw	r2,-36(fp)
 4057214:	10800058 	cmpnei	r2,r2,1
 4057218:	1000081e 	bne	r2,zero,405723c <OSTaskNameSet+0x134>
 405721c:	e0bff517 	ldw	r2,-44(fp)
 4057220:	e0bff815 	stw	r2,-32(fp)
 4057224:	e0bff817 	ldw	r2,-32(fp)
 4057228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 405722c:	e0bfff17 	ldw	r2,-4(fp)
 4057230:	00c010c4 	movi	r3,67
 4057234:	10c00005 	stb	r3,0(r2)
        return;
 4057238:	00001b06 	br	40572a8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 405723c:	e13ffe17 	ldw	r4,-8(fp)
 4057240:	40521e40 	call	40521e4 <OS_StrLen>
 4057244:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 4057248:	e0bffa03 	ldbu	r2,-24(fp)
 405724c:	10800830 	cmpltui	r2,r2,32
 4057250:	1000081e 	bne	r2,zero,4057274 <OSTaskNameSet+0x16c>
 4057254:	e0bff517 	ldw	r2,-44(fp)
 4057258:	e0bff915 	stw	r2,-28(fp)
 405725c:	e0bff917 	ldw	r2,-28(fp)
 4057260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 4057264:	e0bfff17 	ldw	r2,-4(fp)
 4057268:	00c01044 	movi	r3,65
 405726c:	10c00005 	stb	r3,0(r2)
        return;
 4057270:	00000d06 	br	40572a8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 4057274:	e0bff717 	ldw	r2,-36(fp)
 4057278:	10801304 	addi	r2,r2,76
 405727c:	e17ffe17 	ldw	r5,-8(fp)
 4057280:	1009883a 	mov	r4,r2
 4057284:	40521700 	call	4052170 <OS_StrCopy>
 4057288:	e0bff517 	ldw	r2,-44(fp)
 405728c:	e0bffb15 	stw	r2,-20(fp)
 4057290:	e0bffb17 	ldw	r2,-20(fp)
 4057294:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4057298:	e0bfff17 	ldw	r2,-4(fp)
 405729c:	10000005 	stb	zero,0(r2)
 40572a0:	00000106 	br	40572a8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 40572a4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 40572a8:	e037883a 	mov	sp,fp
 40572ac:	dfc00117 	ldw	ra,4(sp)
 40572b0:	df000017 	ldw	fp,0(sp)
 40572b4:	dec00204 	addi	sp,sp,8
 40572b8:	f800283a 	ret

040572bc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 40572bc:	defff404 	addi	sp,sp,-48
 40572c0:	dfc00b15 	stw	ra,44(sp)
 40572c4:	df000a15 	stw	fp,40(sp)
 40572c8:	df000a04 	addi	fp,sp,40
 40572cc:	2005883a 	mov	r2,r4
 40572d0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 40572d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 40572d8:	e0bfff03 	ldbu	r2,-4(fp)
 40572dc:	10800530 	cmpltui	r2,r2,20
 40572e0:	1000021e 	bne	r2,zero,40572ec <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 40572e4:	00800a84 	movi	r2,42
 40572e8:	00006406 	br	405747c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40572ec:	0005303a 	rdctl	r2,status
 40572f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40572f4:	e0fffe17 	ldw	r3,-8(fp)
 40572f8:	00bfff84 	movi	r2,-2
 40572fc:	1884703a 	and	r2,r3,r2
 4057300:	1001703a 	wrctl	status,r2
  
  return context;
 4057304:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4057308:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 405730c:	e0ffff03 	ldbu	r3,-4(fp)
 4057310:	00808074 	movhi	r2,513
 4057314:	10958d04 	addi	r2,r2,22068
 4057318:	18c7883a 	add	r3,r3,r3
 405731c:	18c7883a 	add	r3,r3,r3
 4057320:	10c5883a 	add	r2,r2,r3
 4057324:	10800017 	ldw	r2,0(r2)
 4057328:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 405732c:	e0bff817 	ldw	r2,-32(fp)
 4057330:	1000061e 	bne	r2,zero,405734c <OSTaskResume+0x90>
 4057334:	e0bff617 	ldw	r2,-40(fp)
 4057338:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 405733c:	e0bff717 	ldw	r2,-36(fp)
 4057340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 4057344:	00801184 	movi	r2,70
 4057348:	00004c06 	br	405747c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 405734c:	e0bff817 	ldw	r2,-32(fp)
 4057350:	10800058 	cmpnei	r2,r2,1
 4057354:	1000061e 	bne	r2,zero,4057370 <OSTaskResume+0xb4>
 4057358:	e0bff617 	ldw	r2,-40(fp)
 405735c:	e0bff915 	stw	r2,-28(fp)
 4057360:	e0bff917 	ldw	r2,-28(fp)
 4057364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4057368:	008010c4 	movi	r2,67
 405736c:	00004306 	br	405747c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 4057370:	e0bff817 	ldw	r2,-32(fp)
 4057374:	10800c03 	ldbu	r2,48(r2)
 4057378:	10803fcc 	andi	r2,r2,255
 405737c:	1080020c 	andi	r2,r2,8
 4057380:	10003926 	beq	r2,zero,4057468 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 4057384:	e0bff817 	ldw	r2,-32(fp)
 4057388:	10c00c03 	ldbu	r3,48(r2)
 405738c:	00bffdc4 	movi	r2,-9
 4057390:	1884703a 	and	r2,r3,r2
 4057394:	1007883a 	mov	r3,r2
 4057398:	e0bff817 	ldw	r2,-32(fp)
 405739c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 40573a0:	e0bff817 	ldw	r2,-32(fp)
 40573a4:	10800c03 	ldbu	r2,48(r2)
 40573a8:	10803fcc 	andi	r2,r2,255
 40573ac:	1000281e 	bne	r2,zero,4057450 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 40573b0:	e0bff817 	ldw	r2,-32(fp)
 40573b4:	10800b8b 	ldhu	r2,46(r2)
 40573b8:	10bfffcc 	andi	r2,r2,65535
 40573bc:	10001f1e 	bne	r2,zero,405743c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 40573c0:	e0bff817 	ldw	r2,-32(fp)
 40573c4:	10c00d83 	ldbu	r3,54(r2)
 40573c8:	d0a05e03 	ldbu	r2,-32392(gp)
 40573cc:	1884b03a 	or	r2,r3,r2
 40573d0:	d0a05e05 	stb	r2,-32392(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40573d4:	e0bff817 	ldw	r2,-32(fp)
 40573d8:	10800d03 	ldbu	r2,52(r2)
 40573dc:	10c03fcc 	andi	r3,r2,255
 40573e0:	e0bff817 	ldw	r2,-32(fp)
 40573e4:	10800d03 	ldbu	r2,52(r2)
 40573e8:	11003fcc 	andi	r4,r2,255
 40573ec:	d0a05e44 	addi	r2,gp,-32391
 40573f0:	2085883a 	add	r2,r4,r2
 40573f4:	11000003 	ldbu	r4,0(r2)
 40573f8:	e0bff817 	ldw	r2,-32(fp)
 40573fc:	10800d43 	ldbu	r2,53(r2)
 4057400:	2084b03a 	or	r2,r4,r2
 4057404:	1009883a 	mov	r4,r2
 4057408:	d0a05e44 	addi	r2,gp,-32391
 405740c:	1885883a 	add	r2,r3,r2
 4057410:	11000005 	stb	r4,0(r2)
 4057414:	e0bff617 	ldw	r2,-40(fp)
 4057418:	e0bffa15 	stw	r2,-24(fp)
 405741c:	e0bffa17 	ldw	r2,-24(fp)
 4057420:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 4057424:	d0a05243 	ldbu	r2,-32439(gp)
 4057428:	10803fcc 	andi	r2,r2,255
 405742c:	10800058 	cmpnei	r2,r2,1
 4057430:	10000b1e 	bne	r2,zero,4057460 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 4057434:	405202c0 	call	405202c <OS_Sched>
 4057438:	00000906 	br	4057460 <OSTaskResume+0x1a4>
 405743c:	e0bff617 	ldw	r2,-40(fp)
 4057440:	e0bffb15 	stw	r2,-20(fp)
 4057444:	e0bffb17 	ldw	r2,-20(fp)
 4057448:	1001703a 	wrctl	status,r2
 405744c:	00000406 	br	4057460 <OSTaskResume+0x1a4>
 4057450:	e0bff617 	ldw	r2,-40(fp)
 4057454:	e0bffc15 	stw	r2,-16(fp)
 4057458:	e0bffc17 	ldw	r2,-16(fp)
 405745c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 4057460:	0005883a 	mov	r2,zero
 4057464:	00000506 	br	405747c <OSTaskResume+0x1c0>
 4057468:	e0bff617 	ldw	r2,-40(fp)
 405746c:	e0bffd15 	stw	r2,-12(fp)
 4057470:	e0bffd17 	ldw	r2,-12(fp)
 4057474:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 4057478:	00801104 	movi	r2,68
}
 405747c:	e037883a 	mov	sp,fp
 4057480:	dfc00117 	ldw	ra,4(sp)
 4057484:	df000017 	ldw	fp,0(sp)
 4057488:	dec00204 	addi	sp,sp,8
 405748c:	f800283a 	ret

04057490 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 4057490:	defff304 	addi	sp,sp,-52
 4057494:	df000c15 	stw	fp,48(sp)
 4057498:	df000c04 	addi	fp,sp,48
 405749c:	2005883a 	mov	r2,r4
 40574a0:	e17fff15 	stw	r5,-4(fp)
 40574a4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 40574a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 40574ac:	e0bffe03 	ldbu	r2,-8(fp)
 40574b0:	10800570 	cmpltui	r2,r2,21
 40574b4:	1000051e 	bne	r2,zero,40574cc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 40574b8:	e0bffe03 	ldbu	r2,-8(fp)
 40574bc:	10803fe0 	cmpeqi	r2,r2,255
 40574c0:	1000021e 	bne	r2,zero,40574cc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 40574c4:	00800a84 	movi	r2,42
 40574c8:	00005d06 	br	4057640 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 40574cc:	e0bfff17 	ldw	r2,-4(fp)
 40574d0:	1000021e 	bne	r2,zero,40574dc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 40574d4:	00800244 	movi	r2,9
 40574d8:	00005906 	br	4057640 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 40574dc:	e0bfff17 	ldw	r2,-4(fp)
 40574e0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 40574e4:	e0bfff17 	ldw	r2,-4(fp)
 40574e8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40574ec:	0005303a 	rdctl	r2,status
 40574f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40574f4:	e0fffd17 	ldw	r3,-12(fp)
 40574f8:	00bfff84 	movi	r2,-2
 40574fc:	1884703a 	and	r2,r3,r2
 4057500:	1001703a 	wrctl	status,r2
  
  return context;
 4057504:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 4057508:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 405750c:	e0bffe03 	ldbu	r2,-8(fp)
 4057510:	10803fd8 	cmpnei	r2,r2,255
 4057514:	1000031e 	bne	r2,zero,4057524 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 4057518:	d0a06117 	ldw	r2,-32380(gp)
 405751c:	10800c83 	ldbu	r2,50(r2)
 4057520:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4057524:	e0fffe03 	ldbu	r3,-8(fp)
 4057528:	00808074 	movhi	r2,513
 405752c:	10958d04 	addi	r2,r2,22068
 4057530:	18c7883a 	add	r3,r3,r3
 4057534:	18c7883a 	add	r3,r3,r3
 4057538:	10c5883a 	add	r2,r2,r3
 405753c:	10800017 	ldw	r2,0(r2)
 4057540:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 4057544:	e0bff817 	ldw	r2,-32(fp)
 4057548:	1000061e 	bne	r2,zero,4057564 <OSTaskStkChk+0xd4>
 405754c:	e0bff617 	ldw	r2,-40(fp)
 4057550:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4057554:	e0bff717 	ldw	r2,-36(fp)
 4057558:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 405755c:	008010c4 	movi	r2,67
 4057560:	00003706 	br	4057640 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4057564:	e0bff817 	ldw	r2,-32(fp)
 4057568:	10800058 	cmpnei	r2,r2,1
 405756c:	1000061e 	bne	r2,zero,4057588 <OSTaskStkChk+0xf8>
 4057570:	e0bff617 	ldw	r2,-40(fp)
 4057574:	e0bff915 	stw	r2,-28(fp)
 4057578:	e0bff917 	ldw	r2,-28(fp)
 405757c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4057580:	008010c4 	movi	r2,67
 4057584:	00002e06 	br	4057640 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 4057588:	e0bff817 	ldw	r2,-32(fp)
 405758c:	1080040b 	ldhu	r2,16(r2)
 4057590:	10bfffcc 	andi	r2,r2,65535
 4057594:	1080004c 	andi	r2,r2,1
 4057598:	1000061e 	bne	r2,zero,40575b4 <OSTaskStkChk+0x124>
 405759c:	e0bff617 	ldw	r2,-40(fp)
 40575a0:	e0bffa15 	stw	r2,-24(fp)
 40575a4:	e0bffa17 	ldw	r2,-24(fp)
 40575a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 40575ac:	00801144 	movi	r2,69
 40575b0:	00002306 	br	4057640 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 40575b4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 40575b8:	e0bff817 	ldw	r2,-32(fp)
 40575bc:	10800317 	ldw	r2,12(r2)
 40575c0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 40575c4:	e0bff817 	ldw	r2,-32(fp)
 40575c8:	10800217 	ldw	r2,8(r2)
 40575cc:	e0bff415 	stw	r2,-48(fp)
 40575d0:	e0bff617 	ldw	r2,-40(fp)
 40575d4:	e0bffb15 	stw	r2,-20(fp)
 40575d8:	e0bffb17 	ldw	r2,-20(fp)
 40575dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 40575e0:	00000306 	br	40575f0 <OSTaskStkChk+0x160>
        nfree++;
 40575e4:	e0bff517 	ldw	r2,-44(fp)
 40575e8:	10800044 	addi	r2,r2,1
 40575ec:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 40575f0:	e0bff417 	ldw	r2,-48(fp)
 40575f4:	10c00104 	addi	r3,r2,4
 40575f8:	e0fff415 	stw	r3,-48(fp)
 40575fc:	10800017 	ldw	r2,0(r2)
 4057600:	103ff826 	beq	r2,zero,40575e4 <__flash_rwdata_start+0xffffceb4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 4057604:	e0bff517 	ldw	r2,-44(fp)
 4057608:	1085883a 	add	r2,r2,r2
 405760c:	1085883a 	add	r2,r2,r2
 4057610:	1007883a 	mov	r3,r2
 4057614:	e0bfff17 	ldw	r2,-4(fp)
 4057618:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 405761c:	e0fffc17 	ldw	r3,-16(fp)
 4057620:	e0bff517 	ldw	r2,-44(fp)
 4057624:	1885c83a 	sub	r2,r3,r2
 4057628:	1085883a 	add	r2,r2,r2
 405762c:	1085883a 	add	r2,r2,r2
 4057630:	1007883a 	mov	r3,r2
 4057634:	e0bfff17 	ldw	r2,-4(fp)
 4057638:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 405763c:	0005883a 	mov	r2,zero
}
 4057640:	e037883a 	mov	sp,fp
 4057644:	df000017 	ldw	fp,0(sp)
 4057648:	dec00104 	addi	sp,sp,4
 405764c:	f800283a 	ret

04057650 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 4057650:	defff504 	addi	sp,sp,-44
 4057654:	dfc00a15 	stw	ra,40(sp)
 4057658:	df000915 	stw	fp,36(sp)
 405765c:	df000904 	addi	fp,sp,36
 4057660:	2005883a 	mov	r2,r4
 4057664:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4057668:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 405766c:	e0bfff03 	ldbu	r2,-4(fp)
 4057670:	10800518 	cmpnei	r2,r2,20
 4057674:	1000021e 	bne	r2,zero,4057680 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 4057678:	008011c4 	movi	r2,71
 405767c:	00006806 	br	4057820 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4057680:	e0bfff03 	ldbu	r2,-4(fp)
 4057684:	10800530 	cmpltui	r2,r2,20
 4057688:	1000051e 	bne	r2,zero,40576a0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 405768c:	e0bfff03 	ldbu	r2,-4(fp)
 4057690:	10803fe0 	cmpeqi	r2,r2,255
 4057694:	1000021e 	bne	r2,zero,40576a0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 4057698:	00800a84 	movi	r2,42
 405769c:	00006006 	br	4057820 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40576a0:	0005303a 	rdctl	r2,status
 40576a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40576a8:	e0fffe17 	ldw	r3,-8(fp)
 40576ac:	00bfff84 	movi	r2,-2
 40576b0:	1884703a 	and	r2,r3,r2
 40576b4:	1001703a 	wrctl	status,r2
  
  return context;
 40576b8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 40576bc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 40576c0:	e0bfff03 	ldbu	r2,-4(fp)
 40576c4:	10803fd8 	cmpnei	r2,r2,255
 40576c8:	1000061e 	bne	r2,zero,40576e4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 40576cc:	d0a06117 	ldw	r2,-32380(gp)
 40576d0:	10800c83 	ldbu	r2,50(r2)
 40576d4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 40576d8:	00800044 	movi	r2,1
 40576dc:	e0bff705 	stb	r2,-36(fp)
 40576e0:	00000906 	br	4057708 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 40576e4:	d0a06117 	ldw	r2,-32380(gp)
 40576e8:	10800c83 	ldbu	r2,50(r2)
 40576ec:	10c03fcc 	andi	r3,r2,255
 40576f0:	e0bfff03 	ldbu	r2,-4(fp)
 40576f4:	1880031e 	bne	r3,r2,4057704 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 40576f8:	00800044 	movi	r2,1
 40576fc:	e0bff705 	stb	r2,-36(fp)
 4057700:	00000106 	br	4057708 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 4057704:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4057708:	e0ffff03 	ldbu	r3,-4(fp)
 405770c:	00808074 	movhi	r2,513
 4057710:	10958d04 	addi	r2,r2,22068
 4057714:	18c7883a 	add	r3,r3,r3
 4057718:	18c7883a 	add	r3,r3,r3
 405771c:	10c5883a 	add	r2,r2,r3
 4057720:	10800017 	ldw	r2,0(r2)
 4057724:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 4057728:	e0bffa17 	ldw	r2,-24(fp)
 405772c:	1000061e 	bne	r2,zero,4057748 <OSTaskSuspend+0xf8>
 4057730:	e0bff817 	ldw	r2,-32(fp)
 4057734:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4057738:	e0bff917 	ldw	r2,-28(fp)
 405773c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 4057740:	00801204 	movi	r2,72
 4057744:	00003606 	br	4057820 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 4057748:	e0bffa17 	ldw	r2,-24(fp)
 405774c:	10800058 	cmpnei	r2,r2,1
 4057750:	1000061e 	bne	r2,zero,405776c <OSTaskSuspend+0x11c>
 4057754:	e0bff817 	ldw	r2,-32(fp)
 4057758:	e0bffb15 	stw	r2,-20(fp)
 405775c:	e0bffb17 	ldw	r2,-20(fp)
 4057760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4057764:	008010c4 	movi	r2,67
 4057768:	00002d06 	br	4057820 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 405776c:	e0bffa17 	ldw	r2,-24(fp)
 4057770:	10800d03 	ldbu	r2,52(r2)
 4057774:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 4057778:	e0fffd03 	ldbu	r3,-12(fp)
 405777c:	e13ffd03 	ldbu	r4,-12(fp)
 4057780:	d0a05e44 	addi	r2,gp,-32391
 4057784:	2085883a 	add	r2,r4,r2
 4057788:	10800003 	ldbu	r2,0(r2)
 405778c:	1009883a 	mov	r4,r2
 4057790:	e0bffa17 	ldw	r2,-24(fp)
 4057794:	10800d43 	ldbu	r2,53(r2)
 4057798:	0084303a 	nor	r2,zero,r2
 405779c:	2084703a 	and	r2,r4,r2
 40577a0:	1009883a 	mov	r4,r2
 40577a4:	d0a05e44 	addi	r2,gp,-32391
 40577a8:	1885883a 	add	r2,r3,r2
 40577ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 40577b0:	e0fffd03 	ldbu	r3,-12(fp)
 40577b4:	d0a05e44 	addi	r2,gp,-32391
 40577b8:	1885883a 	add	r2,r3,r2
 40577bc:	10800003 	ldbu	r2,0(r2)
 40577c0:	10803fcc 	andi	r2,r2,255
 40577c4:	1000071e 	bne	r2,zero,40577e4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 40577c8:	e0bffa17 	ldw	r2,-24(fp)
 40577cc:	10800d83 	ldbu	r2,54(r2)
 40577d0:	0084303a 	nor	r2,zero,r2
 40577d4:	1007883a 	mov	r3,r2
 40577d8:	d0a05e03 	ldbu	r2,-32392(gp)
 40577dc:	1884703a 	and	r2,r3,r2
 40577e0:	d0a05e05 	stb	r2,-32392(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 40577e4:	e0bffa17 	ldw	r2,-24(fp)
 40577e8:	10800c03 	ldbu	r2,48(r2)
 40577ec:	10800214 	ori	r2,r2,8
 40577f0:	1007883a 	mov	r3,r2
 40577f4:	e0bffa17 	ldw	r2,-24(fp)
 40577f8:	10c00c05 	stb	r3,48(r2)
 40577fc:	e0bff817 	ldw	r2,-32(fp)
 4057800:	e0bffc15 	stw	r2,-16(fp)
 4057804:	e0bffc17 	ldw	r2,-16(fp)
 4057808:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 405780c:	e0bff703 	ldbu	r2,-36(fp)
 4057810:	10800058 	cmpnei	r2,r2,1
 4057814:	1000011e 	bne	r2,zero,405781c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 4057818:	405202c0 	call	405202c <OS_Sched>
    }
    return (OS_ERR_NONE);
 405781c:	0005883a 	mov	r2,zero
}
 4057820:	e037883a 	mov	sp,fp
 4057824:	dfc00117 	ldw	ra,4(sp)
 4057828:	df000017 	ldw	fp,0(sp)
 405782c:	dec00204 	addi	sp,sp,8
 4057830:	f800283a 	ret

04057834 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 4057834:	defff604 	addi	sp,sp,-40
 4057838:	dfc00915 	stw	ra,36(sp)
 405783c:	df000815 	stw	fp,32(sp)
 4057840:	df000804 	addi	fp,sp,32
 4057844:	2005883a 	mov	r2,r4
 4057848:	e17fff15 	stw	r5,-4(fp)
 405784c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4057850:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 4057854:	e0bffe03 	ldbu	r2,-8(fp)
 4057858:	10800570 	cmpltui	r2,r2,21
 405785c:	1000051e 	bne	r2,zero,4057874 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 4057860:	e0bffe03 	ldbu	r2,-8(fp)
 4057864:	10803fe0 	cmpeqi	r2,r2,255
 4057868:	1000021e 	bne	r2,zero,4057874 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 405786c:	00800a84 	movi	r2,42
 4057870:	00003406 	br	4057944 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 4057874:	e0bfff17 	ldw	r2,-4(fp)
 4057878:	1000021e 	bne	r2,zero,4057884 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 405787c:	00800244 	movi	r2,9
 4057880:	00003006 	br	4057944 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4057884:	0005303a 	rdctl	r2,status
 4057888:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 405788c:	e0fffd17 	ldw	r3,-12(fp)
 4057890:	00bfff84 	movi	r2,-2
 4057894:	1884703a 	and	r2,r3,r2
 4057898:	1001703a 	wrctl	status,r2
  
  return context;
 405789c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40578a0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 40578a4:	e0bffe03 	ldbu	r2,-8(fp)
 40578a8:	10803fd8 	cmpnei	r2,r2,255
 40578ac:	1000031e 	bne	r2,zero,40578bc <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 40578b0:	d0a06117 	ldw	r2,-32380(gp)
 40578b4:	10800c83 	ldbu	r2,50(r2)
 40578b8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 40578bc:	e0fffe03 	ldbu	r3,-8(fp)
 40578c0:	00808074 	movhi	r2,513
 40578c4:	10958d04 	addi	r2,r2,22068
 40578c8:	18c7883a 	add	r3,r3,r3
 40578cc:	18c7883a 	add	r3,r3,r3
 40578d0:	10c5883a 	add	r2,r2,r3
 40578d4:	10800017 	ldw	r2,0(r2)
 40578d8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 40578dc:	e0bffa17 	ldw	r2,-24(fp)
 40578e0:	1000061e 	bne	r2,zero,40578fc <OSTaskQuery+0xc8>
 40578e4:	e0bff817 	ldw	r2,-32(fp)
 40578e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40578ec:	e0bff917 	ldw	r2,-28(fp)
 40578f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 40578f4:	00800a44 	movi	r2,41
 40578f8:	00001206 	br	4057944 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 40578fc:	e0bffa17 	ldw	r2,-24(fp)
 4057900:	10800058 	cmpnei	r2,r2,1
 4057904:	1000061e 	bne	r2,zero,4057920 <OSTaskQuery+0xec>
 4057908:	e0bff817 	ldw	r2,-32(fp)
 405790c:	e0bffb15 	stw	r2,-20(fp)
 4057910:	e0bffb17 	ldw	r2,-20(fp)
 4057914:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4057918:	008010c4 	movi	r2,67
 405791c:	00000906 	br	4057944 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 4057920:	01801b04 	movi	r6,108
 4057924:	e17ffa17 	ldw	r5,-24(fp)
 4057928:	e13fff17 	ldw	r4,-4(fp)
 405792c:	4051fc40 	call	4051fc4 <OS_MemCopy>
 4057930:	e0bff817 	ldw	r2,-32(fp)
 4057934:	e0bffc15 	stw	r2,-16(fp)
 4057938:	e0bffc17 	ldw	r2,-16(fp)
 405793c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4057940:	0005883a 	mov	r2,zero
}
 4057944:	e037883a 	mov	sp,fp
 4057948:	dfc00117 	ldw	ra,4(sp)
 405794c:	df000017 	ldw	fp,0(sp)
 4057950:	dec00204 	addi	sp,sp,8
 4057954:	f800283a 	ret

04057958 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 4057958:	defffc04 	addi	sp,sp,-16
 405795c:	df000315 	stw	fp,12(sp)
 4057960:	df000304 	addi	fp,sp,12
 4057964:	e13ffd15 	stw	r4,-12(fp)
 4057968:	e17ffe15 	stw	r5,-8(fp)
 405796c:	3005883a 	mov	r2,r6
 4057970:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 4057974:	e0bfff0b 	ldhu	r2,-4(fp)
 4057978:	1080004c 	andi	r2,r2,1
 405797c:	10000d26 	beq	r2,zero,40579b4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 4057980:	e0bfff0b 	ldhu	r2,-4(fp)
 4057984:	1080008c 	andi	r2,r2,2
 4057988:	10000a26 	beq	r2,zero,40579b4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 405798c:	00000706 	br	40579ac <OS_TaskStkClr+0x54>
                size--;
 4057990:	e0bffe17 	ldw	r2,-8(fp)
 4057994:	10bfffc4 	addi	r2,r2,-1
 4057998:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 405799c:	e0bffd17 	ldw	r2,-12(fp)
 40579a0:	10c00104 	addi	r3,r2,4
 40579a4:	e0fffd15 	stw	r3,-12(fp)
 40579a8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 40579ac:	e0bffe17 	ldw	r2,-8(fp)
 40579b0:	103ff71e 	bne	r2,zero,4057990 <__flash_rwdata_start+0xffffd260>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 40579b4:	0001883a 	nop
 40579b8:	e037883a 	mov	sp,fp
 40579bc:	df000017 	ldw	fp,0(sp)
 40579c0:	dec00104 	addi	sp,sp,4
 40579c4:	f800283a 	ret

040579c8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 40579c8:	defff904 	addi	sp,sp,-28
 40579cc:	dfc00615 	stw	ra,24(sp)
 40579d0:	df000515 	stw	fp,20(sp)
 40579d4:	df000504 	addi	fp,sp,20
 40579d8:	2005883a 	mov	r2,r4
 40579dc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40579e0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40579e4:	d0a06003 	ldbu	r2,-32384(gp)
 40579e8:	10803fcc 	andi	r2,r2,255
 40579ec:	1000311e 	bne	r2,zero,4057ab4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 40579f0:	e0bfff0b 	ldhu	r2,-4(fp)
 40579f4:	10003026 	beq	r2,zero,4057ab8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40579f8:	0005303a 	rdctl	r2,status
 40579fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4057a00:	e0fffe17 	ldw	r3,-8(fp)
 4057a04:	00bfff84 	movi	r2,-2
 4057a08:	1884703a 	and	r2,r3,r2
 4057a0c:	1001703a 	wrctl	status,r2
  
  return context;
 4057a10:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 4057a14:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 4057a18:	d0a06117 	ldw	r2,-32380(gp)
 4057a1c:	10800d03 	ldbu	r2,52(r2)
 4057a20:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 4057a24:	e0fffd03 	ldbu	r3,-12(fp)
 4057a28:	e13ffd03 	ldbu	r4,-12(fp)
 4057a2c:	d0a05e44 	addi	r2,gp,-32391
 4057a30:	2085883a 	add	r2,r4,r2
 4057a34:	10800003 	ldbu	r2,0(r2)
 4057a38:	1009883a 	mov	r4,r2
 4057a3c:	d0a06117 	ldw	r2,-32380(gp)
 4057a40:	10800d43 	ldbu	r2,53(r2)
 4057a44:	0084303a 	nor	r2,zero,r2
 4057a48:	2084703a 	and	r2,r4,r2
 4057a4c:	1009883a 	mov	r4,r2
 4057a50:	d0a05e44 	addi	r2,gp,-32391
 4057a54:	1885883a 	add	r2,r3,r2
 4057a58:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 4057a5c:	e0fffd03 	ldbu	r3,-12(fp)
 4057a60:	d0a05e44 	addi	r2,gp,-32391
 4057a64:	1885883a 	add	r2,r3,r2
 4057a68:	10800003 	ldbu	r2,0(r2)
 4057a6c:	10803fcc 	andi	r2,r2,255
 4057a70:	1000071e 	bne	r2,zero,4057a90 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4057a74:	d0a06117 	ldw	r2,-32380(gp)
 4057a78:	10800d83 	ldbu	r2,54(r2)
 4057a7c:	0084303a 	nor	r2,zero,r2
 4057a80:	1007883a 	mov	r3,r2
 4057a84:	d0a05e03 	ldbu	r2,-32392(gp)
 4057a88:	1884703a 	and	r2,r3,r2
 4057a8c:	d0a05e05 	stb	r2,-32392(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 4057a90:	d0a06117 	ldw	r2,-32380(gp)
 4057a94:	e0ffff0b 	ldhu	r3,-4(fp)
 4057a98:	10c00b8d 	sth	r3,46(r2)
 4057a9c:	e0bffb17 	ldw	r2,-20(fp)
 4057aa0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4057aa4:	e0bffc17 	ldw	r2,-16(fp)
 4057aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 4057aac:	405202c0 	call	405202c <OS_Sched>
 4057ab0:	00000106 	br	4057ab8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 4057ab4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 4057ab8:	e037883a 	mov	sp,fp
 4057abc:	dfc00117 	ldw	ra,4(sp)
 4057ac0:	df000017 	ldw	fp,0(sp)
 4057ac4:	dec00204 	addi	sp,sp,8
 4057ac8:	f800283a 	ret

04057acc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 4057acc:	defff704 	addi	sp,sp,-36
 4057ad0:	dfc00815 	stw	ra,32(sp)
 4057ad4:	df000715 	stw	fp,28(sp)
 4057ad8:	dc000615 	stw	r16,24(sp)
 4057adc:	df000704 	addi	fp,sp,28
 4057ae0:	2011883a 	mov	r8,r4
 4057ae4:	2809883a 	mov	r4,r5
 4057ae8:	3007883a 	mov	r3,r6
 4057aec:	3805883a 	mov	r2,r7
 4057af0:	e23ffb05 	stb	r8,-20(fp)
 4057af4:	e13ffc05 	stb	r4,-16(fp)
 4057af8:	e0fffd05 	stb	r3,-12(fp)
 4057afc:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4057b00:	d0a06003 	ldbu	r2,-32384(gp)
 4057b04:	10803fcc 	andi	r2,r2,255
 4057b08:	10000226 	beq	r2,zero,4057b14 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 4057b0c:	00801544 	movi	r2,85
 4057b10:	00003d06 	br	4057c08 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 4057b14:	e0bffb03 	ldbu	r2,-20(fp)
 4057b18:	1000081e 	bne	r2,zero,4057b3c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 4057b1c:	e0bffc03 	ldbu	r2,-16(fp)
 4057b20:	1000061e 	bne	r2,zero,4057b3c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 4057b24:	e0bffd03 	ldbu	r2,-12(fp)
 4057b28:	1000041e 	bne	r2,zero,4057b3c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 4057b2c:	e0bffe0b 	ldhu	r2,-8(fp)
 4057b30:	1000021e 	bne	r2,zero,4057b3c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 4057b34:	00801504 	movi	r2,84
 4057b38:	00003306 	br	4057c08 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 4057b3c:	e0bffc03 	ldbu	r2,-16(fp)
 4057b40:	10800f30 	cmpltui	r2,r2,60
 4057b44:	1000021e 	bne	r2,zero,4057b50 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 4057b48:	00801444 	movi	r2,81
 4057b4c:	00002e06 	br	4057c08 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 4057b50:	e0bffd03 	ldbu	r2,-12(fp)
 4057b54:	10800f30 	cmpltui	r2,r2,60
 4057b58:	1000021e 	bne	r2,zero,4057b64 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 4057b5c:	00801484 	movi	r2,82
 4057b60:	00002906 	br	4057c08 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 4057b64:	e0bffe0b 	ldhu	r2,-8(fp)
 4057b68:	1080fa30 	cmpltui	r2,r2,1000
 4057b6c:	1000021e 	bne	r2,zero,4057b78 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 4057b70:	008014c4 	movi	r2,83
 4057b74:	00002406 	br	4057c08 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 4057b78:	e0bffb03 	ldbu	r2,-20(fp)
 4057b7c:	10c38424 	muli	r3,r2,3600
 4057b80:	e0bffc03 	ldbu	r2,-16(fp)
 4057b84:	10800f24 	muli	r2,r2,60
 4057b88:	1887883a 	add	r3,r3,r2
 4057b8c:	e0bffd03 	ldbu	r2,-12(fp)
 4057b90:	1885883a 	add	r2,r3,r2
 4057b94:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 4057b98:	e0bffe0b 	ldhu	r2,-8(fp)
 4057b9c:	1080fa24 	muli	r2,r2,1000
 4057ba0:	0140fa04 	movi	r5,1000
 4057ba4:	1009883a 	mov	r4,r2
 4057ba8:	4042fb00 	call	4042fb0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 4057bac:	8085883a 	add	r2,r16,r2
 4057bb0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 4057bb4:	e0bffa17 	ldw	r2,-24(fp)
 4057bb8:	1004d43a 	srli	r2,r2,16
 4057bbc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 4057bc0:	e0bffa17 	ldw	r2,-24(fp)
 4057bc4:	10bfffcc 	andi	r2,r2,65535
 4057bc8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 4057bcc:	e0bffa17 	ldw	r2,-24(fp)
 4057bd0:	10bfffcc 	andi	r2,r2,65535
 4057bd4:	1009883a 	mov	r4,r2
 4057bd8:	40579c80 	call	40579c8 <OSTimeDly>
    while (loops > 0) {
 4057bdc:	00000706 	br	4057bfc <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 4057be0:	01200014 	movui	r4,32768
 4057be4:	40579c80 	call	40579c8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 4057be8:	01200014 	movui	r4,32768
 4057bec:	40579c80 	call	40579c8 <OSTimeDly>
        loops--;
 4057bf0:	e0bff90b 	ldhu	r2,-28(fp)
 4057bf4:	10bfffc4 	addi	r2,r2,-1
 4057bf8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 4057bfc:	e0bff90b 	ldhu	r2,-28(fp)
 4057c00:	103ff71e 	bne	r2,zero,4057be0 <__flash_rwdata_start+0xffffd4b0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 4057c04:	0005883a 	mov	r2,zero
}
 4057c08:	e6ffff04 	addi	sp,fp,-4
 4057c0c:	dfc00217 	ldw	ra,8(sp)
 4057c10:	df000117 	ldw	fp,4(sp)
 4057c14:	dc000017 	ldw	r16,0(sp)
 4057c18:	dec00304 	addi	sp,sp,12
 4057c1c:	f800283a 	ret

04057c20 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 4057c20:	defff504 	addi	sp,sp,-44
 4057c24:	dfc00a15 	stw	ra,40(sp)
 4057c28:	df000915 	stw	fp,36(sp)
 4057c2c:	df000904 	addi	fp,sp,36
 4057c30:	2005883a 	mov	r2,r4
 4057c34:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4057c38:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 4057c3c:	e0bfff03 	ldbu	r2,-4(fp)
 4057c40:	10800530 	cmpltui	r2,r2,20
 4057c44:	1000021e 	bne	r2,zero,4057c50 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 4057c48:	00800a84 	movi	r2,42
 4057c4c:	00006406 	br	4057de0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4057c50:	0005303a 	rdctl	r2,status
 4057c54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4057c58:	e0fffe17 	ldw	r3,-8(fp)
 4057c5c:	00bfff84 	movi	r2,-2
 4057c60:	1884703a 	and	r2,r3,r2
 4057c64:	1001703a 	wrctl	status,r2
  
  return context;
 4057c68:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4057c6c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 4057c70:	e0ffff03 	ldbu	r3,-4(fp)
 4057c74:	00808074 	movhi	r2,513
 4057c78:	10958d04 	addi	r2,r2,22068
 4057c7c:	18c7883a 	add	r3,r3,r3
 4057c80:	18c7883a 	add	r3,r3,r3
 4057c84:	10c5883a 	add	r2,r2,r3
 4057c88:	10800017 	ldw	r2,0(r2)
 4057c8c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 4057c90:	e0bff917 	ldw	r2,-28(fp)
 4057c94:	1000061e 	bne	r2,zero,4057cb0 <OSTimeDlyResume+0x90>
 4057c98:	e0bff717 	ldw	r2,-36(fp)
 4057c9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4057ca0:	e0bff817 	ldw	r2,-32(fp)
 4057ca4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4057ca8:	008010c4 	movi	r2,67
 4057cac:	00004c06 	br	4057de0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4057cb0:	e0bff917 	ldw	r2,-28(fp)
 4057cb4:	10800058 	cmpnei	r2,r2,1
 4057cb8:	1000061e 	bne	r2,zero,4057cd4 <OSTimeDlyResume+0xb4>
 4057cbc:	e0bff717 	ldw	r2,-36(fp)
 4057cc0:	e0bffa15 	stw	r2,-24(fp)
 4057cc4:	e0bffa17 	ldw	r2,-24(fp)
 4057cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 4057ccc:	008010c4 	movi	r2,67
 4057cd0:	00004306 	br	4057de0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 4057cd4:	e0bff917 	ldw	r2,-28(fp)
 4057cd8:	10800b8b 	ldhu	r2,46(r2)
 4057cdc:	10bfffcc 	andi	r2,r2,65535
 4057ce0:	1000061e 	bne	r2,zero,4057cfc <OSTimeDlyResume+0xdc>
 4057ce4:	e0bff717 	ldw	r2,-36(fp)
 4057ce8:	e0bffb15 	stw	r2,-20(fp)
 4057cec:	e0bffb17 	ldw	r2,-20(fp)
 4057cf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 4057cf4:	00801404 	movi	r2,80
 4057cf8:	00003906 	br	4057de0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 4057cfc:	e0bff917 	ldw	r2,-28(fp)
 4057d00:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4057d04:	e0bff917 	ldw	r2,-28(fp)
 4057d08:	10800c03 	ldbu	r2,48(r2)
 4057d0c:	10803fcc 	andi	r2,r2,255
 4057d10:	10800dcc 	andi	r2,r2,55
 4057d14:	10000b26 	beq	r2,zero,4057d44 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 4057d18:	e0bff917 	ldw	r2,-28(fp)
 4057d1c:	10c00c03 	ldbu	r3,48(r2)
 4057d20:	00bff204 	movi	r2,-56
 4057d24:	1884703a 	and	r2,r3,r2
 4057d28:	1007883a 	mov	r3,r2
 4057d2c:	e0bff917 	ldw	r2,-28(fp)
 4057d30:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 4057d34:	e0bff917 	ldw	r2,-28(fp)
 4057d38:	00c00044 	movi	r3,1
 4057d3c:	10c00c45 	stb	r3,49(r2)
 4057d40:	00000206 	br	4057d4c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 4057d44:	e0bff917 	ldw	r2,-28(fp)
 4057d48:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 4057d4c:	e0bff917 	ldw	r2,-28(fp)
 4057d50:	10800c03 	ldbu	r2,48(r2)
 4057d54:	10803fcc 	andi	r2,r2,255
 4057d58:	1080020c 	andi	r2,r2,8
 4057d5c:	10001b1e 	bne	r2,zero,4057dcc <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 4057d60:	e0bff917 	ldw	r2,-28(fp)
 4057d64:	10c00d83 	ldbu	r3,54(r2)
 4057d68:	d0a05e03 	ldbu	r2,-32392(gp)
 4057d6c:	1884b03a 	or	r2,r3,r2
 4057d70:	d0a05e05 	stb	r2,-32392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4057d74:	e0bff917 	ldw	r2,-28(fp)
 4057d78:	10800d03 	ldbu	r2,52(r2)
 4057d7c:	10c03fcc 	andi	r3,r2,255
 4057d80:	e0bff917 	ldw	r2,-28(fp)
 4057d84:	10800d03 	ldbu	r2,52(r2)
 4057d88:	11003fcc 	andi	r4,r2,255
 4057d8c:	d0a05e44 	addi	r2,gp,-32391
 4057d90:	2085883a 	add	r2,r4,r2
 4057d94:	11000003 	ldbu	r4,0(r2)
 4057d98:	e0bff917 	ldw	r2,-28(fp)
 4057d9c:	10800d43 	ldbu	r2,53(r2)
 4057da0:	2084b03a 	or	r2,r4,r2
 4057da4:	1009883a 	mov	r4,r2
 4057da8:	d0a05e44 	addi	r2,gp,-32391
 4057dac:	1885883a 	add	r2,r3,r2
 4057db0:	11000005 	stb	r4,0(r2)
 4057db4:	e0bff717 	ldw	r2,-36(fp)
 4057db8:	e0bffc15 	stw	r2,-16(fp)
 4057dbc:	e0bffc17 	ldw	r2,-16(fp)
 4057dc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 4057dc4:	405202c0 	call	405202c <OS_Sched>
 4057dc8:	00000406 	br	4057ddc <OSTimeDlyResume+0x1bc>
 4057dcc:	e0bff717 	ldw	r2,-36(fp)
 4057dd0:	e0bffd15 	stw	r2,-12(fp)
 4057dd4:	e0bffd17 	ldw	r2,-12(fp)
 4057dd8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 4057ddc:	0005883a 	mov	r2,zero
}
 4057de0:	e037883a 	mov	sp,fp
 4057de4:	dfc00117 	ldw	ra,4(sp)
 4057de8:	df000017 	ldw	fp,0(sp)
 4057dec:	dec00204 	addi	sp,sp,8
 4057df0:	f800283a 	ret

04057df4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 4057df4:	defffb04 	addi	sp,sp,-20
 4057df8:	df000415 	stw	fp,16(sp)
 4057dfc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4057e00:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4057e04:	0005303a 	rdctl	r2,status
 4057e08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4057e0c:	e0fffe17 	ldw	r3,-8(fp)
 4057e10:	00bfff84 	movi	r2,-2
 4057e14:	1884703a 	and	r2,r3,r2
 4057e18:	1001703a 	wrctl	status,r2
  
  return context;
 4057e1c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 4057e20:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 4057e24:	d0a06217 	ldw	r2,-32376(gp)
 4057e28:	e0bffd15 	stw	r2,-12(fp)
 4057e2c:	e0bffc17 	ldw	r2,-16(fp)
 4057e30:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4057e34:	e0bfff17 	ldw	r2,-4(fp)
 4057e38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 4057e3c:	e0bffd17 	ldw	r2,-12(fp)
}
 4057e40:	e037883a 	mov	sp,fp
 4057e44:	df000017 	ldw	fp,0(sp)
 4057e48:	dec00104 	addi	sp,sp,4
 4057e4c:	f800283a 	ret

04057e50 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 4057e50:	defffb04 	addi	sp,sp,-20
 4057e54:	df000415 	stw	fp,16(sp)
 4057e58:	df000404 	addi	fp,sp,16
 4057e5c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4057e60:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4057e64:	0005303a 	rdctl	r2,status
 4057e68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4057e6c:	e0fffd17 	ldw	r3,-12(fp)
 4057e70:	00bfff84 	movi	r2,-2
 4057e74:	1884703a 	and	r2,r3,r2
 4057e78:	1001703a 	wrctl	status,r2
  
  return context;
 4057e7c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4057e80:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 4057e84:	e0bfff17 	ldw	r2,-4(fp)
 4057e88:	d0a06215 	stw	r2,-32376(gp)
 4057e8c:	e0bffc17 	ldw	r2,-16(fp)
 4057e90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4057e94:	e0bffe17 	ldw	r2,-8(fp)
 4057e98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4057e9c:	0001883a 	nop
 4057ea0:	e037883a 	mov	sp,fp
 4057ea4:	df000017 	ldw	fp,0(sp)
 4057ea8:	dec00104 	addi	sp,sp,4
 4057eac:	f800283a 	ret

04057eb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4057eb0:	defffd04 	addi	sp,sp,-12
 4057eb4:	dfc00215 	stw	ra,8(sp)
 4057eb8:	df000115 	stw	fp,4(sp)
 4057ebc:	df000104 	addi	fp,sp,4
 4057ec0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4057ec4:	d1600804 	addi	r5,gp,-32736
 4057ec8:	e13fff17 	ldw	r4,-4(fp)
 4057ecc:	4058f4c0 	call	4058f4c <alt_dev_llist_insert>
}
 4057ed0:	e037883a 	mov	sp,fp
 4057ed4:	dfc00117 	ldw	ra,4(sp)
 4057ed8:	df000017 	ldw	fp,0(sp)
 4057edc:	dec00204 	addi	sp,sp,8
 4057ee0:	f800283a 	ret

04057ee4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4057ee4:	defffd04 	addi	sp,sp,-12
 4057ee8:	dfc00215 	stw	ra,8(sp)
 4057eec:	df000115 	stw	fp,4(sp)
 4057ef0:	df000104 	addi	fp,sp,4
 4057ef4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_PROC, NIOS_PROC);
 4057ef8:	40596b80 	call	40596b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4057efc:	00800044 	movi	r2,1
 4057f00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4057f04:	0001883a 	nop
 4057f08:	e037883a 	mov	sp,fp
 4057f0c:	dfc00117 	ldw	ra,4(sp)
 4057f10:	df000017 	ldw	fp,0(sp)
 4057f14:	dec00204 	addi	sp,sp,8
 4057f18:	f800283a 	ret

04057f1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4057f1c:	defffe04 	addi	sp,sp,-8
 4057f20:	dfc00115 	stw	ra,4(sp)
 4057f24:	df000015 	stw	fp,0(sp)
 4057f28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
 4057f2c:	01c0fa04 	movi	r7,1000
 4057f30:	000d883a 	mov	r6,zero
 4057f34:	000b883a 	mov	r5,zero
 4057f38:	01010234 	movhi	r4,1032
 4057f3c:	21040004 	addi	r4,r4,4096
 4057f40:	4058d200 	call	4058d20 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( UART_JTAG, UART_JTAG);
 4057f44:	01800044 	movi	r6,1
 4057f48:	000b883a 	mov	r5,zero
 4057f4c:	01008034 	movhi	r4,512
 4057f50:	21045504 	addi	r4,r4,4436
 4057f54:	40580e00 	call	40580e0 <altera_avalon_jtag_uart_init>
 4057f58:	01008034 	movhi	r4,512
 4057f5c:	21044b04 	addi	r4,r4,4396
 4057f60:	4057eb00 	call	4057eb0 <alt_dev_reg>
}
 4057f64:	0001883a 	nop
 4057f68:	e037883a 	mov	sp,fp
 4057f6c:	dfc00117 	ldw	ra,4(sp)
 4057f70:	df000017 	ldw	fp,0(sp)
 4057f74:	dec00204 	addi	sp,sp,8
 4057f78:	f800283a 	ret

04057f7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4057f7c:	defffa04 	addi	sp,sp,-24
 4057f80:	dfc00515 	stw	ra,20(sp)
 4057f84:	df000415 	stw	fp,16(sp)
 4057f88:	df000404 	addi	fp,sp,16
 4057f8c:	e13ffd15 	stw	r4,-12(fp)
 4057f90:	e17ffe15 	stw	r5,-8(fp)
 4057f94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4057f98:	e0bffd17 	ldw	r2,-12(fp)
 4057f9c:	10800017 	ldw	r2,0(r2)
 4057fa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4057fa4:	e0bffc17 	ldw	r2,-16(fp)
 4057fa8:	10c00a04 	addi	r3,r2,40
 4057fac:	e0bffd17 	ldw	r2,-12(fp)
 4057fb0:	10800217 	ldw	r2,8(r2)
 4057fb4:	100f883a 	mov	r7,r2
 4057fb8:	e1bfff17 	ldw	r6,-4(fp)
 4057fbc:	e17ffe17 	ldw	r5,-8(fp)
 4057fc0:	1809883a 	mov	r4,r3
 4057fc4:	40587280 	call	4058728 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4057fc8:	e037883a 	mov	sp,fp
 4057fcc:	dfc00117 	ldw	ra,4(sp)
 4057fd0:	df000017 	ldw	fp,0(sp)
 4057fd4:	dec00204 	addi	sp,sp,8
 4057fd8:	f800283a 	ret

04057fdc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4057fdc:	defffa04 	addi	sp,sp,-24
 4057fe0:	dfc00515 	stw	ra,20(sp)
 4057fe4:	df000415 	stw	fp,16(sp)
 4057fe8:	df000404 	addi	fp,sp,16
 4057fec:	e13ffd15 	stw	r4,-12(fp)
 4057ff0:	e17ffe15 	stw	r5,-8(fp)
 4057ff4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4057ff8:	e0bffd17 	ldw	r2,-12(fp)
 4057ffc:	10800017 	ldw	r2,0(r2)
 4058000:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4058004:	e0bffc17 	ldw	r2,-16(fp)
 4058008:	10c00a04 	addi	r3,r2,40
 405800c:	e0bffd17 	ldw	r2,-12(fp)
 4058010:	10800217 	ldw	r2,8(r2)
 4058014:	100f883a 	mov	r7,r2
 4058018:	e1bfff17 	ldw	r6,-4(fp)
 405801c:	e17ffe17 	ldw	r5,-8(fp)
 4058020:	1809883a 	mov	r4,r3
 4058024:	40589e40 	call	40589e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4058028:	e037883a 	mov	sp,fp
 405802c:	dfc00117 	ldw	ra,4(sp)
 4058030:	df000017 	ldw	fp,0(sp)
 4058034:	dec00204 	addi	sp,sp,8
 4058038:	f800283a 	ret

0405803c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 405803c:	defffc04 	addi	sp,sp,-16
 4058040:	dfc00315 	stw	ra,12(sp)
 4058044:	df000215 	stw	fp,8(sp)
 4058048:	df000204 	addi	fp,sp,8
 405804c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4058050:	e0bfff17 	ldw	r2,-4(fp)
 4058054:	10800017 	ldw	r2,0(r2)
 4058058:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 405805c:	e0bffe17 	ldw	r2,-8(fp)
 4058060:	10c00a04 	addi	r3,r2,40
 4058064:	e0bfff17 	ldw	r2,-4(fp)
 4058068:	10800217 	ldw	r2,8(r2)
 405806c:	100b883a 	mov	r5,r2
 4058070:	1809883a 	mov	r4,r3
 4058074:	40585d00 	call	40585d0 <altera_avalon_jtag_uart_close>
}
 4058078:	e037883a 	mov	sp,fp
 405807c:	dfc00117 	ldw	ra,4(sp)
 4058080:	df000017 	ldw	fp,0(sp)
 4058084:	dec00204 	addi	sp,sp,8
 4058088:	f800283a 	ret

0405808c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 405808c:	defffa04 	addi	sp,sp,-24
 4058090:	dfc00515 	stw	ra,20(sp)
 4058094:	df000415 	stw	fp,16(sp)
 4058098:	df000404 	addi	fp,sp,16
 405809c:	e13ffd15 	stw	r4,-12(fp)
 40580a0:	e17ffe15 	stw	r5,-8(fp)
 40580a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40580a8:	e0bffd17 	ldw	r2,-12(fp)
 40580ac:	10800017 	ldw	r2,0(r2)
 40580b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40580b4:	e0bffc17 	ldw	r2,-16(fp)
 40580b8:	10800a04 	addi	r2,r2,40
 40580bc:	e1bfff17 	ldw	r6,-4(fp)
 40580c0:	e17ffe17 	ldw	r5,-8(fp)
 40580c4:	1009883a 	mov	r4,r2
 40580c8:	40586380 	call	4058638 <altera_avalon_jtag_uart_ioctl>
}
 40580cc:	e037883a 	mov	sp,fp
 40580d0:	dfc00117 	ldw	ra,4(sp)
 40580d4:	df000017 	ldw	fp,0(sp)
 40580d8:	dec00204 	addi	sp,sp,8
 40580dc:	f800283a 	ret

040580e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40580e0:	defff104 	addi	sp,sp,-60
 40580e4:	dfc00e15 	stw	ra,56(sp)
 40580e8:	df000d15 	stw	fp,52(sp)
 40580ec:	df000d04 	addi	fp,sp,52
 40580f0:	e13ff915 	stw	r4,-28(fp)
 40580f4:	e17ffa15 	stw	r5,-24(fp)
 40580f8:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 40580fc:	e0bff917 	ldw	r2,-28(fp)
 4058100:	10800c04 	addi	r2,r2,48
 4058104:	e0bff415 	stw	r2,-48(fp)
 4058108:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 405810c:	e0bff80b 	ldhu	r2,-32(fp)
 4058110:	e0fff884 	addi	r3,fp,-30
 4058114:	180b883a 	mov	r5,r3
 4058118:	1009883a 	mov	r4,r2
 405811c:	4052b980 	call	4052b98 <OSFlagCreate>
 4058120:	1007883a 	mov	r3,r2
 4058124:	e0bff417 	ldw	r2,-48(fp)
 4058128:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 405812c:	e0bff917 	ldw	r2,-28(fp)
 4058130:	10800a04 	addi	r2,r2,40
 4058134:	e0bff515 	stw	r2,-44(fp)
 4058138:	00800044 	movi	r2,1
 405813c:	e0bff78d 	sth	r2,-34(fp)
 4058140:	e0bff78b 	ldhu	r2,-34(fp)
 4058144:	1009883a 	mov	r4,r2
 4058148:	40558ac0 	call	40558ac <OSSemCreate>
 405814c:	1007883a 	mov	r3,r2
 4058150:	e0bff517 	ldw	r2,-44(fp)
 4058154:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 4058158:	e0bff917 	ldw	r2,-28(fp)
 405815c:	10800b04 	addi	r2,r2,44
 4058160:	e0bff615 	stw	r2,-40(fp)
 4058164:	00800044 	movi	r2,1
 4058168:	e0bff70d 	sth	r2,-36(fp)
 405816c:	e0bff70b 	ldhu	r2,-36(fp)
 4058170:	1009883a 	mov	r4,r2
 4058174:	40558ac0 	call	40558ac <OSSemCreate>
 4058178:	1007883a 	mov	r3,r2
 405817c:	e0bff617 	ldw	r2,-40(fp)
 4058180:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4058184:	e0bff917 	ldw	r2,-28(fp)
 4058188:	00c00044 	movi	r3,1
 405818c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4058190:	e0bff917 	ldw	r2,-28(fp)
 4058194:	10800017 	ldw	r2,0(r2)
 4058198:	10800104 	addi	r2,r2,4
 405819c:	1007883a 	mov	r3,r2
 40581a0:	e0bff917 	ldw	r2,-28(fp)
 40581a4:	10800817 	ldw	r2,32(r2)
 40581a8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40581ac:	e0bffa17 	ldw	r2,-24(fp)
 40581b0:	e0fffb17 	ldw	r3,-20(fp)
 40581b4:	d8000015 	stw	zero,0(sp)
 40581b8:	e1fff917 	ldw	r7,-28(fp)
 40581bc:	018101b4 	movhi	r6,1030
 40581c0:	31a08a04 	addi	r6,r6,-32216
 40581c4:	180b883a 	mov	r5,r3
 40581c8:	1009883a 	mov	r4,r2
 40581cc:	404fa240 	call	404fa24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40581d0:	e0bff917 	ldw	r2,-28(fp)
 40581d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40581d8:	e0bff917 	ldw	r2,-28(fp)
 40581dc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40581e0:	d0e06717 	ldw	r3,-32356(gp)
 40581e4:	e1fff917 	ldw	r7,-28(fp)
 40581e8:	018101b4 	movhi	r6,1030
 40581ec:	31a13304 	addi	r6,r6,-31540
 40581f0:	180b883a 	mov	r5,r3
 40581f4:	1009883a 	mov	r4,r2
 40581f8:	4058d9c0 	call	4058d9c <alt_alarm_start>
 40581fc:	1000040e 	bge	r2,zero,4058210 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4058200:	e0fff917 	ldw	r3,-28(fp)
 4058204:	00a00034 	movhi	r2,32768
 4058208:	10bfffc4 	addi	r2,r2,-1
 405820c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4058210:	0001883a 	nop
 4058214:	e037883a 	mov	sp,fp
 4058218:	dfc00117 	ldw	ra,4(sp)
 405821c:	df000017 	ldw	fp,0(sp)
 4058220:	dec00204 	addi	sp,sp,8
 4058224:	f800283a 	ret

04058228 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4058228:	defff204 	addi	sp,sp,-56
 405822c:	dfc00d15 	stw	ra,52(sp)
 4058230:	df000c15 	stw	fp,48(sp)
 4058234:	df000c04 	addi	fp,sp,48
 4058238:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 405823c:	e0bfff17 	ldw	r2,-4(fp)
 4058240:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 4058244:	e0bff617 	ldw	r2,-40(fp)
 4058248:	10800017 	ldw	r2,0(r2)
 405824c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4058250:	e0bff717 	ldw	r2,-36(fp)
 4058254:	10800104 	addi	r2,r2,4
 4058258:	10800037 	ldwio	r2,0(r2)
 405825c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4058260:	e0bff817 	ldw	r2,-32(fp)
 4058264:	1080c00c 	andi	r2,r2,768
 4058268:	10009126 	beq	r2,zero,40584b0 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 405826c:	e0bff817 	ldw	r2,-32(fp)
 4058270:	1080400c 	andi	r2,r2,256
 4058274:	10004726 	beq	r2,zero,4058394 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4058278:	00800074 	movhi	r2,1
 405827c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4058280:	e0bff617 	ldw	r2,-40(fp)
 4058284:	10800d17 	ldw	r2,52(r2)
 4058288:	10800044 	addi	r2,r2,1
 405828c:	1081ffcc 	andi	r2,r2,2047
 4058290:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 4058294:	e0bff617 	ldw	r2,-40(fp)
 4058298:	10c00e17 	ldw	r3,56(r2)
 405829c:	e0bff917 	ldw	r2,-28(fp)
 40582a0:	18802726 	beq	r3,r2,4058340 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40582a4:	e0bff717 	ldw	r2,-36(fp)
 40582a8:	10800037 	ldwio	r2,0(r2)
 40582ac:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40582b0:	e0bff417 	ldw	r2,-48(fp)
 40582b4:	10a0000c 	andi	r2,r2,32768
 40582b8:	10002326 	beq	r2,zero,4058348 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40582bc:	e0bff617 	ldw	r2,-40(fp)
 40582c0:	10800d17 	ldw	r2,52(r2)
 40582c4:	e0fff417 	ldw	r3,-48(fp)
 40582c8:	1809883a 	mov	r4,r3
 40582cc:	e0fff617 	ldw	r3,-40(fp)
 40582d0:	1885883a 	add	r2,r3,r2
 40582d4:	10801104 	addi	r2,r2,68
 40582d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40582dc:	e0bff617 	ldw	r2,-40(fp)
 40582e0:	10800d17 	ldw	r2,52(r2)
 40582e4:	10800044 	addi	r2,r2,1
 40582e8:	10c1ffcc 	andi	r3,r2,2047
 40582ec:	e0bff617 	ldw	r2,-40(fp)
 40582f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 40582f4:	e0bff617 	ldw	r2,-40(fp)
 40582f8:	10800c17 	ldw	r2,48(r2)
 40582fc:	e0bffb15 	stw	r2,-20(fp)
 4058300:	00800044 	movi	r2,1
 4058304:	e0bffc0d 	sth	r2,-16(fp)
 4058308:	00800044 	movi	r2,1
 405830c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4058310:	d0a05243 	ldbu	r2,-32439(gp)
 4058314:	10803fcc 	andi	r2,r2,255
 4058318:	103fd926 	beq	r2,zero,4058280 <__flash_rwdata_start+0xffffdb50>
  {
    OSFlagPost (group, flags, opt, &err);
 405831c:	e0bffc0b 	ldhu	r2,-16(fp)
 4058320:	e0fffc83 	ldbu	r3,-14(fp)
 4058324:	e13ffdc4 	addi	r4,fp,-9
 4058328:	200f883a 	mov	r7,r4
 405832c:	180d883a 	mov	r6,r3
 4058330:	100b883a 	mov	r5,r2
 4058334:	e13ffb17 	ldw	r4,-20(fp)
 4058338:	40537740 	call	4053774 <OSFlagPost>
      }
 405833c:	003fd006 	br	4058280 <__flash_rwdata_start+0xffffdb50>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4058340:	0001883a 	nop
 4058344:	00000106 	br	405834c <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4058348:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 405834c:	e0bff417 	ldw	r2,-48(fp)
 4058350:	10bfffec 	andhi	r2,r2,65535
 4058354:	10000f26 	beq	r2,zero,4058394 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4058358:	e0bff617 	ldw	r2,-40(fp)
 405835c:	10c00817 	ldw	r3,32(r2)
 4058360:	00bfff84 	movi	r2,-2
 4058364:	1886703a 	and	r3,r3,r2
 4058368:	e0bff617 	ldw	r2,-40(fp)
 405836c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4058370:	e0bff717 	ldw	r2,-36(fp)
 4058374:	10800104 	addi	r2,r2,4
 4058378:	1007883a 	mov	r3,r2
 405837c:	e0bff617 	ldw	r2,-40(fp)
 4058380:	10800817 	ldw	r2,32(r2)
 4058384:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4058388:	e0bff717 	ldw	r2,-36(fp)
 405838c:	10800104 	addi	r2,r2,4
 4058390:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4058394:	e0bff817 	ldw	r2,-32(fp)
 4058398:	1080800c 	andi	r2,r2,512
 405839c:	103fac26 	beq	r2,zero,4058250 <__flash_rwdata_start+0xffffdb20>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40583a0:	e0bff817 	ldw	r2,-32(fp)
 40583a4:	1004d43a 	srli	r2,r2,16
 40583a8:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40583ac:	00002606 	br	4058448 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40583b0:	e0bff717 	ldw	r2,-36(fp)
 40583b4:	e0fff617 	ldw	r3,-40(fp)
 40583b8:	18c01017 	ldw	r3,64(r3)
 40583bc:	e13ff617 	ldw	r4,-40(fp)
 40583c0:	20c7883a 	add	r3,r4,r3
 40583c4:	18c21104 	addi	r3,r3,2116
 40583c8:	18c00003 	ldbu	r3,0(r3)
 40583cc:	18c03fcc 	andi	r3,r3,255
 40583d0:	18c0201c 	xori	r3,r3,128
 40583d4:	18ffe004 	addi	r3,r3,-128
 40583d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40583dc:	e0bff617 	ldw	r2,-40(fp)
 40583e0:	10801017 	ldw	r2,64(r2)
 40583e4:	10800044 	addi	r2,r2,1
 40583e8:	10c1ffcc 	andi	r3,r2,2047
 40583ec:	e0bff617 	ldw	r2,-40(fp)
 40583f0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 40583f4:	e0bff617 	ldw	r2,-40(fp)
 40583f8:	10800c17 	ldw	r2,48(r2)
 40583fc:	e0bffa15 	stw	r2,-24(fp)
 4058400:	00800084 	movi	r2,2
 4058404:	e0bffd0d 	sth	r2,-12(fp)
 4058408:	00800044 	movi	r2,1
 405840c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4058410:	d0a05243 	ldbu	r2,-32439(gp)
 4058414:	10803fcc 	andi	r2,r2,255
 4058418:	10000826 	beq	r2,zero,405843c <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 405841c:	e0bffd0b 	ldhu	r2,-12(fp)
 4058420:	e0fffd83 	ldbu	r3,-10(fp)
 4058424:	e13ffe04 	addi	r4,fp,-8
 4058428:	200f883a 	mov	r7,r4
 405842c:	180d883a 	mov	r6,r3
 4058430:	100b883a 	mov	r5,r2
 4058434:	e13ffa17 	ldw	r4,-24(fp)
 4058438:	40537740 	call	4053774 <OSFlagPost>

        space--;
 405843c:	e0bff517 	ldw	r2,-44(fp)
 4058440:	10bfffc4 	addi	r2,r2,-1
 4058444:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4058448:	e0bff517 	ldw	r2,-44(fp)
 405844c:	10000526 	beq	r2,zero,4058464 <altera_avalon_jtag_uart_irq+0x23c>
 4058450:	e0bff617 	ldw	r2,-40(fp)
 4058454:	10c01017 	ldw	r3,64(r2)
 4058458:	e0bff617 	ldw	r2,-40(fp)
 405845c:	10800f17 	ldw	r2,60(r2)
 4058460:	18bfd31e 	bne	r3,r2,40583b0 <__flash_rwdata_start+0xffffdc80>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4058464:	e0bff517 	ldw	r2,-44(fp)
 4058468:	103f7926 	beq	r2,zero,4058250 <__flash_rwdata_start+0xffffdb20>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 405846c:	e0bff617 	ldw	r2,-40(fp)
 4058470:	10c00817 	ldw	r3,32(r2)
 4058474:	00bfff44 	movi	r2,-3
 4058478:	1886703a 	and	r3,r3,r2
 405847c:	e0bff617 	ldw	r2,-40(fp)
 4058480:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4058484:	e0bff617 	ldw	r2,-40(fp)
 4058488:	10800017 	ldw	r2,0(r2)
 405848c:	10800104 	addi	r2,r2,4
 4058490:	1007883a 	mov	r3,r2
 4058494:	e0bff617 	ldw	r2,-40(fp)
 4058498:	10800817 	ldw	r2,32(r2)
 405849c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40584a0:	e0bff717 	ldw	r2,-36(fp)
 40584a4:	10800104 	addi	r2,r2,4
 40584a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 40584ac:	003f6806 	br	4058250 <__flash_rwdata_start+0xffffdb20>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 40584b0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 40584b4:	0001883a 	nop
 40584b8:	e037883a 	mov	sp,fp
 40584bc:	dfc00117 	ldw	ra,4(sp)
 40584c0:	df000017 	ldw	fp,0(sp)
 40584c4:	dec00204 	addi	sp,sp,8
 40584c8:	f800283a 	ret

040584cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40584cc:	defff904 	addi	sp,sp,-28
 40584d0:	dfc00615 	stw	ra,24(sp)
 40584d4:	df000515 	stw	fp,20(sp)
 40584d8:	df000504 	addi	fp,sp,20
 40584dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40584e0:	e0bfff17 	ldw	r2,-4(fp)
 40584e4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40584e8:	e0bffb17 	ldw	r2,-20(fp)
 40584ec:	10800017 	ldw	r2,0(r2)
 40584f0:	10800104 	addi	r2,r2,4
 40584f4:	10800037 	ldwio	r2,0(r2)
 40584f8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40584fc:	e0bffc17 	ldw	r2,-16(fp)
 4058500:	1081000c 	andi	r2,r2,1024
 4058504:	10000b26 	beq	r2,zero,4058534 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4058508:	e0bffb17 	ldw	r2,-20(fp)
 405850c:	10800017 	ldw	r2,0(r2)
 4058510:	10800104 	addi	r2,r2,4
 4058514:	1007883a 	mov	r3,r2
 4058518:	e0bffb17 	ldw	r2,-20(fp)
 405851c:	10800817 	ldw	r2,32(r2)
 4058520:	10810014 	ori	r2,r2,1024
 4058524:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4058528:	e0bffb17 	ldw	r2,-20(fp)
 405852c:	10000915 	stw	zero,36(r2)
 4058530:	00002106 	br	40585b8 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4058534:	e0bffb17 	ldw	r2,-20(fp)
 4058538:	10c00917 	ldw	r3,36(r2)
 405853c:	00a00034 	movhi	r2,32768
 4058540:	10bfff04 	addi	r2,r2,-4
 4058544:	10c01c36 	bltu	r2,r3,40585b8 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 4058548:	e0bffb17 	ldw	r2,-20(fp)
 405854c:	10800917 	ldw	r2,36(r2)
 4058550:	10c00044 	addi	r3,r2,1
 4058554:	e0bffb17 	ldw	r2,-20(fp)
 4058558:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 405855c:	e0bffb17 	ldw	r2,-20(fp)
 4058560:	10c00917 	ldw	r3,36(r2)
 4058564:	e0bffb17 	ldw	r2,-20(fp)
 4058568:	10800117 	ldw	r2,4(r2)
 405856c:	18801236 	bltu	r3,r2,40585b8 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 4058570:	e0bffb17 	ldw	r2,-20(fp)
 4058574:	10800c17 	ldw	r2,48(r2)
 4058578:	e0bffd15 	stw	r2,-12(fp)
 405857c:	00800104 	movi	r2,4
 4058580:	e0bffe0d 	sth	r2,-8(fp)
 4058584:	00800044 	movi	r2,1
 4058588:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 405858c:	d0a05243 	ldbu	r2,-32439(gp)
 4058590:	10803fcc 	andi	r2,r2,255
 4058594:	10000826 	beq	r2,zero,40585b8 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 4058598:	e0bffe0b 	ldhu	r2,-8(fp)
 405859c:	e0fffe83 	ldbu	r3,-6(fp)
 40585a0:	e13ffec4 	addi	r4,fp,-5
 40585a4:	200f883a 	mov	r7,r4
 40585a8:	180d883a 	mov	r6,r3
 40585ac:	100b883a 	mov	r5,r2
 40585b0:	e13ffd17 	ldw	r4,-12(fp)
 40585b4:	40537740 	call	4053774 <OSFlagPost>
 40585b8:	d0a06717 	ldw	r2,-32356(gp)
    }
  }

  return alt_ticks_per_second();
}
 40585bc:	e037883a 	mov	sp,fp
 40585c0:	dfc00117 	ldw	ra,4(sp)
 40585c4:	df000017 	ldw	fp,0(sp)
 40585c8:	dec00204 	addi	sp,sp,8
 40585cc:	f800283a 	ret

040585d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40585d0:	defffd04 	addi	sp,sp,-12
 40585d4:	df000215 	stw	fp,8(sp)
 40585d8:	df000204 	addi	fp,sp,8
 40585dc:	e13ffe15 	stw	r4,-8(fp)
 40585e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40585e4:	00000506 	br	40585fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40585e8:	e0bfff17 	ldw	r2,-4(fp)
 40585ec:	1090000c 	andi	r2,r2,16384
 40585f0:	10000226 	beq	r2,zero,40585fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40585f4:	00bffd44 	movi	r2,-11
 40585f8:	00000b06 	br	4058628 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40585fc:	e0bffe17 	ldw	r2,-8(fp)
 4058600:	10c01017 	ldw	r3,64(r2)
 4058604:	e0bffe17 	ldw	r2,-8(fp)
 4058608:	10800f17 	ldw	r2,60(r2)
 405860c:	18800526 	beq	r3,r2,4058624 <altera_avalon_jtag_uart_close+0x54>
 4058610:	e0bffe17 	ldw	r2,-8(fp)
 4058614:	10c00917 	ldw	r3,36(r2)
 4058618:	e0bffe17 	ldw	r2,-8(fp)
 405861c:	10800117 	ldw	r2,4(r2)
 4058620:	18bff136 	bltu	r3,r2,40585e8 <__flash_rwdata_start+0xffffdeb8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4058624:	0005883a 	mov	r2,zero
}
 4058628:	e037883a 	mov	sp,fp
 405862c:	df000017 	ldw	fp,0(sp)
 4058630:	dec00104 	addi	sp,sp,4
 4058634:	f800283a 	ret

04058638 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4058638:	defffa04 	addi	sp,sp,-24
 405863c:	df000515 	stw	fp,20(sp)
 4058640:	df000504 	addi	fp,sp,20
 4058644:	e13ffd15 	stw	r4,-12(fp)
 4058648:	e17ffe15 	stw	r5,-8(fp)
 405864c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4058650:	00bff9c4 	movi	r2,-25
 4058654:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4058658:	e0bffe17 	ldw	r2,-8(fp)
 405865c:	10da8060 	cmpeqi	r3,r2,27137
 4058660:	1800031e 	bne	r3,zero,4058670 <altera_avalon_jtag_uart_ioctl+0x38>
 4058664:	109a80a0 	cmpeqi	r2,r2,27138
 4058668:	1000181e 	bne	r2,zero,40586cc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 405866c:	00002906 	br	4058714 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4058670:	e0bffd17 	ldw	r2,-12(fp)
 4058674:	10c00117 	ldw	r3,4(r2)
 4058678:	00a00034 	movhi	r2,32768
 405867c:	10bfffc4 	addi	r2,r2,-1
 4058680:	18802126 	beq	r3,r2,4058708 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4058684:	e0bfff17 	ldw	r2,-4(fp)
 4058688:	10800017 	ldw	r2,0(r2)
 405868c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4058690:	e0bffc17 	ldw	r2,-16(fp)
 4058694:	10800090 	cmplti	r2,r2,2
 4058698:	1000061e 	bne	r2,zero,40586b4 <altera_avalon_jtag_uart_ioctl+0x7c>
 405869c:	e0fffc17 	ldw	r3,-16(fp)
 40586a0:	00a00034 	movhi	r2,32768
 40586a4:	10bfffc4 	addi	r2,r2,-1
 40586a8:	18800226 	beq	r3,r2,40586b4 <altera_avalon_jtag_uart_ioctl+0x7c>
 40586ac:	e0bffc17 	ldw	r2,-16(fp)
 40586b0:	00000206 	br	40586bc <altera_avalon_jtag_uart_ioctl+0x84>
 40586b4:	00a00034 	movhi	r2,32768
 40586b8:	10bfff84 	addi	r2,r2,-2
 40586bc:	e0fffd17 	ldw	r3,-12(fp)
 40586c0:	18800115 	stw	r2,4(r3)
      rc = 0;
 40586c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40586c8:	00000f06 	br	4058708 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40586cc:	e0bffd17 	ldw	r2,-12(fp)
 40586d0:	10c00117 	ldw	r3,4(r2)
 40586d4:	00a00034 	movhi	r2,32768
 40586d8:	10bfffc4 	addi	r2,r2,-1
 40586dc:	18800c26 	beq	r3,r2,4058710 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40586e0:	e0bffd17 	ldw	r2,-12(fp)
 40586e4:	10c00917 	ldw	r3,36(r2)
 40586e8:	e0bffd17 	ldw	r2,-12(fp)
 40586ec:	10800117 	ldw	r2,4(r2)
 40586f0:	1885803a 	cmpltu	r2,r3,r2
 40586f4:	10c03fcc 	andi	r3,r2,255
 40586f8:	e0bfff17 	ldw	r2,-4(fp)
 40586fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4058700:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4058704:	00000206 	br	4058710 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4058708:	0001883a 	nop
 405870c:	00000106 	br	4058714 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4058710:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4058714:	e0bffb17 	ldw	r2,-20(fp)
}
 4058718:	e037883a 	mov	sp,fp
 405871c:	df000017 	ldw	fp,0(sp)
 4058720:	dec00104 	addi	sp,sp,4
 4058724:	f800283a 	ret

04058728 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4058728:	deffed04 	addi	sp,sp,-76
 405872c:	dfc01215 	stw	ra,72(sp)
 4058730:	df001115 	stw	fp,68(sp)
 4058734:	df001104 	addi	fp,sp,68
 4058738:	e13ffc15 	stw	r4,-16(fp)
 405873c:	e17ffd15 	stw	r5,-12(fp)
 4058740:	e1bffe15 	stw	r6,-8(fp)
 4058744:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4058748:	e0bffd17 	ldw	r2,-12(fp)
 405874c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 4058750:	e0bffc17 	ldw	r2,-16(fp)
 4058754:	10800a17 	ldw	r2,40(r2)
 4058758:	e0bff815 	stw	r2,-32(fp)
 405875c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 4058760:	e0bff90b 	ldhu	r2,-28(fp)
 4058764:	e0fffb04 	addi	r3,fp,-20
 4058768:	180d883a 	mov	r6,r3
 405876c:	100b883a 	mov	r5,r2
 4058770:	e13ff817 	ldw	r4,-32(fp)
 4058774:	4055bc40 	call	4055bc4 <OSSemPend>

  while (space > 0)
 4058778:	00006106 	br	4058900 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 405877c:	e0bffc17 	ldw	r2,-16(fp)
 4058780:	10800d17 	ldw	r2,52(r2)
 4058784:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 4058788:	e0bffc17 	ldw	r2,-16(fp)
 405878c:	10800e17 	ldw	r2,56(r2)
 4058790:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 4058794:	e0fff317 	ldw	r3,-52(fp)
 4058798:	e0bff417 	ldw	r2,-48(fp)
 405879c:	18800536 	bltu	r3,r2,40587b4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 40587a0:	e0fff317 	ldw	r3,-52(fp)
 40587a4:	e0bff417 	ldw	r2,-48(fp)
 40587a8:	1885c83a 	sub	r2,r3,r2
 40587ac:	e0bff115 	stw	r2,-60(fp)
 40587b0:	00000406 	br	40587c4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40587b4:	00c20004 	movi	r3,2048
 40587b8:	e0bff417 	ldw	r2,-48(fp)
 40587bc:	1885c83a 	sub	r2,r3,r2
 40587c0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 40587c4:	e0bff117 	ldw	r2,-60(fp)
 40587c8:	10001e26 	beq	r2,zero,4058844 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 40587cc:	e0fffe17 	ldw	r3,-8(fp)
 40587d0:	e0bff117 	ldw	r2,-60(fp)
 40587d4:	1880022e 	bgeu	r3,r2,40587e0 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 40587d8:	e0bffe17 	ldw	r2,-8(fp)
 40587dc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40587e0:	e0bffc17 	ldw	r2,-16(fp)
 40587e4:	10c01104 	addi	r3,r2,68
 40587e8:	e0bff417 	ldw	r2,-48(fp)
 40587ec:	1885883a 	add	r2,r3,r2
 40587f0:	e1bff117 	ldw	r6,-60(fp)
 40587f4:	100b883a 	mov	r5,r2
 40587f8:	e13ff017 	ldw	r4,-64(fp)
 40587fc:	40438a00 	call	40438a0 <memcpy>
      ptr   += n;
 4058800:	e0fff017 	ldw	r3,-64(fp)
 4058804:	e0bff117 	ldw	r2,-60(fp)
 4058808:	1885883a 	add	r2,r3,r2
 405880c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 4058810:	e0fffe17 	ldw	r3,-8(fp)
 4058814:	e0bff117 	ldw	r2,-60(fp)
 4058818:	1885c83a 	sub	r2,r3,r2
 405881c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4058820:	e0fff417 	ldw	r3,-48(fp)
 4058824:	e0bff117 	ldw	r2,-60(fp)
 4058828:	1885883a 	add	r2,r3,r2
 405882c:	10c1ffcc 	andi	r3,r2,2047
 4058830:	e0bffc17 	ldw	r2,-16(fp)
 4058834:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 4058838:	e0bffe17 	ldw	r2,-8(fp)
 405883c:	00bfcf16 	blt	zero,r2,405877c <__flash_rwdata_start+0xffffe04c>
 4058840:	00000106 	br	4058848 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4058844:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4058848:	e0fff017 	ldw	r3,-64(fp)
 405884c:	e0bffd17 	ldw	r2,-12(fp)
 4058850:	18802e1e 	bne	r3,r2,405890c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4058854:	e0bfff17 	ldw	r2,-4(fp)
 4058858:	1090000c 	andi	r2,r2,16384
 405885c:	10002d1e 	bne	r2,zero,4058914 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 4058860:	d0a05243 	ldbu	r2,-32439(gp)
 4058864:	10803fcc 	andi	r2,r2,255
 4058868:	10800058 	cmpnei	r2,r2,1
 405886c:	1000161e 	bne	r2,zero,40588c8 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 4058870:	e0bffc17 	ldw	r2,-16(fp)
 4058874:	10800c17 	ldw	r2,48(r2)
 4058878:	e0bff215 	stw	r2,-56(fp)
 405887c:	00800144 	movi	r2,5
 4058880:	e0bff98d 	sth	r2,-26(fp)
 4058884:	00bfe0c4 	movi	r2,-125
 4058888:	e0bffa05 	stb	r2,-24(fp)
 405888c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 4058890:	d0a05243 	ldbu	r2,-32439(gp)
 4058894:	10803fcc 	andi	r2,r2,255
 4058898:	10001526 	beq	r2,zero,40588f0 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 405889c:	e0fff98b 	ldhu	r3,-26(fp)
 40588a0:	e13ffa03 	ldbu	r4,-24(fp)
 40588a4:	e17ffa8b 	ldhu	r5,-22(fp)
 40588a8:	e0bffb44 	addi	r2,fp,-19
 40588ac:	d8800015 	stw	r2,0(sp)
 40588b0:	280f883a 	mov	r7,r5
 40588b4:	200d883a 	mov	r6,r4
 40588b8:	180b883a 	mov	r5,r3
 40588bc:	e13ff217 	ldw	r4,-56(fp)
 40588c0:	405315c0 	call	405315c <OSFlagPend>
 40588c4:	00000a06 	br	40588f0 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40588c8:	0001883a 	nop
 40588cc:	e0bffc17 	ldw	r2,-16(fp)
 40588d0:	10c00d17 	ldw	r3,52(r2)
 40588d4:	e0bff317 	ldw	r2,-52(fp)
 40588d8:	1880051e 	bne	r3,r2,40588f0 <altera_avalon_jtag_uart_read+0x1c8>
 40588dc:	e0bffc17 	ldw	r2,-16(fp)
 40588e0:	10c00917 	ldw	r3,36(r2)
 40588e4:	e0bffc17 	ldw	r2,-16(fp)
 40588e8:	10800117 	ldw	r2,4(r2)
 40588ec:	18bff736 	bltu	r3,r2,40588cc <__flash_rwdata_start+0xffffe19c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40588f0:	e0bffc17 	ldw	r2,-16(fp)
 40588f4:	10c00d17 	ldw	r3,52(r2)
 40588f8:	e0bff317 	ldw	r2,-52(fp)
 40588fc:	18800726 	beq	r3,r2,405891c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4058900:	e0bffe17 	ldw	r2,-8(fp)
 4058904:	00bf9d16 	blt	zero,r2,405877c <__flash_rwdata_start+0xffffe04c>
 4058908:	00000506 	br	4058920 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 405890c:	0001883a 	nop
 4058910:	00000306 	br	4058920 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4058914:	0001883a 	nop
 4058918:	00000106 	br	4058920 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 405891c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 4058920:	e0bffc17 	ldw	r2,-16(fp)
 4058924:	10800a17 	ldw	r2,40(r2)
 4058928:	1009883a 	mov	r4,r2
 405892c:	4055f3c0 	call	4055f3c <OSSemPost>

  if (ptr != buffer)
 4058930:	e0fff017 	ldw	r3,-64(fp)
 4058934:	e0bffd17 	ldw	r2,-12(fp)
 4058938:	18801826 	beq	r3,r2,405899c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 405893c:	0005303a 	rdctl	r2,status
 4058940:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4058944:	e0fff717 	ldw	r3,-36(fp)
 4058948:	00bfff84 	movi	r2,-2
 405894c:	1884703a 	and	r2,r3,r2
 4058950:	1001703a 	wrctl	status,r2
  
  return context;
 4058954:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4058958:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 405895c:	e0bffc17 	ldw	r2,-16(fp)
 4058960:	10800817 	ldw	r2,32(r2)
 4058964:	10c00054 	ori	r3,r2,1
 4058968:	e0bffc17 	ldw	r2,-16(fp)
 405896c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4058970:	e0bffc17 	ldw	r2,-16(fp)
 4058974:	10800017 	ldw	r2,0(r2)
 4058978:	10800104 	addi	r2,r2,4
 405897c:	1007883a 	mov	r3,r2
 4058980:	e0bffc17 	ldw	r2,-16(fp)
 4058984:	10800817 	ldw	r2,32(r2)
 4058988:	18800035 	stwio	r2,0(r3)
 405898c:	e0bff617 	ldw	r2,-40(fp)
 4058990:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4058994:	e0bff517 	ldw	r2,-44(fp)
 4058998:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 405899c:	e0fff017 	ldw	r3,-64(fp)
 40589a0:	e0bffd17 	ldw	r2,-12(fp)
 40589a4:	18800426 	beq	r3,r2,40589b8 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 40589a8:	e0fff017 	ldw	r3,-64(fp)
 40589ac:	e0bffd17 	ldw	r2,-12(fp)
 40589b0:	1885c83a 	sub	r2,r3,r2
 40589b4:	00000606 	br	40589d0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 40589b8:	e0bfff17 	ldw	r2,-4(fp)
 40589bc:	1090000c 	andi	r2,r2,16384
 40589c0:	10000226 	beq	r2,zero,40589cc <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 40589c4:	00bffd44 	movi	r2,-11
 40589c8:	00000106 	br	40589d0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 40589cc:	00bffec4 	movi	r2,-5
}
 40589d0:	e037883a 	mov	sp,fp
 40589d4:	dfc00117 	ldw	ra,4(sp)
 40589d8:	df000017 	ldw	fp,0(sp)
 40589dc:	dec00204 	addi	sp,sp,8
 40589e0:	f800283a 	ret

040589e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40589e4:	deffed04 	addi	sp,sp,-76
 40589e8:	dfc01215 	stw	ra,72(sp)
 40589ec:	df001115 	stw	fp,68(sp)
 40589f0:	df001104 	addi	fp,sp,68
 40589f4:	e13ffc15 	stw	r4,-16(fp)
 40589f8:	e17ffd15 	stw	r5,-12(fp)
 40589fc:	e1bffe15 	stw	r6,-8(fp)
 4058a00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4058a04:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4058a08:	e0bffd17 	ldw	r2,-12(fp)
 4058a0c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 4058a10:	e0bffc17 	ldw	r2,-16(fp)
 4058a14:	10800b17 	ldw	r2,44(r2)
 4058a18:	e0bff815 	stw	r2,-32(fp)
 4058a1c:	e03ff90d 	sth	zero,-28(fp)
 4058a20:	e0bff90b 	ldhu	r2,-28(fp)
 4058a24:	e0fffb44 	addi	r3,fp,-19
 4058a28:	180d883a 	mov	r6,r3
 4058a2c:	100b883a 	mov	r5,r2
 4058a30:	e13ff817 	ldw	r4,-32(fp)
 4058a34:	4055bc40 	call	4055bc4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4058a38:	00003706 	br	4058b18 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4058a3c:	e0bffc17 	ldw	r2,-16(fp)
 4058a40:	10800f17 	ldw	r2,60(r2)
 4058a44:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 4058a48:	e0bffc17 	ldw	r2,-16(fp)
 4058a4c:	10801017 	ldw	r2,64(r2)
 4058a50:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 4058a54:	e0fff417 	ldw	r3,-48(fp)
 4058a58:	e0bff017 	ldw	r2,-64(fp)
 4058a5c:	1880062e 	bgeu	r3,r2,4058a78 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 4058a60:	e0fff017 	ldw	r3,-64(fp)
 4058a64:	e0bff417 	ldw	r2,-48(fp)
 4058a68:	1885c83a 	sub	r2,r3,r2
 4058a6c:	10bfffc4 	addi	r2,r2,-1
 4058a70:	e0bff115 	stw	r2,-60(fp)
 4058a74:	00000b06 	br	4058aa4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 4058a78:	e0bff017 	ldw	r2,-64(fp)
 4058a7c:	10000526 	beq	r2,zero,4058a94 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4058a80:	00c20004 	movi	r3,2048
 4058a84:	e0bff417 	ldw	r2,-48(fp)
 4058a88:	1885c83a 	sub	r2,r3,r2
 4058a8c:	e0bff115 	stw	r2,-60(fp)
 4058a90:	00000406 	br	4058aa4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4058a94:	00c1ffc4 	movi	r3,2047
 4058a98:	e0bff417 	ldw	r2,-48(fp)
 4058a9c:	1885c83a 	sub	r2,r3,r2
 4058aa0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 4058aa4:	e0bff117 	ldw	r2,-60(fp)
 4058aa8:	10001e26 	beq	r2,zero,4058b24 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 4058aac:	e0fffe17 	ldw	r3,-8(fp)
 4058ab0:	e0bff117 	ldw	r2,-60(fp)
 4058ab4:	1880022e 	bgeu	r3,r2,4058ac0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 4058ab8:	e0bffe17 	ldw	r2,-8(fp)
 4058abc:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4058ac0:	e0bffc17 	ldw	r2,-16(fp)
 4058ac4:	10c21104 	addi	r3,r2,2116
 4058ac8:	e0bff417 	ldw	r2,-48(fp)
 4058acc:	1885883a 	add	r2,r3,r2
 4058ad0:	e1bff117 	ldw	r6,-60(fp)
 4058ad4:	e17ffd17 	ldw	r5,-12(fp)
 4058ad8:	1009883a 	mov	r4,r2
 4058adc:	40438a00 	call	40438a0 <memcpy>
      ptr   += n;
 4058ae0:	e0fffd17 	ldw	r3,-12(fp)
 4058ae4:	e0bff117 	ldw	r2,-60(fp)
 4058ae8:	1885883a 	add	r2,r3,r2
 4058aec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4058af0:	e0fffe17 	ldw	r3,-8(fp)
 4058af4:	e0bff117 	ldw	r2,-60(fp)
 4058af8:	1885c83a 	sub	r2,r3,r2
 4058afc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4058b00:	e0fff417 	ldw	r3,-48(fp)
 4058b04:	e0bff117 	ldw	r2,-60(fp)
 4058b08:	1885883a 	add	r2,r3,r2
 4058b0c:	10c1ffcc 	andi	r3,r2,2047
 4058b10:	e0bffc17 	ldw	r2,-16(fp)
 4058b14:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4058b18:	e0bffe17 	ldw	r2,-8(fp)
 4058b1c:	00bfc716 	blt	zero,r2,4058a3c <__flash_rwdata_start+0xffffe30c>
 4058b20:	00000106 	br	4058b28 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4058b24:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4058b28:	0005303a 	rdctl	r2,status
 4058b2c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4058b30:	e0fff717 	ldw	r3,-36(fp)
 4058b34:	00bfff84 	movi	r2,-2
 4058b38:	1884703a 	and	r2,r3,r2
 4058b3c:	1001703a 	wrctl	status,r2
  
  return context;
 4058b40:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4058b44:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4058b48:	e0bffc17 	ldw	r2,-16(fp)
 4058b4c:	10800817 	ldw	r2,32(r2)
 4058b50:	10c00094 	ori	r3,r2,2
 4058b54:	e0bffc17 	ldw	r2,-16(fp)
 4058b58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4058b5c:	e0bffc17 	ldw	r2,-16(fp)
 4058b60:	10800017 	ldw	r2,0(r2)
 4058b64:	10800104 	addi	r2,r2,4
 4058b68:	1007883a 	mov	r3,r2
 4058b6c:	e0bffc17 	ldw	r2,-16(fp)
 4058b70:	10800817 	ldw	r2,32(r2)
 4058b74:	18800035 	stwio	r2,0(r3)
 4058b78:	e0bff617 	ldw	r2,-40(fp)
 4058b7c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4058b80:	e0bff317 	ldw	r2,-52(fp)
 4058b84:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4058b88:	e0bffe17 	ldw	r2,-8(fp)
 4058b8c:	00802a0e 	bge	zero,r2,4058c38 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 4058b90:	e0bfff17 	ldw	r2,-4(fp)
 4058b94:	1090000c 	andi	r2,r2,16384
 4058b98:	10002a1e 	bne	r2,zero,4058c44 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 4058b9c:	d0a05243 	ldbu	r2,-32439(gp)
 4058ba0:	10803fcc 	andi	r2,r2,255
 4058ba4:	10800058 	cmpnei	r2,r2,1
 4058ba8:	1000161e 	bne	r2,zero,4058c04 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 4058bac:	e0bffc17 	ldw	r2,-16(fp)
 4058bb0:	10800c17 	ldw	r2,48(r2)
 4058bb4:	e0bff515 	stw	r2,-44(fp)
 4058bb8:	00800184 	movi	r2,6
 4058bbc:	e0bff98d 	sth	r2,-26(fp)
 4058bc0:	00bfe0c4 	movi	r2,-125
 4058bc4:	e0bffa05 	stb	r2,-24(fp)
 4058bc8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 4058bcc:	d0a05243 	ldbu	r2,-32439(gp)
 4058bd0:	10803fcc 	andi	r2,r2,255
 4058bd4:	10001526 	beq	r2,zero,4058c2c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 4058bd8:	e0fff98b 	ldhu	r3,-26(fp)
 4058bdc:	e13ffa03 	ldbu	r4,-24(fp)
 4058be0:	e17ffa8b 	ldhu	r5,-22(fp)
 4058be4:	e0bffb04 	addi	r2,fp,-20
 4058be8:	d8800015 	stw	r2,0(sp)
 4058bec:	280f883a 	mov	r7,r5
 4058bf0:	200d883a 	mov	r6,r4
 4058bf4:	180b883a 	mov	r5,r3
 4058bf8:	e13ff517 	ldw	r4,-44(fp)
 4058bfc:	405315c0 	call	405315c <OSFlagPend>
 4058c00:	00000a06 	br	4058c2c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4058c04:	0001883a 	nop
 4058c08:	e0bffc17 	ldw	r2,-16(fp)
 4058c0c:	10c01017 	ldw	r3,64(r2)
 4058c10:	e0bff017 	ldw	r2,-64(fp)
 4058c14:	1880051e 	bne	r3,r2,4058c2c <altera_avalon_jtag_uart_write+0x248>
 4058c18:	e0bffc17 	ldw	r2,-16(fp)
 4058c1c:	10c00917 	ldw	r3,36(r2)
 4058c20:	e0bffc17 	ldw	r2,-16(fp)
 4058c24:	10800117 	ldw	r2,4(r2)
 4058c28:	18bff736 	bltu	r3,r2,4058c08 <__flash_rwdata_start+0xffffe4d8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4058c2c:	e0bffc17 	ldw	r2,-16(fp)
 4058c30:	10800917 	ldw	r2,36(r2)
 4058c34:	1000051e 	bne	r2,zero,4058c4c <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 4058c38:	e0bffe17 	ldw	r2,-8(fp)
 4058c3c:	00bfb616 	blt	zero,r2,4058b18 <__flash_rwdata_start+0xffffe3e8>
 4058c40:	00000306 	br	4058c50 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4058c44:	0001883a 	nop
 4058c48:	00000106 	br	4058c50 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4058c4c:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 4058c50:	e0bffc17 	ldw	r2,-16(fp)
 4058c54:	10800b17 	ldw	r2,44(r2)
 4058c58:	1009883a 	mov	r4,r2
 4058c5c:	4055f3c0 	call	4055f3c <OSSemPost>

  if (ptr != start)
 4058c60:	e0fffd17 	ldw	r3,-12(fp)
 4058c64:	e0bff217 	ldw	r2,-56(fp)
 4058c68:	18800426 	beq	r3,r2,4058c7c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 4058c6c:	e0fffd17 	ldw	r3,-12(fp)
 4058c70:	e0bff217 	ldw	r2,-56(fp)
 4058c74:	1885c83a 	sub	r2,r3,r2
 4058c78:	00000606 	br	4058c94 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 4058c7c:	e0bfff17 	ldw	r2,-4(fp)
 4058c80:	1090000c 	andi	r2,r2,16384
 4058c84:	10000226 	beq	r2,zero,4058c90 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 4058c88:	00bffd44 	movi	r2,-11
 4058c8c:	00000106 	br	4058c94 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4058c90:	00bffec4 	movi	r2,-5
}
 4058c94:	e037883a 	mov	sp,fp
 4058c98:	dfc00117 	ldw	ra,4(sp)
 4058c9c:	df000017 	ldw	fp,0(sp)
 4058ca0:	dec00204 	addi	sp,sp,8
 4058ca4:	f800283a 	ret

04058ca8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4058ca8:	defffa04 	addi	sp,sp,-24
 4058cac:	dfc00515 	stw	ra,20(sp)
 4058cb0:	df000415 	stw	fp,16(sp)
 4058cb4:	df000404 	addi	fp,sp,16
 4058cb8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4058cbc:	0007883a 	mov	r3,zero
 4058cc0:	e0bfff17 	ldw	r2,-4(fp)
 4058cc4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4058cc8:	e0bfff17 	ldw	r2,-4(fp)
 4058ccc:	10800104 	addi	r2,r2,4
 4058cd0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4058cd4:	0005303a 	rdctl	r2,status
 4058cd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4058cdc:	e0fffd17 	ldw	r3,-12(fp)
 4058ce0:	00bfff84 	movi	r2,-2
 4058ce4:	1884703a 	and	r2,r3,r2
 4058ce8:	1001703a 	wrctl	status,r2
  
  return context;
 4058cec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4058cf0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4058cf4:	40595b00 	call	40595b0 <alt_tick>
 4058cf8:	e0bffc17 	ldw	r2,-16(fp)
 4058cfc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4058d00:	e0bffe17 	ldw	r2,-8(fp)
 4058d04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4058d08:	0001883a 	nop
 4058d0c:	e037883a 	mov	sp,fp
 4058d10:	dfc00117 	ldw	ra,4(sp)
 4058d14:	df000017 	ldw	fp,0(sp)
 4058d18:	dec00204 	addi	sp,sp,8
 4058d1c:	f800283a 	ret

04058d20 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4058d20:	defff804 	addi	sp,sp,-32
 4058d24:	dfc00715 	stw	ra,28(sp)
 4058d28:	df000615 	stw	fp,24(sp)
 4058d2c:	df000604 	addi	fp,sp,24
 4058d30:	e13ffc15 	stw	r4,-16(fp)
 4058d34:	e17ffd15 	stw	r5,-12(fp)
 4058d38:	e1bffe15 	stw	r6,-8(fp)
 4058d3c:	e1ffff15 	stw	r7,-4(fp)
 4058d40:	e0bfff17 	ldw	r2,-4(fp)
 4058d44:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4058d48:	d0a06717 	ldw	r2,-32356(gp)
 4058d4c:	1000021e 	bne	r2,zero,4058d58 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4058d50:	e0bffb17 	ldw	r2,-20(fp)
 4058d54:	d0a06715 	stw	r2,-32356(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4058d58:	e0bffc17 	ldw	r2,-16(fp)
 4058d5c:	10800104 	addi	r2,r2,4
 4058d60:	00c001c4 	movi	r3,7
 4058d64:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4058d68:	d8000015 	stw	zero,0(sp)
 4058d6c:	e1fffc17 	ldw	r7,-16(fp)
 4058d70:	018101b4 	movhi	r6,1030
 4058d74:	31a32a04 	addi	r6,r6,-29528
 4058d78:	e17ffe17 	ldw	r5,-8(fp)
 4058d7c:	e13ffd17 	ldw	r4,-12(fp)
 4058d80:	404fa240 	call	404fa24 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4058d84:	0001883a 	nop
 4058d88:	e037883a 	mov	sp,fp
 4058d8c:	dfc00117 	ldw	ra,4(sp)
 4058d90:	df000017 	ldw	fp,0(sp)
 4058d94:	dec00204 	addi	sp,sp,8
 4058d98:	f800283a 	ret

04058d9c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4058d9c:	defff504 	addi	sp,sp,-44
 4058da0:	df000a15 	stw	fp,40(sp)
 4058da4:	df000a04 	addi	fp,sp,40
 4058da8:	e13ffc15 	stw	r4,-16(fp)
 4058dac:	e17ffd15 	stw	r5,-12(fp)
 4058db0:	e1bffe15 	stw	r6,-8(fp)
 4058db4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4058db8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4058dbc:	d0a06717 	ldw	r2,-32356(gp)
  
  if (alt_ticks_per_second ())
 4058dc0:	10003c26 	beq	r2,zero,4058eb4 <alt_alarm_start+0x118>
  {
    if (alarm)
 4058dc4:	e0bffc17 	ldw	r2,-16(fp)
 4058dc8:	10003826 	beq	r2,zero,4058eac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4058dcc:	e0bffc17 	ldw	r2,-16(fp)
 4058dd0:	e0fffe17 	ldw	r3,-8(fp)
 4058dd4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4058dd8:	e0bffc17 	ldw	r2,-16(fp)
 4058ddc:	e0ffff17 	ldw	r3,-4(fp)
 4058de0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4058de4:	0005303a 	rdctl	r2,status
 4058de8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4058dec:	e0fff917 	ldw	r3,-28(fp)
 4058df0:	00bfff84 	movi	r2,-2
 4058df4:	1884703a 	and	r2,r3,r2
 4058df8:	1001703a 	wrctl	status,r2
  
  return context;
 4058dfc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4058e00:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4058e04:	d0a06817 	ldw	r2,-32352(gp)
      
      current_nticks = alt_nticks();
 4058e08:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4058e0c:	e0fffd17 	ldw	r3,-12(fp)
 4058e10:	e0bff617 	ldw	r2,-40(fp)
 4058e14:	1885883a 	add	r2,r3,r2
 4058e18:	10c00044 	addi	r3,r2,1
 4058e1c:	e0bffc17 	ldw	r2,-16(fp)
 4058e20:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4058e24:	e0bffc17 	ldw	r2,-16(fp)
 4058e28:	10c00217 	ldw	r3,8(r2)
 4058e2c:	e0bff617 	ldw	r2,-40(fp)
 4058e30:	1880042e 	bgeu	r3,r2,4058e44 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4058e34:	e0bffc17 	ldw	r2,-16(fp)
 4058e38:	00c00044 	movi	r3,1
 4058e3c:	10c00405 	stb	r3,16(r2)
 4058e40:	00000206 	br	4058e4c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4058e44:	e0bffc17 	ldw	r2,-16(fp)
 4058e48:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4058e4c:	e0bffc17 	ldw	r2,-16(fp)
 4058e50:	d0e02d04 	addi	r3,gp,-32588
 4058e54:	e0fffa15 	stw	r3,-24(fp)
 4058e58:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4058e5c:	e0bffb17 	ldw	r2,-20(fp)
 4058e60:	e0fffa17 	ldw	r3,-24(fp)
 4058e64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4058e68:	e0bffa17 	ldw	r2,-24(fp)
 4058e6c:	10c00017 	ldw	r3,0(r2)
 4058e70:	e0bffb17 	ldw	r2,-20(fp)
 4058e74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4058e78:	e0bffa17 	ldw	r2,-24(fp)
 4058e7c:	10800017 	ldw	r2,0(r2)
 4058e80:	e0fffb17 	ldw	r3,-20(fp)
 4058e84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4058e88:	e0bffa17 	ldw	r2,-24(fp)
 4058e8c:	e0fffb17 	ldw	r3,-20(fp)
 4058e90:	10c00015 	stw	r3,0(r2)
 4058e94:	e0bff817 	ldw	r2,-32(fp)
 4058e98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4058e9c:	e0bff717 	ldw	r2,-36(fp)
 4058ea0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4058ea4:	0005883a 	mov	r2,zero
 4058ea8:	00000306 	br	4058eb8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4058eac:	00bffa84 	movi	r2,-22
 4058eb0:	00000106 	br	4058eb8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4058eb4:	00bfde84 	movi	r2,-134
  }
}
 4058eb8:	e037883a 	mov	sp,fp
 4058ebc:	df000017 	ldw	fp,0(sp)
 4058ec0:	dec00104 	addi	sp,sp,4
 4058ec4:	f800283a 	ret

04058ec8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4058ec8:	defffe04 	addi	sp,sp,-8
 4058ecc:	df000115 	stw	fp,4(sp)
 4058ed0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4058ed4:	e03fff15 	stw	zero,-4(fp)
 4058ed8:	00000506 	br	4058ef0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4058edc:	e0bfff17 	ldw	r2,-4(fp)
 4058ee0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4058ee4:	e0bfff17 	ldw	r2,-4(fp)
 4058ee8:	10800804 	addi	r2,r2,32
 4058eec:	e0bfff15 	stw	r2,-4(fp)
 4058ef0:	e0bfff17 	ldw	r2,-4(fp)
 4058ef4:	10820030 	cmpltui	r2,r2,2048
 4058ef8:	103ff81e 	bne	r2,zero,4058edc <__flash_rwdata_start+0xffffe7ac>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4058efc:	0001883a 	nop
 4058f00:	e037883a 	mov	sp,fp
 4058f04:	df000017 	ldw	fp,0(sp)
 4058f08:	dec00104 	addi	sp,sp,4
 4058f0c:	f800283a 	ret

04058f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4058f10:	defffe04 	addi	sp,sp,-8
 4058f14:	dfc00115 	stw	ra,4(sp)
 4058f18:	df000015 	stw	fp,0(sp)
 4058f1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4058f20:	d0a00b17 	ldw	r2,-32724(gp)
 4058f24:	10000326 	beq	r2,zero,4058f34 <alt_get_errno+0x24>
 4058f28:	d0a00b17 	ldw	r2,-32724(gp)
 4058f2c:	103ee83a 	callr	r2
 4058f30:	00000106 	br	4058f38 <alt_get_errno+0x28>
 4058f34:	d0a04504 	addi	r2,gp,-32492
}
 4058f38:	e037883a 	mov	sp,fp
 4058f3c:	dfc00117 	ldw	ra,4(sp)
 4058f40:	df000017 	ldw	fp,0(sp)
 4058f44:	dec00204 	addi	sp,sp,8
 4058f48:	f800283a 	ret

04058f4c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4058f4c:	defffa04 	addi	sp,sp,-24
 4058f50:	dfc00515 	stw	ra,20(sp)
 4058f54:	df000415 	stw	fp,16(sp)
 4058f58:	df000404 	addi	fp,sp,16
 4058f5c:	e13ffe15 	stw	r4,-8(fp)
 4058f60:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4058f64:	e0bffe17 	ldw	r2,-8(fp)
 4058f68:	10000326 	beq	r2,zero,4058f78 <alt_dev_llist_insert+0x2c>
 4058f6c:	e0bffe17 	ldw	r2,-8(fp)
 4058f70:	10800217 	ldw	r2,8(r2)
 4058f74:	1000061e 	bne	r2,zero,4058f90 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4058f78:	4058f100 	call	4058f10 <alt_get_errno>
 4058f7c:	1007883a 	mov	r3,r2
 4058f80:	00800584 	movi	r2,22
 4058f84:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4058f88:	00bffa84 	movi	r2,-22
 4058f8c:	00001306 	br	4058fdc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4058f90:	e0bffe17 	ldw	r2,-8(fp)
 4058f94:	e0ffff17 	ldw	r3,-4(fp)
 4058f98:	e0fffc15 	stw	r3,-16(fp)
 4058f9c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4058fa0:	e0bffd17 	ldw	r2,-12(fp)
 4058fa4:	e0fffc17 	ldw	r3,-16(fp)
 4058fa8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4058fac:	e0bffc17 	ldw	r2,-16(fp)
 4058fb0:	10c00017 	ldw	r3,0(r2)
 4058fb4:	e0bffd17 	ldw	r2,-12(fp)
 4058fb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4058fbc:	e0bffc17 	ldw	r2,-16(fp)
 4058fc0:	10800017 	ldw	r2,0(r2)
 4058fc4:	e0fffd17 	ldw	r3,-12(fp)
 4058fc8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4058fcc:	e0bffc17 	ldw	r2,-16(fp)
 4058fd0:	e0fffd17 	ldw	r3,-12(fp)
 4058fd4:	10c00015 	stw	r3,0(r2)

  return 0;  
 4058fd8:	0005883a 	mov	r2,zero
}
 4058fdc:	e037883a 	mov	sp,fp
 4058fe0:	dfc00117 	ldw	ra,4(sp)
 4058fe4:	df000017 	ldw	fp,0(sp)
 4058fe8:	dec00204 	addi	sp,sp,8
 4058fec:	f800283a 	ret

04058ff0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4058ff0:	defffd04 	addi	sp,sp,-12
 4058ff4:	dfc00215 	stw	ra,8(sp)
 4058ff8:	df000115 	stw	fp,4(sp)
 4058ffc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4059000:	008101b4 	movhi	r2,1030
 4059004:	10a83204 	addi	r2,r2,-24376
 4059008:	e0bfff15 	stw	r2,-4(fp)
 405900c:	00000606 	br	4059028 <_do_ctors+0x38>
        (*ctor) (); 
 4059010:	e0bfff17 	ldw	r2,-4(fp)
 4059014:	10800017 	ldw	r2,0(r2)
 4059018:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 405901c:	e0bfff17 	ldw	r2,-4(fp)
 4059020:	10bfff04 	addi	r2,r2,-4
 4059024:	e0bfff15 	stw	r2,-4(fp)
 4059028:	e0ffff17 	ldw	r3,-4(fp)
 405902c:	008101b4 	movhi	r2,1030
 4059030:	10a83304 	addi	r2,r2,-24372
 4059034:	18bff62e 	bgeu	r3,r2,4059010 <__flash_rwdata_start+0xffffe8e0>
        (*ctor) (); 
}
 4059038:	0001883a 	nop
 405903c:	e037883a 	mov	sp,fp
 4059040:	dfc00117 	ldw	ra,4(sp)
 4059044:	df000017 	ldw	fp,0(sp)
 4059048:	dec00204 	addi	sp,sp,8
 405904c:	f800283a 	ret

04059050 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4059050:	defffd04 	addi	sp,sp,-12
 4059054:	dfc00215 	stw	ra,8(sp)
 4059058:	df000115 	stw	fp,4(sp)
 405905c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4059060:	008101b4 	movhi	r2,1030
 4059064:	10a83204 	addi	r2,r2,-24376
 4059068:	e0bfff15 	stw	r2,-4(fp)
 405906c:	00000606 	br	4059088 <_do_dtors+0x38>
        (*dtor) (); 
 4059070:	e0bfff17 	ldw	r2,-4(fp)
 4059074:	10800017 	ldw	r2,0(r2)
 4059078:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 405907c:	e0bfff17 	ldw	r2,-4(fp)
 4059080:	10bfff04 	addi	r2,r2,-4
 4059084:	e0bfff15 	stw	r2,-4(fp)
 4059088:	e0ffff17 	ldw	r3,-4(fp)
 405908c:	008101b4 	movhi	r2,1030
 4059090:	10a83304 	addi	r2,r2,-24372
 4059094:	18bff62e 	bgeu	r3,r2,4059070 <__flash_rwdata_start+0xffffe940>
        (*dtor) (); 
}
 4059098:	0001883a 	nop
 405909c:	e037883a 	mov	sp,fp
 40590a0:	dfc00117 	ldw	ra,4(sp)
 40590a4:	df000017 	ldw	fp,0(sp)
 40590a8:	dec00204 	addi	sp,sp,8
 40590ac:	f800283a 	ret

040590b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40590b0:	defffe04 	addi	sp,sp,-8
 40590b4:	dfc00115 	stw	ra,4(sp)
 40590b8:	df000015 	stw	fp,0(sp)
 40590bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40590c0:	01440004 	movi	r5,4096
 40590c4:	0009883a 	mov	r4,zero
 40590c8:	4059ca80 	call	4059ca8 <alt_icache_flush>
#endif
}
 40590cc:	0001883a 	nop
 40590d0:	e037883a 	mov	sp,fp
 40590d4:	dfc00117 	ldw	ra,4(sp)
 40590d8:	df000017 	ldw	fp,0(sp)
 40590dc:	dec00204 	addi	sp,sp,8
 40590e0:	f800283a 	ret

040590e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40590e4:	defffe04 	addi	sp,sp,-8
 40590e8:	df000115 	stw	fp,4(sp)
 40590ec:	df000104 	addi	fp,sp,4
 40590f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40590f4:	e0bfff17 	ldw	r2,-4(fp)
 40590f8:	10bffe84 	addi	r2,r2,-6
 40590fc:	10c00428 	cmpgeui	r3,r2,16
 4059100:	18001a1e 	bne	r3,zero,405916c <alt_exception_cause_generated_bad_addr+0x88>
 4059104:	100690ba 	slli	r3,r2,2
 4059108:	008101b4 	movhi	r2,1030
 405910c:	10a44704 	addi	r2,r2,-28388
 4059110:	1885883a 	add	r2,r3,r2
 4059114:	10800017 	ldw	r2,0(r2)
 4059118:	1000683a 	jmp	r2
 405911c:	0405915c 	xori	r16,zero,5701
 4059120:	0405915c 	xori	r16,zero,5701
 4059124:	0405916c 	andhi	r16,zero,5701
 4059128:	0405916c 	andhi	r16,zero,5701
 405912c:	0405916c 	andhi	r16,zero,5701
 4059130:	0405915c 	xori	r16,zero,5701
 4059134:	04059164 	muli	r16,zero,5701
 4059138:	0405916c 	andhi	r16,zero,5701
 405913c:	0405915c 	xori	r16,zero,5701
 4059140:	0405915c 	xori	r16,zero,5701
 4059144:	0405916c 	andhi	r16,zero,5701
 4059148:	0405915c 	xori	r16,zero,5701
 405914c:	04059164 	muli	r16,zero,5701
 4059150:	0405916c 	andhi	r16,zero,5701
 4059154:	0405916c 	andhi	r16,zero,5701
 4059158:	0405915c 	xori	r16,zero,5701
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 405915c:	00800044 	movi	r2,1
 4059160:	00000306 	br	4059170 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4059164:	0005883a 	mov	r2,zero
 4059168:	00000106 	br	4059170 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 405916c:	0005883a 	mov	r2,zero
  }
}
 4059170:	e037883a 	mov	sp,fp
 4059174:	df000017 	ldw	fp,0(sp)
 4059178:	dec00104 	addi	sp,sp,4
 405917c:	f800283a 	ret

04059180 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4059180:	defff904 	addi	sp,sp,-28
 4059184:	dfc00615 	stw	ra,24(sp)
 4059188:	df000515 	stw	fp,20(sp)
 405918c:	df000504 	addi	fp,sp,20
 4059190:	e13ffc15 	stw	r4,-16(fp)
 4059194:	e17ffd15 	stw	r5,-12(fp)
 4059198:	e1bffe15 	stw	r6,-8(fp)
 405919c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40591a0:	e1bfff17 	ldw	r6,-4(fp)
 40591a4:	e17ffe17 	ldw	r5,-8(fp)
 40591a8:	e13ffd17 	ldw	r4,-12(fp)
 40591ac:	40593c00 	call	40593c0 <open>
 40591b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40591b4:	e0bffb17 	ldw	r2,-20(fp)
 40591b8:	10001c16 	blt	r2,zero,405922c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40591bc:	00808034 	movhi	r2,512
 40591c0:	1083eb04 	addi	r2,r2,4012
 40591c4:	e0fffb17 	ldw	r3,-20(fp)
 40591c8:	18c00324 	muli	r3,r3,12
 40591cc:	10c5883a 	add	r2,r2,r3
 40591d0:	10c00017 	ldw	r3,0(r2)
 40591d4:	e0bffc17 	ldw	r2,-16(fp)
 40591d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40591dc:	00808034 	movhi	r2,512
 40591e0:	1083eb04 	addi	r2,r2,4012
 40591e4:	e0fffb17 	ldw	r3,-20(fp)
 40591e8:	18c00324 	muli	r3,r3,12
 40591ec:	10c5883a 	add	r2,r2,r3
 40591f0:	10800104 	addi	r2,r2,4
 40591f4:	10c00017 	ldw	r3,0(r2)
 40591f8:	e0bffc17 	ldw	r2,-16(fp)
 40591fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4059200:	00808034 	movhi	r2,512
 4059204:	1083eb04 	addi	r2,r2,4012
 4059208:	e0fffb17 	ldw	r3,-20(fp)
 405920c:	18c00324 	muli	r3,r3,12
 4059210:	10c5883a 	add	r2,r2,r3
 4059214:	10800204 	addi	r2,r2,8
 4059218:	10c00017 	ldw	r3,0(r2)
 405921c:	e0bffc17 	ldw	r2,-16(fp)
 4059220:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4059224:	e13ffb17 	ldw	r4,-20(fp)
 4059228:	40501940 	call	4050194 <alt_release_fd>
  }
} 
 405922c:	0001883a 	nop
 4059230:	e037883a 	mov	sp,fp
 4059234:	dfc00117 	ldw	ra,4(sp)
 4059238:	df000017 	ldw	fp,0(sp)
 405923c:	dec00204 	addi	sp,sp,8
 4059240:	f800283a 	ret

04059244 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4059244:	defffb04 	addi	sp,sp,-20
 4059248:	dfc00415 	stw	ra,16(sp)
 405924c:	df000315 	stw	fp,12(sp)
 4059250:	df000304 	addi	fp,sp,12
 4059254:	e13ffd15 	stw	r4,-12(fp)
 4059258:	e17ffe15 	stw	r5,-8(fp)
 405925c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4059260:	01c07fc4 	movi	r7,511
 4059264:	01800044 	movi	r6,1
 4059268:	e17ffd17 	ldw	r5,-12(fp)
 405926c:	01008034 	movhi	r4,512
 4059270:	2103ee04 	addi	r4,r4,4024
 4059274:	40591800 	call	4059180 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4059278:	01c07fc4 	movi	r7,511
 405927c:	000d883a 	mov	r6,zero
 4059280:	e17ffe17 	ldw	r5,-8(fp)
 4059284:	01008034 	movhi	r4,512
 4059288:	2103eb04 	addi	r4,r4,4012
 405928c:	40591800 	call	4059180 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4059290:	01c07fc4 	movi	r7,511
 4059294:	01800044 	movi	r6,1
 4059298:	e17fff17 	ldw	r5,-4(fp)
 405929c:	01008034 	movhi	r4,512
 40592a0:	2103f104 	addi	r4,r4,4036
 40592a4:	40591800 	call	4059180 <alt_open_fd>
}  
 40592a8:	0001883a 	nop
 40592ac:	e037883a 	mov	sp,fp
 40592b0:	dfc00117 	ldw	ra,4(sp)
 40592b4:	df000017 	ldw	fp,0(sp)
 40592b8:	dec00204 	addi	sp,sp,8
 40592bc:	f800283a 	ret

040592c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40592c0:	defffe04 	addi	sp,sp,-8
 40592c4:	dfc00115 	stw	ra,4(sp)
 40592c8:	df000015 	stw	fp,0(sp)
 40592cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40592d0:	d0a00b17 	ldw	r2,-32724(gp)
 40592d4:	10000326 	beq	r2,zero,40592e4 <alt_get_errno+0x24>
 40592d8:	d0a00b17 	ldw	r2,-32724(gp)
 40592dc:	103ee83a 	callr	r2
 40592e0:	00000106 	br	40592e8 <alt_get_errno+0x28>
 40592e4:	d0a04504 	addi	r2,gp,-32492
}
 40592e8:	e037883a 	mov	sp,fp
 40592ec:	dfc00117 	ldw	ra,4(sp)
 40592f0:	df000017 	ldw	fp,0(sp)
 40592f4:	dec00204 	addi	sp,sp,8
 40592f8:	f800283a 	ret

040592fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40592fc:	defffd04 	addi	sp,sp,-12
 4059300:	df000215 	stw	fp,8(sp)
 4059304:	df000204 	addi	fp,sp,8
 4059308:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 405930c:	e0bfff17 	ldw	r2,-4(fp)
 4059310:	10800217 	ldw	r2,8(r2)
 4059314:	10d00034 	orhi	r3,r2,16384
 4059318:	e0bfff17 	ldw	r2,-4(fp)
 405931c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4059320:	e03ffe15 	stw	zero,-8(fp)
 4059324:	00001d06 	br	405939c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4059328:	00808034 	movhi	r2,512
 405932c:	1083eb04 	addi	r2,r2,4012
 4059330:	e0fffe17 	ldw	r3,-8(fp)
 4059334:	18c00324 	muli	r3,r3,12
 4059338:	10c5883a 	add	r2,r2,r3
 405933c:	10c00017 	ldw	r3,0(r2)
 4059340:	e0bfff17 	ldw	r2,-4(fp)
 4059344:	10800017 	ldw	r2,0(r2)
 4059348:	1880111e 	bne	r3,r2,4059390 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 405934c:	00808034 	movhi	r2,512
 4059350:	1083eb04 	addi	r2,r2,4012
 4059354:	e0fffe17 	ldw	r3,-8(fp)
 4059358:	18c00324 	muli	r3,r3,12
 405935c:	10c5883a 	add	r2,r2,r3
 4059360:	10800204 	addi	r2,r2,8
 4059364:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4059368:	1000090e 	bge	r2,zero,4059390 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 405936c:	e0bffe17 	ldw	r2,-8(fp)
 4059370:	10c00324 	muli	r3,r2,12
 4059374:	00808034 	movhi	r2,512
 4059378:	1083eb04 	addi	r2,r2,4012
 405937c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4059380:	e0bfff17 	ldw	r2,-4(fp)
 4059384:	18800226 	beq	r3,r2,4059390 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4059388:	00bffcc4 	movi	r2,-13
 405938c:	00000806 	br	40593b0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4059390:	e0bffe17 	ldw	r2,-8(fp)
 4059394:	10800044 	addi	r2,r2,1
 4059398:	e0bffe15 	stw	r2,-8(fp)
 405939c:	d0a00a17 	ldw	r2,-32728(gp)
 40593a0:	1007883a 	mov	r3,r2
 40593a4:	e0bffe17 	ldw	r2,-8(fp)
 40593a8:	18bfdf2e 	bgeu	r3,r2,4059328 <__flash_rwdata_start+0xffffebf8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40593ac:	0005883a 	mov	r2,zero
}
 40593b0:	e037883a 	mov	sp,fp
 40593b4:	df000017 	ldw	fp,0(sp)
 40593b8:	dec00104 	addi	sp,sp,4
 40593bc:	f800283a 	ret

040593c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40593c0:	defff604 	addi	sp,sp,-40
 40593c4:	dfc00915 	stw	ra,36(sp)
 40593c8:	df000815 	stw	fp,32(sp)
 40593cc:	df000804 	addi	fp,sp,32
 40593d0:	e13ffd15 	stw	r4,-12(fp)
 40593d4:	e17ffe15 	stw	r5,-8(fp)
 40593d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40593dc:	00bfffc4 	movi	r2,-1
 40593e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40593e4:	00bffb44 	movi	r2,-19
 40593e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40593ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40593f0:	d1600804 	addi	r5,gp,-32736
 40593f4:	e13ffd17 	ldw	r4,-12(fp)
 40593f8:	4059a340 	call	4059a34 <alt_find_dev>
 40593fc:	e0bff815 	stw	r2,-32(fp)
 4059400:	e0bff817 	ldw	r2,-32(fp)
 4059404:	1000051e 	bne	r2,zero,405941c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4059408:	e13ffd17 	ldw	r4,-12(fp)
 405940c:	4059ac40 	call	4059ac4 <alt_find_file>
 4059410:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4059414:	00800044 	movi	r2,1
 4059418:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 405941c:	e0bff817 	ldw	r2,-32(fp)
 4059420:	10002926 	beq	r2,zero,40594c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4059424:	e13ff817 	ldw	r4,-32(fp)
 4059428:	4059bcc0 	call	4059bcc <alt_get_fd>
 405942c:	e0bff915 	stw	r2,-28(fp)
 4059430:	e0bff917 	ldw	r2,-28(fp)
 4059434:	1000030e 	bge	r2,zero,4059444 <open+0x84>
    {
      status = index;
 4059438:	e0bff917 	ldw	r2,-28(fp)
 405943c:	e0bffa15 	stw	r2,-24(fp)
 4059440:	00002306 	br	40594d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4059444:	e0bff917 	ldw	r2,-28(fp)
 4059448:	10c00324 	muli	r3,r2,12
 405944c:	00808034 	movhi	r2,512
 4059450:	1083eb04 	addi	r2,r2,4012
 4059454:	1885883a 	add	r2,r3,r2
 4059458:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 405945c:	e0fffe17 	ldw	r3,-8(fp)
 4059460:	00900034 	movhi	r2,16384
 4059464:	10bfffc4 	addi	r2,r2,-1
 4059468:	1886703a 	and	r3,r3,r2
 405946c:	e0bffc17 	ldw	r2,-16(fp)
 4059470:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4059474:	e0bffb17 	ldw	r2,-20(fp)
 4059478:	1000051e 	bne	r2,zero,4059490 <open+0xd0>
 405947c:	e13ffc17 	ldw	r4,-16(fp)
 4059480:	40592fc0 	call	40592fc <alt_file_locked>
 4059484:	e0bffa15 	stw	r2,-24(fp)
 4059488:	e0bffa17 	ldw	r2,-24(fp)
 405948c:	10001016 	blt	r2,zero,40594d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4059490:	e0bff817 	ldw	r2,-32(fp)
 4059494:	10800317 	ldw	r2,12(r2)
 4059498:	10000826 	beq	r2,zero,40594bc <open+0xfc>
 405949c:	e0bff817 	ldw	r2,-32(fp)
 40594a0:	10800317 	ldw	r2,12(r2)
 40594a4:	e1ffff17 	ldw	r7,-4(fp)
 40594a8:	e1bffe17 	ldw	r6,-8(fp)
 40594ac:	e17ffd17 	ldw	r5,-12(fp)
 40594b0:	e13ffc17 	ldw	r4,-16(fp)
 40594b4:	103ee83a 	callr	r2
 40594b8:	00000106 	br	40594c0 <open+0x100>
 40594bc:	0005883a 	mov	r2,zero
 40594c0:	e0bffa15 	stw	r2,-24(fp)
 40594c4:	00000206 	br	40594d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40594c8:	00bffb44 	movi	r2,-19
 40594cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40594d0:	e0bffa17 	ldw	r2,-24(fp)
 40594d4:	1000090e 	bge	r2,zero,40594fc <open+0x13c>
  {
    alt_release_fd (index);  
 40594d8:	e13ff917 	ldw	r4,-28(fp)
 40594dc:	40501940 	call	4050194 <alt_release_fd>
    ALT_ERRNO = -status;
 40594e0:	40592c00 	call	40592c0 <alt_get_errno>
 40594e4:	1007883a 	mov	r3,r2
 40594e8:	e0bffa17 	ldw	r2,-24(fp)
 40594ec:	0085c83a 	sub	r2,zero,r2
 40594f0:	18800015 	stw	r2,0(r3)
    return -1;
 40594f4:	00bfffc4 	movi	r2,-1
 40594f8:	00000106 	br	4059500 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 40594fc:	e0bff917 	ldw	r2,-28(fp)
}
 4059500:	e037883a 	mov	sp,fp
 4059504:	dfc00117 	ldw	ra,4(sp)
 4059508:	df000017 	ldw	fp,0(sp)
 405950c:	dec00204 	addi	sp,sp,8
 4059510:	f800283a 	ret

04059514 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4059514:	defffa04 	addi	sp,sp,-24
 4059518:	df000515 	stw	fp,20(sp)
 405951c:	df000504 	addi	fp,sp,20
 4059520:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4059524:	0005303a 	rdctl	r2,status
 4059528:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 405952c:	e0fffc17 	ldw	r3,-16(fp)
 4059530:	00bfff84 	movi	r2,-2
 4059534:	1884703a 	and	r2,r3,r2
 4059538:	1001703a 	wrctl	status,r2
  
  return context;
 405953c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4059540:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4059544:	e0bfff17 	ldw	r2,-4(fp)
 4059548:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 405954c:	e0bffd17 	ldw	r2,-12(fp)
 4059550:	10800017 	ldw	r2,0(r2)
 4059554:	e0fffd17 	ldw	r3,-12(fp)
 4059558:	18c00117 	ldw	r3,4(r3)
 405955c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4059560:	e0bffd17 	ldw	r2,-12(fp)
 4059564:	10800117 	ldw	r2,4(r2)
 4059568:	e0fffd17 	ldw	r3,-12(fp)
 405956c:	18c00017 	ldw	r3,0(r3)
 4059570:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4059574:	e0bffd17 	ldw	r2,-12(fp)
 4059578:	e0fffd17 	ldw	r3,-12(fp)
 405957c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4059580:	e0bffd17 	ldw	r2,-12(fp)
 4059584:	e0fffd17 	ldw	r3,-12(fp)
 4059588:	10c00015 	stw	r3,0(r2)
 405958c:	e0bffb17 	ldw	r2,-20(fp)
 4059590:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4059594:	e0bffe17 	ldw	r2,-8(fp)
 4059598:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 405959c:	0001883a 	nop
 40595a0:	e037883a 	mov	sp,fp
 40595a4:	df000017 	ldw	fp,0(sp)
 40595a8:	dec00104 	addi	sp,sp,4
 40595ac:	f800283a 	ret

040595b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40595b0:	defffb04 	addi	sp,sp,-20
 40595b4:	dfc00415 	stw	ra,16(sp)
 40595b8:	df000315 	stw	fp,12(sp)
 40595bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40595c0:	d0a02d17 	ldw	r2,-32588(gp)
 40595c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40595c8:	d0a06817 	ldw	r2,-32352(gp)
 40595cc:	10800044 	addi	r2,r2,1
 40595d0:	d0a06815 	stw	r2,-32352(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40595d4:	00002e06 	br	4059690 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40595d8:	e0bffd17 	ldw	r2,-12(fp)
 40595dc:	10800017 	ldw	r2,0(r2)
 40595e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40595e4:	e0bffd17 	ldw	r2,-12(fp)
 40595e8:	10800403 	ldbu	r2,16(r2)
 40595ec:	10803fcc 	andi	r2,r2,255
 40595f0:	10000426 	beq	r2,zero,4059604 <alt_tick+0x54>
 40595f4:	d0a06817 	ldw	r2,-32352(gp)
 40595f8:	1000021e 	bne	r2,zero,4059604 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40595fc:	e0bffd17 	ldw	r2,-12(fp)
 4059600:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4059604:	e0bffd17 	ldw	r2,-12(fp)
 4059608:	10800217 	ldw	r2,8(r2)
 405960c:	d0e06817 	ldw	r3,-32352(gp)
 4059610:	18801d36 	bltu	r3,r2,4059688 <alt_tick+0xd8>
 4059614:	e0bffd17 	ldw	r2,-12(fp)
 4059618:	10800403 	ldbu	r2,16(r2)
 405961c:	10803fcc 	andi	r2,r2,255
 4059620:	1000191e 	bne	r2,zero,4059688 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4059624:	e0bffd17 	ldw	r2,-12(fp)
 4059628:	10800317 	ldw	r2,12(r2)
 405962c:	e0fffd17 	ldw	r3,-12(fp)
 4059630:	18c00517 	ldw	r3,20(r3)
 4059634:	1809883a 	mov	r4,r3
 4059638:	103ee83a 	callr	r2
 405963c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4059640:	e0bfff17 	ldw	r2,-4(fp)
 4059644:	1000031e 	bne	r2,zero,4059654 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4059648:	e13ffd17 	ldw	r4,-12(fp)
 405964c:	40595140 	call	4059514 <alt_alarm_stop>
 4059650:	00000d06 	br	4059688 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4059654:	e0bffd17 	ldw	r2,-12(fp)
 4059658:	10c00217 	ldw	r3,8(r2)
 405965c:	e0bfff17 	ldw	r2,-4(fp)
 4059660:	1887883a 	add	r3,r3,r2
 4059664:	e0bffd17 	ldw	r2,-12(fp)
 4059668:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 405966c:	e0bffd17 	ldw	r2,-12(fp)
 4059670:	10c00217 	ldw	r3,8(r2)
 4059674:	d0a06817 	ldw	r2,-32352(gp)
 4059678:	1880032e 	bgeu	r3,r2,4059688 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 405967c:	e0bffd17 	ldw	r2,-12(fp)
 4059680:	00c00044 	movi	r3,1
 4059684:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4059688:	e0bffe17 	ldw	r2,-8(fp)
 405968c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4059690:	e0fffd17 	ldw	r3,-12(fp)
 4059694:	d0a02d04 	addi	r2,gp,-32588
 4059698:	18bfcf1e 	bne	r3,r2,40595d8 <__flash_rwdata_start+0xffffeea8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 405969c:	40513800 	call	4051380 <OSTimeTick>
}
 40596a0:	0001883a 	nop
 40596a4:	e037883a 	mov	sp,fp
 40596a8:	dfc00117 	ldw	ra,4(sp)
 40596ac:	df000017 	ldw	fp,0(sp)
 40596b0:	dec00204 	addi	sp,sp,8
 40596b4:	f800283a 	ret

040596b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40596b8:	deffff04 	addi	sp,sp,-4
 40596bc:	df000015 	stw	fp,0(sp)
 40596c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40596c4:	000170fa 	wrctl	ienable,zero
}
 40596c8:	0001883a 	nop
 40596cc:	e037883a 	mov	sp,fp
 40596d0:	df000017 	ldw	fp,0(sp)
 40596d4:	dec00104 	addi	sp,sp,4
 40596d8:	f800283a 	ret

040596dc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 40596dc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 40596e0:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 40596e4:	d1206117 	ldw	r4,-32380(gp)

      stw ra,  0(sp)
 40596e8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 40596ec:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 40596f0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 40596f4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 40596f8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 40596fc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 4059700:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 4059704:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 4059708:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 405970c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 4059710:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 4059714:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4059718:	40599500 	call	4059950 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 405971c:	d1205c17 	ldw	r4,-32400(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 4059720:	d1605407 	ldb	r5,-32432(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 4059724:	d1206115 	stw	r4,-32380(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 4059728:	d1605445 	stb	r5,-32431(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 405972c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 4059730:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 4059734:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 4059738:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 405973c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 4059740:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 4059744:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 4059748:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 405974c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 4059750:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 4059754:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 4059758:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 405975c:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 4059760:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 4059764:	f800283a 	ret

04059768 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 4059768:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 405976c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 4059770:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 4059774:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4059778:	40599500 	call	4059950 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 405977c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 4059780:	d4a05245 	stb	r18,-32439(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 4059784:	003fe506 	br	405971c <__flash_rwdata_start+0xffffefec>

04059788 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 4059788:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 405978c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 4059790:	10800054 	ori	r2,r2,1
      wrctl status, r2
 4059794:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 4059798:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 405979c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 40597a0:	dec00204 	addi	sp,sp,8

      callr r2
 40597a4:	103ee83a 	callr	r2

      nop
 40597a8:	0001883a 	nop

040597ac <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 40597ac:	defff704 	addi	sp,sp,-36
 40597b0:	dfc00815 	stw	ra,32(sp)
 40597b4:	df000715 	stw	fp,28(sp)
 40597b8:	df000704 	addi	fp,sp,28
 40597bc:	e13ffc15 	stw	r4,-16(fp)
 40597c0:	e17ffd15 	stw	r5,-12(fp)
 40597c4:	e1bffe15 	stw	r6,-8(fp)
 40597c8:	3805883a 	mov	r2,r7
 40597cc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 40597d0:	e0fffe17 	ldw	r3,-8(fp)
 40597d4:	00bfff04 	movi	r2,-4
 40597d8:	1884703a 	and	r2,r3,r2
 40597dc:	10bef704 	addi	r2,r2,-1060
 40597e0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 40597e4:	01810904 	movi	r6,1060
 40597e8:	000b883a 	mov	r5,zero
 40597ec:	e13ff917 	ldw	r4,-28(fp)
 40597f0:	4048e580 	call	4048e58 <memset>
 40597f4:	e0bff917 	ldw	r2,-28(fp)
 40597f8:	10c0bb04 	addi	r3,r2,748
 40597fc:	e0bff917 	ldw	r2,-28(fp)
 4059800:	10c00115 	stw	r3,4(r2)
 4059804:	e0bff917 	ldw	r2,-28(fp)
 4059808:	10c0d504 	addi	r3,r2,852
 405980c:	e0bff917 	ldw	r2,-28(fp)
 4059810:	10c00215 	stw	r3,8(r2)
 4059814:	e0bff917 	ldw	r2,-28(fp)
 4059818:	10c0ef04 	addi	r3,r2,956
 405981c:	e0bff917 	ldw	r2,-28(fp)
 4059820:	10c00315 	stw	r3,12(r2)
 4059824:	e0fff917 	ldw	r3,-28(fp)
 4059828:	00808034 	movhi	r2,512
 405982c:	10819804 	addi	r2,r2,1632
 4059830:	18800d15 	stw	r2,52(r3)
 4059834:	e0bff917 	ldw	r2,-28(fp)
 4059838:	00c00044 	movi	r3,1
 405983c:	10c02915 	stw	r3,164(r2)
 4059840:	10002a15 	stw	zero,168(r2)
 4059844:	e0bff917 	ldw	r2,-28(fp)
 4059848:	00ccc384 	movi	r3,13070
 405984c:	10c02b0d 	sth	r3,172(r2)
 4059850:	e0bff917 	ldw	r2,-28(fp)
 4059854:	00eaf344 	movi	r3,-21555
 4059858:	10c02b8d 	sth	r3,174(r2)
 405985c:	e0bff917 	ldw	r2,-28(fp)
 4059860:	00c48d04 	movi	r3,4660
 4059864:	10c02c0d 	sth	r3,176(r2)
 4059868:	e0bff917 	ldw	r2,-28(fp)
 405986c:	00f99b44 	movi	r3,-6547
 4059870:	10c02c8d 	sth	r3,178(r2)
 4059874:	e0bff917 	ldw	r2,-28(fp)
 4059878:	00f7bb04 	movi	r3,-8468
 405987c:	10c02d0d 	sth	r3,180(r2)
 4059880:	e0bff917 	ldw	r2,-28(fp)
 4059884:	00c00144 	movi	r3,5
 4059888:	10c02d8d 	sth	r3,182(r2)
 405988c:	e0bff917 	ldw	r2,-28(fp)
 4059890:	00c002c4 	movi	r3,11
 4059894:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 4059898:	e0bff917 	ldw	r2,-28(fp)
 405989c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 40598a0:	e0bffa17 	ldw	r2,-24(fp)
 40598a4:	10bff304 	addi	r2,r2,-52
 40598a8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 40598ac:	e0bffb17 	ldw	r2,-20(fp)
 40598b0:	10800c04 	addi	r2,r2,48
 40598b4:	e0fffc17 	ldw	r3,-16(fp)
 40598b8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 40598bc:	e0bffb17 	ldw	r2,-20(fp)
 40598c0:	10800b04 	addi	r2,r2,44
 40598c4:	e0fffd17 	ldw	r3,-12(fp)
 40598c8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 40598cc:	e0bffb17 	ldw	r2,-20(fp)
 40598d0:	10800a04 	addi	r2,r2,40
 40598d4:	e0fff917 	ldw	r3,-28(fp)
 40598d8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 40598dc:	008101b4 	movhi	r2,1030
 40598e0:	10a5e204 	addi	r2,r2,-26744
 40598e4:	10c00104 	addi	r3,r2,4
 40598e8:	e0bffb17 	ldw	r2,-20(fp)
 40598ec:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 40598f0:	e0bffb17 	ldw	r2,-20(fp)
}
 40598f4:	e037883a 	mov	sp,fp
 40598f8:	dfc00117 	ldw	ra,4(sp)
 40598fc:	df000017 	ldw	fp,0(sp)
 4059900:	dec00204 	addi	sp,sp,8
 4059904:	f800283a 	ret

04059908 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 4059908:	defffe04 	addi	sp,sp,-8
 405990c:	df000115 	stw	fp,4(sp)
 4059910:	df000104 	addi	fp,sp,4
 4059914:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 4059918:	0001883a 	nop
 405991c:	e037883a 	mov	sp,fp
 4059920:	df000017 	ldw	fp,0(sp)
 4059924:	dec00104 	addi	sp,sp,4
 4059928:	f800283a 	ret

0405992c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 405992c:	defffe04 	addi	sp,sp,-8
 4059930:	df000115 	stw	fp,4(sp)
 4059934:	df000104 	addi	fp,sp,4
 4059938:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 405993c:	0001883a 	nop
 4059940:	e037883a 	mov	sp,fp
 4059944:	df000017 	ldw	fp,0(sp)
 4059948:	dec00104 	addi	sp,sp,4
 405994c:	f800283a 	ret

04059950 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 4059950:	deffff04 	addi	sp,sp,-4
 4059954:	df000015 	stw	fp,0(sp)
 4059958:	d839883a 	mov	fp,sp
}
 405995c:	0001883a 	nop
 4059960:	e037883a 	mov	sp,fp
 4059964:	df000017 	ldw	fp,0(sp)
 4059968:	dec00104 	addi	sp,sp,4
 405996c:	f800283a 	ret

04059970 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 4059970:	deffff04 	addi	sp,sp,-4
 4059974:	df000015 	stw	fp,0(sp)
 4059978:	d839883a 	mov	fp,sp
}
 405997c:	0001883a 	nop
 4059980:	e037883a 	mov	sp,fp
 4059984:	df000017 	ldw	fp,0(sp)
 4059988:	dec00104 	addi	sp,sp,4
 405998c:	f800283a 	ret

04059990 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 4059990:	deffff04 	addi	sp,sp,-4
 4059994:	df000015 	stw	fp,0(sp)
 4059998:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 405999c:	0001883a 	nop
 40599a0:	e037883a 	mov	sp,fp
 40599a4:	df000017 	ldw	fp,0(sp)
 40599a8:	dec00104 	addi	sp,sp,4
 40599ac:	f800283a 	ret

040599b0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 40599b0:	deffff04 	addi	sp,sp,-4
 40599b4:	df000015 	stw	fp,0(sp)
 40599b8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 40599bc:	0001883a 	nop
 40599c0:	e037883a 	mov	sp,fp
 40599c4:	df000017 	ldw	fp,0(sp)
 40599c8:	dec00104 	addi	sp,sp,4
 40599cc:	f800283a 	ret

040599d0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 40599d0:	deffff04 	addi	sp,sp,-4
 40599d4:	df000015 	stw	fp,0(sp)
 40599d8:	d839883a 	mov	fp,sp
}
 40599dc:	0001883a 	nop
 40599e0:	e037883a 	mov	sp,fp
 40599e4:	df000017 	ldw	fp,0(sp)
 40599e8:	dec00104 	addi	sp,sp,4
 40599ec:	f800283a 	ret

040599f0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 40599f0:	deffff04 	addi	sp,sp,-4
 40599f4:	df000015 	stw	fp,0(sp)
 40599f8:	d839883a 	mov	fp,sp
}
 40599fc:	0001883a 	nop
 4059a00:	e037883a 	mov	sp,fp
 4059a04:	df000017 	ldw	fp,0(sp)
 4059a08:	dec00104 	addi	sp,sp,4
 4059a0c:	f800283a 	ret

04059a10 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 4059a10:	defffe04 	addi	sp,sp,-8
 4059a14:	df000115 	stw	fp,4(sp)
 4059a18:	df000104 	addi	fp,sp,4
 4059a1c:	e13fff15 	stw	r4,-4(fp)
}
 4059a20:	0001883a 	nop
 4059a24:	e037883a 	mov	sp,fp
 4059a28:	df000017 	ldw	fp,0(sp)
 4059a2c:	dec00104 	addi	sp,sp,4
 4059a30:	f800283a 	ret

04059a34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4059a34:	defffa04 	addi	sp,sp,-24
 4059a38:	dfc00515 	stw	ra,20(sp)
 4059a3c:	df000415 	stw	fp,16(sp)
 4059a40:	df000404 	addi	fp,sp,16
 4059a44:	e13ffe15 	stw	r4,-8(fp)
 4059a48:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4059a4c:	e0bfff17 	ldw	r2,-4(fp)
 4059a50:	10800017 	ldw	r2,0(r2)
 4059a54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4059a58:	e13ffe17 	ldw	r4,-8(fp)
 4059a5c:	4043b7c0 	call	4043b7c <strlen>
 4059a60:	10800044 	addi	r2,r2,1
 4059a64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4059a68:	00000d06 	br	4059aa0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4059a6c:	e0bffc17 	ldw	r2,-16(fp)
 4059a70:	10800217 	ldw	r2,8(r2)
 4059a74:	e0fffd17 	ldw	r3,-12(fp)
 4059a78:	180d883a 	mov	r6,r3
 4059a7c:	e17ffe17 	ldw	r5,-8(fp)
 4059a80:	1009883a 	mov	r4,r2
 4059a84:	4059d840 	call	4059d84 <memcmp>
 4059a88:	1000021e 	bne	r2,zero,4059a94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4059a8c:	e0bffc17 	ldw	r2,-16(fp)
 4059a90:	00000706 	br	4059ab0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4059a94:	e0bffc17 	ldw	r2,-16(fp)
 4059a98:	10800017 	ldw	r2,0(r2)
 4059a9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4059aa0:	e0fffc17 	ldw	r3,-16(fp)
 4059aa4:	e0bfff17 	ldw	r2,-4(fp)
 4059aa8:	18bff01e 	bne	r3,r2,4059a6c <__flash_rwdata_start+0xfffff33c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4059aac:	0005883a 	mov	r2,zero
}
 4059ab0:	e037883a 	mov	sp,fp
 4059ab4:	dfc00117 	ldw	ra,4(sp)
 4059ab8:	df000017 	ldw	fp,0(sp)
 4059abc:	dec00204 	addi	sp,sp,8
 4059ac0:	f800283a 	ret

04059ac4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4059ac4:	defffb04 	addi	sp,sp,-20
 4059ac8:	dfc00415 	stw	ra,16(sp)
 4059acc:	df000315 	stw	fp,12(sp)
 4059ad0:	df000304 	addi	fp,sp,12
 4059ad4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4059ad8:	d0a00617 	ldw	r2,-32744(gp)
 4059adc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4059ae0:	00003106 	br	4059ba8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4059ae4:	e0bffd17 	ldw	r2,-12(fp)
 4059ae8:	10800217 	ldw	r2,8(r2)
 4059aec:	1009883a 	mov	r4,r2
 4059af0:	4043b7c0 	call	4043b7c <strlen>
 4059af4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4059af8:	e0bffd17 	ldw	r2,-12(fp)
 4059afc:	10c00217 	ldw	r3,8(r2)
 4059b00:	e0bffe17 	ldw	r2,-8(fp)
 4059b04:	10bfffc4 	addi	r2,r2,-1
 4059b08:	1885883a 	add	r2,r3,r2
 4059b0c:	10800003 	ldbu	r2,0(r2)
 4059b10:	10803fcc 	andi	r2,r2,255
 4059b14:	1080201c 	xori	r2,r2,128
 4059b18:	10bfe004 	addi	r2,r2,-128
 4059b1c:	10800bd8 	cmpnei	r2,r2,47
 4059b20:	1000031e 	bne	r2,zero,4059b30 <alt_find_file+0x6c>
    {
      len -= 1;
 4059b24:	e0bffe17 	ldw	r2,-8(fp)
 4059b28:	10bfffc4 	addi	r2,r2,-1
 4059b2c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4059b30:	e0bffe17 	ldw	r2,-8(fp)
 4059b34:	e0ffff17 	ldw	r3,-4(fp)
 4059b38:	1885883a 	add	r2,r3,r2
 4059b3c:	10800003 	ldbu	r2,0(r2)
 4059b40:	10803fcc 	andi	r2,r2,255
 4059b44:	1080201c 	xori	r2,r2,128
 4059b48:	10bfe004 	addi	r2,r2,-128
 4059b4c:	10800be0 	cmpeqi	r2,r2,47
 4059b50:	1000081e 	bne	r2,zero,4059b74 <alt_find_file+0xb0>
 4059b54:	e0bffe17 	ldw	r2,-8(fp)
 4059b58:	e0ffff17 	ldw	r3,-4(fp)
 4059b5c:	1885883a 	add	r2,r3,r2
 4059b60:	10800003 	ldbu	r2,0(r2)
 4059b64:	10803fcc 	andi	r2,r2,255
 4059b68:	1080201c 	xori	r2,r2,128
 4059b6c:	10bfe004 	addi	r2,r2,-128
 4059b70:	10000a1e 	bne	r2,zero,4059b9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4059b74:	e0bffd17 	ldw	r2,-12(fp)
 4059b78:	10800217 	ldw	r2,8(r2)
 4059b7c:	e0fffe17 	ldw	r3,-8(fp)
 4059b80:	180d883a 	mov	r6,r3
 4059b84:	e17fff17 	ldw	r5,-4(fp)
 4059b88:	1009883a 	mov	r4,r2
 4059b8c:	4059d840 	call	4059d84 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4059b90:	1000021e 	bne	r2,zero,4059b9c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4059b94:	e0bffd17 	ldw	r2,-12(fp)
 4059b98:	00000706 	br	4059bb8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4059b9c:	e0bffd17 	ldw	r2,-12(fp)
 4059ba0:	10800017 	ldw	r2,0(r2)
 4059ba4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4059ba8:	e0fffd17 	ldw	r3,-12(fp)
 4059bac:	d0a00604 	addi	r2,gp,-32744
 4059bb0:	18bfcc1e 	bne	r3,r2,4059ae4 <__flash_rwdata_start+0xfffff3b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4059bb4:	0005883a 	mov	r2,zero
}
 4059bb8:	e037883a 	mov	sp,fp
 4059bbc:	dfc00117 	ldw	ra,4(sp)
 4059bc0:	df000017 	ldw	fp,0(sp)
 4059bc4:	dec00204 	addi	sp,sp,8
 4059bc8:	f800283a 	ret

04059bcc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4059bcc:	defff904 	addi	sp,sp,-28
 4059bd0:	dfc00615 	stw	ra,24(sp)
 4059bd4:	df000515 	stw	fp,20(sp)
 4059bd8:	df000504 	addi	fp,sp,20
 4059bdc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4059be0:	00bffa04 	movi	r2,-24
 4059be4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 4059be8:	d0a04917 	ldw	r2,-32476(gp)
 4059bec:	e0bffd15 	stw	r2,-12(fp)
 4059bf0:	e03ffe0d 	sth	zero,-8(fp)
 4059bf4:	e0bffe0b 	ldhu	r2,-8(fp)
 4059bf8:	e0fffe84 	addi	r3,fp,-6
 4059bfc:	180d883a 	mov	r6,r3
 4059c00:	100b883a 	mov	r5,r2
 4059c04:	e13ffd17 	ldw	r4,-12(fp)
 4059c08:	4055bc40 	call	4055bc4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4059c0c:	e03ffb15 	stw	zero,-20(fp)
 4059c10:	00001906 	br	4059c78 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 4059c14:	00808034 	movhi	r2,512
 4059c18:	1083eb04 	addi	r2,r2,4012
 4059c1c:	e0fffb17 	ldw	r3,-20(fp)
 4059c20:	18c00324 	muli	r3,r3,12
 4059c24:	10c5883a 	add	r2,r2,r3
 4059c28:	10800017 	ldw	r2,0(r2)
 4059c2c:	10000f1e 	bne	r2,zero,4059c6c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 4059c30:	00808034 	movhi	r2,512
 4059c34:	1083eb04 	addi	r2,r2,4012
 4059c38:	e0fffb17 	ldw	r3,-20(fp)
 4059c3c:	18c00324 	muli	r3,r3,12
 4059c40:	10c5883a 	add	r2,r2,r3
 4059c44:	e0ffff17 	ldw	r3,-4(fp)
 4059c48:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4059c4c:	d0e00a17 	ldw	r3,-32728(gp)
 4059c50:	e0bffb17 	ldw	r2,-20(fp)
 4059c54:	1880020e 	bge	r3,r2,4059c60 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 4059c58:	e0bffb17 	ldw	r2,-20(fp)
 4059c5c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 4059c60:	e0bffb17 	ldw	r2,-20(fp)
 4059c64:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 4059c68:	00000606 	br	4059c84 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4059c6c:	e0bffb17 	ldw	r2,-20(fp)
 4059c70:	10800044 	addi	r2,r2,1
 4059c74:	e0bffb15 	stw	r2,-20(fp)
 4059c78:	e0bffb17 	ldw	r2,-20(fp)
 4059c7c:	10800810 	cmplti	r2,r2,32
 4059c80:	103fe41e 	bne	r2,zero,4059c14 <__flash_rwdata_start+0xfffff4e4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 4059c84:	d0a04917 	ldw	r2,-32476(gp)
 4059c88:	1009883a 	mov	r4,r2
 4059c8c:	4055f3c0 	call	4055f3c <OSSemPost>

  return rc;
 4059c90:	e0bffc17 	ldw	r2,-16(fp)
}
 4059c94:	e037883a 	mov	sp,fp
 4059c98:	dfc00117 	ldw	ra,4(sp)
 4059c9c:	df000017 	ldw	fp,0(sp)
 4059ca0:	dec00204 	addi	sp,sp,8
 4059ca4:	f800283a 	ret

04059ca8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4059ca8:	defffb04 	addi	sp,sp,-20
 4059cac:	df000415 	stw	fp,16(sp)
 4059cb0:	df000404 	addi	fp,sp,16
 4059cb4:	e13ffe15 	stw	r4,-8(fp)
 4059cb8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4059cbc:	e0bfff17 	ldw	r2,-4(fp)
 4059cc0:	10840070 	cmpltui	r2,r2,4097
 4059cc4:	1000021e 	bne	r2,zero,4059cd0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4059cc8:	00840004 	movi	r2,4096
 4059ccc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4059cd0:	e0fffe17 	ldw	r3,-8(fp)
 4059cd4:	e0bfff17 	ldw	r2,-4(fp)
 4059cd8:	1885883a 	add	r2,r3,r2
 4059cdc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4059ce0:	e0bffe17 	ldw	r2,-8(fp)
 4059ce4:	e0bffc15 	stw	r2,-16(fp)
 4059ce8:	00000506 	br	4059d00 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4059cec:	e0bffc17 	ldw	r2,-16(fp)
 4059cf0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4059cf4:	e0bffc17 	ldw	r2,-16(fp)
 4059cf8:	10800804 	addi	r2,r2,32
 4059cfc:	e0bffc15 	stw	r2,-16(fp)
 4059d00:	e0fffc17 	ldw	r3,-16(fp)
 4059d04:	e0bffd17 	ldw	r2,-12(fp)
 4059d08:	18bff836 	bltu	r3,r2,4059cec <__flash_rwdata_start+0xfffff5bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4059d0c:	e0bffe17 	ldw	r2,-8(fp)
 4059d10:	108007cc 	andi	r2,r2,31
 4059d14:	10000226 	beq	r2,zero,4059d20 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4059d18:	e0bffc17 	ldw	r2,-16(fp)
 4059d1c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4059d20:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4059d24:	0001883a 	nop
 4059d28:	e037883a 	mov	sp,fp
 4059d2c:	df000017 	ldw	fp,0(sp)
 4059d30:	dec00104 	addi	sp,sp,4
 4059d34:	f800283a 	ret

04059d38 <atexit>:
 4059d38:	200b883a 	mov	r5,r4
 4059d3c:	000f883a 	mov	r7,zero
 4059d40:	000d883a 	mov	r6,zero
 4059d44:	0009883a 	mov	r4,zero
 4059d48:	4059e001 	jmpi	4059e00 <__register_exitproc>

04059d4c <exit>:
 4059d4c:	defffe04 	addi	sp,sp,-8
 4059d50:	000b883a 	mov	r5,zero
 4059d54:	dc000015 	stw	r16,0(sp)
 4059d58:	dfc00115 	stw	ra,4(sp)
 4059d5c:	2021883a 	mov	r16,r4
 4059d60:	4059f180 	call	4059f18 <__call_exitprocs>
 4059d64:	00808034 	movhi	r2,512
 4059d68:	10886804 	addi	r2,r2,8608
 4059d6c:	11000017 	ldw	r4,0(r2)
 4059d70:	20800f17 	ldw	r2,60(r4)
 4059d74:	10000126 	beq	r2,zero,4059d7c <exit+0x30>
 4059d78:	103ee83a 	callr	r2
 4059d7c:	8009883a 	mov	r4,r16
 4059d80:	405a0980 	call	405a098 <_exit>

04059d84 <memcmp>:
 4059d84:	01c000c4 	movi	r7,3
 4059d88:	3980192e 	bgeu	r7,r6,4059df0 <memcmp+0x6c>
 4059d8c:	2144b03a 	or	r2,r4,r5
 4059d90:	11c4703a 	and	r2,r2,r7
 4059d94:	10000f26 	beq	r2,zero,4059dd4 <memcmp+0x50>
 4059d98:	20800003 	ldbu	r2,0(r4)
 4059d9c:	28c00003 	ldbu	r3,0(r5)
 4059da0:	10c0151e 	bne	r2,r3,4059df8 <memcmp+0x74>
 4059da4:	31bfff84 	addi	r6,r6,-2
 4059da8:	01ffffc4 	movi	r7,-1
 4059dac:	00000406 	br	4059dc0 <memcmp+0x3c>
 4059db0:	20800003 	ldbu	r2,0(r4)
 4059db4:	28c00003 	ldbu	r3,0(r5)
 4059db8:	31bfffc4 	addi	r6,r6,-1
 4059dbc:	10c00e1e 	bne	r2,r3,4059df8 <memcmp+0x74>
 4059dc0:	21000044 	addi	r4,r4,1
 4059dc4:	29400044 	addi	r5,r5,1
 4059dc8:	31fff91e 	bne	r6,r7,4059db0 <__flash_rwdata_start+0xfffff680>
 4059dcc:	0005883a 	mov	r2,zero
 4059dd0:	f800283a 	ret
 4059dd4:	20c00017 	ldw	r3,0(r4)
 4059dd8:	28800017 	ldw	r2,0(r5)
 4059ddc:	18bfee1e 	bne	r3,r2,4059d98 <__flash_rwdata_start+0xfffff668>
 4059de0:	31bfff04 	addi	r6,r6,-4
 4059de4:	21000104 	addi	r4,r4,4
 4059de8:	29400104 	addi	r5,r5,4
 4059dec:	39bff936 	bltu	r7,r6,4059dd4 <__flash_rwdata_start+0xfffff6a4>
 4059df0:	303fe91e 	bne	r6,zero,4059d98 <__flash_rwdata_start+0xfffff668>
 4059df4:	003ff506 	br	4059dcc <__flash_rwdata_start+0xfffff69c>
 4059df8:	10c5c83a 	sub	r2,r2,r3
 4059dfc:	f800283a 	ret

04059e00 <__register_exitproc>:
 4059e00:	defffa04 	addi	sp,sp,-24
 4059e04:	dc000315 	stw	r16,12(sp)
 4059e08:	04008034 	movhi	r16,512
 4059e0c:	84086804 	addi	r16,r16,8608
 4059e10:	80c00017 	ldw	r3,0(r16)
 4059e14:	dc400415 	stw	r17,16(sp)
 4059e18:	dfc00515 	stw	ra,20(sp)
 4059e1c:	18805217 	ldw	r2,328(r3)
 4059e20:	2023883a 	mov	r17,r4
 4059e24:	10003726 	beq	r2,zero,4059f04 <__register_exitproc+0x104>
 4059e28:	10c00117 	ldw	r3,4(r2)
 4059e2c:	010007c4 	movi	r4,31
 4059e30:	20c00e16 	blt	r4,r3,4059e6c <__register_exitproc+0x6c>
 4059e34:	1a000044 	addi	r8,r3,1
 4059e38:	8800221e 	bne	r17,zero,4059ec4 <__register_exitproc+0xc4>
 4059e3c:	18c00084 	addi	r3,r3,2
 4059e40:	18c7883a 	add	r3,r3,r3
 4059e44:	18c7883a 	add	r3,r3,r3
 4059e48:	12000115 	stw	r8,4(r2)
 4059e4c:	10c7883a 	add	r3,r2,r3
 4059e50:	19400015 	stw	r5,0(r3)
 4059e54:	0005883a 	mov	r2,zero
 4059e58:	dfc00517 	ldw	ra,20(sp)
 4059e5c:	dc400417 	ldw	r17,16(sp)
 4059e60:	dc000317 	ldw	r16,12(sp)
 4059e64:	dec00604 	addi	sp,sp,24
 4059e68:	f800283a 	ret
 4059e6c:	00810134 	movhi	r2,1028
 4059e70:	108c1b04 	addi	r2,r2,12396
 4059e74:	10002626 	beq	r2,zero,4059f10 <__register_exitproc+0x110>
 4059e78:	01006404 	movi	r4,400
 4059e7c:	d9400015 	stw	r5,0(sp)
 4059e80:	d9800115 	stw	r6,4(sp)
 4059e84:	d9c00215 	stw	r7,8(sp)
 4059e88:	404306c0 	call	404306c <malloc>
 4059e8c:	d9400017 	ldw	r5,0(sp)
 4059e90:	d9800117 	ldw	r6,4(sp)
 4059e94:	d9c00217 	ldw	r7,8(sp)
 4059e98:	10001d26 	beq	r2,zero,4059f10 <__register_exitproc+0x110>
 4059e9c:	81000017 	ldw	r4,0(r16)
 4059ea0:	10000115 	stw	zero,4(r2)
 4059ea4:	02000044 	movi	r8,1
 4059ea8:	22405217 	ldw	r9,328(r4)
 4059eac:	0007883a 	mov	r3,zero
 4059eb0:	12400015 	stw	r9,0(r2)
 4059eb4:	20805215 	stw	r2,328(r4)
 4059eb8:	10006215 	stw	zero,392(r2)
 4059ebc:	10006315 	stw	zero,396(r2)
 4059ec0:	883fde26 	beq	r17,zero,4059e3c <__flash_rwdata_start+0xfffff70c>
 4059ec4:	18c9883a 	add	r4,r3,r3
 4059ec8:	2109883a 	add	r4,r4,r4
 4059ecc:	1109883a 	add	r4,r2,r4
 4059ed0:	21802215 	stw	r6,136(r4)
 4059ed4:	01800044 	movi	r6,1
 4059ed8:	12406217 	ldw	r9,392(r2)
 4059edc:	30cc983a 	sll	r6,r6,r3
 4059ee0:	4992b03a 	or	r9,r9,r6
 4059ee4:	12406215 	stw	r9,392(r2)
 4059ee8:	21c04215 	stw	r7,264(r4)
 4059eec:	01000084 	movi	r4,2
 4059ef0:	893fd21e 	bne	r17,r4,4059e3c <__flash_rwdata_start+0xfffff70c>
 4059ef4:	11006317 	ldw	r4,396(r2)
 4059ef8:	218cb03a 	or	r6,r4,r6
 4059efc:	11806315 	stw	r6,396(r2)
 4059f00:	003fce06 	br	4059e3c <__flash_rwdata_start+0xfffff70c>
 4059f04:	18805304 	addi	r2,r3,332
 4059f08:	18805215 	stw	r2,328(r3)
 4059f0c:	003fc606 	br	4059e28 <__flash_rwdata_start+0xfffff6f8>
 4059f10:	00bfffc4 	movi	r2,-1
 4059f14:	003fd006 	br	4059e58 <__flash_rwdata_start+0xfffff728>

04059f18 <__call_exitprocs>:
 4059f18:	defff504 	addi	sp,sp,-44
 4059f1c:	df000915 	stw	fp,36(sp)
 4059f20:	dd400615 	stw	r21,24(sp)
 4059f24:	dc800315 	stw	r18,12(sp)
 4059f28:	dfc00a15 	stw	ra,40(sp)
 4059f2c:	ddc00815 	stw	r23,32(sp)
 4059f30:	dd800715 	stw	r22,28(sp)
 4059f34:	dd000515 	stw	r20,20(sp)
 4059f38:	dcc00415 	stw	r19,16(sp)
 4059f3c:	dc400215 	stw	r17,8(sp)
 4059f40:	dc000115 	stw	r16,4(sp)
 4059f44:	d9000015 	stw	r4,0(sp)
 4059f48:	2839883a 	mov	fp,r5
 4059f4c:	04800044 	movi	r18,1
 4059f50:	057fffc4 	movi	r21,-1
 4059f54:	00808034 	movhi	r2,512
 4059f58:	10886804 	addi	r2,r2,8608
 4059f5c:	12000017 	ldw	r8,0(r2)
 4059f60:	45005217 	ldw	r20,328(r8)
 4059f64:	44c05204 	addi	r19,r8,328
 4059f68:	a0001c26 	beq	r20,zero,4059fdc <__call_exitprocs+0xc4>
 4059f6c:	a0800117 	ldw	r2,4(r20)
 4059f70:	15ffffc4 	addi	r23,r2,-1
 4059f74:	b8000d16 	blt	r23,zero,4059fac <__call_exitprocs+0x94>
 4059f78:	14000044 	addi	r16,r2,1
 4059f7c:	8421883a 	add	r16,r16,r16
 4059f80:	8421883a 	add	r16,r16,r16
 4059f84:	84402004 	addi	r17,r16,128
 4059f88:	a463883a 	add	r17,r20,r17
 4059f8c:	a421883a 	add	r16,r20,r16
 4059f90:	e0001e26 	beq	fp,zero,405a00c <__call_exitprocs+0xf4>
 4059f94:	80804017 	ldw	r2,256(r16)
 4059f98:	e0801c26 	beq	fp,r2,405a00c <__call_exitprocs+0xf4>
 4059f9c:	bdffffc4 	addi	r23,r23,-1
 4059fa0:	843fff04 	addi	r16,r16,-4
 4059fa4:	8c7fff04 	addi	r17,r17,-4
 4059fa8:	bd7ff91e 	bne	r23,r21,4059f90 <__flash_rwdata_start+0xfffff860>
 4059fac:	00810134 	movhi	r2,1028
 4059fb0:	108c2004 	addi	r2,r2,12416
 4059fb4:	10000926 	beq	r2,zero,4059fdc <__call_exitprocs+0xc4>
 4059fb8:	a0800117 	ldw	r2,4(r20)
 4059fbc:	1000301e 	bne	r2,zero,405a080 <__call_exitprocs+0x168>
 4059fc0:	a0800017 	ldw	r2,0(r20)
 4059fc4:	10003226 	beq	r2,zero,405a090 <__call_exitprocs+0x178>
 4059fc8:	a009883a 	mov	r4,r20
 4059fcc:	98800015 	stw	r2,0(r19)
 4059fd0:	40430800 	call	4043080 <free>
 4059fd4:	9d000017 	ldw	r20,0(r19)
 4059fd8:	a03fe41e 	bne	r20,zero,4059f6c <__flash_rwdata_start+0xfffff83c>
 4059fdc:	dfc00a17 	ldw	ra,40(sp)
 4059fe0:	df000917 	ldw	fp,36(sp)
 4059fe4:	ddc00817 	ldw	r23,32(sp)
 4059fe8:	dd800717 	ldw	r22,28(sp)
 4059fec:	dd400617 	ldw	r21,24(sp)
 4059ff0:	dd000517 	ldw	r20,20(sp)
 4059ff4:	dcc00417 	ldw	r19,16(sp)
 4059ff8:	dc800317 	ldw	r18,12(sp)
 4059ffc:	dc400217 	ldw	r17,8(sp)
 405a000:	dc000117 	ldw	r16,4(sp)
 405a004:	dec00b04 	addi	sp,sp,44
 405a008:	f800283a 	ret
 405a00c:	a0800117 	ldw	r2,4(r20)
 405a010:	80c00017 	ldw	r3,0(r16)
 405a014:	10bfffc4 	addi	r2,r2,-1
 405a018:	15c01426 	beq	r2,r23,405a06c <__call_exitprocs+0x154>
 405a01c:	80000015 	stw	zero,0(r16)
 405a020:	183fde26 	beq	r3,zero,4059f9c <__flash_rwdata_start+0xfffff86c>
 405a024:	95c8983a 	sll	r4,r18,r23
 405a028:	a0806217 	ldw	r2,392(r20)
 405a02c:	a5800117 	ldw	r22,4(r20)
 405a030:	2084703a 	and	r2,r4,r2
 405a034:	10000b26 	beq	r2,zero,405a064 <__call_exitprocs+0x14c>
 405a038:	a0806317 	ldw	r2,396(r20)
 405a03c:	2088703a 	and	r4,r4,r2
 405a040:	20000c1e 	bne	r4,zero,405a074 <__call_exitprocs+0x15c>
 405a044:	89400017 	ldw	r5,0(r17)
 405a048:	d9000017 	ldw	r4,0(sp)
 405a04c:	183ee83a 	callr	r3
 405a050:	a0800117 	ldw	r2,4(r20)
 405a054:	15bfbf1e 	bne	r2,r22,4059f54 <__flash_rwdata_start+0xfffff824>
 405a058:	98800017 	ldw	r2,0(r19)
 405a05c:	153fcf26 	beq	r2,r20,4059f9c <__flash_rwdata_start+0xfffff86c>
 405a060:	003fbc06 	br	4059f54 <__flash_rwdata_start+0xfffff824>
 405a064:	183ee83a 	callr	r3
 405a068:	003ff906 	br	405a050 <__flash_rwdata_start+0xfffff920>
 405a06c:	a5c00115 	stw	r23,4(r20)
 405a070:	003feb06 	br	405a020 <__flash_rwdata_start+0xfffff8f0>
 405a074:	89000017 	ldw	r4,0(r17)
 405a078:	183ee83a 	callr	r3
 405a07c:	003ff406 	br	405a050 <__flash_rwdata_start+0xfffff920>
 405a080:	a0800017 	ldw	r2,0(r20)
 405a084:	a027883a 	mov	r19,r20
 405a088:	1029883a 	mov	r20,r2
 405a08c:	003fb606 	br	4059f68 <__flash_rwdata_start+0xfffff838>
 405a090:	0005883a 	mov	r2,zero
 405a094:	003ffb06 	br	405a084 <__flash_rwdata_start+0xfffff954>

0405a098 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 405a098:	defffd04 	addi	sp,sp,-12
 405a09c:	df000215 	stw	fp,8(sp)
 405a0a0:	df000204 	addi	fp,sp,8
 405a0a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 405a0a8:	d0205245 	stb	zero,-32439(gp)
 405a0ac:	e0bfff17 	ldw	r2,-4(fp)
 405a0b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 405a0b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 405a0b8:	10000226 	beq	r2,zero,405a0c4 <_exit+0x2c>
    ALT_SIM_FAIL();
 405a0bc:	002af070 	cmpltui	zero,zero,43969
 405a0c0:	00000106 	br	405a0c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 405a0c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 405a0c8:	003fff06 	br	405a0c8 <__flash_rwdata_start+0xfffff998>
